{"version":3,"file":"725.3d079662ffa9a65b.js","mappings":"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","names":["routes","path","component","ChartsComponent","constructor","this","scaleShowVerticalLines","responsive","data","label","datasets","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","labels","chartClicked","e","chartHovered","randomize","Math","round","parseFloat","getUniqueId","clone","JSON","parse","stringify","barChartData","ngOnInit","barChartType","barChartLegend","doughnutChartType","radarChartType","pieChartType","polarAreaLegend","polarAreaChartType","lineChartLegend","lineChartType","length","window","crypto","randomUUID","toString","replace","substring","selectors","i0","ctx","routerTransition","ChartsRoutingModule","RouterModule","ChartsModule","CommonModule","Ng2Charts","PageHeaderModule"],"sourceRoot":"webpack:///","sources":["./src/app/layout/charts/charts-routing.module.ts","./src/app/layout/charts/charts.component.ts","./src/app/layout/charts/charts.component.html","./src/app/layout/charts/charts.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ChartsComponent } from './charts.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ChartsComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class ChartsRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { routerTransition } from '../../router.animations';\r\nimport { ChartConfiguration } from 'chart.js';\r\n\r\n@Component({\r\n    selector: 'app-charts',\r\n    templateUrl: './charts.component.html',\r\n    styleUrls: ['./charts.component.scss'],\r\n    animations: [routerTransition()]\r\n})\r\nexport class ChartsComponent implements OnInit {\r\n    // bar chart\r\n    public barChartOptions: any = {\r\n        scaleShowVerticalLines: false,\r\n        responsive: true\r\n    };\r\n    public barChartLabels: string[] = [\r\n        '2006',\r\n        '2007',\r\n        '2008',\r\n        '2009',\r\n        '2010',\r\n        '2011',\r\n        '2012'\r\n    ];\r\n    public barChartType: string;\r\n    public barChartLegend: boolean;\r\n\r\n    public barChartData: any[] = [\r\n        { data: [65, 59, 80, 81, 56, 55, 40], label: 'Series A' },\r\n        { data: [28, 48, 40, 19, 86, 27, 90], label: 'Series B' }\r\n    ];\r\n\r\n    // Doughnut\r\n    public doughnutChartLabels: string[] = [\r\n        'Download Sales',\r\n        'In-Store Sales',\r\n        'Mail-Order Sales'\r\n    ];\r\n    public doughnutChartData: number[] = [350, 450, 100];\r\n    public doughnutChartType: string;\r\n\r\n    // Radar\r\n    public radarChartLabels: string[] = [\r\n        'Eating',\r\n        'Drinking',\r\n        'Sleeping',\r\n        'Designing',\r\n        'Coding',\r\n        'Cycling',\r\n        'Running'\r\n    ];\r\n    public radarChartData: any = [\r\n        { data: [65, 59, 90, 81, 56, 55, 40], label: 'Series A' },\r\n        { data: [28, 48, 40, 19, 96, 27, 100], label: 'Series B' }\r\n    ];\r\n    public radarChartType: string;\r\n\r\n    // Pie\r\n    public pieChartLabels: string[] = [\r\n        'Download Sales',\r\n        'In-Store Sales',\r\n        'Mail Sales'\r\n    ];\r\n    public pieChartData: number[] = [300, 500, 100];\r\n    public pieChartType: string;\r\n\r\n    // PolarArea\r\n    public polarAreaChartLabels: string[] = [\r\n        'Download Sales',\r\n        'In-Store Sales',\r\n        'Mail Sales',\r\n        'Telesales',\r\n        'Corporate Sales'\r\n    ];\r\n    public polarAreaChartData: number[] = [300, 500, 100, 40, 120];\r\n    public polarAreaLegend: boolean;\r\n\r\n    public polarAreaChartType: string;\r\n\r\n    // lineChart\r\n    // public lineChartData: Array<any> = [\r\n    //     { data: [65, 59, 80, 81, 56, 55, 40], label: 'Series A' },\r\n    //     { data: [28, 48, 40, 19, 86, 27, 90], label: 'Series B' },\r\n    //     { data: [18, 48, 77, 9, 100, 27, 40], label: 'Series C' }\r\n    // ];\r\n    public lineChartLabels: Array<any> = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July'\r\n    ];\r\n    public lineChartOptions: any = {\r\n        responsive: true\r\n    };\r\n    public lineChartData: ChartConfiguration['data'] = {\r\n        datasets: [\r\n          {\r\n            data: [ 65, 59, 80, 81, 56, 55, 40 ],\r\n            label: 'Series A',\r\n            backgroundColor: 'rgba(148,159,177,0.2)',\r\n            borderColor: 'rgba(148,159,177,1)',\r\n            pointBackgroundColor: 'rgba(148,159,177,1)',\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: 'rgba(148,159,177,0.8)'\r\n          },\r\n          {\r\n            data: [ 28, 48, 40, 19, 86, 27, 90 ],\r\n            label: 'Series B',\r\n            backgroundColor: 'rgba(77,83,96,0.2)',\r\n            borderColor: 'rgba(77,83,96,1)',\r\n            pointBackgroundColor: 'rgba(77,83,96,1)',\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: 'rgba(77,83,96,1)'\r\n          },\r\n          {\r\n            data: [ 180, 480, 770, 90, 1000, 270, 400 ],\r\n            label: 'Series C',\r\n            yAxisID: 'y1',\r\n            backgroundColor: 'rgba(255,0,0,0.3)',\r\n            borderColor: 'red',\r\n            pointBackgroundColor: 'rgba(148,159,177,1)',\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: 'rgba(148,159,177,0.8)'\r\n          }\r\n        ],\r\n        labels: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July' ]\r\n      };\r\n    \r\n    public lineChartLegend: boolean;\r\n    public lineChartType: string;\r\n\r\n    // events\r\n    public chartClicked(e: any): void {\r\n        //\r\n    }\r\n\r\n    public chartHovered(e: any): void {\r\n        //\r\n    }\r\n\r\n    public randomize(): void {\r\n        // Only Change 3 values\r\n        const data = [\r\n            Math.round(parseFloat(this.getUniqueId(7)) * 100),\r\n            59,\r\n            80,\r\n            parseFloat(this.getUniqueId(7)) * 100,\r\n            56,\r\n            parseFloat(this.getUniqueId(7)) * 100,\r\n            40\r\n        ];\r\n        const clone = JSON.parse(JSON.stringify(this.barChartData));\r\n        clone[0].data = data;\r\n        this.barChartData = clone;\r\n        /**\r\n         * (My guess), for Angular to recognize the change in the dataset\r\n         * it has to change the dataset variable directly,\r\n         * so one way around it, is to clone the data, change it and then\r\n         * assign it;\r\n         */\r\n    }\r\n\r\n    constructor() {\r\n        //\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.barChartType = 'bar';\r\n        this.barChartLegend = true;\r\n        this.doughnutChartType = 'doughnut';\r\n        this.radarChartType = 'radar';\r\n        this.pieChartType = 'pie';\r\n        this.polarAreaLegend = true;\r\n        this.polarAreaChartType = 'polarArea';\r\n        this.lineChartLegend = true;\r\n        this.lineChartType = 'line';\r\n    }\r\n\r\n    getUniqueId(length: number) {\r\n        let randomID = window.crypto['randomUUID']().toString().replace(/-/g, '');\r\n        return randomID.substring(0, length);\r\n      }\r\n}\r\n","<div [@routerTransition]>\r\n    <app-page-header [heading]=\"'Charts'\" [icon]=\"'fa-bar-chart-o'\"></app-page-header>\r\n    <div class=\"row\">\r\n        <div class=\"col col-sm-6\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                    Bar Chart\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    <canvas baseChart [datasets]=\"barChartData\" [labels]=\"barChartLabels\" [options]=\"barChartOptions\" [legend]=\"barChartLegend\" [type]=\"barChartType\" (chartHover)=\"chartHovered($event)\" (chartClick)=\"chartClicked($event)\">\r\n                    </canvas>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                    <button class=\"btn btn-info btn-sm\" (click)=\"randomize()\">Update</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col col-sm-6\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                    Doughnut Chart\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    <canvas baseChart height=\"180px\" [data]=\"doughnutChartData\" [labels]=\"doughnutChartLabels\" [type]=\"doughnutChartType\" (chartHover)=\"chartHovered($event)\" (chartClick)=\"chartClicked($event)\">\r\n                    </canvas>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col col-sm-6\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                    Radar Chart\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    <canvas baseChart height=\"150px\" [datasets]=\"radarChartData\" [labels]=\"radarChartLabels\" [type]=\"radarChartType\" (chartHover)=\"chartHovered($event)\" (chartClick)=\"chartClicked($event)\">\r\n                    </canvas>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col col-sm-6\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                    Pie Chart\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    <canvas baseChart height=\"150px\" [data]=\"pieChartData\" [labels]=\"pieChartLabels\" [type]=\"pieChartType\" (chartHover)=\"chartHovered($event)\" (chartClick)=\"chartClicked($event)\">\r\n                    </canvas>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col col-sm-6\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                    Polar Area Chart\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    <canvas baseChart height=\"130px\" [data]=\"polarAreaChartData\" [labels]=\"polarAreaChartLabels\" [legend]=\"polarAreaLegend\" [type]=\"polarAreaChartType\" (chartHover)=\"chartHovered($event)\" (chartClick)=\"chartClicked($event)\">\r\n                    </canvas>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col col-sm-6\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                    Line Chart\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    <canvas baseChart height=\"130\" [data]=\"lineChartData\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [legend]=\"lineChartLegend\" [type]=\"lineChartType\" (chartHover)=\"chartHovered($event)\" (chartClick)=\"chartClicked($event)\">\r\n                    </canvas>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgChartsModule  as Ng2Charts } from 'ng2-charts';\r\n\r\nimport { ChartsRoutingModule } from './charts-routing.module';\r\nimport { ChartsComponent } from './charts.component';\r\nimport { PageHeaderModule } from '../../shared';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, Ng2Charts, ChartsRoutingModule, PageHeaderModule],\r\n    declarations: [ChartsComponent]\r\n})\r\nexport class ChartsModule {}\r\n"],"x_google_ignoreList":[]}