{"version":3,"file":"823.0def3363787fed34.js","mappings":"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","names":["i0","routes","path","component","LoginComponent","constructor","router","_fb","_authService","_messageService","_securityService","_userRoleService","_profileService","_notificationsService","_router","zone","sessionService","cookieService","_http","_advancedSSOService","this","Array","ngOnInit","localStorage","getItem","loginUrl","getLoginUrl","removeItem","message","buildForms","setGlobalAccountPermissions","getSecurity","loginUsingASSO","organizationHint","authDomain","getSsoLoginDetails","pipe","map","data","toPromise","then","res","advancedSSO","authenticationDomain","setItem","assoUrls","authUrl","authBaseUrl","isOverRuleOrganizationHint","redirectToAdvancedPlatformLoginPage","ngAfterViewInit","get","emailMessageSubscription","resetForm","controls","username","valueChanges","subscribe","value","showEmailMessage","valid","securityPreferences","timeoutMinutes","login","loginForm","loginResponse","IsLicensed","isLicensed","isSuperAdmin","isSuccessfullyLoggedIn","nameAndSurname","accessToken","token","delete","dateNow","Date","setMinutes","getMinutes","set","isSSOUserAdmin","image","getDecodedAccessToken","nameid","role","hasLinkedAccount","Number","setTimeout","onSuccesfulLogin","next","closeModalUponLogout","customerName","encodedEmail","id","appVersion","rosteringAppVersion","onLoggedin","shouldUpdateUnreadNotifications","open","errorMessageForLogin","err","error","navigateByUrl","state","source","key","baseUrl","window","location","origin","pathname","authDomainUrl","config","undefined","href","AUTH_URL","length","buildLoginForm","buildResetForm","group","validators","Validators","oldPassword","newPassword","confirmNewPassword","isFirstLogin","isForgottenPassword","sendSystemAccessMail","CheckPasswords","CompareWithOldPassword","jwt_decode","Error","encodedToken","defaultPassword","changeRole","changeProfile","ProfileID","changeId","changeAccountCredentialsAndImage","initializePendo","isSessionExpireDialogOpen","startTimer","navigate","f","rf","decodedEmail","btoa","hashedId","fnv1a","toString","metadataObject","visitor","ro_role","ro_app_version","account","getPendoInitialized","pendo","updateOptions","initialize","setPendoInitialized","getCookie","name","cookie","allCookies","document","split","allCookiesLength","cookieName","i","replace","indexOf","substring","returnToLoginPage","selectors","routerTransition","LoginRoutingModule","RouterModule","LoginModule","CommonModule","TranslateModule","FormsModule","ReactiveFormsModule","MatSnackBarModule","noTransition","trigger","hash","s","h","BASE","l","charCodeAt","module","exports"],"sourceRoot":"webpack:///","sources":["./src/app/login/login.component.html","./src/app/login/login-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.module.ts","./src/app/router.animations.ts","./node_modules/fnv1a/index.js"],"sourcesContent":["<div class=\"login-page\" [@routerTransition]>    \r\n    <div *ngIf=\"isLoggedInUsingASSO && isSuccessfullyLoggedIn\" class=\"row wait-text\">\r\n        Please Wait....\r\n    </div>\r\n    <div *ngIf=\"isLoggedInUsingASSO && !isSuccessfullyLoggedIn\" class=\"row wait-text\">\r\n        {{this.errorMessageForLogin}}\r\n        <span class=\"cursor-pointer\" (click)=\"returnToLoginPage()\"><u>Return to Login page</u></span>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LoginComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {}\r\n","import { AuthService } from './../shared/services/login.service';\r\nimport { Component, HostListener, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { routerTransition } from '../router.animations';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { CheckPasswords, CompareWithOldPassword, CheckIfPasswordContainsMinimum } from '../shared/validators/customValidators';\r\nimport { SecurityService } from '../shared/services/security.service';\r\nimport { Security } from '../shared/models/security';\r\nimport { Subscription, map } from 'rxjs';\r\nimport { message } from '../shared/utils/user-messages';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { UserRoleService } from '../shared/services/user-role.service';\r\nimport { ProfileService } from '../shared/services/profile.service';\r\nimport { GlobalAccountPermissions } from '../shared/DTO/globalAccountPermissions';\r\nimport { NotificationsService } from '../shared/services/notifications.service';\r\nimport { EsolveSnackbarService } from '../shared/services/esolve-snackbar.service';\r\nimport { NgZone } from '@angular/core';\r\nimport fnv1a from 'fnv1a';\r\nimport { SessionTimerService } from '../shared/services/session-timer.service';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { AdvancedSSOService } from '../shared/services/advanced-sso.service';\r\n\r\ndeclare let pendo: any;\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n    animations: [routerTransition()]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    loginForm: FormGroup;\r\n    resetForm: FormGroup;\r\n    defaultPassword = false;\r\n    passwordValueOnLogin: string;\r\n    forgotPasswordClicked = false;\r\n    emailMessageSubscription: Subscription;\r\n    showEmailMessage = false;\r\n    resetEmailMessage = `If a matching email address is found a reset email will be sent.\r\n    If you do not receive the email please check your spam folder`;\r\n    message; /** Contains standardized user messages */\r\n    passwordExpiryMessage = '';\r\n    passwordExpiring: boolean;\r\n    passwordExpired: boolean;\r\n    passwordExpiredMessage = \"Your password has expired, please choose a new password.\";\r\n\r\n    /** Password format preferences */\r\n    minimumPasswordLength: number;\r\n    passwordValidatorPattern = '';\r\n    passwordValidationMessage = \"Password must consist of at least \";\r\n    paternValidationMessageList: string[] = new Array<string>();\r\n    permissions: GlobalAccountPermissions;\r\n\r\n    loggedId: number;\r\n    isUser: boolean;\r\n    preferencesChanged = false; //Are security changes made in system preferences\r\n\r\n    hashedId = ''; //Property used for hash email with fnv1a function\r\n    encodedEmail = '';\r\n    appVersion = '';\r\n    role = '';\r\n    IsLicensed: string;\r\n    isSuperAdmin: boolean;\r\n\r\n    customerName = null;\r\n    minimumUpperCharacters = 0;\r\n    minimumSpecialCharacters = 0;\r\n    minimumNumericCharacters = 0;\r\n    isLoggedInUsingASSO = true;\r\n    timeoutMinutes = 0;\r\n    loginUrl: string;\r\n    isSuccessfullyLoggedIn = true;\r\n    errorMessageForLogin = 'Sorry we couldn’t find you in Auto Rostering. Please contact your system administrator.';\r\n\r\n    constructor(\r\n        public router: Router,\r\n        private _fb: FormBuilder,\r\n        private _authService: AuthService,\r\n        private _messageService: EsolveSnackbarService,\r\n        private _securityService: SecurityService,\r\n        private _userRoleService: UserRoleService,\r\n        private _profileService: ProfileService,\r\n        private _notificationsService: NotificationsService,\r\n        private _router: Router,\r\n        private zone: NgZone,\r\n        public sessionService: SessionTimerService,\r\n        private cookieService: CookieService,\r\n        private _http: HttpClient,\r\n        private _advancedSSOService: AdvancedSSOService,\r\n    ) { }    \r\n\r\n    ngOnInit() {\r\n        if (!localStorage.getItem('isLoggedInUsingASSO')){\r\n            let organizationHint = \"\";\r\n            let authDomain = localStorage.getItem('authDomain');\r\n    \r\n            this._advancedSSOService.getSsoLoginDetails()\r\n                .pipe(map((data: any) => data))\r\n                .toPromise()\r\n                .then((res) => {\r\n                    if (res) {\r\n                        organizationHint = res.advancedSSO.organizationHint;\r\n                        authDomain = res.advancedSSO.authenticationDomain;\r\n                        localStorage.setItem('isLoggedInUsingASSO', 'true');\r\n                        localStorage.setItem(\"organizationHint\", organizationHint);\r\n                        localStorage.setItem(\"authDomain\", authDomain);                        \r\n                        localStorage.setItem(\"authUrl\", res.assoUrls.authUrl);\r\n                        localStorage.setItem(\"authBaseUrl\", res.assoUrls.authBaseUrl);\r\n                        organizationHint = res.isOverRuleOrganizationHint ? '' : organizationHint;                        \r\n                        this.redirectToAdvancedPlatformLoginPage(organizationHint, authDomain)\r\n                    }\r\n                });  \r\n        }\r\n        else {\r\n            this.loginUrl = this._authService.getLoginUrl();\r\n            localStorage.removeItem('isLoggedIn');\r\n            localStorage.removeItem('loggedUserName');\r\n            localStorage.removeItem('userCredentials');\r\n            localStorage.removeItem('userImage');\r\n            localStorage.removeItem('jwt');\r\n            localStorage.removeItem('username');\r\n            localStorage.removeItem('id');\r\n            localStorage.removeItem('role');\r\n            localStorage.removeItem('profileId');\r\n            localStorage.removeItem('connectionId');\r\n            localStorage.removeItem('hasLinkedAccount');            \r\n            this.message = message;            \r\n            this.buildForms();\r\n            this._userRoleService.setGlobalAccountPermissions(void 0);\r\n            localStorage.removeItem('isSsoUserAdmin')\r\n            localStorage.removeItem('isSuperAdmin');\r\n            this.getSecurity();\r\n            this.loginUsingASSO();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        var cookie = this.cookieService.get(\"ACCESS_TOKEN\");\r\n        this.emailMessageSubscription = this.resetForm.controls.username.valueChanges.subscribe((value) => {\r\n            if (value && this.resetForm.controls.username.valid) {\r\n                this.showEmailMessage = true;\r\n            } else {\r\n                this.showEmailMessage = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    getSecurity(){\r\n        this._securityService.getSecurity(false).subscribe((securityPreferences: Security) => {\r\n            this.timeoutMinutes = securityPreferences.timeoutMinutes;\r\n        })\r\n    }\r\n\r\n    loginUsingASSO(){\r\n        this._authService.login(this.loginForm.value)\r\n            .subscribe((loginResponse: any) => {\r\n                this.IsLicensed = loginResponse.isLicensed;\r\n                this.isSuperAdmin = loginResponse.isSuperAdmin;\r\n                this.isSuccessfullyLoggedIn = loginResponse.isSuccessfullyLoggedIn;                \r\n                //Regular Login\r\n                if (loginResponse.isSuccessfullyLoggedIn && !loginResponse.message) {\r\n                    localStorage.setItem('IsLicensed', loginResponse.isLicensed);\r\n                    localStorage.setItem('loggedUserName', loginResponse.nameAndSurname);\r\n                    localStorage.setItem('jwt', loginResponse.accessToken.token);\r\n                    // Set JWT token received from login api into cookie with expiration same as token\r\n                    const authDomain = localStorage.getItem(\"authDomain\");\r\n                    this.cookieService.delete('AR_TOKEN', '/', '.' + authDomain);\r\n                    const dateNow = new Date();\r\n                    dateNow.setMinutes(dateNow.getMinutes() + this.timeoutMinutes);\r\n                    this.cookieService.set('AR_TOKEN', loginResponse.accessToken.token, dateNow,'/','.' + authDomain);\r\n                    // Set user's sso admin right\r\n                    localStorage.setItem('isSsoUserAdmin', loginResponse.isSSOUserAdmin);\r\n                    if (loginResponse.image) {\r\n                        localStorage.setItem('userImage', loginResponse.image);\r\n                    }\r\n                    localStorage.setItem('id', this.getDecodedAccessToken(loginResponse.accessToken.token).nameid);\r\n                    localStorage.setItem('role', this.getDecodedAccessToken(loginResponse.accessToken.token).role);\r\n                    localStorage.setItem('username', loginResponse.accessToken.username);\r\n                    localStorage.setItem('hasLinkedAccount', loginResponse.accessToken.hasLinkedAccount);                    \r\n                    if (localStorage.getItem('id') && Number(localStorage.getItem('id')) > 0) {\r\n                        setTimeout(() => {\r\n                            this._authService.onSuccesfulLogin.next(true);\r\n                        }, 100);\r\n                    }\r\n                    //Resetting Observable's value so that closed modals can be opened again.\r\n                    this._userRoleService.closeModalUponLogout(false);\r\n                    this.customerName = loginResponse.customerName;\r\n                    localStorage.setItem('customerName', this.customerName);\r\n                    this.encodedEmail = loginResponse.id;\r\n                    this.appVersion = loginResponse.rosteringAppVersion;\r\n                    this.onLoggedin(loginResponse.accessToken.token, loginResponse.nameAndSurname);\r\n                    this._notificationsService.shouldUpdateUnreadNotifications.next(true);\r\n                    localStorage.setItem('isSuperAdmin', loginResponse.isSuperAdmin);\r\n                }\r\n                else if(!this.isSuccessfullyLoggedIn){\r\n                    this.isSuccessfullyLoggedIn = false;\r\n                    this._messageService.open(this.errorMessageForLogin);\r\n                }\r\n            },\r\n                (err: HttpErrorResponse) => {\r\n                    localStorage.removeItem('isLoggedInUsingASSO');\r\n                    if (err.error == \"Customer license is expired\" || err.error == \"Access Denied\") {\r\n                        this._router.navigateByUrl(\"/access-denied\", {\r\n                            state: {\r\n                                source: 'license'\r\n                            }\r\n                        });\r\n                    } \r\n                    else if(err.error[0].key == \"The Request is invalid\"){\r\n                        this.isSuccessfullyLoggedIn = false;\r\n                        this.errorMessageForLogin = err.error[0].value;\r\n                        this._messageService.open(this.errorMessageForLogin);\r\n                    }\r\n                    else{\r\n                        this.isSuccessfullyLoggedIn = false;\r\n                        this._messageService.open(this.errorMessageForLogin);\r\n                    }\r\n                });\r\n    }\r\n    \r\n    redirectToAdvancedPlatformLoginPage(organizationHint: string, authDomain: string) {        \r\n        const baseUrl = window.location.origin;\r\n        const pathname = window.location.pathname;\r\n        let authDomainUrl = \"\";\r\n\r\n        var authBaseUrl = localStorage.getItem(\"authBaseUrl\");\r\n\r\n        this._http.get('./assets/config.json')\r\n            .pipe(map((res: any) => res))\r\n            .toPromise()\r\n            .then(config => {\r\n                if (authDomain !== undefined && authDomain !== \"oneadvanced.io\")\r\n                    authDomainUrl = '&authenticationDomain=' + authDomain;\r\n\r\n                window.location.href = authBaseUrl + config.AUTH_URL +\r\n                    '?redirectUri=' + baseUrl + pathname\r\n                    + (organizationHint.length > 0 ? '&organizationHint=' + organizationHint : '')\r\n                    + authDomainUrl;\r\n            });\r\n    }\r\n\r\n    buildForms() {\r\n        this.buildLoginForm();\r\n        this.buildResetForm();\r\n    }\r\n\r\n    buildLoginForm() {\r\n        this.loginForm = this._fb.group({\r\n            username: [null, { validators: [Validators.required] }],\r\n            oldPassword: [null, { validators: [Validators.required] }],\r\n            newPassword: [null],\r\n            confirmNewPassword: [null],\r\n            isSuccessfullyLoggedIn: [null],\r\n            message: [null],\r\n            isFirstLogin: [null],\r\n            isForgottenPassword: [false],\r\n            sendSystemAccessMail: [false]\r\n        },\r\n            {\r\n                validators: [\r\n                    CheckPasswords(\"newPassword\", \"confirmNewPassword\"),\r\n                    CompareWithOldPassword(\"oldPassword\", \"newPassword\")\r\n                ]\r\n            });\r\n    }\r\n\r\n    buildResetForm() {\r\n        this.resetForm = this._fb.group({\r\n            username: [null],\r\n            isForgottenPassword: [true],\r\n            sendSystemAccessMail: [false]\r\n        });\r\n    }\r\n    getDecodedAccessToken(token: string): any {\r\n        try {\r\n            return jwt_decode(token);\r\n        } catch (Error) {\r\n            return null;\r\n        }\r\n    }            \r\n\r\n    onLoggedin(encodedToken: any, nameAndSurname: any) {\r\n        if (!this.defaultPassword) {\r\n            localStorage.setItem('isLoggedIn', 'true');\r\n            localStorage.setItem('userCredentials', this.loginForm.controls.username.value);\r\n\r\n            this._userRoleService.changeRole(this.getDecodedAccessToken(encodedToken).role);\r\n            this._userRoleService.changeProfile(this.getDecodedAccessToken(encodedToken).ProfileID);\r\n            this._userRoleService.changeId(this.getDecodedAccessToken(encodedToken).nameid);\r\n            this._userRoleService.changeAccountCredentialsAndImage(nameAndSurname);\r\n\r\n            this.initializePendo();\r\n            this._authService.isSessionExpireDialogOpen.next(false);\r\n            this.sessionService.startTimer(this.timeoutMinutes);\r\n            this.router.navigate(['/dashboard']);\r\n        }\r\n    }\r\n\r\n    get f() {\r\n        if (this.loginForm) {\r\n            return this.loginForm.controls;\r\n        }\r\n    }\r\n\r\n    get rf() {\r\n        if (this.resetForm) {\r\n            return this.resetForm.controls;\r\n        }\r\n    }    \r\n    \r\n    initializePendo(): void {\r\n        let decodedEmail = btoa(this.encodedEmail);\r\n        this.hashedId = fnv1a(decodedEmail).toString();\r\n        if (\r\n            (this.hashedId && this.hashedId !== '') &&\r\n            (this.appVersion && this.appVersion !== '')\r\n            // && (this.customerName && this.customerName !== '')\r\n        ) {\r\n            const metadataObject = {\r\n                visitor: {\r\n                    id: this.hashedId,\r\n                    ro_role: localStorage.getItem('role'),\r\n                    ro_app_version: this.appVersion\r\n                },\r\n                account: {\r\n                    id: this.customerName\r\n                }\r\n            }\r\n            if (!this._authService.getPendoInitialized()) {\r\n                pendo.initialize(metadataObject);\r\n                this._authService.setPendoInitialized();\r\n            } else {\r\n                pendo.updateOptions(metadataObject);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCookie(name: string) {\r\n        let allCookies: Array<string> = document.cookie.split(';');\r\n        let allCookiesLength: number = allCookies.length;\r\n        let cookieName = `${name}=`;\r\n        let cookie: string;\r\n\r\n        for (let i: number = 0; i < allCookiesLength; i += 1) {\r\n            cookie = allCookies[i].replace(/^\\s+/g, '');\r\n            if (cookie.indexOf(cookieName) == 0) {\r\n                return cookie.substring(cookieName.length, cookie.length);\r\n            }\r\n        }\r\n        return '';\r\n      }\r\n      \r\n    public returnToLoginPage(){\r\n        this._authService.returnToLoginPage();\r\n    }\r\n}\r\n","import { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        TranslateModule,\r\n        LoginRoutingModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatSnackBarModule\r\n    ],\r\n    declarations: [\r\n        LoginComponent,\r\n    ],\r\n    providers: [\r\n        \r\n    ]\r\n})\r\nexport class LoginModule {}\r\n","import { animate, state, style, transition, trigger } from '@angular/animations';\r\n\r\nexport function routerTransition() {\r\n\r\n    return noTransition();\r\n}\r\n\r\nexport function noTransition() {\r\n    return trigger('routerTransition', []);\r\n}\r\n\r\nexport function slideToRight() {\r\n    return trigger('routerTransition', [\r\n        state('void', style({})),\r\n        state('*', style({})),\r\n        transition(':enter', [\r\n            style({ transform: 'translateX(-100%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\r\n        ]),\r\n        transition(':leave', [\r\n            style({ transform: 'translateX(0%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateX(100%)' }))\r\n        ])\r\n    ]);\r\n}\r\n\r\nexport function slideToLeft() {\r\n    return trigger('routerTransition', [\r\n        state('void', style({})),\r\n        state('*', style({})),\r\n        transition(':enter', [\r\n            style({ transform: 'translateX(100%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\r\n        ]),\r\n        transition(':leave', [\r\n            style({ transform: 'translateX(0%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateX(-100%)' }))\r\n        ])\r\n    ]);\r\n}\r\n\r\nexport function slideToBottom() {\r\n    return trigger('routerTransition', [\r\n        state('void', style({})),\r\n        state('*', style({})),\r\n        transition(':enter', [\r\n            style({ transform: 'translateY(-100%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateY(0%)' }))\r\n        ]),\r\n        transition(':leave', [\r\n            style({ transform: 'translateY(0%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateY(100%)' }))\r\n        ])\r\n    ]);\r\n}\r\n\r\nexport function slideToTop() {\r\n    return trigger('routerTransition', [\r\n        state('void', style({})),\r\n        state('*', style({})),\r\n        transition(':enter', [\r\n            style({ transform: 'translateY(100%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateY(0%)' }))\r\n        ]),\r\n        transition(':leave', [\r\n            style({ transform: 'translateY(0%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateY(-100%)' }))\r\n        ])\r\n    ]);\r\n}\r\n","/**\n * Created by schwarzkopfb on 15/11/17.\n */\n\n/**\n * FNV-1a hash generation init value.\n * It's exposed, because this allows user to override it.\n *\n * @type {number}\n */\nhash.BASE = 0x811c9dc5\n\n/**\n * Generates 32 bit FNV-1a hash from the given string.\n * As explained here: http://isthe.com/chongo/tech/comp/fnv/\n *\n * @param s {string} String to generate hash from.\n * @returns {number} The result integer hash.\n */\nfunction hash(s) {\n    var h = hash.BASE\n\n    for (var i = 0, l = s.length; i < l; i++) {\n        h ^= s.charCodeAt(i)\n        h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24)\n    }\n\n    return h >>> 0\n}\n\nmodule.exports = hash\n"],"x_google_ignoreList":[5]}