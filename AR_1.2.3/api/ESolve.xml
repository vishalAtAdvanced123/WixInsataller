<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ESolve</name>
    </assembly>
    <members>
        <member name="T:ESolve.ActionFilters.BaseFilter">
            <summary>
            BaseFilter which will execute before any of controllers' filters.
            Purpose is to create the LoggedIn User and allow all controllers to use it.
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.BaseFilter.DbContext">
            <summary>
            Database Context
            </summary>
        </member>
        <member name="P:ESolve.ActionFilters.BaseFilter.Order">
            <summary>
            Setting the order to minimum integer value, using IOrderedFilter, to attempt executing
            this filter *before* the Controllers' filters.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.BaseFilter.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.ActionFilters.BaseFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Getting the LoggedIn User data and allowing any controller to access it.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.BaseFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Base.DynamicValidationBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.ActionFilters.Base.DynamicValidationBase.JSONErrorDTO">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Base.DynamicValidationBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Base.DynamicValidationBase.GenerateError(System.String,System.String,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Base.DynamicValidationBase.GenerateError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="jSONErrorDTO"></param>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Base.DynamicValidationBase.GenerateErrorMessage(System.String,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Base.DynamicValidationBase.GenerateUnauthorizedErrorMessage(System.String,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Base.DynamicValidationBase.SendEmailForLockout(ESolve.Entities.RepositoryContext,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="userEmail"></param>
            <param name="name"></param>
            <param name="configuration"></param>
            <exception cref="T:ESolve.Entities.WrongEmailCredentialsException"></exception>
        </member>
        <member name="T:ESolve.ActionFilters.Base.ValidateAccessibilityForAccountSettings">
            <summary>
            Class that validates whether Employee has permission for changing password.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Base.ValidateAccessibilityForAccountSettings.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Base.ValidateAccessibilityForAccountSettings.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether Employee has permission for changing password.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Base.ValidateAccessibilityForAccountSettings.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Base.ValidateMasterAccount">
            <summary>
            Validation of Master Account.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Base.ValidateMasterAccount.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Base.ValidateMasterAccount.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            If account isn't the Master account, method will return BadRequestObjectResult
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Base.ValidateMasterAccount.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.ValidateEntityExistsAttribute`1">
            <summary>
            This class is responsibile for checking does element exists in Database.
            </summary>
            <typeparam name="T">Represents Type which we will check.</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.ValidateEntityExistsAttribute`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidateEntityExistsAttribute`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we will check does element exists in Database.
            </summary>
            <param name="context">Represents Context of action.</param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidateEntityExistsAttribute`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context">Represents Context of action.</param>
        </member>
        <member name="T:ESolve.ActionFilters.ValidateEntityExistsFromIdDateDTO`1">
            <summary>
            This class is responsibile for checking does element exists in Database.
            </summary>
            <typeparam name="T">Represents Type which we will check.</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.ValidateEntityExistsFromIdDateDTO`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidateEntityExistsFromIdDateDTO`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we will check does element exists in Database.
            </summary>
            <param name="context">Represents Context of action.</param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidateEntityExistsFromIdDateDTO`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context">Represents Context of action.</param>
        </member>
        <member name="T:ESolve.ActionFilters.ValidationFilterAttribute">
            <summary>
            Validation of Passed Attribute.  
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            If Attribute doesn't exists in DB table Method wil return BadRequestObject
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationFilterAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after is action excecuted.
            </summary>
            <param name="context"></param>
            
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateAbsenceCodeModel">
            <summary>
            AbsenceCode validation
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateAbsenceCodeModel.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateAbsenceCodeModel.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateAbsenceCodeModel.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateCanAbsenceCodeBeDeleted">
            <summary>
            Absence code delete validation
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateCanAbsenceCodeBeDeleted.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateCanAbsenceCodeBeDeleted.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateCanAbsenceCodeBeDeleted.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateUpdateAbsenceCode">
            <summary>
            AbsenceCode validation
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateUpdateAbsenceCode.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateUpdateAbsenceCode.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.AbsenceCode.ValidateUpdateAbsenceCode.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.EmployeeAbsence.ValidateEmployeeAbsenceDeletion">
            <summary>
            Valdiation can absence request be deleted
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeAbsence.ValidateEmployeeAbsenceDeletion.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeAbsence.ValidateEmployeeAbsenceDeletion.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeAbsence.ValidateEmployeeAbsenceDeletion.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.EmployeeAbsence.ValidateUpdateEmployeeAbsence">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeAbsence.ValidateUpdateEmployeeAbsence.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeAbsence.ValidateUpdateEmployeeAbsence.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeAbsence.ValidateUpdateEmployeeAbsence.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateAbsenceRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateAbsenceRequest.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateAbsenceRequest.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateAbsenceRequest.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateAddUpdateEmployeeAttributes">
            <summary>
            Validate employee attributes for add or update employee using integrations
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateAddUpdateEmployeeAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Setting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateAddUpdateEmployeeAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateAddUpdateEmployeeAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateEmployeeSkillUpdate">
            <summary>
            Validation of updating skills 
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateEmployeeSkillUpdate.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateEmployeeSkillUpdate.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.EmployeeIntegrations.ValidateEmployeeSkillUpdate.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateCreateScheduleSyncRequestResult">
            <summary>
            Validation of Creating schedule sync request result
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateCreateScheduleSyncRequestResult.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateCreateScheduleSyncRequestResult.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateCreateScheduleSyncRequestResult.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateGetScheduleSyncPerAssigmentRequests">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateGetScheduleSyncPerAssigmentRequests.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateGetScheduleSyncPerAssigmentRequests.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateGetScheduleSyncPerAssigmentRequests.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateGetScheduleSyncRequests">
            <summary>
            Validate Schedule sync requests
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateGetScheduleSyncRequests.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ScheduleSyncRequests.ValidateGetScheduleSyncRequests.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.SharedIntegrationValidations.ValidateIsIdNumberGratherThanZero">
            <summary>
            Validate is passed Id grather than zero
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.SharedIntegrationValidations.ValidateIsIdNumberGratherThanZero.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.SharedIntegrationValidations.ValidateIsIdNumberGratherThanZero.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.Shifts.ValidateCanShiftsBeDeleted">
            <summary>
            Shift deletion validation
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Shifts.ValidateCanShiftsBeDeleted.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Shifts.ValidateCanShiftsBeDeleted.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Validation for deleting passed shift 
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Shifts.ValidateCanShiftsBeDeleted.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.Shifts.ValidateShiftProperties">
            <summary>
            Validate shift properties
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Shifts.ValidateShiftProperties.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Shifts.ValidateShiftProperties.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Validation for deleting passed shift 
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Shifts.ValidateShiftProperties.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.Skills.ValidateAddSkillProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateAddSkillProperties.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateAddSkillProperties.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateAddSkillProperties.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.Skills.ValidateDeletionOfSkillCode">
            <summary>
            Deletion of skill code
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateDeletionOfSkillCode.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateDeletionOfSkillCode.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateDeletionOfSkillCode.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.Skills.ValidateSkillId">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateSkillId.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateSkillId.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.Skills.ValidateSkillId.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.DataIntegration.ValidateRequestPath">
            <summary>
            Path validation
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ValidateRequestPath.#ctor">
            <summary>
            Constructor that initializes DbContext.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ValidateRequestPath.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks is path supported
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.ActionFilters.DataIntegration.ValidateRequestPath.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceRequestValidation">
            <summary>
            Class responsability is validation of deleting AbsenceRequest
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceRequestValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceRequestValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating AbsenceCode for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceRequestValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
            
        </member>
        <member name="T:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceValidation">
            <summary>
            Class is used to validate absence or absence request
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating AbsenceCode for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.Absences.DeleteAbsenceValidation.RaiseError(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.String,System.String)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="context">Action context</param>
            <param name="key">Message key</param>
            <param name="message">Message content</param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteAbsenceCodeValidation">
            <summary>
            Validation for deleting absence code
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteAbsenceCodeValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteAbsenceCodeValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating AbsenceCode for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteAbsenceCodeValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteAbsenceCodeValidation.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteProfileValidation">
            <summary>
            Validation for profile's validation
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteProfileValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteProfileValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating Profile for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteProfileValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteShiftValidation">
            <summary>
            Class responsability is validation of deleting shifts
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteShiftValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteShiftValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Validation for deleting passed shift 
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteShiftValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteShiftValidation.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationClass">
            <summary>
            Deleting validation for Class entity.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationClass.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationClass.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating Class for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationClass.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationConstraint">
            <summary>
            Validation of deleting Constraint Action
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Delete.DeleteValidationConstraint._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationConstraint.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationConstraint.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationConstraint.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate deleting Constraint. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationConstraint.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationCostCode">
            <summary>
            Deleteing validation for CostCode entity.
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationCostCode.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationCostCode.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating CostCode for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationCostCode.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationDepartment">
            <summary>
            Deleting validation for Department entity.
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationDepartment.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationDepartment.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating Department for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationDepartment.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationDivision">
            <summary>
            Deleting validation for Division entity.
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationDivision.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationDivision.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating Division for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationDivision.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationForSubGroup">
            <summary>
            Class used to validate if logged in user has access to delete subgrop
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationForSubGroup.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationForSubGroup.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating AbsenceCode for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationForSubGroup.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationForSubGroup.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationJob`1">
            <summary>
            Validation of Job existing in Database.
            </summary>
            <typeparam name="T">Represents Job Entity.</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJob`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor whic initialize Database context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJob`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked during executing request. Check does passed entity exists in Database.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJob`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationJobAssignment`1">
            <summary>
            Validation of JobAssigment which we want to delete.
            </summary>
            <typeparam name="T">Represents JobAssigment Entity</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobAssignment`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor. Initialize context.
            </summary>
            <param name="context">Context which will be seted up as Repository context.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobAssignment`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked during request ecexuting. Validate does JobAssigment exists in Database.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobAssignment`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationJobTitle">
            <summary>
            Deleting validation for JobTitle entity.
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobTitle.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobTitle.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating JobTitle for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobTitle.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationJobType`1">
            <summary>
            Class is response for validation is JobType available for deleting. 
            </summary>
            <typeparam name="T">Represents JobType entity.</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobType`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobType`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating JobType for deleting.
            </summary>
            <param name="context">Represent executing context of action,</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationJobType`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidatioLocation">
            <summary>
            Validation for deleting location
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidatioLocation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidatioLocation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating Location for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidatioLocation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationLoneWorkerAlert">
            <summary>
            Validatation for deleteing lone worker alert
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Delete.DeleteValidationLoneWorkerAlert._context">
            <summary>
            DbContext
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationLoneWorkerAlert.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationLoneWorkerAlert.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. 
            </summary>
            <param name="context">Action Exectuing context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationLoneWorkerAlert.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationSchedule">
            <summary>
            Class used to validate if logged in user has permission to delete schedule
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationSchedule.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationSchedule.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if the Template can be published.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationSchedule.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationSkillCode`1">
            <summary>
            Validation for deleting skill code.
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Delete.DeleteValidationSkillCode`1._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationSkillCode`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationSkillCode`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationSkillCode`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used for validate if deleting skill is possible. It is not possible
            if skill code is in use.
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationTeam">
            <summary>
            Deleting validation for Team entity.
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTeam.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTeam.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating Team for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTeam.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationTemplateJob`1">
            <summary>
            Validation of TemplateJob existing in Database.
            </summary>
            <typeparam name="T">Represents TemplateJob Entity.</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTemplateJob`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor whic initialize Database context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTemplateJob`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked during executing request. Check does passed entity exists in Database.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTemplateJob`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationTemplateJobAssignment`1">
            <summary>
            Validation of JobAssigment which we want to delete.
            </summary>
            <typeparam name="T">Represents JobAssigment Entity</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTemplateJobAssignment`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor. Initialize context.
            </summary>
            <param name="context">Context which will be seted up as Repository context.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTemplateJobAssignment`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked during request ecexuting. Validate does JobAssigment exists in Database.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationTemplateJobAssignment`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidationUser">
            <summary>
            Deleting validation for user
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Delete.DeleteValidationUser._context">
            <summary>
            Db context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationUser.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationUser.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating Class for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidationUser.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.DeleteValidatonCustomDataLookup">
            <summary>
            Class is response for validation is CustomDataLookup available for deleting. 
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidatonCustomDataLookup.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidatonCustomDataLookup.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Unused method which will be invoked after Action has been executed
            </summary>
            <param name="context">Provides the context for the ActionExecuted method of the ActionFilterAttribute class.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.DeleteValidatonCustomDataLookup.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method will be invoked in time of executing ActionContext
            </summary>
            <param name="context">Provides the context for the ActionExecuting method of the ActionFilterAttribute class.</param>
        </member>
        <member name="T:ESolve.ActionFilters.Delete.ValidationForDeletingSpecialDateType`1">
            <summary>
            Validation for deleting special date type
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.ValidationForDeletingSpecialDateType`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor whic initialize Database context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.ValidationForDeletingSpecialDateType`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked during executing request. Check does passed entity is in used in tblSpecialDates
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Delete.ValidationForDeletingSpecialDateType`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.Absences.AbsencesGetRequestsValidation">
            <summary>
            Validation of accessing user to the page with absences
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.Absences.AbsencesGetRequestsValidation._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Absences.AbsencesGetRequestsValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Absences.AbsencesGetRequestsValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Absences.AbsencesGetRequestsValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.Absences.GetAuthorisationListValidationFilter">
            <summary>
            Class is executing when someone wants to access AuthorisationListPage
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.Absences.GetAuthorisationListValidationFilter._context">
            <summary>
            Repository context
            </summary>
        </member>
        <member name="P:ESolve.ActionFilters.Get.Absences.GetAuthorisationListValidationFilter.ErrorUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Absences.GetAuthorisationListValidationFilter.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Absences.GetAuthorisationListValidationFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which will be called when action es executing
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Absences.GetAuthorisationListValidationFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which will be called when action has been executed
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.AgencyLockedRangeValidation">
            <summary>
            AgencyLockedRangeValidation
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.AgencyLockedRangeValidation._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.AgencyLockedRangeValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Default constructor.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.AgencyLockedRangeValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has agency permission
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Get.AgencyLockedRangeValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.AgencyPermissionValidation">
            <summary>
            Validation for agency permission
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.AgencyPermissionValidation._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.AgencyPermissionValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Default constructor.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.AgencyPermissionValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has agency permission
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Get.AgencyPermissionValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ConstraintNameUniqueFilterAttributes">
            <summary>
            Method validates ConstraintNameUniqueFilter
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ConstraintNameUniqueFilterAttributes._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ConstraintNameUniqueFilterAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ConstraintNameUniqueFilterAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ConstraintNameUniqueFilterAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ConstraintNameUniqueFilterAttributes.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetCalendarForEmployeeDashboardAttributes">
            <summary>
            Validation for accessing employee dashboard calendar
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetCalendarForEmployeeDashboardAttributes._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetCalendarForEmployeeDashboardAttributes._employeePermissionsManager">
            <summary>
            Manager for accessing Employee Permissions
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetCalendarForEmployeeDashboardAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetCalendarForEmployeeDashboardAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetCalendarForEmployeeDashboardAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetRequestForEmployeeDashboard">
            <summary>
            Validation class for accessing employee dashboard
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetRequestForEmployeeDashboard._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetRequestForEmployeeDashboard.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetRequestForEmployeeDashboard.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.EmployeeDashboard.ValidateGetRequestForEmployeeDashboard.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.Employees.ValidateEmployee">
            <summary>
            Classed used to check if employee with passed primary key exists
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.Employees.ValidateEmployee._repositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Employees.ValidateEmployee.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Repository Context.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Employees.ValidateEmployee.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that allows or forbids access to Employee's skills
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Employees.ValidateEmployee.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.Employees.ValidateEmployeeAccess">
            <summary>
            Checking permission for getting employee
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.Employees.ValidateEmployeeAccess._repositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Employees.ValidateEmployeeAccess.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Repository Context.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Employees.ValidateEmployeeAccess.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that allows or forbids access to Employee's skills
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Employees.ValidateEmployeeAccess.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.JobOffers.ValidateModelForEmployeeAccesingJobOffers">
            <summary>
            Validation of get request when employee try to acces JobOFfers
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.JobOffers.ValidateModelForEmployeeAccesingJobOffers._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.JobOffers.ValidateModelForEmployeeAccesingJobOffers.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.JobOffers.ValidateModelForEmployeeAccesingJobOffers.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.JobOffers.ValidateModelForEmployeeAccesingJobOffers.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.Licenses.ValidateLicensePermission">
            <summary>
            Validation for licenses permisions
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Licenses.ValidateLicensePermission.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Licenses.ValidateLicensePermission.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether User has permission licenses.
            </summary>
            <param name="context">ActionExecutingContext context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Licenses.ValidateLicensePermission.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovalAndSyncPermission">
            <summary>
            Validtion for checking if current user has schedule approval and sync permission
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovalAndSyncPermission._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovalAndSyncPermission.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Default constructor.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovalAndSyncPermission.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has schedule approval and sync permission
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovalAndSyncPermission.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovedJobs">
            <summary>
            Filter which validate data for accesing Employee approved schedule
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovedJobs._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovedJobs.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovedJobs.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ScheduleApprovedRanges.ValidateScheduleApprovedJobs.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.Schedules.SchedulePermissionValidation">
            <summary>
            Class used for validate schedule access
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.Schedules.SchedulePermissionValidation._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Schedules.SchedulePermissionValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context">DB context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Schedules.SchedulePermissionValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Checking if user has schedule permission
            </summary>
            <param name="context">Action Exectuing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.Schedules.SchedulePermissionValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context">ActionExecutedContext object</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionForAllSchedules">
            <summary>
            Class that validates whether Person has permission for accessing all schedules.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForAllSchedules.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForAllSchedules.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether Person has permission for accessing all schedules.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForAllSchedules.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.TradeOffers.TradeOfferPermissionValidation">
            <summary>
            Class used to validate trade board permissions
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.TradeOffers.TradeOfferPermissionValidation._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.TradeOffers.TradeOfferPermissionValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context">DB context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.TradeOffers.TradeOfferPermissionValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Checking if user has trade board permission
            </summary>
            <param name="context">Action Exectuing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.TradeOffers.TradeOfferPermissionValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context">ActionExecutedContext object</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.UserDashBoard.ValidateGetRequestForUSerDashboard">
            <summary>
            Validation of get requests in User Dashboard
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.UserDashBoard.ValidateGetRequestForUSerDashboard._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.UserDashBoard.ValidateGetRequestForUSerDashboard.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.UserDashBoard.ValidateGetRequestForUSerDashboard.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.UserDashBoard.ValidateGetRequestForUSerDashboard.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateAccessToSkillsByEmployee">
            <summary>
            Validation class used for allowing/forbidding access to
            Employee's skills.
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ValidateAccessToSkillsByEmployee._repositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateAccessToSkillsByEmployee.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Repository Context.</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateAccessToSkillsByEmployee.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that allows or forbids access to Employee's skills
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateAccessToSkillsByEmployee.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateConstraintGetAllAttributes">
            <summary>
            Method validates filter for Schedule Constraints
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ValidateConstraintGetAllAttributes._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateConstraintGetAllAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateConstraintGetAllAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateConstraintGetAllAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateConstraintGetAllAttributes.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateConstraintRuleFormAttributes">
            <summary>
            Validation of Constraint Rule Form Filter
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ValidateConstraintRuleFormAttributes._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateConstraintRuleFormAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateConstraintRuleFormAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateConstraintRuleFormAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateFilterModelForEmployeeList">
            <summary>
            Validation for filter model for getting employees' lists
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ValidateFilterModelForEmployeeList._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateFilterModelForEmployeeList.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateFilterModelForEmployeeList.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateFilterModelForEmployeeList.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateFilterModelForEmployeeList.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateModelForAvailableJobs">
            <summary>
            Validation of get request when employee try to access available jobs
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ValidateModelForAvailableJobs._context">
            <summary>
            Property for accessing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateModelForAvailableJobs.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateModelForAvailableJobs.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occurred when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateModelForAvailableJobs.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionForGettingAllEmployees">
            <summary>
            Class that validates whether Person has permission for getting all employees.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForGettingAllEmployees.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForGettingAllEmployees.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether Person has permission for getting all employees.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForGettingAllEmployees.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionForPersonalSchedule">
            <summary>
            Class that validates whether Employee has permission for accessing his personal schedule.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForPersonalSchedule.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForPersonalSchedule.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether Employee has permission for accessing his personal schedule.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForPersonalSchedule.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionForSkillsMatrix">
            <summary>
            Class that validates whether User has permission for accessing Skills Matrix.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForSkillsMatrix.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForSkillsMatrix.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether User has permission for accessing Skills Matrix.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForSkillsMatrix.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionForSystemPreferences">
            <summary>
            Class that validates whether User has permission for accessing System Preferences.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForSystemPreferences.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForSystemPreferences.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether User has permission for accessing System Preferences.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForSystemPreferences.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionForTemplates">
            <summary>
            Method that checkes whether the current user has corresponding Profile permission
            To access Templates
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForTemplates.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForTemplates.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that will check if the current user has corresponding
            Profile permission to access Templates.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionForTemplates.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionsForAttendanceConfirmation">
            <summary>
            Validation for attednace confirmation permission when user access to attendance confirmation transaction log
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForAttendanceConfirmation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForAttendanceConfirmation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that will check if the current user has corresponding
            Profile permission to access Templates.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForAttendanceConfirmation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionsForManageUserTab">
            <summary>
            Class that validates whether User has permission for accessing User Management.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForManageUserTab.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForManageUserTab.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether User has permission for accessing User Management.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForManageUserTab.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionsForReports">
            <summary>
            Class that validates whether User has permission for accessing Reports.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForReports.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForReports.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether User has permission for accessing Reports.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForReports.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateProfilePermissionsForUserManagement">
            <summary>
            Class that validates whether User has permission for accessing User Management.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForUserManagement.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForUserManagement.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether User has permission for accessing User Management.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateProfilePermissionsForUserManagement.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidatePushNotifications">
            <summary>
            A class that confirms whether the notification requirements are correct.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidatePushNotifications.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidatePushNotifications.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            This method is called after validation
            </summary>
            <param name="context">Action context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidatePushNotifications.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is called in a time of execution
            </summary>
            <param name="context">Action Executing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidatePushNotifications.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateUnreadPushNotifications">
            <summary>
            A class that confirms whether the notification requirements are correct.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateUnreadPushNotifications.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateUnreadPushNotifications.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            This method is called after validation
            </summary>
            <param name="context">Action context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateUnreadPushNotifications.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is called in a time of execution
            </summary>
            <param name="context">Action Executing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateUnreadPushNotifications.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateUserSchedulePermissionsForAutoSolve">
            <summary>
            Class that validates whether User has permission for AutoSolve.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateUserSchedulePermissionsForAutoSolve.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateUserSchedulePermissionsForAutoSolve.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether User has permission for AutoSolve.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateUserSchedulePermissionsForAutoSolve.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidationForLoneWorkerOrAttendanceManagers">
            <summary>
            Validate for getting users that can be lone worker manager or attendance manager
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidationForLoneWorkerOrAttendanceManagers.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidationForLoneWorkerOrAttendanceManagers.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidationForLoneWorkerOrAttendanceManagers.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidationForTradeOffer">
            <summary>
            Class used to validate trade board permissions
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.Get.ValidationForTradeOffer._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidationForTradeOffer.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context">DB context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidationForTradeOffer.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Checking if user has trade board permission
            </summary>
            <param name="context">Action Exectuing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidationForTradeOffer.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is excecuted.
            </summary>
            <param name="context">ActionExecutedContext object</param>
        </member>
        <member name="T:ESolve.ActionFilters.Get.ValidateSpecialDate`1">
            <summary>
            Validate attributes of special date 
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateSpecialDate`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateSpecialDate`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.Get.ValidateSpecialDate`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateLogin">
            <summary>
            This class is used to validate user login.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLogin.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLogin.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLogin.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceDTOAttributes">
            <summary>
            Class is executing when someone wants to create absence request
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceDTOAttributes._context">
            <summary>
            Repository context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceDTOAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceDTOAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which will be called when action es executing
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceDTOAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which will be called when action has been executed
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceRequestActionAttributes">
            <summary>
            This class responsibility is validation User actions on absence requests.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceRequestActionAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceRequestActionAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting. Method is responsibile for validating AbsenceCode for deleting.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAbsenceRequestActionAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
            
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAddAbsenceDTOAttributes">
            <summary>
            Class is executing when someone wants to create absence request
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAddAbsenceDTOAttributes._context">
            <summary>
            Repository context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAddAbsenceDTOAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAddAbsenceDTOAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which will be called when action es executing
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateAddAbsenceDTOAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which will be called when action has been executed
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateUpdateAbsenceDTOAttributes">
            <summary>
            Clas will be used when someone wants to edit absence or request
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateUpdateAbsenceDTOAttributes._context">
            <summary>
            Repository context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateUpdateAbsenceDTOAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateUpdateAbsenceDTOAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which will be called when action has been executed
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AbsencesValidationFilters.ValidateUpdateAbsenceDTOAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which will be called when action es executing
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.AgencyValidation">
            <summary>
            Validtion for agency
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AgencyValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AgencyValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AgencyValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.AssignmentValidation">
            <summary>
            Validation for assignment
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AssignmentValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AssignmentValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.AssignmentValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.DaysOffWithinAPeriodValidation">
            <summary>
            Validatin for Days Off Within A Period Constraint
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.DaysOffWithinAPeriodValidation.ValidateDaysOffWithinAPeriod(ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            Validate custom fields in Days Off Within A Period Constraint
            </summary>
            <param name="model">Model with values</param>
            <returns>JSONErrorDTO object if there is validation's issues, otherwise returns null.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTimesValidation">
            <summary>
            Class to validate maximum number of job times constraint
            </summary>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesConsecutivelyValidation">
            <summary>
            Validation class for MNOJTC Constraint
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesConsecutivelyValidation.#ctor">
            <summary>
            Default constructor that sets backend key to "MNOJTC"
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesConsecutivelyValidation.MinValue">
            <summary>
            Minimum value for MaxCount field
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesConsecutivelyValidation.MaxValue">
            <summary>
            Maximum value for MaxCount field
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesConsecutivelyValidation.Validate(ESolve.Entities.RepositoryContext,ESolve.Entities.DataManager.ConstraintManager,ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            Method that performs base validation for the constraint
            and then validates MNOJTC-relevant fields
            </summary>
            <param name="repositoryContext">Repository Context</param>
            <param name="constraintManager">Manager for constraints.</param>
            <param name="model">Object containing Constraint form fields.</param>
            <returns>Null if constraint is valid, otherwise returns <see cref="T:ESolve.Entities.DTOs.JSONErrorDTO"/> containing errors.</returns>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesConsecutivelyValidation.ValidateMaximumNumberOfJobTypsConsecutively(ESolve.Entities.RepositoryContext,ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            Method that validates JobType, MaxCount, RestDays fields
            in the MNOJTC Constraint form.
            </summary>
            <param name="repositoryContext">Repository Context.</param>
            <param name="model">Object containing Constraint form fields.</param>
            <returns>Null if constraint is valid, otherwise returns <see cref="T:ESolve.Entities.DTOs.JSONErrorDTO"/> containing errors.</returns>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesValidation">
            <summary>
            Constraint's validation for maximum number of job type
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesValidation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesValidation.Validate(ESolve.Entities.RepositoryContext,ESolve.Entities.DataManager.ConstraintManager,ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            Validate constraint
            </summary>
            <param name="repositoryContext">DBContext</param>
            <param name="constraintManager">Manager for constraints</param>
            <param name="model">Form object</param>
            <returns>JSONErrorDTO with erros if exist, otherwise returns null</returns>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.MaximumNumberOfJobTypesValidation.ValidateMaximumNumberOfJobType(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            Validation for maximum number of job type
            </summary>
            <param name="model">Form objext</param>
            <param name="repositoryContext">DBContext</param>
            <returns>JSONErrorDTO object if there are errors, otherwise returns null.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ConstraintsValidationFilters.SplitShiftsValidation">
            <summary>
            Validation for operations on split shifst constraints
            </summary>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateEmployeeActionOnJobOffer">
            <summary>
            Validation of model passed durnig accepting or rejecting job offer
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateEmployeeActionOnJobOffer._jobOfferManager">
            <summary>
            JobOffer Manager
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateEmployeeActionOnJobOffer.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateEmployeeActionOnJobOffer.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateEmployeeActionOnJobOffer.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobOfferOnJobLevel">
            <summary>
            Validation of model passed durnig creating job offers on job level
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobOfferOnJobLevel._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobOfferOnJobLevel.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobOfferOnJobLevel.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobOfferOnJobLevel.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobOfferOnJobLevel.ValidateDoesUserHavePermissionForOfferingJob(ESolve.Contracts.ILoggedInUser,ESolve.Entities.Models.SubGroup,ESolve.Entities.Models.Job,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            For passed user and subgroup check does user have rights to offer jobs in selected SG
            </summary>
            <param name="loggedInUser">LoggedIn User</param>
            <param name="subGroup">Selected SubGroup</param>
            <param name="job">Selected job</param>
            <param name="context">Action executing context</param>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobsOfferOnScheduleOrSubGroupLevelLevel._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobsOfferOnScheduleOrSubGroupLevelLevel.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobsOfferOnScheduleOrSubGroupLevelLevel.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobsOfferOnScheduleOrSubGroupLevelLevel.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobsOfferOnScheduleOrSubGroupLevelLevel.ValidateDoesUserHavePermissionForOfferingJobOnScheduleLevel(ESolve.Contracts.ILoggedInUser,ESolve.Entities.Models.Schedule,ESolve.Entities.DTOs.JobOffer.JobsOfferDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            For passed user and subgroup check does user have rights to offer jobs in selected SG
            </summary>
            <param name="loggedInUser">LoggedIn User</param>
            <param name="schedule">Selected schedule</param>
            <param name="model">Model with info about job offer</param>
            <param name="context">Action executing context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.JobOffers.ValidateJobsOfferOnScheduleOrSubGroupLevelLevel.ValidateDoesUserHavePermissionForOfferingJobOnSubGroupLevel(ESolve.Contracts.ILoggedInUser,ESolve.Entities.Models.SubGroup,ESolve.Entities.DTOs.JobOffer.JobsOfferDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            For passed user and subgroup check does user have rights to offer jobs in selected SG
            </summary>
            <param name="loggedInUser">LoggedIn User</param>
            <param name="subGroup">Selected SubGroup</param>
            <param name="model">JobsOfferDTO object with info about job offer</param>
            <param name="context">Action executing context</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateApproveOrRejectSubmittedItem">
            <summary>
            Main class for validation approval or rejecting some approval
            Contains all methods for performing basic object validation. 
            <para>
            Validation elements before Request goes to the controller
            See <see cref="M:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateApproveOrRejectSubmittedItem.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)"/> to validate items that should be passed to the controller.
            </para>
            <para>
            Working with request after he finish with controller method
            See <see cref="M:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateApproveOrRejectSubmittedItem.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)"/> to work with items that are in controller response.
            </para>
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateApproveOrRejectSubmittedItem._subGroupsApprovalManager">
            <summary>
            Db context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateApproveOrRejectSubmittedItem.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            ValidateApproveOrRejectSubmittedItem's constructor
            </summary>
            <param name="context">Db context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateApproveOrRejectSubmittedItem.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Class used to validate schedules with custom data
            </summary>
            <param name="context">Action exectuing context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateApproveOrRejectSubmittedItem.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateScheduleApproval">
            <summary>
            Classed used to validate if range is already submited.
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateScheduleApproval._subGroupsApprovalManager">
            <summary>
            Db context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateScheduleApproval.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            ScheduleWithCustomDataValidation's constructor
            </summary>
            <param name="context">Db context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateScheduleApproval.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Class used to validate schedules with custom data
            </summary>
            <param name="context">Action exectuing context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ScheduleApproval.ValidateScheduleApproval.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.SchedulesValidations.ScheduleWithCustomDataValidation">
            <summary>
            Validation for schedule with custom data
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SchedulesValidations.ScheduleWithCustomDataValidation._context">
            <summary>
            Db context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SchedulesValidations.ScheduleWithCustomDataValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            ScheduleWithCustomDataValidation's constructor
            </summary>
            <param name="context">Db context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SchedulesValidations.ScheduleWithCustomDataValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Class used to validate schedules with custom data
            </summary>
            <param name="context">Action exectuing context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SchedulesValidations.ScheduleWithCustomDataValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SchedulesValidations.ScheduleWithCustomDataValidation.RaiseError(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.String,System.String)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="context">Action context</param>
            <param name="key">Message key</param>
            <param name="message">Message content</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.SchedulesValidations.TemplateScheduleWithCustomDataValidation">
            <summary>
            Validation for template schedule with custom data
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SchedulesValidations.TemplateScheduleWithCustomDataValidation._context">
            <summary>
            Db context
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SchedulesValidations.TemplateScheduleWithCustomDataValidation.MinNoOfDays">
            <summary>
            Validation for minimum number of TemplateSchedule's Days
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SchedulesValidations.TemplateScheduleWithCustomDataValidation.MaxNoOfDays">
            <summary>
            Validation for maximum number of TemplateSchedule's Days
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SchedulesValidations.TemplateScheduleWithCustomDataValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            TemplateScheduleWithCustomDataValidation's constructor
            </summary>
            <param name="context">Db context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SchedulesValidations.TemplateScheduleWithCustomDataValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Class used to validate template schedules with custom data
            </summary>
            <param name="context">Action exectuing context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SchedulesValidations.TemplateScheduleWithCustomDataValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SchedulesValidations.TemplateScheduleWithCustomDataValidation.RaiseError(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.String,System.String)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="context">Action context</param>
            <param name="key">Message key</param>
            <param name="message">Message content</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationScheduleCustomDataAddEditDTOAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationScheduleCustomDataAddEditDTOAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationScheduleCustomDataAddEditDTOAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            NotImplemented
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationScheduleCustomDataAddEditDTOAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invekd before controller method
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.SubgroupWithCustomDataValidation">
            <summary>
            Validation for subgroup with custom data
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.SubgroupWithCustomDataValidation._context">
            <summary>
            Db context
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.SubgroupWithCustomDataValidation._scheduleSubGroupsSortedInParentChildStructure">
            <summary>
            Sorted subgroups
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.SubgroupWithCustomDataValidation._subgroupManager">
            <summary>
            Subgroup's repository
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.SubgroupWithCustomDataValidation.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup})">
            <summary>
            SubgroupWithCustomDataValidation's constructor
            </summary>
            <param name="context">Db context</param>
            <param name="subGroupManager">Manager for subgroups</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.SubgroupWithCustomDataValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Class used to validate subgroup with custom data
            </summary>
            <param name="context">Action exectuing context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.SubgroupWithCustomDataValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.SubgroupWithCustomDataValidation.GetChildsForSubgroup(System.Int64,System.Int64)">
            <summary>
            Getting chilfs for subgroup
            </summary>
            <param name="id"></param>
            <param name="scheduleID"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.TemplateSubGroupWithCustomDataValidation">
            <summary>
            Validation for template subgroup with custom data
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.TemplateSubGroupWithCustomDataValidation._context">
            <summary>
            Db context
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.TemplateSubGroupWithCustomDataValidation._scheduleSubGroupsSortedInParentChildStructure">
            <summary>
            Sorted TemplateSubgroups
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.TemplateSubGroupWithCustomDataValidation._templateSubgroupManager">
            <summary>
            TemplateSubgroup's repository
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.TemplateSubGroupWithCustomDataValidation.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSubGroup})">
            <summary>
            SubgroupWithCustomDataValidation's constructor
            </summary>
            <param name="context">Db context</param>
            <param name="templateSubGroupManager">Manager for subgroups</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.TemplateSubGroupWithCustomDataValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Class used to validate template subgroup with custom data
            </summary>
            <param name="context">Action exectuing context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.TemplateSubGroupWithCustomDataValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.SubgrupsValidations.TemplateSubGroupWithCustomDataValidation.GetChildsForSubgroup(System.Int64,System.Int64)">
            <summary>
            Getting chilfs for subgroup
            </summary>
            <param name="id"></param>
            <param name="scheduleID"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateSubGroupCustomDataAddEditDTOAttributes">
            <summary>
            Validation of ValidateSubGroupCustomDataAddEditDTOAttributes Attributes
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSubGroupCustomDataAddEditDTOAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSubGroupCustomDataAddEditDTOAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked before controller action
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSubGroupCustomDataAddEditDTOAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.TemplateAssignmentValidation">
            <summary>
            Validation for assignment
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TemplateAssignmentValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TemplateAssignmentValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TemplateAssignmentValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.TemplatesValidationFilters.TemplateUnassignAllValidationFilter">
            <summary>
            Validation for unassign all action
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.TemplatesValidationFilters.TemplateUnassignAllValidationFilter._context">
            <summary>
            Db Context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TemplatesValidationFilters.TemplateUnassignAllValidationFilter.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TemplatesValidationFilters.TemplateUnassignAllValidationFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TemplatesValidationFilters.TemplateUnassignAllValidationFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateCreateTemplateDTO">
            <summary>
            Create Template validation
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCreateTemplateDTO.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCreateTemplateDTO.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCreateTemplateDTO.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateInsertTemplateDTO">
            <summary>
            Validation class for validity of InsertTemplateDTO (existing entities, rotation value, dates, permissions, required fields depending on action).
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateInsertTemplateDTO.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Default constructor.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateInsertTemplateDTO.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if entities from InsertTemplateDTO exist in DB, checks if number of rotations
            is greater than 0, checks if dates are valid and checks if User has access to the 
            chosen entities.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateInsertTemplateDTO.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidatePermissionsForDuplicatingTemplates">
            <summary>
            Duplicate Templates validation
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionsForDuplicatingTemplates.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Default constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionsForDuplicatingTemplates.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionsForDuplicatingTemplates.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that verifies whether the current user has permission for the Template
            that they are trying to duplicate.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateTemplatePublish">
            <summary>
            Validation class used for validating publishing of a Template
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateTemplatePublish.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if the Template can be published.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateTemplatePublish.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationTemplateJobAttributes`1">
            <summary>
            This class is used to validate Job Attributes
            </summary>
            <typeparam name="T">Job object</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationTemplateJobAttributes`1.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJob})">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
            <param name="templateJobManager"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationTemplateJobAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationTemplateJobAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.TradesValidationFilters.ValidateTradeOffer">
            <summary>
            Validation for trade offer
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TradesValidationFilters.ValidateTradeOffer.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TradesValidationFilters.ValidateTradeOffer.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.TradesValidationFilters.ValidateTradeOffer.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateAdvancedSSOFormAtribute">
            <summary>
            Validate Advanced SSO during update form
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateAdvancedSSOFormAtribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateAdvancedSSOFormAtribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateAdvancedSSOFormAtribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateAttendanceConfirmationAnswer">
            <summary>
            Validation for the answer to attendance confirmation alert
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateAttendanceConfirmationAnswer.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateAttendanceConfirmationAnswer.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateAttendanceConfirmationAnswer.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateClassesFormAtribute">
            <summary>
            Validate classes during add or update list of items
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateClassesFormAtribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateClassesFormAtribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateClassesFormAtribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateConstraintFormAttributes">
            <summary>
            This class is responsibile for passed form validation based on ConstraintRule buisnies logic
            </summary>
            
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ValidateConstraintFormAttributes._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ValidateConstraintFormAttributes._constraintManager">
            <summary>
            Property for accesing Constraint Manageru
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateConstraintFormAttributes.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Constraint})">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
            <param name="repository">Repository which will be injected in ConstraintManager</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateConstraintFormAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateConstraintFormAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateConstraintFormAttributes.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateCopyDataForward">
            <summary>
            Copy data forward validation
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCopyDataForward.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCopyDataForward.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCopyDataForward.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateCopyJobDTO`1">
            <summary>
            Validate attributes of passed copy job DTO
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCopyJobDTO`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCopyJobDTO`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCopyJobDTO`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCopyJobDTO`1.CanJobCopiedInSelectedRange(ESolve.Entities.Models.Job,ESolve.Entities.DTOs.CopyJobDTO,ESolve.Contracts.ILoggedInUser)">
            <summary>
            For passed job and copy job model method will check can job be copied in selected range.
            </summary>
            <param name="job">Job which will be copied</param>
            <param name="model">Copy Job model DTO</param>
            <param name="loggedInUser">Currently logged in user</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateCosteCodesFormAtribute">
            <summary>
            Validate cost ocdes during add or update list of items
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCosteCodesFormAtribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCosteCodesFormAtribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCosteCodesFormAtribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateCustomDataDTOAttributes">
            <summary>
            Responsability of the class is to validate is custom data valid for object.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCustomDataDTOAttributes.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.CustomData})">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
            <param name="repositoryBase">Repository base implementation</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCustomDataDTOAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCustomDataDTOAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateCustomDataLookupAttributes">
            <summary>
            Responsability of the class is to validate is customdata lookup valid for object.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCustomDataLookupAttributes.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.CustomDataLookup})">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
            <param name="repository">IRepositoryBase</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCustomDataLookupAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            NotImplemented 
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateCustomDataLookupAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked before action
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateDateRange">
            <summary>
            Validation for passed start and end date
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDateRange.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Default constructor.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDateRange.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDateRange.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateDepartmentsFormAtribute">
            <summary>
            Validate departments during add or update list of items
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDepartmentsFormAtribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDepartmentsFormAtribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDepartmentsFormAtribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateDivisionsFormAtribute">
            <summary>
            Validate divisions during add or update list of items
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDivisionsFormAtribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDivisionsFormAtribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateDivisionsFormAtribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateEmailSettings">
            <summary>
            Validation for email settings
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmailSettings.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmailSettings.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmailSettings.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateEmployeeJobAssigmentDTOAttributes`1">
            <summary>
            Responsability of the class is to validate is employee valid for job assigment.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmployeeJobAssigmentDTOAttributes`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmployeeJobAssigmentDTOAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmployeeJobAssigmentDTOAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateEmployeeProfileDTO">
            <summary>
            Validate EmployeeProfileDTO
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmployeeProfileDTO.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmployeeProfileDTO.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate EmployeeProfileDTO. It occurs when action executed
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateEmployeeProfileDTO.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateJobCustomDataAddEditDTOAttributes">
            <summary>
            Validation class for adding new or updating existing JobCustomData
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateJobCustomDataAddEditDTOAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateJobCustomDataAddEditDTOAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateJobCustomDataAddEditDTOAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action which is invoked before controller method
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateJobTitlesFormAtribute">
            <summary>
            Validate locations during add or update list of items
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateJobTitlesFormAtribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateJobTitlesFormAtribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateJobTitlesFormAtribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateLocationsFormAtribute">
            <summary>
            Validate locations during add or update list of items
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLocationsFormAtribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLocationsFormAtribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLocationsFormAtribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateLoneWorkerCheckInDTO">
            <summary>
            Validation for ValidateLoneWorkerDTO 
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLoneWorkerCheckInDTO.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLoneWorkerCheckInDTO.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateLoneWorkerCheckInDTO.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidatePermissionDTO">
            <summary>
            Validation for permissions
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionDTO.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionDTO.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting times
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionDTO.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionDTO.ValidateProfile(ESolve.Entities.Models.Profile)">
            <summary>
            Method for profile's validation
            </summary>
            <param name="profile">Profile to validate</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionDTO.ValidatePermissions(ESolve.Entities.Models.Profile)">
            <summary>
            Method for permissions' validation
            </summary>
            <param name="profile">Profile with permissions to validate.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePermissionDTO.ValidatePanelPermissions(System.Collections.Generic.List{ESolve.Entities.Models.PanelPermission})">
            <summary>
            Method for panel permissions' validation
            </summary>
            <param name="panelPermissions">Panel permission to be validate</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidatePostShiftsFromAttributes">
            <summary>
            Validate get requests for shifts
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ValidatePostShiftsFromAttributes._context">
            <summary>
            Property for accessing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePostShiftsFromAttributes.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePostShiftsFromAttributes.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occurs when action executed
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePostShiftsFromAttributes.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidatePostShiftsFromAttributes.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateRankingDTO`1">
            <summary>
            This class is used to validate RankingDTO Attributes
            </summary>
            <typeparam name="T">RankingDTO object</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateRankingDTO`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateRankingDTO`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateRankingDTO`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateRefreshToken">
            <summary>
            Class used for validation of RefreshToken endpoint
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateRefreshToken.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that validates DTO for RefreshToken endpoint
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateRefreshToken.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateReportFilteringData">
            <summary>
            Validation for report filtering data
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateReportFilteringData.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateReportFilteringData.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateReportFilteringData.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateSchedulePreference">
            <summary>
            Validation for schedule tab in system preference page
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ValidateSchedulePreference._context">
            <summary>
            Db context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSchedulePreference.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            ValidateSchedulePreference's constructor
            </summary>
            <param name="context">Db context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSchedulePreference.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which has been invoked durin request ecexuting
            </summary>
            <param name="context">Action exectuing context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSchedulePreference.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateSpecialDateType">
            <summary>
            Validate attributes of special date types
            </summary>
            
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSpecialDateType.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSpecialDateType.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSpecialDateType.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateSyncDTO">
            <summary>
            Validation class used in order to check if the SyncDTO contains valid ScheduleID, StartDate and EndDate.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSyncDTO.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Default constructor that initializes RepositoryContext.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSyncDTO.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if the SyncDTO contains valid ScheduleID, StartDate and EndDate.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSyncDTO.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateSyncSettingsAttributes`1">
            <summary>
            Validate Sync object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSyncSettingsAttributes`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSyncSettingsAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateSyncSettingsAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateTeamsFormAtribute">
            <summary>
            Validate teams during add or update list of items
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateTeamsFormAtribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateTeamsFormAtribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateTeamsFormAtribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateUserAccountIfSendingSystemAccessEmail">
            <summary>
            Validating whether a User is trying to send SystemAccessEmail
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserAccountIfSendingSystemAccessEmail.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            If account isn't the User account, method will return BadRequestObjectResult
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserAccountIfSendingSystemAccessEmail.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateUserDTO">
            <summary>
            Validation for users
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserDTO.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserDTO.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserDTO.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserDTO.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateUserForLogin">
            <summary>
            Validate login
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserForLogin.#ctor(ESolve.Entities.RepositoryContext,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
            <param name="httpContextAccessor">httpContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserForLogin.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserForLogin.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateUserProfileDTO">
            <summary>
            Validate UserProfileDTO.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserProfileDTO.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserProfileDTO.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate UserProfileDTO. It occurs when action executed
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateUserProfileDTO.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationAbsenceCode`1">
            <summary>
            This class is used to validate absence code
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ValidationAbsenceCode`1._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationAbsenceCode`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationAbsenceCode`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationAbsenceCode`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationAbsenceCode`1.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationConstraintTypeAttribute">
            <summary>
            Method validates can we update Constraint IsActive Flag
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PostAndPut.ValidationConstraintTypeAttribute._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationConstraintTypeAttribute.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationConstraintTypeAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationConstraintTypeAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationConstraintTypeAttribute.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidateProfileAttribute`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateProfileAttribute`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext.
            </summary>
            <param name="context">Context which will be used to initialize Repository Context.</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateProfileAttribute`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidateProfileAttribute`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationForNullAttribute">
            <summary>
            Validation if object that is not IEntity is not null
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationForNullAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            If Attribute doesn't exists in DB table Method wil return BadRequestObject
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationForNullAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationForWarningDetails">
            <summary>
            Validation for warning details
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationForWarningDetails.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationForWarningDetails.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationForWarningDetails.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationJobAttributes`1">
            <summary>
            This class is used to validate Job Attributes
            </summary>
            <typeparam name="T">Job object</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobAttributes`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationJobStatusAttributes`1">
            <summary>
            This class is used to validate Job Status Attributes
            </summary>
            <typeparam name="T">Job Status object</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobStatusAttributes`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobStatusAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobStatusAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobStatusAttributes`1.isValidColor(System.String)">
            <summary>
            Checking if a string is color in hexadecimal value
            </summary>
            <param name="color">Color of job status</param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationJobTypeAttribute`1">
            <summary>
            This class is used in order to validate JobType Attributes
            </summary>
            <typeparam name="T">JobType object</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobTypeAttribute`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobTypeAttribute`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobTypeAttribute`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationJobTypeValueDTOAttributes`1">
            <summary>
            This class is used to validate JobTypeValueDTO Attributes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobTypeValueDTOAttributes`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="context">Context which will be used to initialize Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobTypeValueDTOAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationJobTypeValueDTOAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationSkillCodeAttributes`1">
            <summary>
            This class is used to validate SkillCode Attributes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillCodeAttributes`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext.
            </summary>
            <param name="context">Context which will be used to initialize Repository Context.</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillCodeAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillCodeAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationSkillMatrixAttributes`1">
            <summary>
            This class is used to validate SkillMatrix Attributes.
            </summary>
            <typeparam name="T">SkillMatrix class</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillMatrixAttributes`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context.
            </summary>
            <param name="context">Context which will be injected in Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillMatrixAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillMatrixAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PostAndPut.ValidationSkillMatrixDTO`1">
            <summary>
            This class is used to validate SkillMatrixDTO Attributes
            </summary>
            <typeparam name="T">SkillMatrixDTO class</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillMatrixDTO`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context.
            </summary>
            <param name="context">Context which will be injected in Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillMatrixDTO`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PostAndPut.ValidationSkillMatrixDTO`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateAccessibilityForSecurity">
            <summary>
            Class that validates whether Employee has permission to access application security settings.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateAccessibilityForSecurity.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateAccessibilityForSecurity.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            During action executing we're checking whether Employee has permission for changing password.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateAccessibilityForSecurity.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is executed.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateAttendanceConfirmations">
            <summary>
            Validation for the answer to attendance confirmation alert
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateAttendanceConfirmations.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateAttendanceConfirmations.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateAttendanceConfirmations.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateEmployeeAcceptDeclineActionOnJobOffer">
            <summary>
            Class used to validate Employee Action on Job Offer.
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.MobileAPI.ValidateEmployeeAcceptDeclineActionOnJobOffer._context">
            <summary>
            JobOffer Manager
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateEmployeeAcceptDeclineActionOnJobOffer.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateEmployeeAcceptDeclineActionOnJobOffer.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occures when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateEmployeeAcceptDeclineActionOnJobOffer.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateGetAllPushNotifications">
            <summary>
            A class that validate Get all notification request
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.MobileAPI.ValidateGetAllPushNotifications._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateGetAllPushNotifications.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateGetAllPushNotifications.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is called in a time of execution
            </summary>
            <param name="context">Action Executing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateGetAllPushNotifications.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            This method is called after validation
            </summary>
            <param name="context">Action context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateMobileLogin.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateMobileLogin.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateMobileLogin.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateMyJobs">
            <summary>
            Filter which validate data for accessing Employee assigned jobs and jobs traded by employee
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.MobileAPI.ValidateMyJobs._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateMyJobs.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing RepositoryContext
            </summary>
            <param name="context">RepositoryContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateMyJobs.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is used in order to validate attributes. It occurs when action executes
            </summary>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateMyJobs.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not Used
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateOfferJobForTrade.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Seting up Repository context.
            </summary>
            <param name="context">Represents context which we will inject into RepositoryContext.</param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateRegisterOrDeregisterDeviceToken">
            <summary>
            Validation class to register or de-register mobile device token
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateRegisterOrDeregisterDeviceToken.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateRegisterOrDeregisterDeviceToken.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateRegisterOrDeregisterDeviceToken.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Validate required parameters are received in request or not 
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateResetPassword">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateResetPassword.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateResetPassword.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateSingleMultiplePushNotifications">
            <summary>
            A class that validate Single or Multiple push notification 
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.MobileAPI.ValidateSingleMultiplePushNotifications._context">
            <summary>
            Property for accesing Database
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateSingleMultiplePushNotifications.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateSingleMultiplePushNotifications.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is called in a time of execution
            </summary>
            <param name="context">Action Executing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateSingleMultiplePushNotifications.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            This method is called after validation
            </summary>
            <param name="context">Action context</param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferForMobile">
            <summary>
            Class used to validate trade board permissions for mobile
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferForMobile._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferForMobile.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context">DB context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferForMobile.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Checking if user has trade board permission
            </summary>
            <param name="context">Action Executing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferForMobile.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is executed.
            </summary>
            <param name="context">ActionExecutedContext object</param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferPermission">
            <summary>
            Class used to validate trade board permissions
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferPermission._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferPermission.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context">DB context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferPermission.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Checking if user has trade board permission and is trade offer id exists
            </summary>
            <param name="context">Action Executing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateTradeOfferPermission.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Method which is called after action is executed.
            </summary>
            <param name="context">ActionExecutedContext object</param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateUnreadPushNotifications">
            <summary>
            A class that confirms whether the notification requirements are correct.
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateUnreadPushNotifications.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Public constructor for initializing Repository context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateUnreadPushNotifications.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            This method is called after validation
            </summary>
            <param name="context">Action context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateUnreadPushNotifications.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            This method is called in a time of execution
            </summary>
            <param name="context">Action Executing Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateUnreadPushNotifications.RaiseError(ESolve.Entities.DTOs.JSONErrorDTO,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="errorsJSON">User Readable error</param>
            <param name="context">ActionExecutingContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.MobileAPI.ValidateUpdatedPassword">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateUpdatedPassword.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateUpdatedPassword.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.MobileAPI.ValidateUpdatedPassword.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilters.LoneWorkerAlertGridPermissionValidation">
            <summary>
            Validation for checking permission to acces lone worker alert grid
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilters.LoneWorkerAlertGridPermissionValidation.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Default constructor.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilters.LoneWorkerAlertGridPermissionValidation.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has lone worker permission
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilters.LoneWorkerAlertGridPermissionValidation.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context">ActionExecutedContext</param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateAssignAndUnassignPermissions">
            <summary>
            Class used to check if user has permisison to assign or unassgin employee on job
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateAssignAndUnassignPermissions.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateAssignAndUnassignPermissions.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has ScheduleApproval permission
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateAssignAndUnassignPermissions.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateManageTemplatesPermissions">
            <summary>
            Class use to validate user's permisisons to manager templates
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateManageTemplatesPermissions.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateManageTemplatesPermissions.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if the Template can be published.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateManageTemplatesPermissions.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleAndSubGroupPermission">
            <summary>
            Class used to validate if logged in user has access to the schedule or schedule's subgroup
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleAndSubGroupPermission._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleAndSubGroupPermission.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleAndSubGroupPermission.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has ScheduleApproval permission
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleAndSubGroupPermission.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleApprovalPermission">
            <summary>
            Class used for checking if loggedin user has schedule approval permission
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleApprovalPermission.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleApprovalPermission.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has ScheduleApproval permission
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleApprovalPermission.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleConstraintConfigurationPermissions">
            <summary>
            Class use to validate user's permisisons for schedule constraint's configuration
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleConstraintConfigurationPermissions.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleConstraintConfigurationPermissions.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if the user has schedule constraint configuration permissions
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleConstraintConfigurationPermissions.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleRankingConfigurationPermissions">
            <summary>
            Class used for checking if logged in user has schedule ranking configuration permission
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleRankingConfigurationPermissions.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleRankingConfigurationPermissions.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Methods checks if user has schedule ranking configuration permission
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateScheduleRankingConfigurationPermissions.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateSkillCodePermission">
            <summary>
            Classed used for checking if logged in user has permission to create/update skill coce
            </summary>
        </member>
        <member name="F:ESolve.ActionFilters.PermissionFilterValidations.ValidateSkillCodePermission._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSkillCodePermission.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSkillCodePermission.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has ScheduleApproval permission
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSkillCodePermission.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateSyncSettingsPermissions">
            <summary>
            Class used to validate user's permissions for sync settings
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSyncSettingsPermissions.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSyncSettingsPermissions.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if the user has sync settings permissions
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSyncSettingsPermissions.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.PermissionFilterValidations.ValidateSystemPreferencePermission">
            <summary>
            Class used to validate if logged in user has access to the System Preference Page
            </summary>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSystemPreferencePermission.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize context
            </summary>
            <param name="context">Context which will be injected in to Repository Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSystemPreferencePermission.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if logged in user has ScheduleApproval permission
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.PermissionFilterValidations.ValidateSystemPreferencePermission.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.ValidationTemplateSubGroupAttributes`1">
            <summary>
            This class is used to validate TemplateSubGroup Attributes
            </summary>
            <typeparam name="T">TemplateSubGroup class</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationTemplateSubGroupAttributes`1.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSubGroup})">
            <summary>
            Constructor which initialize Repository Context.
            </summary>
            <param name="context">Context which will be injected in Repository Context</param>
            <param name="repository">Context which will be injected in SubGroupManager Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationTemplateSubGroupAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method which is invoked in request excecuting time
            </summary>
            <param name="context">ActionExecuting Context</param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationTemplateSubGroupAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.ActionFilters.ValidationEmployeeAttributes`1">
            <summary>
            Class responsible for Validating Employee Properties.
            </summary>
            <typeparam name="T">Represent Employee Type</typeparam>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationEmployeeAttributes`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Initializing Repository Context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationEmployeeAttributes`1.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method has been invoked in executing request. Method validate employee properties.
            </summary>
            <param name="context">Context on which we will execute method.</param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationEmployeeAttributes`1.IsValid(System.String)">
            <summary>
            Method will try to create email from passed string.
            </summary>
            <param name="emailaddress">Passed email</param>
            <returns>True if passed string is valid email, otherwise False will be returned.</returns>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationEmployeeAttributes`1.IsReadOnly(ESolve.Entities.DTOs.EmployeeDTO,System.Collections.Generic.List{ESolve.Entities.DTOs.JSONErrorDTO})">
            <summary>
            Method will determine if any read only field is to be added/modified
            </summary>
            <param name="model"></param>
            <param name="errorsJSON"></param>
        </member>
        <member name="M:ESolve.ActionFilters.ValidationEmployeeAttributes`1.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.Attributes.ValidateApiKey">
            <summary>
            Validation filter which will be used as a way to Authorize 
            specific API requests against API Key Authorization.
            </summary>
        </member>
        <member name="F:ESolve.Attributes.ValidateApiKey.APIKEYHEADERNAME">
            <summary>
            Name of the header attribute containing API Key
            </summary>
        </member>
        <member name="F:ESolve.Attributes.ValidateApiKey.DbContext">
            <summary>
            Database Context
            </summary>
        </member>
        <member name="M:ESolve.Attributes.ValidateApiKey.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor that initializes DbContext.
            </summary>
            <param name="repositoryContext">Injected Database Context.</param>
        </member>
        <member name="M:ESolve.Attributes.ValidateApiKey.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Method that checks if there's a valid API Key in the request's header.
            </summary>
            <param name="context">ActionExecutingContext object.</param>
        </member>
        <member name="M:ESolve.Attributes.ValidateApiKey.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.AutomaticActions.AttendanceConfirmationAlerts">
            <summary>
            Class for sending attendance confirmation alerts
            </summary>
        </member>
        <member name="F:ESolve.AutomaticActions.AttendanceConfirmationAlerts._hubContext">
            <summary>
            SignalR hub context
            </summary>
        </member>
        <member name="M:ESolve.AutomaticActions.AttendanceConfirmationAlerts.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor For AttendanceConfirmationAlerts
            </summary>
            <param name="hubContext">SignalR hub context that will be injected</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.AutomaticActions.AttendanceConfirmationAlerts.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Sending lone worker alerts to employees, managers and admins
            </summary>
            <param name="context">Exectuion context</param>
            <returns>Task status (completed)</returns>
            <exception cref="T:System.InvalidOperationException">The exception that is thrown when a method 
            call is invalid for the object's current
            state.</exception>
        </member>
        <member name="T:ESolve.AutomaticActions.Configurations.JobSchedule">
            <summary>
            Class used for creating generic implementation that works for any number of jobs
            </summary>
        </member>
        <member name="P:ESolve.AutomaticActions.Configurations.JobSchedule.JobType">
            <summary>
            Scheduled job's type
            </summary>
        </member>
        <member name="P:ESolve.AutomaticActions.Configurations.JobSchedule.CronExpression">
            <summary>
            Cron Expression to define the timer schedule for a given job type
            </summary>
        </member>
        <member name="M:ESolve.AutomaticActions.Configurations.JobSchedule.#ctor(System.Type,System.String)">
            <summary>
            Constructor for JobSchedule
            </summary>
            <param name="jobType">Scheduled job's type</param>
            <param name="cronExpression">Cron Expression to define the timer schedule for a given job type</param>
        </member>
        <member name="T:ESolve.AutomaticActions.Configurations.QuartzHostedService">
            <summary>
            Class used as service to sets up Quartz scheduler and starts it running in the backgroung
            </summary>
        </member>
        <member name="F:ESolve.AutomaticActions.Configurations.QuartzHostedService._schedulerFactory">
            <summary>
            Scheduler factory
            </summary>
        </member>
        <member name="F:ESolve.AutomaticActions.Configurations.QuartzHostedService._jobFactory">
            <summary>
            Scheduler job factory
            </summary>
        </member>
        <member name="F:ESolve.AutomaticActions.Configurations.QuartzHostedService._jobSchedules">
            <summary>
            Set of job schedules
            </summary>
        </member>
        <member name="P:ESolve.AutomaticActions.Configurations.QuartzHostedService.Scheduler">
            <summary>
            Scheduler for jobs
            </summary>
        </member>
        <member name="M:ESolve.AutomaticActions.Configurations.QuartzHostedService.#ctor(Quartz.ISchedulerFactory,Quartz.Spi.IJobFactory,System.Collections.Generic.IEnumerable{ESolve.AutomaticActions.Configurations.JobSchedule})">
            <summary>
            Constructor for QuartzHostedService
            </summary>
            <param name="schedulerFactory">Scheduler factory that will be injected.</param>
            <param name="jobFactory">Scheduler job factory that will be injected.</param>
            <param name="jobSchedules">Set of job schedules that will be injected.</param>
        </member>
        <member name="M:ESolve.AutomaticActions.Configurations.QuartzHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called when the application starts up and 
            is where we configure Quartz. We start by creating an 
            instance of IScheduler, assigning it to a property for use later, 
            and setting the JobFactory for the scheduler to the injected instance
            </summary>
            <param name="cancellationToken">CancellationToken object</param>
            <returns>Started task.</returns>
        </member>
        <member name="M:ESolve.AutomaticActions.Configurations.QuartzHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called when app shuts down
            </summary>
            <param name="cancellationToken">CancellationToken object</param>
            <returns>Endned task</returns>
        </member>
        <member name="M:ESolve.AutomaticActions.Configurations.QuartzHostedService.CreateJob(ESolve.AutomaticActions.Configurations.JobSchedule)">
            <summary>
            Method used for creating scheduler job.
            </summary>
            <param name="schedule">Scheduler for job</param>
            <returns>Builded job</returns>
        </member>
        <member name="M:ESolve.AutomaticActions.Configurations.QuartzHostedService.CreateTrigger(ESolve.AutomaticActions.Configurations.JobSchedule)">
            <summary>
            Method used for creating trigger for starting scheduler job
            </summary>
            <param name="schedule">Scheduler for job</param>
            <returns>Created trigger</returns>
        </member>
        <member name="T:ESolve.AutomaticActions.LoneWorkerAlerts">
            <summary>
            Class for sending lone worker confirmations
            </summary>
        </member>
        <member name="F:ESolve.AutomaticActions.LoneWorkerAlerts._hubContext">
            <summary>
            SignalR hub context
            </summary>
        </member>
        <member name="M:ESolve.AutomaticActions.LoneWorkerAlerts.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor For Lone Worker Alerts
            </summary>
            <param name="hubContext">SignalR hub context that will be injected</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.AutomaticActions.LoneWorkerAlerts.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Sending lone worker alerts to employees, managers and admins
            </summary>
            <param name="context">Exectuion context</param>
            <returns>Task status (completed)</returns>
            <exception cref="T:System.InvalidOperationException">The exception that is thrown when a method 
            call is invalid for the object's current
            state.</exception>
        </member>
        <member name="T:ESolve.AutomaticDeletions.JobOffersDeletion">
            <summary>
            Class for automatic deleting job offers if they are in the past
            </summary>
        </member>
        <member name="M:ESolve.AutomaticDeletions.JobOffersDeletion.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Automatic job offers deletion
            </summary>
            <param name="context">Exectuion context</param>
            <returns>Task status (completed)</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.AutomaticDeletions.ManageApprovals">
            <summary>
            Class for automatic deleting job offers if they are in the past
            </summary>
        </member>
        <member name="F:ESolve.AutomaticDeletions.ManageApprovals._hubContext">
            <summary>
            SignalR hub context
            </summary>
        </member>
        <member name="M:ESolve.AutomaticDeletions.ManageApprovals.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor For ManageApprovals
            </summary>
            <param name="hubContext">SignalR hub context that will be injected</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.AutomaticDeletions.ManageApprovals.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Automatic job offers deletion
            </summary>
            <param name="context">Exectuion context</param>
            <returns>Task status (completed)</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.AutomaticDeletions.NotificationsDeletion">
            <summary>
            Class for automatic deleting notifications if they are older than 30 days
            </summary>
        </member>
        <member name="M:ESolve.AutomaticDeletions.NotificationsDeletion.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Automatic job offers deletion
            </summary>
            <param name="context">Exectuion context</param>
            <returns>Task status (completed)</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.AutomaticDeletions.TradeOffersDeletion">
            <summary>
            Class for automatic deleting trade offers if they are in the past
            </summary>
        </member>
        <member name="F:ESolve.AutomaticDeletions.TradeOffersDeletion._hubContext">
            <summary>
            SignalR hub context
            </summary>
        </member>
        <member name="M:ESolve.AutomaticDeletions.TradeOffersDeletion.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor For TradeOffersDeletion
            </summary>
            <param name="hubContext">SignalR hub context that will be injected</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.AutomaticDeletions.TradeOffersDeletion.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Automatic trade offers deletion
            </summary>
            <param name="context">Exectuion context</param>
            <returns>Task status (completed)</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.BussinessLogic.ConstraintsBussinessLogic">
            <summary>
            Class for constra
            </summary>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.ConstraintAdd(ESolve.Entities.Models.Constraint,ESolve.Entities.DataManager.JobTypeManager,System.Int64)">
            <summary>
            Calculations for adding new Constraint
            </summary>
            <param name="constraint"></param>
            <param name="jobTypeManager"></param>
            <param name="userId">User Id</param>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.ConstraintUpdate(ESolve.Entities.Models.Constraint,ESolve.Entities.Models.Constraint,ESolve.Entities.DataManager.JobTypeManager,System.Int64)">
            <summary>
            Calculations for updating existing constraint
            </summary>
            <param name="constraintDB"></param>
            <param name="constraintUpdated"></param>
            <param name="jobTypeManager"></param>
            <param name="userId">User Id</param>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.ConstraintActivateDeactivate(System.Int64,System.Boolean,ESolve.Entities.DataManager.JobTypeManager,System.Int64)">
            <summary>
            Calculations for Activate / Deactivate Constraint
            </summary>
            <param name="constraintID"></param>
            <param name="isActive"></param>
            <param name="jobTypeManager"></param>
            <param name="userId">User Id</param>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.getConstraintUpdated(System.Boolean,ESolve.Entities.Models.Constraint)">
            <summary>
            
            </summary>
            <param name="isActive"></param>
            <param name="constraintDB"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.AuditLogForConstraint(System.Int64,System.String,ESolve.Entities.Models.Constraint,ESolve.Entities.Models.Constraint)">
            <summary>
            Method insert audit log of Constraint in tblAuditTrail table.
            </summary>
            <param name="userId">logged In user Id</param>
            <param name="action">action should be insert, update or delete</param>
            <param name="constraintOldValues">Constraint old values</param>
            <param name="constraintNewValues">Constraint new values</param>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.GetConstraintCurrentValue(ESolve.Entities.Models.Constraint,ESolve.Entities.Models.Constraint)">
            <summary>
            This method retrun old and new value of constraint all parameters
            </summary>
            <param name="constraintOldValues">Constraint old values</param>
            <param name="constraintNewValues">Constraint new values</param>
            <returns> It return constraint  details dictionary</returns>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.SaveAuditData(System.Collections.Generic.Dictionary{System.String,System.String},System.Int64)">
            <summary>
            This function save Constraint audit details
            </summary>
            <param name="auditDetails"> Audit details dictionary</param>
            <param name="functionId">Audit Function Id</param>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.GetOldNewValue(System.String,System.String,System.String)">
            <summary>
            This method retrun old and new value of employee single parameters
            </summary>
            <param name="newValue">new value</param>
            <param name="oldValue">old value</param>
            <param name="propertyName">updated parameter name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.GetConstraintCustomData(ESolve.Entities.Models.ConstraintCustomData,ESolve.Entities.Models.ConstraintCustomData)">
            <summary>
            
            </summary>
            <param name="newConstraintCustomData"></param>
            <param name="oldConstraintCustomData"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.GetConstraintCustomData(ESolve.Entities.Models.ConstraintCustomData)">
            <summary>
            
            </summary>
            <param name="constraintCustomData"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.GetConstraintCustomRange(ESolve.Entities.Models.ConstraintCustomRange,ESolve.Entities.Models.ConstraintCustomRange)">
            <summary>
            
            </summary>
            <param name="newConstraintCustomRange"></param>
            <param name="oldConstraintCustomRange"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.GetConstraintCustomRange(ESolve.Entities.Models.ConstraintCustomRange)">
            <summary>
            
            </summary>
            <param name="constraintCustomRange"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.GetConstraintBaseDateRange(ESolve.Entities.Models.ConstraintBaseDateRange,ESolve.Entities.Models.ConstraintBaseDateRange)">
            <summary>
            
            </summary>
            <param name="newConstraintBaseDateRange"></param>
            <param name="oldConstraintBaseDateRange"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BussinessLogic.ConstraintsBussinessLogic.GetConstraintBaseDateRange(ESolve.Entities.Models.ConstraintBaseDateRange)">
            <summary>
            
            </summary>
            <param name="constraintBaseDateRange"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.BussinessLogic.EmployeeDashboard.GetDataForEmployeeDashboard">
            <summary>
            Class used to retrieve data for Employee Dashboard
            </summary>
        </member>
        <member name="M:ESolve.BussinessLogic.EmployeeDashboard.GetDataForEmployeeDashboard.#ctor(ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.EmployeeAbsenceManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.JobOfferManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.TradesManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Constructor which initialize all managers
            </summary>
            <param name="jobAvailabilityManager">Manager for JobAvailabilities</param>
            <param name="employeePermissionsManager">Manager for Employee Permissions</param>
            <param name="subGroupManager">Manager for SubGroups</param>
            <param name="employeeAbsenceManager">Manager for Employee Absences</param>
            <param name="employeesManager">Manager for Emlpoyees</param>
            <param name="jobOfferManager">Manager for JobOffers</param>
            <param name="jobManager">Manager for Jobs</param>
            <param name="tradesManager">Manager for Trades</param>
            <param name="loggedInUser">Currently logged in employee</param>
        </member>
        <member name="M:ESolve.BussinessLogic.EmployeeDashboard.GetDataForEmployeeDashboard.GetEmployeeDashboardDetailsDTO(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed data method will initialize employee dashboard data and return it
            </summary>
            <param name="range">selected Date Range</param>
            <returns>EmployeeDashboardDetailsDTO object. See <see cref="T:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO"/> for more details</returns>
        </member>
        <member name="T:ESolve.Contracts.IAvailableJobs">
            <summary>
            Interface contains methods for Available jobs
            </summary>
        </member>
        <member name="M:ESolve.Contracts.IAvailableJobs.GetAllAvailableJobs(ESolve.Entities.Filters.AvailableJobsFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.JobOfferManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.DataManager.JobManager)">
            <summary>
            Get available jobs of logged in employee which includes offered job and jobs that are put on trade by other employees
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.RuleName">
            <summary>
            Rule that employee breaks, possible values are
            Maximum Number Of Hours
            Employee Leaver Status
            Maximum Number Of Days Of The Week
            Employee Must Not Work With Another Employee
            Employee Must Work With Another Employee
            Maximum Number Of Job Types
            Maximum Number Of Job Types Consecutively
            Skill
            LengthOfService
            ComparisonRule
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.Skill">
            <summary>
            Lenght of service rule
            For example => 1 month
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.ComparisonRuleFieldValue">
            <summary>
            Value that employee does not have in comparison rule employee field 
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.Operator">
            <summary>
            Employee field defined in ComparisonRule
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.EmployeeField">
            <summary>
            Employee B Full name with who employeeA must or must not work
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.EmployeeBFullName">
            <summary>
            Job type name from constraints
            Maximum Number Of Job Types or
            Maximum Number Of Job Types Consecutively
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.JobTypeName">
            <summary>
             Job type name from constraints
             Maximum Number Of Job Types or
             Maximum Number Of Job Types Consecutively
             </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.EmployeeID">
            <summary>
            Employee's Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.JobID">
            <summary>
            Job's Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IBrokenRule.Employee">
            <summary>
            Employee Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IEmployeeConstraint.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IEmployeeConstraint.Value">
            <summary>
            Indicator does Employee Satisfies Current Constraint on Current Job
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IEmployeeConstraint.EmployeeID">
            <summary>
            Represents Primary Key From tblEmployees.
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IEmployeeConstraint.JobID">
            <summary>
            Represents Primary Key From tblJobs.
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IEmployeeConstraint.ConstraintID">
            <summary>
            Represents Primary Key From tblConstraints.
            </summary>
        </member>
        <member name="T:ESolve.Contracts.IEntity">
            <summary>
            Represents Interface for Entities. Each Entity which represent's DB table, must implement this interface. Propertie Id will represent Database Primary Key.
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IEntity.Id">
            <summary>
            Will represent Database Primary Key.
            </summary>
        </member>
        <member name="T:ESolve.Contracts.IJob">
            <summary>
            Interface for jobs
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Id">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Name">
            <summary>
            Job Name [Unique on subgroup level]
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.JobStartDateTime">
            <summary>
            Job Start Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.JobEndDateTime">
            <summary>
            Job End Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Hours">
            <summary>
            Job hours. [No of effective hours for that job]
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManualEditedHours">
            <summary>
            Property which indicates would App calculate Hours.
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Hours1">
            <summary>
            Hours of day 1
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManualEditedHours1">
            <summary>
            Is Field Hours1 manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Hours2">
            <summary>
            Working Hours Of Day 2
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManualEditedHours2">
            <summary>
            Is Field Hours2 manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Hours3">
            <summary>
            Working Hours Of Day 3
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManualEditedHours3">
            <summary>
            Is Field Hours3 manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Hours4">
            <summary>
            Working Hours Of Day 4
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManualEditedHours4">
            <summary>
            Is Field Hours4 manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Hours5">
            <summary>
            Working Hours Of Day 5
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManualEditedHours5">
            <summary>
            Is Field Hours5 manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Hours6">
            <summary>
            Working Hours Of Day 6
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManualEditedHours6">
            <summary>
            Is Field Hours6 manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Notes">
            <summary>
            Job Notes
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.NoOfEmployeesRequired">
            <summary>
            Number of required Employees for Job
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.AllowedTrade">
            <summary>
            Trade block
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.IsConcurrent">
            <summary>
            Is Job concurent
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ReferenceArea">
            <summary>
            Concurrent job's reference area for calculation associated emplployees.
            Possible values are: Schedule / Subgroup / Subgroup Lower Subgroupss
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.SortOrder">
            <summary>
            Sort order.s
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.IsCriticalTask">
            <summary>
            Is Job Critical
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Approved">
            <summary>
            Is job approved
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.NumberOfValidAssigned">
            <summary>
            Number of valid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.NumberOfInvalidAssigned">
            <summary>
            Number of invalid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.LoneWorkerJob">
            <summary>
            Indicator if job is lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManuallyEditedLoneWorkerJob">
            <summary>
            Indicator if lone worker job is manullay updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManuallyEditedReccuringIntervals">
            <summary>
            Indicator if reccuring intervals is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManuallyEditedResponseWindow">
            <summary>
            Indicator if response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.AttendanceConfirmation">
            <summary>
            Indicator if job need attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManuallyEditedAttendanceConfirmation">
            <summary>
            Indicator if attendance confirmation check box is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.AttendanceTimeBeforeStart">
            <summary>
            Time before job start for the attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManuallyEditedAttendanceTimeBeforeStart">
            <summary>
            Indicator if time before job start is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.AttendanceResponseWindow">
            <summary>
            Attendance Confirmation Response Window
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.ManuallyEditedAttendanceResponseWindow">
            <summary>
            Indicator if attendance confirmation response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.JobTypeID">
            <summary>
            JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.JobStatusID">
            <summary>
            JobStatus Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.JobType">
            <summary>
            JobType Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.JobStatus">
            <summary>
            JobStatus Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJob.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="M:ESolve.Contracts.IJob.CompareJobFieldsForCalculations(ESolve.Contracts.IJob)">
            <summary>
            Methods compares properties of passed instance with this 
            and returns name of each field which posses diff value. 
            </summary>
            <param name="job">Job entity to compare</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Contracts.IJob.UpdateJobStatus(ESolve.Entities.RepositoryContext)">
            <summary>
            For passed JobAvailabilitites Update Job Status
            </summary>
        </member>
        <member name="T:ESolve.Contracts.IJobAvailability">
            <summary>
            Interface for job's availability
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.Id">
            <summary>
            Employees Availability for certain Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.IsAssigned">
            <summary>
            Indicator is Employee in Assigned or Available List
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.CompletelyValid">
            <summary>
            Indicator is Employee Completely Valid
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.IsOverriden">
            <summary>
            Indicator is assigment is overriden or not
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.SkillCode">
            <summary>
            Does Employee satisfies SkillCodeRequirements
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.ComparisonRule">
            <summary>
            Does Employee Satisifes ComparisonRule Formula's
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.NotAlreadyAssigned">
            <summary>
            Does Employee satisifes Not Already assigned Constraint.
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.UserWhoHasAssigned">
            <summary>
            Firstname and lastname who has assigned employee
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.EmployeeID">
            <summary>
            Employee Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobAvailability.Employee">
            <summary>
            Employee Entity connected with foreign key
            </summary>
        </member>
        <member name="M:ESolve.Contracts.IJobAvailability.IsCompletelyValid">
            <summary>
            Checking if job's availability is completely valid
            </summary>
            <returns>True if job's availability is completely valid, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Contracts.IJobAvailability.SetCompletlyValidConstraints">
            <summary>
            Setting all constraints to true and checking if job's availaiblity is completely valid
            </summary>
        </member>
        <member name="T:ESolve.Contracts.IJobDtoEntity">
            <summary>
            IJobDtoEntity
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.Id">
            <summary>
            Represent Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.NoOfRequiredEmployees">
            <summary>
            Number of Job required employees
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.NoOfValidAssignedEmployees">
            <summary>
            Number of valid assigned employees 
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.NoOfInvalidAssignedEmployees">
            <summary>
            Number of inValid assigned employees 
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.JobStartDateTime">
            <summary>
            Job Date
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.JobEndDateTime">
            <summary>
            Job End Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.JobName">
            <summary>
            Represent Name of Selected Job
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.JobTypeID">
            <summary>
            Represnts JobTypeID Foreign Key in Job Entity
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IJobDtoEntity.IsCriticalTask">
            <summary>
            Critical Task
            </summary>
        </member>
        <member name="T:ESolve.Contracts.ILoggedInUser">
            <summary>
            Interface which represent Logged in user in eSolve system
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ILoggedInUser.Role">
            <summary>
            User Role
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ILoggedInUser.Username">
            <summary>
            Current User Username
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ILoggedInUser.UserID">
            <summary>
            Current User UserID
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ILoggedInUser.ProfileID">
            <summary>
            Current User ProfileID
            </summary>
        </member>
        <member name="T:ESolve.Contracts.IName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Contracts.IName.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Contracts.ISubGroup">
            <summary>
            Interface which will be implemented by SubGroup and TemplateSubGroup
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.Name">
            <summary>
            SubGroup Name
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.StartDate">
            <summary>
            SubGroup Start Date
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.EndDate">
            <summary>
            SubGroup End Date
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.SortOrder">
            <summary>
            SubGroup SortOrder
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.HideFrom">
            <summary>
            Represents Date from which we will not show SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.ScheduleID">
            <summary>
            Schedule/TemplateSchedule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.ParentGroupID">
            <summary>
            SubGroup/TemplateSubGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.LoneWorkerManager1ID">
            <summary>
            User's foreign key for lone worker manager 1
            </summary>
        </member>
        <member name="P:ESolve.Contracts.ISubGroup.LoneWorkerManager2ID">
            <summary>
            User's forign key for lone worker manager 2
            </summary>
        </member>
        <member name="T:ESolve.Controllers.AbsenceCodeController">
            <summary>
            Controller for absence codes
            </summary>
            <summary>
            Endpoints for managing Absence codes.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AbsenceCodeController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceCode})">
            <summary>
            Constructor which initalize AbsenceCodeManager
            </summary>
            <param name="repository">Repository which will be injected in AbsenceCodeManager</param>
        </member>
        <member name="M:ESolve.Controllers.AbsenceCodeController.GetAll">
            <summary>
            Get all absence codes
            </summary>
            <returns>All absence codes from database</returns>
            <response code="200">All absence codes from database See <see cref="T:ESolve.Entities.Models.AbsenceCode"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.AbsenceCodeController.GetOne(System.Int64)">
            <summary>
            Get absence code with passed id
            </summary>
            <returns>Absence code from database with passed primary key.</returns>
            <response code="200">Absence code from database with passed primary key. See <see cref="T:ESolve.Entities.Models.AbsenceCode"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.AbsenceCodeController.Update(System.Int64,ESolve.Entities.Models.AbsenceCode)">
            <summary>
            Updates existing absence code
            </summary>
            <param name="id">Absence code's primary key</param>
            <param name="absenceCode">Absence code that will be updated.</param>
            <returns>Ok if absence code is succesfully updated, bad request if not.</returns>
            <response code="200">Absence code is succesfully updated.</response>
            <response code="400">Some error has been occured during updating.</response>
        </member>
        <member name="T:ESolve.Controllers.AbsencePreferencesController">
            <summary>
            Endpoints for managing Absence Preferences
            </summary>
        </member>
        <member name="F:ESolve.Controllers.AbsencePreferencesController._absencePreferencesManager">
            <summary>
            Manager which is used for managing absences
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AbsencePreferencesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsencePreferences})">
            <summary>
            Constructor which initalize managers which are referenced in this Controller
            </summary>
            <param name="repository">Repository which will be injected in AbsencePreferencesManager</param>
        </member>
        <member name="M:ESolve.Controllers.AbsencePreferencesController.Get(System.Int64)">
            <summary>
            Get one AbsencePreferences with all included entities which are connected via foreign kies. 
            Returned AbsencePreferences is AbsencePreferences where Primary Key in Database is equal with passed id.
            </summary>
            <param name="id">Represents AbsencePreferences Primary Key in database.</param>
            <returns>AbsencePreferences if it exists or BadRequest if AbsencePreferences doesn't exists.</returns>
            <response code="200">Returns AbsencePreferences if he exists in Database. See <see cref="T:ESolve.Entities.Models.AbsencePreferences"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.AbsencesController">
            <summary>
            Endpoints for managing Absences
            </summary>
        </member>
        <member name="F:ESolve.Controllers.AbsencesController._employeeAbsenceManager">
            <summary>
            Manager which is used for managing absences
            </summary>
        </member>
        <member name="F:ESolve.Controllers.AbsencesController._absenceRequestManager">
            <summary>
            Manager which is used for managing absence requests
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AbsencesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmployeeAbsence},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceRequest})">
            <summary>
            Constructor which initalize managers which are referenced in this Controller
            </summary>
            <param name="absences">Repository which will be injected in AbsenceManager</param>
            <param name="absenceRequests">Repository which will be injected in AbsenceManager</param>
        </member>
        <member name="M:ESolve.Controllers.AbsencesController.GetAuthorisationList(ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO)">
            <summary>
            For passed AbsenceAuthirastionListFilterModelDTO <see cref="T:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO"/> for more details. Endpoint will return absences
            and absences requests for selected employee or for logged in user and all his connected employees
            </summary>
            <param name="filter">Represents AbsenceAuthirastionListFilterModelDTO filter.</param>
            <returns>Absences and absencerequests if it exists or BadRequest if doesn't exists.</returns>
            <response code="200">Returns List of absences and absence requests from Database. </response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="403">Unauthorized</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AbsencesController.GetAll(ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO)">
            <summary>
            For passed employeeID and Date range endpoint will return all employee absences from range ordered by AbsenceStart Date descending.
            </summary>
            <param name="filter">Represents LongDateTimeDTO filter.</param>
            <returns>CustomData if it exists or BadRequest if CustomData doesn't exists.</returns>
            <response code="200">Returns List of absences from Database. </response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AbsencesController.GetAbsenceStatuses">
            <summary>
            Get All Absence Statuses
            </summary>
            <returns>Absence Statuses DTO</returns>
            <response code="200">Returns AbsenceStatusesDTO if he exists in Database. See <see cref="T:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceStatusesDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AbsencesController.GetAbsenceRequestDTO(System.Int64)">
            <summary>
            Get one AbsenceDTO. 
            Returned AbsenceDTO is AbsenceRequest where Primary Key in Database is equal with passed id.
            </summary>
            <param name="id">Represents AbsenceRequest Primary Key in database.</param>
            <returns>AbsenceDTO if AbsenceRequest exists or BadRequest if AbsenceRequest doesn't exists.</returns>
            <response code="200">Returns AbsenceDTO if he exists in Database. See <see cref="T:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.AccountController">
            <summary>
            Endpoints for managing Accounts.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AccountController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Token},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.License})">
            <summary>
            Constructor which initializes all repositories needed for methods in AccountController.
            </summary>
            <param name="_accountManager">Repository which will be injected in AccountManager. <see cref="T:ESolve.Entities.DataManager.AccountManager"/></param>
            <param name="jobsRepository">Represents IRepositoryBase instance which will be casted in JobsManager. <see cref="T:ESolve.Entities.DataManager.JobManager"/></param>
            <param name="configuration">The application's configuration. <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
            <param name="employeesManager">Represents IRepositoryBase instance which will be casted in EmployeesManager. <see cref="T:ESolve.Entities.DataManager.EmployeesManager"/></param>
            <param name="userManager">Represents IRepositoryBase instance which will be casted in UserManager. <see cref="T:ESolve.Entities.DataManager.UserManager"/></param>
            <param name="licenseManager">Repository which will be injected in LicenseManager. <see cref="T:ESolve.Entities.DataManager.LicenseManager"/></param>
        </member>
        <member name="M:ESolve.Controllers.AccountController.GetApiKey(System.Int64,System.Boolean)">
            <summary>
            Endpoint which takes an ID of an User and returns an API Key for that User.
            </summary>
            <returns>API Key for the passed User.</returns>
        </member>
        <member name="M:ESolve.Controllers.AccountController.IsUsernameValid(System.String)">
            <summary>
            Endpoint which takes an username of an User and returns are the passed username and token valid.
            </summary>
            <param name="username">username of selected user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.AccountController.GetUserCount">
            <summary>
            Get user and employees which are not present in ASSO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.AccountController.GetRefreshToken">
            <summary>
            get access token 
            </summary>
            <returns></returns>
            <response code="401">You are not authorized to access this application.</response>
        </member>
        <member name="M:ESolve.Controllers.AccountController.Login(ESolve.Entities.DTOs.LoginDTO)">
            <summary>
            Login user
            </summary>
            <param name="loginDTO">Object with passed username/email and password.</param>
            <returns></returns>
            <response code="200">User logged in successfully.</response>
            <response code="400">User is not logged in.</response>
            <response code="401">You are not authorized to access this application.</response>
        </member>
        <member name="M:ESolve.Controllers.AccountController.RefreshToken(ESolve.Entities.DTOs.TokenRequestDTO)">
            <summary>
            Endpoint that refreshes (generates new) access token (JWT).
            </summary>
            <param name="tokenRequest"></param>
            <returns>Access token for requested User.</returns>
            <response code="200">Access token successfully created.</response>
            <response code="400">Incorrect grant type specified or no body provided.</response>
            <response code="401">Unauthorized access.</response>
        </member>
        <member name="M:ESolve.Controllers.AccountController.SwitchAccounts">
            <summary>
            Endpoint that generates new access token for User's linked account.
            </summary>
            <returns></returns>
            <response code="200">Access token successfully created.</response>
            <response code="400">User doesn't have a Linked Account.</response>
            <response code="401">Unauthorized.</response>
        </member>
        <member name="M:ESolve.Controllers.AccountController.ResetPassword(ESolve.Entities.DTOs.LoginDTO,System.Boolean,System.Int64,System.Boolean)">
            <summary>
            Reset password
            </summary>
            <param name="loginDTO">Object with login data.</param>
            <param name="forBulk"></param>
            <param name="sendForMobile"></param>
            <param name="LoggedInUserId"></param>
            <returns></returns>
            <response code="200">User's password successfully updated.</response>
            <response code="400">User's password not successfully updated.</response>
        </member>
        <member name="M:ESolve.Controllers.AccountController.Logout">
            <summary>
            Endpoint which allows application users to logout from the system. Logout will
            prevent using the application with any of the past JWTs.
            </summary>
            <returns>Unauthorized if a User isn't authorized, Ok if Logout was successful and BadRequest otherwise.</returns>
        </member>
        <member name="M:ESolve.Controllers.AccountController.IsEmailUniqueForSuperAdmin(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Method to check that the email id which is going to add or update for super admin user is unique or not 
            </summary>
            <param name="filter">Filter posses Content which represents new Email address for super admin.</param>
            <returns>Indicator is passed Email available for passed EmployeeID.</returns>
            <response code="200">Value that represents if email is in use or not</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occurred.</response>
        </member>
        <member name="T:ESolve.Controllers.AdvancedSSOController">
            <summary>
            Endpoints for managing Advanced SSO.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AdvancedSSOController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AdvancedSSO},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ASSOMigrationDetails},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initializes all repositories needed for methods in AdvancedSSOController.
            </summary>
            <param name="_advancedSSOManager">Repository which will be injected in AdvancedSSOManager. <see cref="T:ESolve.Entities.DataManager.AdvancedSSOManager"/></param>
            <param name="assoMigrationDetailsManager">Repository which will be injected in ASSOMigrationDetailsManager.</param>
        </member>
        <member name="M:ESolve.Controllers.AdvancedSSOController.Get">
            <summary>
            Endpoint which allows application users to update Advanced SSO details
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AdvancedSSOController.GetMigrationRecordActiveCount">
            <summary>
            Endpoint which return count of active migration records
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AdvancedSSOController.GetMigrationDetailsAsExcel">
            <summary>
            Endpoint which allows application users to update Advanced SSO details
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AdvancedSSOController.GetOrganizationRef">
            <summary>
            Endpoint which get sso Login Details. This details require before user login so no authorization required for this.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AdvancedSSOController.Update(ESolve.Entities.Models.AdvancedSSO)">
            <summary>
            Endpoint which allows application users to update Advanced SSO details
            </summary>
        </member>
        <member name="T:ESolve.Controllers.AgencyController">
            <summary>
            Endpoints for managing agency
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Agency},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Template},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job})">
            <summary>
            Constructor which initialize all repositories needed for methods in AgencyController 
            </summary>
            <param name="assignAgencyManager">Repository which will be injected in AssignAgencyManager. <see cref="T:ESolve.Entities.DataManager.AssignAgencyManager"/>Manager for assign agency</param>
            <param name="templateManager">Repository which will be injected in AssignAgencyManager. <see cref="T:ESolve.Entities.DataManager.TemplateManager"/>Manager for templates</param>
            <param name="jobManager">Repository which will be injected in AssignAgencyManager. Manager for jobs</param>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.GetAll(ESolve.Entities.Filters.AgencyFilterModel)">
            <summary>
            Get tables for agency
            </summary>
            <param name="agencyFilterModel">AgencyFilterModel object with info about search and pagination</param>
            <returns>Page collection response with IdNamDropDown object that represents agency or reason to cover</returns>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.GetById(System.Boolean,System.Int64)">
            <summary>
            Get agency or agency reason for cover 
            </summary>
            <param name="isAgency">Is agency</param>
            <param name="id">Primary key of agency or agency rason for cover</param>
            <returns>Ok with result</returns>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.Search(ESolve.Entities.DTOs.AgencySearchDTO)">
            <summary>
            Getting list of items based on passed search info in AgencySearchDTO object
            </summary>
            <param name="agencySearchDTO">AgencySearchDTO object</param>
            <returns>List of IdNameDropDownModel objects</returns>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.IsNameUnique(System.Boolean,ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Endpoint for checking if name is already in use.
            </summary>
            <param name="isAgency">Flag that indicates that user is looking for agencies or agency reasons for cover.</param>
            <param name="idStringContentFilterModel">IdStringContentFilterModel object with Id and Content</param>
            <returns>Ok with result.</returns>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.GetComboValues">
            <summary>
            Getting  all agencies and agency reasons for cover
            </summary>
            <returns>Ok with object that contains two list. The first list represents Agencies and another one represents Agency Reasons For Cover.</returns>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.Post(System.Boolean,ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Add new agency or agency reason to cover 
            </summary>
            <param name="idNameDropDownModel">IdNameDropDownModel</param>
            <param name="isAgency">Flag if user is adding new agency or new agency reason for cover</param>
            <returns>Ok if agency or agency reason for cover is added, bad request if something went wrong.</returns>
            <response code="200">Returns ok if agency or agency reason for cover is succuessfully added.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.AssignAgency(ESolve.Entities.DTOs.AssignAgencyDTO)">
            <summary>
            Assign agency
            </summary>
            <param name="assignAgencyDTO">AssignAgencyDTO object with information about assigning agency on the passed job.</param>
            <returns>Ok if agency is successfully assigned on passed job or template job.</returns>
            <response code="200">Returns ok if agency is successfully assigned.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.Put(System.Boolean,ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Update agency or agency reason to cover 
            </summary>
            <param name="idNameDropDownModel">IdNameDropDownModel</param>
            <param name="isAgency">Flag if user is adding new agency or new agency reason for cover</param>
            <returns>Ok if agency or agency reason for cover is updated, bad request if something went wrong.</returns>
            <response code="200">Returns ok if trade offer is succuessfully added.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.Delete(System.Boolean,System.Int64)">
            <summary>
            Endpoint for deleting agency or agency reason for cover
            </summary>
            <param name="isAgency">Flag that inidcated if user is deleting agency of agency reason for cover</param>
            <param name="id">Agency or agency reason for cover primary key</param>
            <returns>Ok or bad request result.</returns>
            <response code="200">Entity is removed.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Return approprisate message if entity for deleting is not found.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AgencyController.Unassign(System.Boolean,System.Int64)">
            <summary>
            Unassigning assigment from agency
            </summary>
            <param name="isTemplate">Indicator if unassign action is on template job or normal job</param>
            <param name="id">AgencyTemplateJobAssigment or AgencyJobAssigment's primary key</param>
            <returns>Ok or bad request result.</returns>
            <response code="200">Entity is removed.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Return approprisate message if entity for deleting is not found.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.Absence_CodesController">
            <summary>
            Manage absence codes used for employee absences
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.Absence_CodesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceCode})">
            <summary>
            Constructor which initalize AbsenceCodeManager
            </summary>
            <param name="repository">Repository which will be injected in AbsenceCodeManager</param>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.Absence_CodesController.ViewAbsenceCode(System.String)">
            <summary>
            View absence code
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.Absence_CodesController.Add(ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeCreate)">
            <summary>
            Create absence-code
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.Absence_CodesController.UpdateAbsenceCode(System.String,ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeUpdate)">
            <summary>
            Update absence code
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.Absence_CodesController.DeleteAbsenceCode(System.String)">
            <summary>
            Delete absence code
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.BaseController.ApiController">
            <summary>
            Base controller for Integration endpoints
            </summary>
        </member>
        <member name="P:ESolve.Controllers.ApiIntegrationControllers.BaseController.ApiController.LoggedInUser">
            <summary>
            Represents User who accessed an Integration endpoint
            </summary>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.EmployeesController">
            <summary>
            Data sets for lookup fields that are used in employees
            </summary>
        </member>
        <member name="F:ESolve.Controllers.ApiIntegrationControllers.EmployeesController._employeesManager">
            <summary>
            Manager for accessing employees data
            </summary>
        </member>
        <member name="F:ESolve.Controllers.ApiIntegrationControllers.EmployeesController._absenceRequestManager">
            <summary>
            Manager which is used for managing absence requests
            </summary>
        </member>
        <member name="F:ESolve.Controllers.ApiIntegrationControllers.EmployeesController._absenceNotificationManager">
            <summary>
            Manager which is used for managing Employee.
            </summary>
        </member>
        <member name="F:ESolve.Controllers.ApiIntegrationControllers.EmployeesController._userAbsenceManager">
            <summary>
            Manager which is used for managing user absences
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.NotificationType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceRequest},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.UserAbsence},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SkillMatrix},Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.License})">
            <summary>
            Default constructor
            </summary>
            <param name="employeesRepository"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="jobTypeManager"></param>
            <param name="templateJobAvailabilityManager"></param>
            <param name="notificationsRepository"></param>
            <param name="tradesManager"></param>
            <param name="serviceProvider"></param>
            <param name="absenceRequests"></param>
            <param name="userAbsenceManager"></param>
            <param name="skillMatrixRepository"></param>
            <param name="configuration"></param>
            <param name="licenseManager"></param>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.ViewEmployee(System.String)">
            <summary>
            View employee
            </summary>
            <param name="employeeId">Employee ID</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.GetAbsenceRequestDTO(System.String)">
            <summary>
            This is unused method. We need it for POST Request in order to return location of created absence request.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.CreateEmployee(ESolve.DataIntegrations.Models.Employees.EmployeeCreate)">
            <summary>
            Create employee
            </summary>
            <param name="employee">Create new employee</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.CreateEmployeeAbsence(System.String,ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceCreate)">
            <summary>
            Create employee absence
            </summary>
            <param name="employeeId"></param>
            <param name="employeeAbsenceCreate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.AssignSkills(System.String,System.Collections.Generic.List{ESolve.DataIntegrations.Models.Skills.EmployeeSkills_inner})">
            <summary>
            Assign skills to employee
            </summary>
            <param name="employeeId"></param>
            <param name="employeeSkills"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.UnassignSkills(System.String,System.Collections.Generic.List{ESolve.DataIntegrations.Models.Skills.EmployeeSkills_inner})">
            <summary>
            Unassign skills to employee
            </summary>
            <param name="employeeId"></param>
            <param name="employeeSkills"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.UpdateEmployee(System.String,ESolve.DataIntegrations.Models.Employees.EmployeeCreate)">
            <summary>
            Update employee
            </summary>
            <param name="employeeId">Employee ID</param>
            <param name="employee"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.UpdateEmployeeAbsence(System.String,System.String,ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceUpdate)">
            <summary>
            Update employee absence
            </summary>
            <param name="employeeId"></param>
            <param name="absenceId"></param>
            <param name="employeeAbsenceUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.DeleteEmployee(System.String)">
            <summary>
            Delete employee
            </summary>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.EmployeesController.DeleteEmployeeAbsence(System.String,System.String)">
            <summary>
            Delete employee absence
            </summary>
            <param name="employeeId"></param>
            <param name="absenceId"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.JobTypesController">
            <summary>
            Requests for job types with an external system
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.JobTypesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType})">
            <summary>
            Constructor which initialize Job type manager
            </summary>
            <param name="jobTypeManager"></param>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.JobTypesController.GetAllJobTypes(ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncSearchModelBase)">
            <summary>
            List job types
            </summary>        
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.LicenceController">
            <summary>
            Endpoints for managing Licenses.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.LicenceController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.License},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ConfigSettings},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AuditTrail})">
            <summary>
            Constructor which initalize LicenseManager
            </summary>
            <param name="licenseManager">Repository which will be injected in LicenseManager</param>
            <param name="configSettingsManager">Repository which will be injected in ConfigSettingsManager</param>
            <param name="auditTrailManager">Repository which will be injected in AuditTrailManager</param>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.LicenceController.Put(ESolve.DataIntegrations.Models.License.LicenseUpdate)">
            <summary>
            Endpoint for update licence information
            See <see cref="T:ESolve.Entities.Models.License"/> for model details.
            </summary>
            <returns>Ok if license data is successfully updated.</returns>
            <response code="204">No Content</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.LookupsController">
            <summary>
            Data sets for lookup fields that are used in employees
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.LookupsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initalize ClassManager
            </summary>
            <param name="repository">Repository which will be injected in ClassManager</param>
            <param name="serviceProvider"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.LookupsController.Get(System.String,System.String)">
            <summary>
            View lookup item
            </summary>
            <param name="lookupName">Lookup name</param>
            <param name="lookupItemId">Lookup item ID</param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not Found</response>
            <response code="415">Unsupported Media Type</response>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.LookupsController.Create(System.String,ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Create lookup item
            </summary>
            <param name="lookupName">Name of Lookup</param>
            <param name="lookupItem">Item which will be stored</param>
            <returns></returns>
            <response code="201">Created</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not Found</response>
            <response code="415">Unsupported Media Type</response>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.LookupsController.Update(System.String,System.String,ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Update lookup item
            </summary>
            <param name="lookupName">Lookup identifying name</param>
            <param name="lookupItemId">Lookup item ID</param>
            <param name="lookupItem">Lookup item name</param>
            <returns></returns>
            <response code="204">No content</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not Found</response>
            <response code="415">Unsupported Media Type</response>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.LookupsController.Delete(System.String,System.String)">
            <summary>
            Delete lookup item
            </summary>
            <param name="lookupName">Lookup identifying name</param>
            <param name="lookupItemId">Lookup item ID</param>
            <returns></returns>
            <response code="204">No content</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden</response>
            <response code="404">Not Found</response>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.ScheduleSyncRequestsController">
            <summary>
            Requests for schedule synchronization with an external system
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ScheduleSyncRequestsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Sync},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleSyncRequestResult})">
            <summary>
            Constructor which initialize Sync manager
            </summary>
            <param name="syncRepository"></param>
            <param name="repositoryBase"></param>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ScheduleSyncRequestsController.GetListScheduleSyncRequests(ESolve.DataIntegrations.Models.CursorPaggination.ScheduleSync.ScheduleSyncSearchModel)">
            <summary>
            List schedule sync requests
            </summary>
            <param name="searchModel">model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ScheduleSyncRequestsController.GetListOfEmployeeJobAssigments(ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncSearchModelBase,System.String)">
            <summary>
            List assignments in schedule sync request
            </summary>
            <param name="searchModel">model</param>
            <param name="scheduleSyncRequestId">model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ScheduleSyncRequestsController.CreateScheduleSyncRequestResult(System.String,ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate)">
            <summary>
            Create schedule sync request result
            </summary>
            <param name="scheduleSyncRequestId"></param>
            <param name="scheduleSyncRequestResultCreate">Object which will be stored</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.ShiftsController">
            <summary>
            Manage shift definitions used for jobs
            </summary>
        </member>
        <member name="F:ESolve.Controllers.ApiIntegrationControllers.ShiftsController._shiftManager">
            <summary>
            Manager for shifts
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ShiftsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Shift},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJob},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Template},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType})">
            <summary>
            Constructor which initialize ShiftManager
            </summary>
            <param name="shiftManager">Repository which will be injected in ShiftManager</param>
            <param name="jobAvailabilityManager"></param>
            <param name="templateJobManager"></param>
            <param name="templateManager"></param>
            <param name="jobTypeManager"></param>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ShiftsController.ViewShift(System.String)">
            <summary>
            View Shift
            </summary>
            <param name="shiftId">a</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ShiftsController.CreateShift(ESolve.DataIntegrations.Models.Shift.ShiftCreate)">
            <summary>
            Create Shift
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ShiftsController.UpdateShift(ESolve.DataIntegrations.Models.Shift.ShiftCreate,System.String)">
            <summary>
            Update Shift
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.ShiftsController.DeleteShift(System.String)">
            <summary>
            Delete shift
            </summary>
            <param name="shiftId"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.ApiIntegrationControllers.SkillsController">
             <summary>
            
             </summary>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.SkillsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SkillCode},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AuditTrail})">
            <summary>
            Constructor which initialize ShiftManager
            </summary>
            <param name="repository">Repository which will be injected in SkillCodeManager</param>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.SkillsController.ViewSkillByID(System.String)">
            <summary>
            View skill
            </summary>
            <param name="skillId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.SkillsController.CreateSkill(ESolve.DataIntegrations.Models.Skills.SkillCreate)">
            <summary>
            Create skill
            </summary>
            <param name="skillCreate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.SkillsController.Update(ESolve.DataIntegrations.Models.Skills.SkillUpdate,System.String)">
            <summary>
            Update Skill
            </summary>
            <param name="skillUpdate"></param>
            <param name="skillId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ApiIntegrationControllers.SkillsController.Delete(System.String)">
            <summary>
            Delete skill
            </summary>
            <param name="skillId">Skill ID</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.AttendanceConfirmationController">
            <summary>
            Endpoints for managing attendance confirmation alerts
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AttendanceConfirmationController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AttendanceConfirmation},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="attendanceConfirmationManager">Repository which will be casted into AttendanceConfrimationAlertManager object.</param>
            <param name="configuration">Configuration</param>
        </member>
        <member name="M:ESolve.Controllers.AttendanceConfirmationController.GetAllWithFiltersAndPagination(ESolve.Entities.Filters.AttendanceConfirmationFilterModel)">
            <summary>
            Endpoint for getting attendance confirmations
            </summary>
            <param name="filter">Filter for getting attendance confirmations</param>
            <returns>PagedCollectionResponse of AttendanceConfirmationDTO</returns>
            s<response code="200">Returns ok.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AttendanceConfirmationController.Put(System.Int64,System.Boolean)">
            <summary>
            Endpoint for employee's responding on attendance confirmation alert.
            </summary>
            <param name="answer">Employee's answer on the attendance confirmation alert.</param>
            <param name="id">Job that needs attendance confirmation</param>
            <returns>Ok result.</returns>
            <response code="200">Returns ok.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.AuditTrailController">
            <summary>
            Endpoint for managing Audit trail
            </summary>
        </member>
        <member name="F:ESolve.Controllers.AuditTrailController._auditTrailRepository">
            <summary>
            Manager for Audit Trail
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AuditTrailController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AuditTrail})">
            <summary>
            Constructor which initialize Audit Trail manager
            </summary>
            <param name="auditTrailRepository"></param>
        </member>
        <member name="M:ESolve.Controllers.AuditTrailController.GetAll(ESolve.Entities.Filters.AuditTrailFilterModel)">
            <summary>
            Get audit trail
            </summary>
            <param name="filter">Filter attributes[SearchTerm, NextPage, PreviousPage etc. etc.]. See <see cref="T:ESolve.Entities.Filters.AuditTrailFilterModel"/> for details.</param>
            <returns>Pagged collection of AuditTrailDTO. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/>. See <see cref="T:ESolve.Entities.DTOs.AuditTrailDTO"/></returns>
            <response code="200">Ok</response>
            <response code="400">Something went wrong</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AuditTrailController.GetEmployeePageComboValues(ESolve.Entities.Pagination.SampleFilterModel)">
            <summary>
            Get function name based on passed search parameter
            </summary>
            <param name="filter"></param>
            <returns>List of functions</returns>
            <response code="200">Ok</response>
            <response code="400">Something went wrong</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.AutoSolveController">
            <summary>
            Controller for autosolve
            </summary>
        </member>
        <member name="M:ESolve.Controllers.AutoSolveController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Ranking},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="jobAvailabilityManager">Manager for job availabilities.</param>
            <param name="employeeManager">Manager for employees.</param>
            <param name="rankingManager">Manager for rankings.</param>
            <param name="subgroupManager">MManager for subgroups</param>
        </member>
        <member name="M:ESolve.Controllers.AutoSolveController.AutoSolver(ESolve.Entities.Filters.SubGroupCalendarFilterModel)">
            <summary>
            Auto Solve
            </summary>
            <param name="calendarViewFilterModel"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.AutoSolveTimeController">
            <summary>
            Endpoints for managing AutoSolve time
            </summary>
            
        </member>
        <member name="M:ESolve.Controllers.AutoSolveTimeController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AutoSolveTime})">
            <summary>
            Constructor which initalize AutoSolveManager
            </summary>
            <param name="repository">Repository which will be injected in AutoSolveManager</param>
        </member>
        <member name="M:ESolve.Controllers.AutoSolveTimeController.Get">
            <summary>
            This Endpoint Return  AutoSolveTime From Database table tblAutoSolveTime.
            See <see cref="T:ESolve.Entities.Models.AutoSolveTime"/> for model details.
            </summary>
            <returns>AutoSolve Time</returns>
            <response code="200">Ok with Autosolve time</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.AutoSolveTimeController.Update(System.Int32)">
            <summary>
            Update auto solve time to passed time
            </summary>
            <param name="time"></param>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during updating auto solve time.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.BaseController.ESolveBaseController">
            <summary>
            Base Controller class which all other controllers,
            except for controllers which don't need LoggedIn User,
            will inherit.
            </summary>
        </member>
        <member name="P:ESolve.Controllers.BaseController.ESolveBaseController.LoggedInBaseUser">
            <summary>
            Represents currently logged in user which all derived classes
            will have access to.
            </summary>
        </member>
        <member name="T:ESolve.Controllers.ClassesController">
            <summary>
            Endpoints for managing Classes.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ClassesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Class})">
            <summary>
            Constructor which initalize ClassManager
            </summary>
            <param name="repository">Repository which will be injected in ClassManager</param>
        </member>
        <member name="M:ESolve.Controllers.ClassesController.GetAll">
            <summary>
            This Endpoint Return all Classes From Database table tblClasses.
            See <see cref="T:ESolve.Entities.Models.Class"/> for model details.
            </summary>
            <returns>IEnumerable collection of Classes.</returns>
            <response code="200">IEnumerable collection of Classes.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ClassesController.GetIdNameList">
            <summary>
            This endpoint return combovalues from tblClasses.
            See <see cref="T:ESolve.Entities.Models.Class"/> for model details.
            </summary>
            <returns>List of classes combovalues.</returns>
            <response code="200">IEnumerable collection of Classes.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ClassesController.Add(ESolve.Entities.Models.Class[])">
            <summary>
            This method inserts passed array of Classes into Database table tblClasses.
            </summary>
            <param name="classes">Array of Class objects which will be stored in Database.</param>
            <returns>Returns added Classes.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new Classes.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ClassesController.Update(ESolve.Entities.Models.Class[])">
            <summary>
            This method update passed Classes objects in Database table tblClasses, with values passed in array of Class objects.
            If passed classID does not exist, new row will be created.
            </summary>
            <param name="classes">Array of classes objects which contains new values.</param>
            <returns>Ok result with updated Colass objects, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new Classes.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ClassesController.Delete(System.Int64)">
            <summary>
            Method removes Class object from tblClasses and from all connected tables where ClassID is required.
            </summary>
            <param name="id">Represents primary key of Class which will be deleted.</param>
            <returns>Ok if Class is deleted or BadRequest if something went wrong.</returns>
            <response code="200">Class has been removed.</response>
            <response code="400">Some error has been occured during deleting existing Class.</response>
            <response code="404">Clas with passed Id doesn't exists in Database table tblClasses.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ClassesController.IsLocationNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if name of class is available.
            If we add new Location, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on ClassID.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is ClassID and Class Name</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="T:ESolve.Controllers.ConfigSettingsController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ConfigSettingsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ConfigSettings},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configSettingsManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.ConfigSettingsController.GetAllConfigSettings">
            <summary>
            Get all config seetings details
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ConfigSettingsController.GetConfigSettings(System.String)">
            <summary>
            Get config seeting detail
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ConfigSettingsController.AddConfigSettings(System.Collections.Generic.List{ESolve.Entities.Models.ConfigSettings})">
            <summary>
            Add config seetings details
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ConfigSettingsController.UpdateConfigSettings(System.Collections.Generic.List{ESolve.Entities.Models.ConfigSettings})">
            <summary>
            Update config seetings details
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.ConstraintsController">
            <summary>
            Endpoints for managing Constraints
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Constraint},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initalize all DataManagers
            </summary>
            <param name="repository">Repository which will be injected in ConstraintManager</param>
            <param name="jobAvailability">Repository which will be injected in JobAvailabilityManager</param>
            <param name="jobTypeManager">Repository which will be injected in JobTypeManager</param>
            <param name="scheduleManager">Repository which will be injected in ScheduleManager</param>
            <param name="serviceProvider"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.Apply(System.Int64)">
            <summary>
            Apply MOCK
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.GetAllForSchedule(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Get All Schedule constraints. See <see cref="T:ESolve.Entities.DTOs.ConstraintListDTO"/> for model details.
            All Schedule Constraints are in next sort order : active constrains above inactive ones, then sort by constraint type, then constraint name
            </summary>
            <param name="scheduleSearchModel"></param>
            <returns></returns>
            <response code="200">Array of Constrains.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.GetComboValues">
            <summary>
            This method returns all Constraint rules which are in Database.
            </summary>
            <returns>Array of ConstraintRules sorted by Name. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for details.</returns>
            <response code="200">Array of ConstraintRules sorted by Name.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.GetFormForSelectedConstraintRule(ESolve.Entities.Filters.ScheduleConstraintFilterModel)">
            <summary>
            For Selected Constraint Rule it returns form.
            </summary>
            <param name="ruleFormFilter">Constraint Rule ID</param>
            <returns></returns>
            <response code="200">Form With Inital Data.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.IsNameUnique(ESolve.Entities.Filters.ConstraintNameUniqueFilterModel)">
            <summary>
            For passed Schedule Id method check is passed Name occupied
            </summary>
            <param name="filter">Model with all needed parameters. See <see cref="T:ESolve.ActionFilters.Get.ValidateConstraintRuleFormAttributes"/> for model details. </param>
            <returns>Ok if entered name is available, Created if it occupied.</returns>
            <response code="200">Passed name is fre to use in passed schedule.</response>
            <response code="201">Passed Name is occupied for selected schedule.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.Add(ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            For passed form fileds method will create constraint and store it in database
            </summary>
            <param name="form"></param>
            <returns></returns>
            <response code="201">Passed Constraint is Sucessfully saved.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.Update(System.Int64)">
            <summary>
            Based on passed Constraint Id method changes IsConstraintActive Flag in Database and returns all Schedule Constraints.
            Method will prevent setting constraint Not Already Assigned on Inactive value.
            </summary>
            <param name="id">Constraint Primary Key</param>
            <returns>List of all Constraints if Action is sucessfull, otherwise BadRequest[without message]</returns>
            <response code="200">Constraint is updated.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.Update(ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            For passed Constraint Form we will generate constraint find it in database and update values
            </summary>
            <param name="form"></param>
            <returns></returns>
            <response code="200">Constraint is updated.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ConstraintsController.Delete(System.Int64)">
            <summary>
            Removes passed constraint if it is InActive.
            </summary>
            <returns></returns>
            <response code="200">Constraint is sucessfully deleted.</response>
            <response code="201">Constraint can't be deleted becouse it is Active.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.CostCodesController">
            <summary>
            Endpoints for managing CostCodes.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.CostCodesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.CostCode})">
            <summary>
            Constructor which initalize CostCodeManager
            </summary>
            <param name="repository">Repository which will be injected in CostCodeManager</param>
        </member>
        <member name="M:ESolve.Controllers.CostCodesController.GetAll">
            <summary>
            This Endpoint Return all CostCodes From Database table tblCostCodes.
            See <see cref="T:ESolve.Entities.Models.CostCode"/> for model details.
            </summary>
            <returns>IEnumerable collection of CostCodes.</returns>
            <response code="200">IEnumerable collection of CostCodes.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CostCodesController.GetIdNameList">
            <summary>
            This endpoint return combovalues from tblCostCodes.
            See <see cref="T:ESolve.Entities.Models.CostCode"/> for model details.
            </summary>
            <returns>List of costCodes combovalues.</returns>
            <response code="200">IEnumerable collection of CostCode.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CostCodesController.Add(ESolve.Entities.Models.CostCode[])">
            <summary>
            This method inserts passed array of CostCodes into Database table tblCostCodes.
            </summary>
            <param name="costCodes">Array of CostCode objects which will be stored in Database.</param>
            <returns>Returns added CostCodes.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new CostCodes.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CostCodesController.Update(ESolve.Entities.Models.CostCode[])">
            <summary>
            This method update passed CostCode objects in Database table tblCostCodes, with values passed in array of CostCode objects.
            If passed costCostID does not exist, new row will be created.
            </summary>
            <param name="costCodes">Array of costCodes objects which contains new values.</param>
            <returns>Ok result with updated costCodes objects, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new CostCodes.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CostCodesController.Delete(System.Int64)">
            <summary>
            Method removes CostCode object from tblCostCodes and from all connected tables where CostCodeID is required.
            </summary>
            <param name="id">Represents id of CostCode which will be deleted.</param>
            <returns>Ok if CostCode is deleted or BadRequest if something went wrong.</returns>
            <response code="200">CostCode has been removed.</response>
            <response code="400">Some error has been occured during deleting existing CostCode.</response>
            <response code="404">CostCode with passed Id doesn't exists in Database table tblCostCode.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CostCodesController.IsLocationNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if name of cost code is available.
            If we add new Cost code, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on CostCodeID.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is CostCodeID and CostCode Name</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="T:ESolve.Controllers.CustomDataController">
            <summary>
            Endpoints for managing CustomData.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.CustomData})">
            <summary>
            Constructor which initialize CustomData Manager.
            </summary>
            <param name="customDataRepository">Represents IRepositoryBase instance which will be casted in CustomDataManager</param>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.GetAll">
            <summary>
            Gets all CustomData from Database. Response is array of CustomDataListDTO.
            </summary>
            <returns>Array of all CustomData in DataBase sorted by CustomData Name</returns>
            <response code="200">Returns all CustomDatas from Database. See <see cref="T:ESolve.Entities.DTOs.CustomDataListDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.Get(System.Int64)">
            <summary>
            Get one CustomData with all included entities which are connected via foreign kies. 
            Returned CustomData is CustomData where Primary Key in Database is equal with passed id.
            </summary>
            <param name="id">Represents CustomData Primary Key in database.</param>
            <returns>CustomData if it exists or BadRequest if CustomData doesn't exists.</returns>
            <response code="200">Returns CustomData if he exists in Database. See <see cref="T:ESolve.Entities.Models.CustomData"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.GetIdNameList">
            <summary>
            Return all custom datas from database 
            </summary>
            <returns>List of CustomDataDTOs</returns>
            <response code="200">Returns All CustomDatas</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.IsCustomDataAvailableForDelete(System.Int64)">
            <summary>
            For passed CustomData Id we check is those Id referenced in any connected table as foreign key. 
            If it is it isn't availbel for delete, otherwise it is.
            </summary>
            <param name="id">CustomData Primary Key</param>
            <returns>Indicator is CustomData available for delete.</returns>
            <response code="200">CustomData is available for delete.</response>
            <response code="201">CustomData is NOT available for delete.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Passed CustomDataID doesn't exists in database</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.IsNameUnique(ESolve.Entities.Filters.LongStringFilter)">
            <summary>
            Method check is name occupied from another CustomDatas. 
            We send CustomData Id and Name which we want to check. 
            If we adding new CustomData without id, we set Id tp 0.
            </summary>
            <param name="filter">Filter posses Id which represents CustomDataID and Content which represents new Name.</param>
            <returns>Indicator is passed Name available for passed CustomDataID.</returns>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.Add(ESolve.Entities.DTOs.CustomDataAddEditDTO)">
            <summary>
            Inserts passed CustomData object in tblCustomDatas.
            </summary>
            <param name="customDataDTO">Represent's CustomData object which will be stored in Database. See <see cref="T:ESolve.Entities.DTOs.CustomDataAddEditDTO"/> for model details.</param>
            <returns>Object if sucessfully created, or appropiate message if it is not.</returns>
            <response code="201">CustomData and Link to him in Response Header [Location propertie].</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.Update(ESolve.Entities.DTOs.CustomDataAddEditDTO)">
            <summary>
            Updates passed CustomData values. If Custom data is somewhere assigned, and we want to change type of custom data 
            method will not allow that.
            </summary>
            <param name="customDataDTO">CustomData with new values</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.CustomDataController.Delete(System.Int64)">
            <summary>
            For passed Id method will find CustomData in Database and delete it. Also all connected entities will be removed
            </summary>
            <param name="id">CustomData Primary Key</param>
            <returns>Ok if action was sucessfull, otherwise BadRequest</returns>
            <response code="200">CustomData sucessfully deleted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Passed CustomDataID doesn't exists in database.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.CustomDataLookupsController">
            <summary>
            Endpoints for managing CustomDataLookups
            </summary>
        </member>
        <member name="M:ESolve.Controllers.CustomDataLookupsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.CustomDataLookup})">
            <summary>
            Constructor which initialize CustomDataLookupManager.
            </summary>
            <param name="repository">Represents IRepositoryBase instance which will be casted in CustomDataLookupManager</param>
        </member>
        <member name="M:ESolve.Controllers.CustomDataLookupsController.GetByCustomDatasID(System.Int64)">
            <summary>
            This endpoint returns all CustomDataLookup items from Database where CustomDataID is equal with passed value.
            </summary>
            <param name="id">CustomData Primary key. For this value we want to get CustomDataLookups</param>
            <returns>List of CustomDataLookup Items</returns>
            <response code="200">Array Of CustomDataLookup items.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataLookupsController.Get(System.Int64)">
            <summary>
            Gets CustomDataLookup object from Database based on passed PrimaryKey.
            </summary>
            <param name="id">CustomDataLookup Primary Key</param>
            <returns>Object if exists otherwise some other message</returns>
            <response code="200">Returns CustomDataLookup if he exists in Database. See <see cref="T:ESolve.Entities.Models.CustomDataLookup"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Passed CustomDataLookupID doesn't exists in Database.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataLookupsController.IsCustomDataLookupNameAvailable(ESolve.Entities.Filters.CustomDataLookupFilterModel)">
            <summary>
            Method check is Name occupied from another CustomDataLookup. 
            We send CustomDataID and Name which we want to check. 
            If we adding new CustomDatalookup without id, we set Id to 0.
            </summary>
            <param name="filter">Filter poses CustomDataLookupId, CustomDataID and CustomDatalookup Name. See <see cref="T:ESolve.Entities.Filters.CustomDataLookupFilterModel"/> for details</param>
            <returns>Indicator is passed Name available for passed CustomDataLookup.</returns>
            <response code="200">Name is available.</response>
            <response code="201">Name has been occupied.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataLookupsController.Add(ESolve.Entities.Models.CustomDataLookup)">
            <summary>
            This method stores passed CustomDataLookup in tblCustomDataLookups table.
            </summary>
            <param name="customDataLookup">CustomDataLookup object which will be sotred in Database.</param>
            <returns>201 if action is sucessfull, otherwise some other code.</returns>
            <response code="201">CustomData sucessfully inserted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataLookupsController.Update(ESolve.Entities.Models.CustomDataLookup)">
            <summary>
            CustomDataLookup object with new name will be updated in Database.
            </summary>
            <param name="customDataLookup">CustomDataLookup object with new values.</param>
            <returns></returns>
            <response code="200">Returns CustomDataLookup with updated values. See <see cref="T:ESolve.Entities.Models.CustomDataLookup"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Passed CustomDataLookupID doesn't exists in Database.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.CustomDataLookupsController.Delete(System.Int64)">
            <summary>
            For passed Id method will find CustomDataLookup in Database and delete it.
            </summary>
            <param name="id">CustomDataLookup Primary Key</param>
            <returns>Ok if action was sucessfull, otherwise BadRequest</returns>
            <response code="200">CustomDataLookup sucessfully deleted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Passed CustomDataLookupID doesn't exists in database.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.CustomDataTypesController">
            <summary>
            Endpoints for managing CustomDataTypes
            </summary>
        </member>
        <member name="M:ESolve.Controllers.CustomDataTypesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.CustomDataType})">
            <summary>
            Constructor which initialize CustomDataTypesManager.
            </summary>
            <param name="repository">Represents IRepositoryBase instance which will be casted in CustomDataTypesManager</param>
        </member>
        <member name="M:ESolve.Controllers.CustomDataTypesController.GetIdNameList">
            <summary>
            Returns all CustomDataTypes in Id and Name structure. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for details.
            </summary>
            <returns>All CustomDataTypes in Id and Name structure</returns>
            <response code="200">Returns All CustomDataTypes in Id and Name structure</response>
        </member>
        <member name="T:ESolve.Controllers.DashboardController">
            <summary>
            Currently just a placeholder controller
            </summary>
        </member>
        <member name="F:ESolve.Controllers.DashboardController._userManager">
            <summary>
            UserManager which is used for operations on manager entities
            </summary>
        </member>
        <member name="F:ESolve.Controllers.DashboardController._employeesManager">
            <summary>
            EmployeesManager which is used for operations on employee entities
            </summary>
        </member>
        <member name="M:ESolve.Controllers.DashboardController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee})">
            <summary>
            Constructor that initializes Dashboard controller.
            </summary>
            <param name="userManager"></param>
            <param name="employeeManager"></param>
        </member>
        <member name="M:ESolve.Controllers.DashboardController.DashboardAsync">
            <summary>
            Currently just a placeholder method
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.DashboardController.Connection(System.String,System.Int64,System.Boolean)">
            <summary>
            EndPoint for saving connectionId for signalR
            </summary>
            <param name="connectionId">Connection id</param>
            <param name="id">User or employee id</param>
            <param name="isUser">Whether is a user or an employee</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.DepartmentsController">
            <summary>
            Endpoints for managing Departments
            </summary>
        </member>
        <member name="M:ESolve.Controllers.DepartmentsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Department})">
            <summary>
            Constructor which initalize DeparmentManager
            </summary>
            <param name="repository">Repository which will be injected in DepartmentManager</param>
        </member>
        <member name="M:ESolve.Controllers.DepartmentsController.GetAll">
            <summary>
            This Endpoint Return all Departments From Database table tblDepartments.
            See <see cref="T:ESolve.Entities.Models.Department"/> for model details.
            </summary>
            <returns>IEnumerable collection of Departments.</returns>
            <response code="200">IEnumerable collection of Departments.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DepartmentsController.GetIdNameList">
            <summary>
            This endpoint return combovalues from tblDepartments.
            See <see cref="T:ESolve.Entities.Models.Department"/> for model details.
            </summary>
            <returns>List of departments combovalues.</returns>
            <response code="200">IEnumerable collection of Department.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DepartmentsController.Add(ESolve.Entities.Models.Department[])">
            <summary>
            This method inserts passed array of Departments into Database table tblDepartments.
            </summary>
            <param name="departments">Array of department objects which will be stored in Database.</param>
            <returns>Return added CostCode objects.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new departments.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DepartmentsController.Update(ESolve.Entities.Models.Department[])">
            <summary>
            This method update passed department objects in Database table tblDepartments, with values passed in array of department objects.
            If passed departmentId does not exist, new row will be created.
            </summary>
            <param name="departments">Array of department objects which contains new values.</param>
            <returns>Ok result with updated department objects, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new Departments.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DepartmentsController.Delete(System.Int64)">
            <summary>
            Method removes Department object from tblDepartments and from all connected tables where DepartmentID is required.
            </summary>
            <param name="id">Represents id of Department which will be deleted.</param>
            <returns>Ok if Department is deleted or BadRequest if something went wrong.</returns>
            <response code="200">Department has been removed.</response>
            <response code="400">Some error has been occured during deleting existing Department.</response>
            <response code="404">Department with passed Id doesn't exists in Database table tblDepartment.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DepartmentsController.IsLocationNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if name of Department is available.
            If we add new Department, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on DepartmentID.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is DepartmentID and Department Name</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="T:ESolve.Controllers.DivisionsController">
            <summary>
            Endpoints for managing Divisions.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.DivisionsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Division})">
            <summary>
            Constructor which initalize DivisionManager
            </summary>
            <param name="repository">Repository which will be injected in DivisionManager</param>
        </member>
        <member name="M:ESolve.Controllers.DivisionsController.GetAll">
            <summary>
            This Endpoint Return all Divisions From Database table tblDivision.
            See <see cref="T:ESolve.Entities.Models.Division"/> for model details.
            </summary>
            <returns>IEnumerable collection of Divisions.</returns>
            <response code="200">IEnumerable collection of Divisions.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DivisionsController.GetIdNameList">
            <summary>
            This endpoint return combovalues from tblDivisions.
            See <see cref="T:ESolve.Entities.Models.Division"/> for model details.
            </summary>
            <returns>List of divisions combovalues.</returns>
            <response code="200">IEnumerable collection of Division.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DivisionsController.Add(ESolve.Entities.Models.Division[])">
            <summary>
            This method inserts passed array of Divisions into Database table tblDivisons.
            </summary>
            <param name="divisions">Array of Division objects which will be stored in Database.</param>
            <returns>Returns added Divisions.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new Divisions.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DivisionsController.Update(ESolve.Entities.Models.Division[])">
            <summary>
            This method update passed Division objects in Database table tblDivisions, with values passed in array of Division objects.
            If passed divisionID does not exist, new row will be created.
            </summary>
            <param name="divisions">Array of divisions objects which contains new values.</param>
            <returns>Ok result with updated Division objects, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new Divisions.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DivisionsController.Delete(System.Int64)">
            <summary>
            Method removes Division object from tblDivisions and from all connected tables where DivisionID is required.
            </summary>
            <param name="id">Represents id of Division which will be deleted.</param>
            <returns>Ok if Division is deleted or BadRequest if something went wrong.</returns>
            <response code="200">Division has been removed.</response>
            <response code="400">Some error has been occured during deleting existing Division.</response>
            <response code="404">Division with passed Id doesn't exists in Database table tblDivisions.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.DivisionsController.IsLocationNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if name of division is available.
            If we add new Division, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on DivisionID.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is DivisionID and Division Name</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="T:ESolve.Controllers.EmailSettingsController">
            <summary>
            Endpoints for managing EmailSettings
            </summary>
        </member>
        <member name="M:ESolve.Controllers.EmailSettingsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmailSettings})">
            <summary>
            Constructor which initialize EmailSettings manager
            </summary>
            <param name="emailSettingsRepository"></param>
        </member>
        <member name="M:ESolve.Controllers.EmailSettingsController.Get">
            <summary>
            Get Email settings from database.
            </summary>
            <returns>All Jobs from Database.</returns>
            <response code="200">Return Email setting from database.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmailSettingsController.Get(ESolve.Entities.Models.EmailSettings)">
            <summary>
            Endpoint for checking if email is valid
            </summary>
            <returns>All Jobs from Database.</returns>
            <response code="200">Return Email setting from database.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmailSettingsController.Add(ESolve.Entities.Models.EmailSettings)">
            <summary>
            Add email settings
            </summary>
            <param name="emailSettings">Email settings to add</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.EmailSettingsController.Put(ESolve.Entities.Models.EmailSettings)">
            <summary>
            Update Email settings in Database with passed values inside EmailSettings object, if email settings don't exist, it will be added
            </summary>
            <param name="emailSettings">Email Settings object</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="T:ESolve.Controllers.EmployeeDashboardController">
            <summary>
            Controller which contains endpoints for accessing and managing data in 
            Employee Dashboard page
            </summary>
        </member>
        <member name="M:ESolve.Controllers.EmployeeDashboardController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmployeePermissions},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmployeeAbsence},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobStatus},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceRequest})">
            <summary>
            Construcotr which initalize all managers
            </summary>
            <param name="jobAvailabilityManager">Manager for JobAvailabilitites</param>
            <param name="employeePermissionsManager">Manager for Employee Permissions</param>
            <param name="subGroupManager">Manager for SubGroups</param>
            <param name="employeeAbsenceManager">Manager for Employee Absences</param>
            <param name="employeesManager">Manager for Employees</param>
            <param name="jobOfferManager">Manager for JobOffers</param>
            <param name="jobManager">Manager for Jobs</param>
            <param name="tradesManager">Manager for Job Trades</param>
            <param name="jobStatusManager">Manager for Job Statuses</param>
            <param name="absenceRequestManager">Manager for Absence Requests</param>
        </member>
        <member name="M:ESolve.Controllers.EmployeeDashboardController.GetEmployeeDashboardDetails(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed dates enpoint will return dashboard data for logged in employee
            </summary>
            <param name="selectedDates">Selected range</param>
            <returns>Data for employee Dashboard</returns>
            <response code="200">If data are collected properlly</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeeDashboardController.GetEmployeeCalendar(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed range, method will return data for employee calendar in selected range if employee have permissions
            </summary>
            <param name="selectedDates">Selected range</param>
            <returns>Data for callendar</returns>
            <response code="200">If data are collected properlly</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeeDashboardController.GetEmployeeJobOffers(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed range, method will return jobOffers for logged in employee in dashboard shape
            </summary>
            <param name="selectedDates">Selected range for dashboard</param>
            <returns></returns>
            <response code="200">If data are collected properlly</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeeDashboardController.GetEmployeeTradeBoard(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed range, method will return jobTrades for logged in employee in dashboard shape
            </summary>
            <param name="selectedDates">Selected range for dashboard</param>
            <returns></returns>
            <response code="200">If data are collected properlly</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.EmployeeSchedHrsStatusesController">
            <summary>
            Endpoints for managing EmployeeSchedHrs statuses
            </summary>
        </member>
        <member name="M:ESolve.Controllers.EmployeeSchedHrsStatusesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmployeeSchedHrsStatus})">
            <summary>
            Constructor which initialize EmployeeSchedHrsStatus Manager
            </summary>
            <param name="employeeSchedHrsStatusRepository">Repository which will be injected in EmployeeSchedHrsStatusManger</param>
        </member>
        <member name="M:ESolve.Controllers.EmployeeSchedHrsStatusesController.Get">
            <summary>
            Get All EmployeeSchedHrs Statuses.
            </summary>
            <returns>All EmployeeSchedHrs Statuses from Database.</returns>
            <response code="200">All EmployeeSchedHrs Statuses from Database. See <see cref="T:ESolve.Entities.Models.EmployeeSchedHrsStatus"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeeSchedHrsStatusesController.Put(System.Int64,ESolve.Entities.Models.EmployeeSchedHrsStatus)">
            <summary>
            Update EmployeeSchedHrs Status in Database with passed values inside EmployeeSchedHrs Status object
            </summary>
            <param name="id">Primary Key of object which should be updated</param>
            <param name="employeeSchedHrsStatus">EmployeeSchedHrs Status instance with new values</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeeSchedHrsStatusesController.ResetColorToDefault(System.Int64)">
            <summary>
            Update employeeSchedHrs status color to default value.
            </summary>
            <param name="id">Primary key of employeeSchedHrs status color which has to be returned to default value.</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.EmployeesController">
            <summary>
            Endpoints for managing Employees.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Gender},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Location},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Department},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.CostCode},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Division},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobTitle},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Team},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Class},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TargetRuleGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.WorkRules},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.NotificationType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobAvailability},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.License})">
            <summary>
            Constructor which initialize all repositories needed for methods in EmployeeController
            </summary>
            <param name="employeesRepository"></param>
            <param name="gendersRepository"></param>
            <param name="employeeProfilesRepository"></param>
            <param name="locationsRepository"></param>
            <param name="departmentsRepository"></param>
            <param name="costCodesRepository"></param>
            <param name="divisionsRepository"></param>
            <param name="jobTitlesRepository"></param>
            <param name="teamsRepository"></param>
            <param name="classesRepository"></param>
            <param name="jobTypesRepository"></param>
            <param name="targetRuleGroupsRepository"></param>
            <param name="workRulesRepository"></param>
            <param name="notificationsRepository"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="jobManager"></param>
            <param name="configuration"></param>
            <param name="jobTypeManager"></param>
            <param name="templateJobAvailabilityManager"></param>
            <param name="serviceProvider"></param>
            <param name="tradesManager"></param>
            <param name="licenseManager"></param>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.GetAll(ESolve.Entities.Pagination.EmployeeFilterModel)">
            <summary>
            Get All Employees from Database which satisfy filter terms.
            </summary>
            <param name="filter">Filter attributes[SearchTerm, NextPage, PreviousPage etc. etc.]. See <see cref="T:ESolve.Entities.Pagination.EmployeeFilterModel"/> for details. </param>
            <returns>Pagged collection of EmployeeSearchDTO. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/>. See <see cref="T:ESolve.Entities.DTOs.EmployeeSearchDTO"/></returns>
            <response code="200">Returns employees.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.GetFilters(ESolve.Entities.Pagination.SampleFilterModel,System.String)">
            <summary>
            Returns all Employees filtering and searching parameters
            </summary>
            <param name="filter">Filter which poses does we filtering Employees or SkillCodes. See <see cref="T:ESolve.Entities.Filters.SkillMatricesFilterModel"/> for model details</param>
            <param name="field">Employee's field for filter input</param>
            <returns>PagedCollectionResponse of SkillMatricesDTO objects</returns>
            <response code="200">PagedCollectionResponse of SkillMatricesDTO objects.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.GetEmployeePageComboValues(ESolve.Entities.Filters.EmployeeSearchFilterModel)">
            <summary>
            This endpoint is used to return all employees/skill codes which satisfies conditions in search boxes
            </summary>
            <param name="filterModel">See <see cref="T:ESolve.Entities.Filters.EmployeeSearchFilterModel"/> for model details</param>
            <returns>List of IdNameDropDownModel objects</returns>
            <response code="200">Returns employees for dropdown list</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.Get(System.Int64,ESolve.Entities.Pagination.EmployeeFilterModel)">
            <summary>
            Get one Employee based on passed Id.
            </summary>
            <param name="id">Represent Id of wanted Employee</param>
            <param name="filter"></param>
            <returns>EmployeeSkillCodes object with employee and his skills</returns>
            <response code="200">Returns employee that has passed primary key</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.GetIdNameValues">
            <summary>
            Returns object with values for all comboboxes on employee page. Values are list of IdandName objects.
            </summary>
            <returns>EmployeeComboDTO object with data for drop down list on employee details page.</returns>
            <response code="200">EmployeeComboDTO object with data for drop down list on employee details page.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.GetImages(System.Int64)">
            <summary>
            For passed Employee Id method returns count of employee images in tblEmployeeImages
            </summary>
            <param name="id">Employee Id in database.</param>
            <returns>Number of employee images in tblEmployeeImages</returns>
            <response code="200">Number of employee images in tblEmployeeImages</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.IsEmailUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Method check is email occupied from another Employees. 
            We send Employee Id and Email which we want to check. 
            If we adding new employee without id, we set Id tp 0.
            </summary>
            <param name="filter">Filter posses Id which represents EmployeeId and Content which represents new Email.</param>
            <returns>Indicator is passed Email available for passed EployeeID.</returns>
            <response code="200">Value that represents if email is in use or not</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.GetTradeBoardPermission">
            <summary>
            Endpoint for getting allowed trade value for current logged in employee
            </summary>
            <returns>Ok with true or false</returns>
            <response code="200">Ok</response>
            <response code="400">Something went wrong</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.Add(ESolve.Entities.DTOs.EmployeeDTO)">
            <summary>
            Method inserts new Employee in tblEmployees.
            Image if is passed will be resized and stored in tblEmployeeImages.
            Number of resized images and dimensions depeneds on number saved ImageSizes object in Database.
            Inserted Employee will be added in the tblSkillMatrices and all values will be False.
            </summary>
            <param name="employee">Employee which will be stored in Database.</param>
            <returns>Employee if it is saved, or BadRequest</returns>
            <response code="200">Ok</response>
            <response code="400">Something went wrong</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.IsEmployeeNumberUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Method check is EmployeeNumber occupied from another Employees. 
            We send Employee Id and EmployeeNumber which we want to check. 
            If we adding new employee without id, we set Id tp 0.
            </summary>
            <param name="filter">Filter posses Id which represents EmployeeId and Content which represents new EmployeeNumber.</param>
            <returns>Indicator is passed EmployeeNumber available for passed EployeeID.</returns>
            <response code="200">Value that represents if employee number is in use or not</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.IsEmployeeUsernameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Method check is Username occupied from another Employees. 
            We send Employee Id and Username which we want to check. 
            If we adding new employee without id, we set Id tp 0.
            </summary>
            <param name="filter">Filter posses Id which represents EmployeeId and Content which represents new Username.</param>
            <returns>Indicator is passed Username available for passed EployeeID.</returns>
            <response code="200">Value that represents if username is in use or not</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.EmployeeProfileBulkUpdate(ESolve.Entities.DTOs.EmployeeProfileDTO)">
            <summary>
            Method for assgin new employee profile to employees.
            </summary>
            <param name="employeeProfileDTO"></param>
            <returns></returns>
            <response code="200">Value that represent profile successfully assign to employees</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.Put(System.Int64,ESolve.Entities.DTOs.EmployeeDTO)">
            <summary>
            Method update Employee in database with passed values.
            </summary>
            <param name="id">Represents Id of Employee which we want to update.</param>
            <param name="employee">Employee object with new values.</param>
            <returns>Updated employee or appropiate message why action is failed.</returns>
            <response code="200">Returns Employee object with updated values.</response>
            <response code="404">Returns Message : "The Employee couldn't be found."</response>
            <response code="400">Returns Message : "Employee can't be NULL." or "Employee couldn't bee updated.".</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeesController.Delete(System.Int64)">
            <summary>
            Method removes Employee and all entries from connected tables where EmployeeID is required.
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Returns Message "Employee sucessfully deleted.". Action is sucessfull..</response>
            <response code="400">Returns Message : "Employee couldn't be deleted.". Action is unsecsfull from some reason. [eg some connected entity isn't deleted.]</response>
            <response code="404">Returns Message : "The Employee record couldn't be found.". Employee with passed Id doesn't exists in Database.</response>
            <response code="201">Returns Message : "Cannot delete employee. Employee is selected in a constraint."</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.EmployeeTilesController">
            <summary>
            Endpoints for employee tiles
            </summary>
        </member>
        <member name="M:ESolve.Controllers.EmployeeTilesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmployeeTile})">
            <summary>
            Constructor which initialize EmployeeTileManager Manager
            </summary>
            <param name="employeeTileRepository">Repository which will be injected in EmployeeTileManager</param>
        </member>
        <member name="M:ESolve.Controllers.EmployeeTilesController.Get">
            <summary>
            Get employee tile info
            </summary>
            <returns>Employee tile info from database</returns>
            <response code="200">Employee tile info. See <see cref="T:ESolve.Entities.Models.EmployeeTile"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.EmployeeTilesController.Put(System.Int64,ESolve.Entities.Models.EmployeeTile)">
            <summary>
            Update Employee tile info in database
            </summary>
            <param name="id">Primary Key of object which should be updated</param>
            <param name="employeeTile">Employee tile info with new values.</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="T:ESolve.Controllers.GDPRController">
            <summary>
            EndPoints for GDPR
            </summary>
        </member>
        <member name="M:ESolve.Controllers.GDPRController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.GDPR},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Token})">
            <summary>
            Constructor which initalize all DataManagers
            </summary>
            <param name="gdpr">Repository which will be injected in GDPRManager</param>
            <param name="profilePermissionsRepository">Repository which will be injected in ProfileManager</param>
            <param name="accountManager">Account manager</param>
        </member>
        <member name="M:ESolve.Controllers.GDPRController.GetAll">
            <summary>
            Get all GDPRs from DB
            </summary>
            <returns>Return 200 if User is authorized. 401 otherwise.</returns>
        </member>
        <member name="M:ESolve.Controllers.GDPRController.Update(ESolve.Entities.Models.GDPR)">
            <summary>
            Update notification
            </summary>
            <param name="gdpr">GDPR for update</param>
            <returns>Return 200 or 400 for bad request. 401 if user isn't authorized.</returns>
        </member>
        <member name="T:ESolve.Controllers.GendersController">
            <summary>
            Endpoints for managing Genders data.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.GendersController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Gender})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="repository">Repository which will be casted into GenderManager object.</param>
        </member>
        <member name="M:ESolve.Controllers.GendersController.Get">
            <summary>
            Endpoint return's all Genders objects from Database. See <see cref="T:ESolve.Entities.Models.Gender"/> for all Gender properties. 
            </summary>
            <returns>List of Gender object</returns>
            <response code="200">Returns Message "Employee sucessfully deleted.". Action is sucessfull..</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.GendersController.Get(System.Int64)">
            <summary>
            Method return Gender from Database where Primary Key is equal with passed value.
            </summary>
            <param name="id">Represent Id of wanted Gender</param>
            <returns>Gender from Database or null if gender with that Id doesnt exists</returns>
            <response code="200">Returns Gender object from database </response>
            <response code="404">Returns when user sent id which doesn't exists in tblGenders.</response>
        </member>
        <member name="M:ESolve.Controllers.GendersController.GetIdNameList">
            <summary>
            Returns all Genders in Id and Name structure. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for details.
            </summary>
            <returns>All Genders in Id and Name structure</returns>
            <response code="200">Returns All Genders in Id and Name structure</response>
        </member>
        <member name="M:ESolve.Controllers.GendersController.Add(ESolve.Entities.Models.Gender)">
            <summary>
            Stores new Gender in Database.
            </summary>
            <param name="gender">Gender instance which will be stored in database.</param>
            <returns>Created if action is sucessfull, or BadRequest if action fails from some reason.</returns>
            <response code="201">Created Gender and Link to access him in Header.</response>
            <response code="400">Message "Gender couldn't bee inserted.". Saving Gender in Database went wrong..</response>
        </member>
        <member name="M:ESolve.Controllers.GendersController.Put(System.Int64,ESolve.Entities.Models.Gender)">
            <summary>
            Update Gender in Database with new values which are passed in Gender Object.
            </summary>
            <param name="id"></param>
            <param name="gender"></param>
            <returns>Gender with updated values.</returns>
            <response code="200">Updated Gender and Link to access him in Header.</response>
            <response code="400">Message "Gender couldn't bee inserted.". Updatting Gender in Database went wrong..</response>
        </member>
        <member name="M:ESolve.Controllers.GendersController.Delete(System.Int64)">
            <summary>
            Method removes Gender object from tblGenders and from all connected tables where GenderID is required.
            </summary>
            <param name="id">Represents id of Gender which will be deleted.</param>
            <returns>Ok if gender is deleted or BadRequest if something went wrong.</returns>
            <response code="200">Message that Gender has been removed.</response>
            <response code="400">Message "Gender couldn't bee inserted.". Deleting Gender in Database went wrong..</response>
        </member>
        <member name="T:ESolve.Controllers.JobOffersController">
            <summary>
            Endpoints for JobOffers
            </summary>
        </member>
        <member name="M:ESolve.Controllers.JobOffersController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SchedulePermissions},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroupsApproval},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.BrokenRule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SchedulePreference},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobOfferForAutoAssigment},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="jobOfferManager"></param>
            <param name="jobManager"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="subGroupManager"></param>
            <param name="userManager"></param>
            <param name="profileManager"></param>
            <param name="schedulePermissionsManager"></param>
            <param name="employeesManager"></param>
            <param name="serviceProvider"></param>
            <param name="subGroupApprovalManager"></param>
            <param name="brokenRulesManager"></param>
            <param name="scheduleManager"></param>
            <param name="schedulePreferenceManager"></param>
            <param name="jobOfferForAutoAssigmentDataManager"></param>
            <param name="scheduleDatePreferenceManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.JobOffersController.GetJobOffers(ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter)">
            <summary>
            Method return all JobOffers for Employee which is LoggedIn. Items shape will be like this. See <see cref="T:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO"/> for more details.
            </summary>
            <param name="jobOfferFilter">JobOffer Filter</param>
            <returns>Collection of JobOffers</returns>
            <response code="200">Collection of JobOffers for employee</response>
            <response code="400">Something went wrong.</response>
            <response code="500">Unhandled error occurs</response>
        </member>
        <member name="M:ESolve.Controllers.JobOffersController.RevokeOfferOnScheduleOrSubgroupLevel(ESolve.Entities.DTOs.JobOffer.JobsOfferDTO)">
            <summary>
            Endpoint for revoking JobOffers on selected SubGroup Or Schedule
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.JobOffersController.CreateOfferOnJobLevel(ESolve.Entities.DTOs.JobOffer.JobOfferDTO)">
            <summary>
            For passed JobId and EmployeeIDs Endpoint will create JobOferr for each passed employee
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.JobOffersController.CreateOfferOnScheduleOrSubgroupLevel(ESolve.Entities.DTOs.JobOffer.JobsOfferDTO)">
            <summary>
            Endpoint for JobOffers on selected SubGroups Or Schedule
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.JobOffersController.EmployeeAcceptsORRejectsJobOffer(ESolve.Entities.DTOs.JobOffer.AcceptOrRejectJobOfferDTO)">
            <summary>
            Endpoint is used by employee in order to accept or reject JobOffer
            </summary>
            <param name="acceptOrRejectJobOfferDTO">DTO with required Data. See<see cref="T:ESolve.Entities.DTOs.JobOffer.AcceptOrRejectJobOfferDTO"/> for more details</param>
            <returns>Returns added Classes.</returns>
            <response code="200">JobOffer action sucessfully executed.</response>
            <response code="400">Some error has been occured saving employee JobOffer Action.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.JobsController">
            <summary>
            Endpoints for managing Jobs
            </summary>
        </member>
        <member name="M:ESolve.Controllers.JobsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Ranking},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.BrokenRule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobStatus},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.UnlockedRange},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.LoneWorkerAlert},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AttendanceConfirmation},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize JobData Manager
            </summary>
            <param name="jobRepository">Repository for managing Jobs</param>
            <param name="jobAvailabilityRepository">Repository for managing JobAvailabilitites</param>
            <param name="jobTypeManager">Repository which will be injected in JobTypeValueManager</param>
            <param name="subGroupManager">Repository which will be injected in SubGroupManager</param>
            <param name="rankingManager">Repository which will be injected in RankingManager</param>
            <param name="scheduleManager">Repository which will be injected in JobCustomDataManager</param>
            <param name="brokenRulesManger">Repository which will be injected in JobCustomDataManager</param>
            <param name="profileManager">Repository which will be injected in JobManager</param>
            <param name="userManager">Repository which will be injected in JobManager</param>
            <param name="jobStatusManager">Repository which will be injected in JobStatusManager</param>
            <param name="serviceProvider">Service provider which provide us manager for submit for approval notification</param>
            <param name="unlockedSubgroupManager">Repository which will be injected in UnlockedSubGroupManager</param>
            <param name="jobOfferManager">Repository which will be injected in JobOfferManager</param>
            <param name="loneWorkerAlertsManager">Repository which will be injected in LoneWorkerAlertsManager</param>
            <param name="tradeManager">Repository which will be injected in TradesManager</param>
            <param name="attendanceConfirmationManager">Repository which will be injected in AttendanceConfirmationManager</param>
            <param name="configuration">Configuration</param>
        </member>
        <member name="M:ESolve.Controllers.JobsController.Get">
            <summary>
            Get All Jobs with all included entities which are connected via foreign kies. 
            </summary>
            <returns>All Jobs from Database.</returns>
            <response code="200">All Jobs from Database. See <see cref="T:ESolve.Entities.Models.Job"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.Get(System.Int64,System.Boolean)">
            <summary>
            Get one Job with all included entities which are connected via foreign kies. 
            Returned Job is Job where Primary Key in Database is equal with passed id.
            </summary>
            <param name="id">Represents Primary Key in database.</param>
            <param name="cached">Indicator is Job cashed</param>
            <returns>Job if it exists or BadRequest if Job doesn't exists.</returns>
            <response code="200">Returns Job if he exists in Database. See <see cref="T:ESolve.Entities.Models.Job"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.GetJobDetails(System.Int64,System.Int64)">
            <summary>
            Get job details
            </summary>
            <param name="jobId"></param>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.JobsController.GetAllAssociatedEmployees(System.Int64,System.String)">
            <summary>
            Returns all associated employees for concurrent job
            </summary>
            <param name="id">Represent Primary Key of Job</param>
            <param name="imageSize">Represent Image Size for Employee</param>
            <returns>Array of associated employees. See <see cref="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO"/> for model details.</returns>
            <response code="200">Retrun array of associated employees. See <see cref="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.GetAssociatedEmployeesForDateRange(System.Int64,System.String,System.DateTime,System.DateTime)">
            <summary>
            Returns associated employees in passed date range
            </summary>
            <param name="id">Represent Primary Key of Job</param>
            <param name="imageSize">Represent Image Size for Employee</param>
            /// <param name="startDate">Start time of date range</param>
            /// <param name="endDate">End time of date range</param>
            <returns>Array of associated employees. See <see cref="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO"/> for model details.</returns>
            <response code="200">Retrun array of associated employees. See <see cref="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.GetAllEmployeeLists(ESolve.Entities.Filters.EmployeeListsFilterModel)">
            <summary>
            List of all employees. Available, assigned, and unavailable
            </summary>
            <param name="filter">EmployeeListsFilterModel object which presents necessary data for pagination.</param>
            <returns>EmployeeJobAssigmentListDTO List of Employees which satisfy each JobTypeRule assigned to the selected Job. See <see cref="T:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO"/> for model details.</returns>
            <response code="200">Returns List of Employees which are unavailable for selected Job. See <see cref="T:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.GetJobsForPeriodByJobType(ESolve.Entities.Filters.CalendarViewFilterModel)">
            <summary>
            Returns Dictionary with keys - Jobs and JobTypes. 
            Jobs values - all Job from Database where JobStartDate is between passed period and whoose SubGroupID is equal with passed value.
            Job type values - CalendarElementsGroupedByJobTypeDTO objects that contain all jobs with their job types.
            </summary>
            <param name="calendarViewFilterModel"></param>
            <returns>Dictionary (string, object) with jobs and job types</returns>
            <response code="200">Dictionary objects with key - value pair (string, object) which satisfies all requirements.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Returns bad request.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.Add(ESolve.Entities.DTOs.JobWithCustomDataDTO)">
            <summary>
            Insert passed job in Database table tblJobs.
            </summary>
            <param name="jobWithCustomData">Job with custom data that will be inserted.</param>
            <returns>Job and Link to him in Response Header [Location propertie] if is created, and BadRequest if Action fails.</returns>
            <response code="200">Job and Link to him in Response Header [Location propertie].</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.CopyJob(ESolve.Entities.DTOs.CopyJobDTO)">
            <summary>
            Copies job with passed Id and inserts it into database.
            </summary>
            <param name="copyJobDTO">DTO for job coppying.</param>
            <returns>List of new jobs which are copied.</returns>
            <response code="200">Request is successfully done.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.AssignEmployee(ESolve.Entities.DTOs.AssigmentDTO)">
            <summary>
            Method will try to assign passed Employee on passed Job. See <see cref="T:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO"/> for details.
            </summary>
            <param name="assigment">Structure where is Employee which we want to assign and Job on which we want to assign Employee.</param>
            <returns></returns>
            <response code="200">Job and Link to him in Response Header [Location propertie].</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.AssignEmployees(ESolve.Entities.DTOs.AssigmentDTO)">
            <summary>
            Method will try to assign all Employees from passed collection on job specified in each item.
            </summary>
            <param name="assigments">See <see cref="T:ESolve.Entities.DTOs.AssigmentDTO"/> for details.</param>
            <returns>Ok with message if there is new assigments, otherwise return empty ok repsonse if user do not want to override assigments.</returns>
            <response code="200">Returns coresponding message if are all employees assigned or not.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.GetMessagesForBrokenRules(ESolve.Entities.DTOs.EmployeeJobAssigmentDTO[])">
            <summary>
            This method is used for getting messages if user want to override assigments
            </summary>
            <param name="employeeJobAssigmentDTOs">List of employeeJobAssigments DTOs with info about job and employee</param>
            <returns>Ok with messages.</returns>
        </member>
        <member name="M:ESolve.Controllers.JobsController.Put(System.Boolean,ESolve.Entities.DTOs.JobWithCustomDataDTO)">
            <summary>
            Update Job in Database with passed values inside Job object
            </summary>
            <param name="jobWithCustomData">Job instance with new values</param>
            <param name="isDragAndDropChanged">Indicate that job is updated by drag and drop action.</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.RemoveEmployeeAssignment(ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO)">
            <summary>
            Unassigne Passed Employee from passed Job. See <see cref="T:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO"/> for details.
            </summary>
            <param name="removeEmployeeAssigmentDTO">Structure where is EmployeeID and JobID</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.RemoveEmployeeAssignment(System.Collections.Generic.List{ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO})">
            <summary>
            Removes assigment for passed List of Employees and Jobs where each employee is assigned. See <see cref="T:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO"/> for details.
            Method will remove assigment for each item passed in List RemoveEmployeeAssigmentDTO.
            </summary>
            <param name="removeEmployeeAssigmentDTOs">List of employees which should be unassigment</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.DeleteList(System.Collections.Generic.List{System.Int64})">
            <summary>
            Deletes List of Jobs where each Job Primary Key in Database is in passed list of Ids. 
            Also method will remove all connected entities where JobID is required.
            </summary>
            <param name="ids">List of Jobs Primary Kies</param>
            <returns></returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobsController.DeleteJobsInPeriod(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Deleting all jobs from selected subgroup and displayed date range
            </summary>
            <param name="id">Subgroup's primary key</param>
            <param name="startDate">Start date of displayed period</param>
            <param name="endDate">End date of displayed period</param>
            <returns>Ok if jobs are successfully removed, otherwise returns BadRequest</returns>
            <response code="200">Jobs are successfully removed.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.JobStatusesController">
            <summary>
            Endpoints for managing Job statuses
            </summary>
        </member>
        <member name="M:ESolve.Controllers.JobStatusesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobStatus})">
            <summary>
            Constructor which initialize JobStatus Manager
            </summary>
            <param name="jobStatusRepository">Repository which will be injected in JobStatusManger</param>
        </member>
        <member name="M:ESolve.Controllers.JobStatusesController.Get">
            <summary>
            Get All Job Statuses.
            </summary>
            <returns>All Job Statuses from Database.</returns>
            <response code="200">All Job Statuses from Database. See <see cref="T:ESolve.Entities.Models.JobStatus"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobStatusesController.Put(System.Int64,ESolve.Entities.Models.JobStatus)">
            <summary>
            Update Job Status in Database with passed values inside Job Status object
            </summary>
            <param name="id">Primary Key of object which should be updated</param>
            <param name="jobStatus">Job Status instance with new values</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.JobStatusesController.ResetColorToDefault(System.Int64)">
            <summary>
            Update job status color to default value.
            </summary>
            <param name="id">Primary key of job status color which has to be returned to default value.</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.JobTitlesController">
            <summary>
            Endpoints for managing JobTitles.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.JobTitlesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobTitle})">
            <summary>
            Constructor which initalize JobTitleManager
            </summary>
            <param name="repository">Repository which will be injected in JobTitleManager</param>
        </member>
        <member name="M:ESolve.Controllers.JobTitlesController.GetAll">
            <summary>
            This Endpoint Return all JobTitles From Database table tblJobTitles.
            See <see cref="T:ESolve.Entities.Models.JobTitle"/> for model details.
            </summary>
            <returns>IEnumerable collection of JobTitles.</returns>
            <response code="200">IEnumerable collection of JobTitles.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTitlesController.GetIdNameList">
            <summary>
            This endpoint return combovalues from tblJobTitles.
            See <see cref="T:ESolve.Entities.Models.JobTitle"/> for model details.
            </summary>
            <returns>List of jobTitles combovalues.</returns>
            <response code="200">IEnumerable collection of JobTitle.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTitlesController.Add(ESolve.Entities.Models.JobTitle[])">
            <summary>
            This method inserts passed array of JobTitles into Database table tblJobTitles.
            </summary>
            <param name="jobTitles">Array of JobTitle objects which will be stored in Database.</param>
            <returns>Returns added JobTitles.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new JobTitles.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTitlesController.Update(ESolve.Entities.Models.JobTitle[])">
            <summary>
            This method update passed JobTitle objects in Database table tblJobtitles, with values passed in array of JobTitle objects.
            If passed jobTitleID does not exist, new row will be created.
            </summary>
            <param name="jobTitles">Array of jobTitles objects which contains new values.</param>
            <returns>Ok result with updated JobTitle objects, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new JobTitles.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTitlesController.Delete(System.Int64)">
            <summary>
            Method removes JobTitle object from tblJobTitles and from all connected tables where JobTitleID is required.
            </summary>
            <param name="id">Represents id of JobTitle which will be deleted.</param>
            <returns>Ok if JobTitle is deleted or BadRequest if something went wrong.</returns>
            <response code="200">JobTitle has been removed.</response>
            <response code="400">Some error has been occured during deleting existing JobTitle.</response>
            <response code="404">JobTitle with passed Id doesn't exists in Database table tblJobTitles.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTitlesController.IsLocationNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if name of job title is available.
            If we add new job title, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on JobTitleID.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is JobTitleID and job title name</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="T:ESolve.Controllers.JobTypeController">
            <summary>
            Endpoints for JobTypes
            </summary>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.LoneWorkerAlert},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AttendanceConfirmation},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initalize all DataManagers
            </summary>
            <param name="jobTypesRepository">Repository which will be injected in JobTypeManager</param>
            <param name="jobAvailabilityRepository">Repository which will be injected in JobAvailabilityManager</param>
            <param name="templateJobAvailabilityManager">Repository which will be injected in TemplateJobAvailabilityManager</param>
            <param name="tradesManager">Repository which will be injected in TradesManager</param>
            <param name="serviceProvider">Service provider which provide us manager for push notification</param>
            <param name="loneWorkerAlertsManager">Manager for lone worker alerts</param>
            <param name="attendanceConfirmationAlertsManager">Manager for attendance confirmation alerts</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.GetAll(ESolve.Entities.Filters.JobTypeFilterModel)">
            <summary>
            Gets All JobTypes from Database in format <see cref="T:ESolve.Entities.DTOs.JobTypeDTO"/>. 
            </summary>
            <param name="filter">Represent Model where data for searching are stored. See <see cref="T:ESolve.Entities.Filters.JobTypeFilterModel"/> for details.</param>
            <returns>Jobtype Pagged Collection</returns>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.Get(System.Int64)">
            <summary>
            Get Jobtype by JobTypeID. Method finds JobType by passed Id and returns JobTypeValue for selected JobType.
            See <see cref="T:ESolve.Entities.DTOs.JobTypeValueDTO"/> for model details.
            </summary>
            <param name="id">JobType Primary Key</param>
            <returns>JobType Value if JobType exists, or BadRequest if not.</returns>
            <response code="200">Returns JobTypeValueDTO for selected JobType. See <see cref="T:ESolve.Entities.DTOs.JobTypeValueDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">If JobType is deleted in meanwhile we get message which describes this situtation.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.GetComboValues">
            <summary>
            Returns all JobTypes in Id and Name structure. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for details.
            </summary>
            <returns>All JobTypes in Id and Name structure</returns>
            <response code="200">Returns All JobTypes in Id and Name structure</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check is JobType Name unique for selected JobType or is Name available for new JobType.
            If we add new JobType, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on Jobtype.Id.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is JobTypeID and JobTypeName</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.GetAllowedTrade(System.Int64)">
            <summary>
            Get allowed trade proprty of job type that has primary key as passed id
            </summary>
            <param name="id">Job type's primary key</param>
            <returns>Ok with value of allowed trade property.</returns>
            <response code="200">Ok with allowed trade value.</response>
            <response code="400">Something went wrong.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.GetEmployeeOrSkillCodeComboValues(System.String)">
            <summary>
            Getting job types which names are matching with passed search term.
            </summary>
            <param name="searchTerm">Search term value</param>
            <returns>Ok with list of IdNameDropDownModel objects.</returns>
            <response code="200">Ok</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.Add(ESolve.Entities.Models.JobType)">
            <summary>
            This method inserts passed JobType into Database table tblJobTypes. 
            And populate tblJobTypeValues for inserted JobType for each JobTypeRules with default values for each of them
            </summary>
            <param name="jobType">Model which contains all data which will be updated. See <see cref="T:ESolve.Entities.DTOs.JobTypeValueDTO"/> for details</param>
            <returns>Ok result if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">JobType created sucessfull.</response>
            <response code="400">Some error has been occured during saving new JobType.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.Update(ESolve.Entities.DTOs.JobTypeValueDTO)">
            <summary>
            This method update JobType Name and all JobTypeValues for passed JobTypeID
            </summary>
            <param name="jobTypeValueDTO">Model which contains all data which will be updated. See <see cref="T:ESolve.Entities.DTOs.JobTypeValueDTO"/> for details</param>
            <returns>Ok result if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">JobType updated sucessfull.</response>
            <response code="400">Some error has been occured during updating.</response>
        </member>
        <member name="M:ESolve.Controllers.JobTypeController.Delete(System.Int64)">
            <summary>
            This method removes JobType from Database. 
            And All Conected Entites where JobTypeID can't be null.
            </summary>
            <param name="id">Primary Key of JobType which will be deleted.</param>
            <returns>Ok result if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">JobType deleted sucessfull.</response>
            <response code="400">JobType can't be deleted.</response>
        </member>
        <member name="T:ESolve.Controllers.LicensesController">
            <summary>
            Endpoints for managing Licenses
            </summary>
        </member>
        <member name="F:ESolve.Controllers.LicensesController._licenseManager">
            <summary>
            License manager
            </summary>
        </member>
        <member name="F:ESolve.Controllers.LicensesController._configSettingsManager">
            <summary>
            Config settings manager
            </summary>
        </member>
        <member name="F:ESolve.Controllers.LicensesController.Configuration">
            <summary>
            Represents a set of key/value application configuration properties.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.LicensesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.License},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ConfigSettings},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initalize LicenseManager
            </summary>
            <param name="repository">Repository which will be injected in LicenseManager</param>
            <param name="configSettingsManager">Repository which will inject in ConfigurationManager</param>
            <param name="configuration">Repository which will be injected in Configuration</param>
        </member>
        <member name="M:ESolve.Controllers.LicensesController.Get">
            <summary>
            Endpoint for Getting License information
            See <see cref="T:ESolve.Entities.Models.License"/> for model details.
            </summary>
            <returns>License information.</returns>
            <response code="200">Ok with license information</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.LicensesController.GetNewLicense">
            <summary>
            Endpoint for Getting License information
            See <see cref="T:ESolve.Entities.Models.License"/> for model details.
            </summary>
            <returns>License information.</returns>
            <response code="200">Ok with license information</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="T:ESolve.Controllers.LocalesController">
            <summary>
            Endpoints for managing Locales 
            </summary>
        </member>
        <member name="M:ESolve.Controllers.LocalesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Locales})">
            <summary>
            Constructor which initialize LocalesManager
            </summary>
            <param name="localesRepository"></param>
        </member>
        <member name="M:ESolve.Controllers.LocalesController.Get">
            <summary>
            Get All Locales
            </summary>
            <returns>All locales from Database </returns>
            <response code="200">All Locales from Database. See <see cref="T:ESolve.Entities.Models.Locales"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="T:ESolve.Controllers.LocationsController">
            <summary>
            Locations endpoints
            </summary>
        </member>
        <member name="M:ESolve.Controllers.LocationsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Location})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="repository">Repository which will be casted into Location manager object.</param>
        </member>
        <member name="M:ESolve.Controllers.LocationsController.GetAll">
            <summary>
            This Endpoint Return all Locations From Database table tblLocations.
            See <see cref="T:ESolve.Entities.Models.Location"/> for model details.
            </summary>
            <returns>IEnumerable collection of Locations.</returns>
            <response code="200">IEnumerable collection of Locations.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LocationsController.GetIdNameList">
            <summary>
            This endpoint return combovalues from tblLocations.
            See <see cref="T:ESolve.Entities.Models.Location"/> for model details.
            </summary>
            <returns>List of location combovalues.</returns>
            <response code="200">IEnumerable collection of Location.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LocationsController.Add(ESolve.Entities.Models.Location[])">
            <summary>
            This method inserts passed array of Locations into Database table tblLocations.
            </summary>
            <param name="locations">Array of locations object which will be stored in Database.</param>
            <returns>Ok result with added locations objects, and Link For access him in Header [Location propertie] if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new Location.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LocationsController.Update(ESolve.Entities.Models.Location[])">
            <summary>
            This method update passed location objects in Database table tblLocations, with values passed in array of locations objects.
            If passed locationID does not exist, new row will be created.
            </summary>
            <param name="locations">Array of location objects which contains new values.</param>
            <returns>Ok result with updated location objects, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result with EmployeeProfile updated properties.</response>
            <response code="400">Some error has been occured during saving new EmployeeProfile.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LocationsController.Delete(System.Int64)">
            <summary>
            Method removes Location object from tblLocations and from all connected tables where LocationID is required.
            </summary>
            <param name="id">Represents id of Location which will be deleted.</param>
            <returns>Ok if Location is deleted or BadRequest if something went wrong.</returns>
            <response code="200">Location has been removed.</response>
            <response code="400">Some error has been occured during deleting existing Location.</response>
            <response code="404">Location with passed Id doesn't exists in Database table tblLocations.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LocationsController.IsLocationNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if name of location is available.
            If we add new Location, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on LocationID.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is LocationID and Location Name</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="T:ESolve.Controllers.LoneWorkerController">
            <summary>
            Endpoints for managing lone worker alerts
            </summary>
        </member>
        <member name="M:ESolve.Controllers.LoneWorkerController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.LoneWorkerAlert},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="loneWorkerManager">Repository which will be casted into LoneWorkerAlertsManager object.</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.LoneWorkerController.GetAll(ESolve.Entities.Filters.LoneWorkerAlertFilterModel)">
            <summary>
            Get all alerts from database
            </summary>
            <param name="filter">Filter attributes[SearchTerm, NextPage, PreviousPage etc. etc.]. See <see cref="T:ESolve.Entities.Filters.LoneWorkerAlertFilterModel"/> for details. </param>
            <returns>Pagged collection of LoneWorkerAlertDTO. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/>. See <see cref="T:ESolve.Entities.DTOs.LoneWorkerAlertDTO"/></returns>
            <response code="200">Ok</response>
            <response code="400">Something went wrong</response>
            <response code="500">Some unhandled exception has been occured.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LoneWorkerController.GetAllTransactionLogs(ESolve.Entities.Filters.LoneWorkerTransactionLogFilterModel)">
            <summary>
            Endpoint for getting lone worker transaction logs
            </summary>
            <param name="filter">Filter for getting lone worker transaction logs</param>
            <returns>PagedCollectionResponse of LoneWorkerTransactionLogDTO</returns>
            <response code="200">Returns ok.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LoneWorkerController.LoneWorkerCheckIn(ESolve.Entities.DTOs.LoneWorkerCheckInDTO)">
            <summary>
            This endpoint is used for employee's lone worker check in
            </summary>
            <param name="loneWorkerCheckInDTO">LoneWorkerCheckInDTO object with job, employee and date when notification for lone worker alert is created</param>
            <returns>Return ok with notifications that are archived and message.</returns>
            <response code="200">Returns ok.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LoneWorkerController.UpdateLoneWorkerAlert(System.Int64,ESolve.Entities.DTOs.LoneWorkerAlertDTO)">
            <summary>
            Update existing lone worker alert
            </summary>
            <param name="id"></param>
            <param name="loneWorkerAlert">Lone worker alert that will be updated</param>
            <returns>Return ok if lone worker alert is successfully updated.</returns>
            <response code="200">Returns ok.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.LoneWorkerController.Delete(System.Int64)">
            <summary>
            Delete lone worker alert from database
            </summary>
            <param name="id">Lone worker alert's primary key</param>
            <returns>Ok if lone worker alert is successfully deleted, false if it is not.</returns>
            <response code="200">Lone Worker Alert is successfully deleted.</response>
            <response code="400">Something went wrong while deleting shift.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.MobileConnectionMappingsController">
            <summary>
            Mobile Connection Api Controller
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileConnectionMappingsController.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>        
        </member>
        <member name="M:ESolve.Controllers.MobileConnectionMappingsController.Get(System.String)">
            <summary>
            'Returns a single mobile connection mapping (identified by its id) with the associated Mobile API URL
            </summary>
            <param name="connectionMappingId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileConnectionMappingsController.GetDetailsUsingCustomerReferenceId(ESolve.Entities.DTOs.MobileAPI.MobileApiSearchParameters)">
            <summary>
            Returns list of Mobile Connection Mappings, matching the search criteria.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileConnectionMappingsController.Post(ESolve.Entities.DTOs.MobileConnectionMapping)">
            <summary>
            Registers a new mapping of a customers unique id and Mobile API URL.
            </summary>
            <param name="mobileConnectionMapping"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileConnectionMappingsController.Delete(System.String)">
            <summary>
            Deletes a single mobile connection mapping (identified by its id).
            </summary>
            <param name="connectionMappingId"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.AccountsController">
            <summary>
            AccountController
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AccountsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Token},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.License})">
            <summary>
            Constructor
            </summary>
            <param name="accountManager"></param>
            <param name="jobsRepository"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AccountsController.Logout(System.String)">
            <summary>
            Logout employee from application
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AccountsController.ResetPassword(ESolve.Entities.DTOs.MobileAPI.MobileResetPasswordDTO)">
            <summary>
            Reset password
            </summary>
            <param name="resetPasswordDTO"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AccountsController.UpdatePassword(ESolve.Entities.DTOs.MobileAPI.MobileLoginRequestDTO)">
            <summary>
            Update password
            </summary>
            <param name="loginRequestDTO"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AccountsController.Login(ESolve.Entities.DTOs.MobileAPI.MobileLoginRequestDTO)">
             <summary>
             API for mobile login for employee
             </summary>
            <param name="loginDto"></param>
             <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.AttendanceConfirmationController">
            <summary>
            Endpoints for Job Offers
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AttendanceConfirmationController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AttendanceConfirmation},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="attendanceConfirmationManager">Repository which will be casted into AttendanceConfirmationAlertManager object.</param>
            <param name="configuration">Configuration</param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AttendanceConfirmationController.Put(System.Int64,System.Boolean)">
            <summary>
            Endpoint for employee's responding on attendance confirmation alert.
            </summary>
            <param name="answer">Employee's answer on the attendance confirmation alert.</param>
            <param name="id">Job that needs attendance confirmation</param>
            <returns>Ok result.</returns>
            <response code="200">Returns ok.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.AvailableJobsController">
            <summary>
            Endpoints for Available jobs
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AvailableJobsController.#ctor(ESolve.Contracts.IAvailableJobs,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job})">
            <summary>
            Available Jobs Controller constructor
            </summary>
            <param name="availableJobsManager">Object of available jobs manager</param>
            <param name="jobOfferManager">Object of job offer manager</param>
            <param name="tradesManager">Object of trades manager</param>
            <param name="jobManager">Object of job manager</param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.AvailableJobsController.GetAvailableJobs(ESolve.Entities.Filters.AvailableJobsFilterModel)">
            <summary>
            Get available jobs of logged in employee which includes offered job and jobs that are put on trade by other employees
            </summary>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.BaseController.ApiForMobileController">
            <summary>
            Base controller for Mobile API endpoints
            </summary>
        </member>
        <member name="P:ESolve.Controllers.MobileControllers.BaseController.ApiForMobileController.LoggedInUser">
            <summary>
            Represents User who accessed an Mobile API endpoint
            </summary>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.JobOffersController">
            <summary>
            Endpoints for Job Offers
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.JobOffersController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroupsApproval},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.BrokenRule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SchedulePreference},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobOfferForAutoAssigment},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            JobOffer Constructor
            </summary>
            <param name="jobOfferManager"></param>
            <param name="jobManager"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="subGroupManager"></param>
            <param name="userManager"></param>
            <param name="profileManager"></param>
            <param name="employeesManager"></param>
            <param name="serviceProvider"></param>
            <param name="subGroupApprovalManager"></param>
            <param name="brokenRulesManager"></param>
            <param name="scheduleManager"></param>
            <param name="schedulePreferenceManager"></param>
            <param name="jobOfferForAutoAssigmentDataManager"></param>
            <param name="scheduleDatePreferenceManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.JobOffersController.EmployeeAcceptsORRejectsJobOffer(ESolve.Entities.DTOs.JobOffer.AcceptOrRejectJobOfferDTO)">
            <summary>
            Endpoint is used by employee in order to accept or reject JobOffer 
            </summary>
            <param name="acceptOrRejectJobOfferDTO"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.JobsController">
            <summary>
            Endpoints for Available jobs
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.JobsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobStatus},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceRequest},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.LoneWorkerAlert},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AttendanceConfirmation})">
            <summary>
            Constructor which initialize all managers that would be used in methods
            </summary>
            <param name="jobManager">Manager for actions on jobs</param>
            <param name="jobAvailabilityManager">Manager for actions on job availabilities</param>
            <param name="jobTypeManager">Manager for actions on job types</param>
            <param name="subGroupManager">Manager for actions on subgroups</param>
            <param name="scheduleManager">Manager for actions on schedules</param>
            <param name="jobStatusManager">Manager for actions on job statuses</param>
            <param name="absenceRequestManager">Manager for actions on absences</param>
            <param name="tradeManager">Manager for actions on trade offers</param>
            <param name="loneWorkerAlertsManager">Manager for actions on lone worker alerts</param>
            <param name="attendanceConfirmationAlertsManager">Manager for actions on lone worker alerts</param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.JobsController.GetMyJobs(ESolve.Entities.Filters.MyJobsFilterModel)">
            <summary>
            This endpoint will returns all approved and assigned jobs for logged in employee.
            employee availability is completely valid and job is in passed range.
            </summary>
            <param name="myJobsFilterModel"></param>
            <returns>Dictionary (string, object) with jobs and job types</returns>
            <response code="200">Dictionary objects with key - value pair (string, object) which satisfies all requirements.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">Returns bad request.</response>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.LoneWorkerController">
            <summary>
            Endpoints for Job Offers
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.LoneWorkerController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.LoneWorkerAlert},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="loneWorkerManager">Repository which will be casted into LoneWorkerAlertsManager object.</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.LoneWorkerController.LoneWorkerCheckIn(ESolve.Entities.DTOs.LoneWorkerCheckInDTO)">
            <summary>
            This endpoint is used for employee's lone worker check in
            </summary>
            <param name="loneWorkerCheckInDTO">LoneWorkerCheckInDTO object with job, employee and date when notification for lone worker alert is created</param>
            <returns>Return ok with notifications that are archived and message.</returns>
            <response code="200">Returns ok.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.PushNotificationController">
            <summary>
            EndPoints for push notifications
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.PushNotificationController.#ctor(System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}})">
            <summary>
            Constructor which initalize all DataManagers
            </summary>
            <param name="serviceProvider">Service provider which provide us manager for push notification</param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.PushNotificationController.GetAll(System.Int64,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Get all notification for user by userId
            </summary>
            <param name="id">Id of user or employee</param>
            <param name="isUser">Tells us whether it is a user or an employee</param>
            <param name="isReaded"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.PushNotificationController.GetNumberOfUnreadNotifications(System.Int64,System.Boolean)">
            <summary>
            get number of unreaded notifications
            </summary>
            <param name="id">Id of user or employee</param>
            <param name="isUser">Tells us whether it is a user or an employee</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.PushNotificationController.Update(System.Int64)">
            <summary>
            Update single notification
            </summary>
            <param name="pushNotificationId">Notification for update</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.PushNotificationController.MultiUpdate(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Update multiple/bulk notifications
            </summary>
            <param name="listOfNotificationsIds">Ids of notification which need to be update</param>
            <param name="shouldDeleteOrArchive">Should they be archived or deleted</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.PushNotificationController.RegisterOrDeRegisterDeviceToken(ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO)">
            <summary>
            Register or de-register mobile device token
            </summary>
            <param name="registerOrDeregisterDeviceTokenDTO">Object to register or de-register mobile device token</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.SecurityController">
            <summary>
            Endpoints for managing security.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.SecurityController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Security})">
            <summary>
            Constructor which initialize all repositories needed for methods in SecurityController. 
            </summary>
            <param name="securityRepository"></param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.SecurityController.Get(System.Boolean)">
            <summary>
            Get password security from database.
            </summary>
            <param name="secured">Indicator for whether the endpoint should be authorized or not.</param>
            <returns>Return password security object from database.</returns>
            <response code="200">Returns password security object from database.</response>
            <response code="400">Returns if action failed from some reason.</response>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.SubGroupController">
            <summary>
            SubGroupController
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.SubGroupController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability})">
            <summary>
            Construtor
            </summary>
            <param name="subgroupManager"></param>
            <param name="jobManager"></param>
            <param name="jobAvailabilityManager"></param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.SubGroupController.GetSubGroupDetail(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Fetch subgroups details for given date range and employeeId
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.MobileControllers.TradesController">
            <summary>
            Controller for trades
            </summary>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.TradesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize Trades manager
            </summary>
            <param name="tradesManager">Manager for trades.</param>
            <param name="serviceProvider">Service provider which provide us manager for push notification</param>
            <param name="jobAvailabilityManager">Manager for job availabilities</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.TradesController.AcceptTradeOffer(System.Int64)">
            <summary>
            Accepting trade offer
            </summary>
            <param name="id">Primary key of employee own trade offer (foreign key in employee trade offer - first table)</param>
            <returns>Ok if trade offer is successfully accepted.</returns>
            <response code="200">Ok if trade is successfully accepted.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.TradesController.DeclineTradeOffer(System.Int64)">
            <summary>
            Declining  trade offer
            </summary>
            <param name="id">Primary key of employee trade offer (primary key in employee trade offer - first table)</param>
            <returns>Ok if trade offer is successfully declined.</returns>
            <response code="200">Ok if trade is successfully accepted.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.TradesController.Add(ESolve.Entities.DTOs.MobileAPI.OfferJobForTradeDTO)">
            <summary>
            
            </summary>
            <param name="offerJobForTrade"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.MobileControllers.TradesController.CancelOwnTradeOffer(System.Int64)">
            <summary>
            Cancel employee own trade offer. This will cancel trade offer of employee who put job on trade
            </summary>
            <param name="id">Trade offer's primary key</param>
            <returns>Ok if trade offer is cancelled, bad request if something went wrong.</returns>
            <response code="200">Returns Ok if trade offer is cancelled.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="401">Unauthorized</response>
            <response code="500">Some unhandled exception has been occurred.</response>
        </member>
        <member name="T:ESolve.Controllers.PermissionOptionsController">
            <summary>
            Permission options endpoints.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.PermissionOptionsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PermissionOption})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="permissionOptionManager">Repository which will be casted into PermissionOptionManager object.</param>
        </member>
        <member name="M:ESolve.Controllers.PermissionOptionsController.GetAll">
            <summary>
            This Endpoint Return all PermissionType From Database table tblPermissionType.
            See <see cref="T:ESolve.Entities.Models.PermissionType"/> for model details.
            </summary>
            <returns>IEnumerable list of Permisson types</returns>
            <response code="200">IEnumerable list of Permission types</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.PermissionTypesController">
            <summary>
            Permission type endpoints.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.PermissionTypesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PermissionType})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="permissionTypeManager">Repository which will be casted into PermissionTypeManager object.</param>
        </member>
        <member name="M:ESolve.Controllers.PermissionTypesController.GetAll(System.Boolean)">
            <summary>
            This Endpoint Return all PermissionType From Database table tblPermissionType.
            See <see cref="T:ESolve.Entities.Models.PermissionType"/> for model details.
            </summary>
            <returns>IEnumerable list of Permisson types</returns>
            <response code="200">IEnumerable list of Permission types</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.ProfilesController">
            <summary>
            Profile's endpoints
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AuditTrail})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="profileManager">Repository which will be casted into ProfileManager object.</param>
            <param name="auditTrailManager">Repository which will be injected in AuditTrailManager</param>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.GetAll(ESolve.Entities.Pagination.SampleFilterModel)">
            <summary>
            This Endpoint Return all employees/users profiles From Database table tblProfiles.
            See <see cref="T:ESolve.Entities.Models.Profile"/> for model details.
            </summary>
            <returns>Return collection of profiles.</returns>
            <response code="200">Return collection of profiles.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.Get(System.Int64)">
            <summary>
            This enpoint returns profile with passed id.
            See <see cref="T:ESolve.Entities.Models.Profile"/> for model details.
            </summary>
            <param name="id">Represent Id of wanted Profile</param>
            <returns>Profile from Database if exists, otherwise BadRequest.</returns>
            <response code="200">Ok with permission dto which has profile and his permissions</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Passed Primary Key doesn't exists in Database.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.GetSystemsAutoSolvePermission">
            <summary>
            Return AutoSolve App Permission for Users
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.GetProfilesAutoSolvePermission(System.Int64)">
            <summary>
            Return AutoSolve User Permission for Users
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.GetProfilePermissionsForAnAccount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.GetLinkedEmployeeRights">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.Add(ESolve.Entities.DTOs.PermissionDTO)">
            <summary>
            Endpoint for adding new profile in tblProfiles
            </summary>
            <param name="permissionDTO">DTO for creating new profile in databse</param>
            <returns>Ok result and Link For access him in Header [Location propertie] if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="201">Ok result and Link For access him in Header [Location propertie].</response>
            <response code="400">Some error has been occured during saving new Profile.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.DuplicateProfile(System.Int64,System.String)">
            <summary>
            Endpoint for duplicating existing profile.
            </summary>
            <param name="id">Profile's primary key for copying</param>
            <param name="name">Name of duplicated profile</param>
            <returns>Ok result with new Profile object, and Link For access him in Header [Location propertie] if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="201">Ok result with Profile object, and Link For access him in Header [Location propertie].</response>
            <response code="400">Some error has been occured during saving new EmployeeProfile.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.Update(ESolve.Entities.DTOs.PermissionDTO)">
            <summary>
            This method update passed Profile in Database table tblProfiles, with values passed in Profile object.
            </summary>
            <param name="permissionDTO">Permssion dto with new values of existing profile in database</param>
            <returns>Ok result with Profile object, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result with EmployeeProfile updated properties.</response>
            <response code="400">Some error has been occured during saving new EmployeeProfile.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ProfilesController.Delete(System.Int64)">
            <summary>
            Method removes Profile object from tblProfiles and from all connected tables where ProfileID is required.
            </summary>
            <param name="id">Represents id of Profile which will be deleted.</param>
            <returns>Ok if Profile is deleted or BadRequest if something went wrong.</returns>
            <response code="200">Profile has been removed.</response>
            <response code="400">Some error has been occured during deleting existing Profiles.</response>
            <response code="404">Profiles with passed Id doesn't exists in Database table tblProfiles.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.PushNotificationController">
            <summary>
            EndPoints for push notifications
            </summary>
        </member>
        <member name="M:ESolve.Controllers.PushNotificationController.#ctor(System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}})">
            <summary>
            Constructor which initalize all DataManagers
            </summary>
            <param name="serviceProvider">Service provider which provide us manager for push notification</param>
        </member>
        <member name="M:ESolve.Controllers.PushNotificationController.GetAll(System.Int64,System.Boolean)">
            <summary>
            Get all notification for user by userId
            </summary>
            <param name="id">Id of user or employee</param>
            <param name="isUser">Tells us whether it is a user or an employee</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.PushNotificationController.GetNumberOfUnreadNotifications(System.Int64,System.Boolean)">
            <summary>
            et number of unreaded notifications
            </summary>
            <param name="id">Id of user or employee</param>
            <param name="isUser">Tells us whether it is a user or an employee</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.PushNotificationController.Update(System.Int64)">
            <summary>
            Update notification
            </summary>
            <param name="pushNotificationId">Notification for update</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.PushNotificationController.MultiUpdate(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Update notification list
            </summary>
            <param name="listOfNotificationsIds">Ids of notification which need to be update</param>
            <param name="shouldDeleteOrArchive">Should they be archived or deleted</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Controllers.RankingsController">
            <summary>
            Rankings endpoints
            </summary>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Ranking},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.RankingRule})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="rankingRepository">Repository which will be casted into RankingManager object.</param>
            /// <param name="rankingRuleRepository">Repository which will be casted into RankingRuleManager object.</param>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.GetAllBySchedule(System.Int64)">
            <summary>
            Get all rankings of selected schedule.
            Returns list of RankingListViewDTO.
            </summary>
            <param name="id">Represents schedule ID which is selected.</param>
            <returns>Returns all rankings with selected schedule or empty array if there is not any rankings for selected schedule.</returns>
            <response code="200">Returns list of RankingListViewDTO based on Rankings in database. See <see cref="T:ESolve.Entities.DTOs.RankingListViewDTO"/> for details.</response>
            <response code="404">Returns if schedule with given id doesn't exist.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.GetAllByScheduleWithAllRankingFields(System.Int64)">
            <summary>
            Get all rankings of selected schedule.
            Returns all rankings of selected schedule (with all fields)
            </summary>
            <param name="id">Represents schedule ID which is selected.</param>
            <returns>Returns all rankings with selected schedule or empty array if there is not any rankings for selected schedule.</returns>
            <response code="200">Returns list of Rankings in database. See <see cref="T:ESolve.Entities.Models.Ranking"/> for details.</response>
            <response code="404">Returns if schedule with given id doesn't exist.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.GetAll">
            <summary>
            Get all rankings.
            Returns all rankings.
            </summary>
            <returns>Returns all rankings</returns>
            <response code="200">Returns list of Rankings in database. See <see cref="T:ESolve.Entities.Models.Ranking"/> for details.</response>
            <response code="404">Returns if schedule with given id doesn't exist.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.Get(System.Int64)">
            <summary>
            Method returns Ranking from Database where Primary Key is equal with passed value.
            </summary>
            <param name="id">Represent Id of wanted Ranking</param>
            <returns>Return Ranking from Database or null if ranking with that Id doesnt exists</returns>
            <response code="200">Returns Ranking object based on Ranking from database </response>
            <response code="404">Returns when user sent id which doesn't exists in tblRankings.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.GetRankingRules(System.Int64)">
            <summary>
            Method returns RankingDTO based in Ranking from Database where Primary Key is equal with passed value.
            </summary>
            <param name="id">Represent Id of wanted Ranking</param>
            <returns>Return Ranking from Database or null if ranking with that Id doesnt exists</returns>
            <response code="200">Returns RankingDTO object based on Ranking from database </response>
            <response code="404">Returns when user sent id which doesn't exists in tblRankings.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.Add(ESolve.Entities.DTOs.RankingDTO)">
            <summary>
            Inserts new Ranking into database.
            </summary>
            <param name="rankingDTO">RankingDTO instance which will be use for create ranking.</param>
            <returns>Returns added Ranking and Link to it in Response Header [Location propertie] if is created, and BadRequest if Action fails.</returns>
            <response code="200">Ranking and Link to it in Response Header [Location propertie].</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.Put(System.Int64,ESolve.Entities.DTOs.RankingListViewDTO[])">
            <summary>
            Update rankings in passed list with rankingListViewDTOs.
            </summary>
            <param name="id">Primary Key of object which should be updated</param>
            <param name="rankingListViewDTO">List RankingListViewDTO instances with new values</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.Put(System.Int64,ESolve.Entities.DTOs.RankingDTO)">
            <summary>
            Update Ranking in Database with passed values inside RankingDTO object.
            </summary>
            <param name="id">Primary Key of object which should be updated</param>
            <param name="rankingDTO">RankingDTO instance with new values</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="404">Return if given ranking Id doesn't exist.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.Delete(System.Int64)">
            <summary>
            Deletes Ranking where Primary Key in Database is equal with passed value. 
            Also method will remove all connected entities where RankingID is required.
            </summary>
            <param name="id">Ranking Primary Key</param>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.IsNameUnique(ESolve.Entities.Filters.RankingNameFilterModel)">
            <summary>
            Check if ranking name is unique for selected schedule.
            </summary>
            <param name="filter">RankingNameFilterModel model which has RankingID, ScheduleID and ranking name.</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingsController.GetEmployeeFields">
            <summary>
            Get Employee Fields for dropdown in comaparson rule.
            </summary>
            <returns>Retruns ok with employee fields array.</returns>
        </member>
        <member name="T:ESolve.Controllers.RankingTypesController">
            <summary>
            RankingType endpoints
            </summary>
        </member>
        <member name="M:ESolve.Controllers.RankingTypesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.RankingType})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="rankingTypeRepository">Repository which will be casted into RankingTypeManager object.</param>
        </member>
        <member name="M:ESolve.Controllers.RankingTypesController.Get">
            <summary>
            Get All Ranking Types.
            </summary>
            <returns>All ranking types from Database.</returns>
            <response code="200">All ranking types from database. See <see cref="T:ESolve.Entities.Models.RankingType"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.RankingTypesController.Get(System.Int64)">
            <summary>
            Returns ranking type with passed ID.
            </summary>
            <param name="id">Represents Primary Key in database.</param>
            <returns>Ranking type if it exists or BadRequest if ranking type doesn't exists.</returns>
            <response code="200">Returns ranking type if he exists in Database. See <see cref="T:ESolve.Entities.Models.RankingType"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="T:ESolve.Controllers.ReportController">
            <summary>
            Endpoints for managing reports
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ReportController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ReportType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ReportGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.DTOs.EmployeeData},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User})">
            <summary>
            Constructor which initialize Report types Manager
            </summary>
            <param name="reportTypesRepository">Repository which will be injected in ReportTypeManager. <see cref="T:ESolve.Entities.DataManager.ReportTypeManager"></see></param>
            <param name="scheduleRepository">Repository which will be injected in ScheduleManager. <see cref="T:ESolve.Entities.DataManager.ScheduleManager"></see></param>
            <param name="reportGroupRepository">Repository which will be injected in ReportGroupManager. <see cref="T:ESolve.Entities.DataManager.ReportGroupManager"></see></param>
            <param name="employeeDataRepository">Repository which will be injected in EmployeeDataManager. <see cref="T:ESolve.Entities.DataManager.EmployeeDataManager"></see></param>
            <param name="profilePermissionsRepository">Repository which will be injected in ProfileManager. <see cref="T:ESolve.Entities.DataManager.ProfileManager"/></param>
            <param name="userRepository">Repository which will be injected in UserManager. <see cref="T:ESolve.Entities.DataManager.UserManager"/></param>
        </member>
        <member name="M:ESolve.Controllers.ReportController.GetAllReportTypes">
            <summary>
            Get All Report types.
            </summary>
            <returns>All Reports from Database.</returns>
            <response code="200">All Report types from Database. See <see cref="T:ESolve.Entities.Models.ReportType"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Controllers.ReportController.GetCustomReportData(System.Int64)">
            <summary>
            Get All custom report data, 
            </summary>
            <param name="id"></param>
            <returns>All custom report data.</returns>
            <response code="200">All custom report data. See <see cref="T:ESolve.Entities.Models.CustomReportData"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Controllers.ReportController.PostPdfReport(ESolve.Entities.DTOs.ReportDataDTOs)">
            <summary>
            Method for exporting reports in pdf format
            </summary>
            <param name="reportData">Represents the criteria by which the report will be generated</param>
            <returns>The return value is the stream bytes that represent the report in pdf format</returns>
            <response code="200">Returns a pdf report</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Controllers.ScheduleApprovedController">
            <summary>
            Controller for accesing Employee approved Schedules
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ScheduleApprovedController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobStatus},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceRequest},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.LoneWorkerAlert},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AttendanceConfirmation})">
            <summary>
            Constructor which initialize all managers that would be used in methods
            </summary>
            <param name="jobManager">Manager for actions on jobs</param>
            <param name="jobAvailabilityManager">Manager for actions on job availabilities</param>
            <param name="jobTypeManager">Manager for actions on job types</param>
            <param name="subGroupManager">Manager for actions on subgroups</param>
            <param name="scheduleManager">Manager for actions on schedules</param>
            <param name="jobStatusManager">Manager for actions on job statuses</param>
            <param name="absenceRequestManager">Manager for actions on absences</param>
            <param name="tradeManager">Manager for actions on trade offers</param>
            <param name="loneWorkerAlertsManager">Manager for actions on lone worker alerts</param>
            <param name="attendanceConfirmationAlertsManager">Manager for actions on lone worker alerts</param>
        </member>
        <member name="M:ESolve.Controllers.ScheduleApprovedController.GetApprovedJobsFromRange(ESolve.Entities.Filters.MobileCalendarViewFilterModel)">
            <summary>
            Endpoint which will return all Jobs for logged in employee where he is assigned, assigment is approved
            employee availability is completeley valid and job is in passed range
            </summary>
            <param name="calendarViewFilterModel"></param>
            <returns>Dictionary (string, object) with jobs and job types</returns>
            <response code="200">Dictionary objects with key - value pair (string, object) which satisfies all requirements.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Returns bad request.</response>
        </member>
        <member name="T:ESolve.Controllers.ScheduleDatePreferenceController">
            <summary>
            Schedule Date Preferences Endpoints.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ScheduleDatePreferenceController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJob},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize Manager object.
            </summary>
            <param name="repository">Repository which will be casted into ScheduleDatePreferenceManager object.</param>
            <param name="jobAvailabilityManager">JobAvailability manager.</param>
            <param name="templateJobManager"></param>
            <param name="serviceProvider"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.ScheduleDatePreferenceController.Get">
            <summary>
            This Endpoint Return ScheduleDatePreference From Database table tblScheduleDatePreferences. ScheduleDatePreference is an singleton object
            See <see cref="T:ESolve.Entities.Models.ScheduleDatePreference"/> for model details.
            </summary>
            <returns>ScheduleDatePreference from Database if exists, otherwise BadRequest.</returns>
            <response code="200">ScheduleDatePreference object.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ScheduleDatePreferenceController.Update(ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            This Endpoint updates ScheduleDatePreference in Database table tblScheduleDatePreferences, with values passed in ScheduleDatePreference object.
            </summary>
            <param name="scheduleDatePreference">ScheduleDatePreference model object See <see cref="T:ESolve.Entities.Models.ScheduleDatePreference"/> for model details.</param>
            <returns>Ok result with ScheduleDatePreference object, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result with ScheduleDatePreference updated properties.</response>
            <response code="400">Some error has been occured during saving new ScheduleDatePreference.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.SchedulePreferenceController">
            <summary>
            Schedule Preferences Endpoints.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SchedulePreferenceController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SchedulePreference},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize Manager object.
            </summary>
            <param name="repositoryBase">Repository which will be casted into SchedulePreferenceManager object.</param>
            <param name="tradesManager">Manager for trades offers</param>
            <param name="serviceProvider">Service provider which provide us manager for push notification</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.SchedulePreferenceController.Get">
            <summary>
            This Endpoint return SchedulePreference From Database table tblSchedulePreferences. SchedulePreference is an singleton object
            See <see cref="T:ESolve.Entities.Models.SchedulePreference"/> for model details.
            </summary>
            <returns>SchedulePreference from Database if exists, otherwise BadRequest.</returns>
            <response code="200">SchedulePreference object.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulePreferenceController.Update(ESolve.Entities.Models.SchedulePreference)">
            <summary>
            This Endpoint updates SchedulePreference in Database table tblSchedulePreferences, with values passed in SchedulePreference object.
            </summary>
            <param name="schedulePreference">SchedulePreference model object See <see cref="T:ESolve.Entities.Models.SchedulePreference"/> for model details.</param>
            <returns>Ok result with SchedulePreference object, if action is sucessfull or BadRequest if action fails for some reason.</returns>
            <response code="200">SchedulePreference object.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.SchedulesController">
            <summary>
            Endpoints for managing Schedules
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.BrokenRule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroupsApproval},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceRequest},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Template},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AuditTrail},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Constraint},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize all DataManagers
            </summary>
            <param name="scheduleRepository">Repository which will be injected in ScheduleManager</param>
            <param name="subGroupRepository">Repository which will be injected in Subgroup manager</param>
            <param name="jobAvailabilityManager">Repository which will be injected in JobAvailabilityManager</param>
            <param name="jobTypeManager">Repository which will be injected in JobTypeValueManager</param>
            <param name="brokenRulesManager">Repository which will be injected in BrokenRulesManager</param>
            <param name="subGroupsApprovalManager">Repository which will be injected in SubGroupsApprovalManager</param>
            <param name="userManager">Repository which will be injected in UserManager</param>
            <param name="jobManager">Repository which will be injected in JobManager</param>
            <param name="absenceRequestManager">Repository which will be injected in AbsenceRequestManager</param>
            <param name="profileManager">Repository which will be injected in ProfileManager</param>
            <param name="templateManager">Repository which will be injected in TemplateManager</param>
            <param name="employeeManager">Repository which will be injected in EmployeeManager</param>
            <param name="auditTrailManager">Repository which will be injected in AuditTrailManager</param>
            <param name="constraintManager">Repository which will be injected in ConstraintManager</param>
            <param name="configuration"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.Get">
            <summary>
            Return all Schedules with connected entities from Database. See <see cref="T:ESolve.Entities.Models.Schedule"/> for model details.
            </summary>
            <returns>Action result with all Schedules</returns>
            <response code="200">All Schedules from tblSchedules in Database.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.Get(System.Int64)">
            <summary>
            Getting schedule with passed primary key with his custom data
            Returned Schedule is a Schedule where Primary Key in Database is equal with passed id.
            </summary>
            <param name="id">Schedule Primary Key</param>
            <returns>Action result with selected schedule</returns>
            <response code="200">Schedule from Database if exists..</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.GetDeleteScheduleMessage(System.Int64)">
            <summary>
            For passed schedule id system will return appropriate delete message
            </summary>
            <param name="id">Schedule Primary Key</param>
            <returns>Action result with selected schedule</returns>
            <response code="200">Schedule from Database if exists..</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.GetScheduleSubGroups(System.Int64)">
            <summary>
            Get SubGroups in Hierarchy Node Structure where Schedule id is equal with passed value. 
            </summary>
            <param name="id">Schedule Primary Key</param>
            <returns>SubGroups in Hierarchy Node Structure where Schedule id is equal with passed value</returns>
            <response code="200">SubGroups in Hierarchy Node Structure.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.GetScheduleSubGroupsForCalendar(ESolve.Entities.Filters.SubGroupCalendarFilterModel)">
            <summary>
            SubGroups in Hierarchy Node Structure where HideFrom is Before or inside Range.
            </summary>
            <param name="subGroupCalendarFilterModel">Represents Filter model for selecting appropriate SubGroup.</param>
            <returns>SubGroups in Hierarchy Node Structure</returns>
            <response code="200">SubGroups in Hierarchy Node Structure where HideFrom is Before or inside Range.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.GetScheduleComboValues">
            <summary>
            Returns all Genders in Id and Name structure. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for details.
            </summary>
            <returns>All Schedules in IdNameDropDownModel Structure</returns>
            <response code="200">All Schedules in IdNameDropDownModel Structure.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.IsScheduleNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check is Schedule Name unique for selected Schedule or is Name available for new Schedule.
            If we add new Schedule, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on Schedule.Id.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is ScheduleID and Schedule Name</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.IsDateRangeInSubgroup(ESolve.Entities.DTOs.IdDatesDTO)">
            <summary>
            This endpoint checks is new DateRangeAvailable. New Date range is available if all jobs from that subgroup are inside new interval.
            </summary>
            <param name="idDatesDTO"></param>
            <returns>true if range is available, false if it is not.</returns>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.GetScheduleNameToApplyConstraintFromIt">
            <summary>
            Get schedule list to copy constraints from
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.Add(ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData)">
            <summary>
            Inserts passed Schedule object in Database Table tblSchedules. 
            After storing Schedule in Database method will add and Not already assigned Constraints. 
            </summary>
            <param name="schedule">Schedule object which will be inserted.</param>
            <returns></returns>
            <response code="201">Schedule inserted successfully.</response>
            <response code="400">Schedule can't be inserted.</response>
            <response code="500">Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.CopyData(ESolve.Entities.DTOs.CopyDataForwardDTO)">
            <summary>
            Copy subgroup's or schedule's data forward based on passed date range in CopyDataForwardDTO
            </summary>
            <param name="dataForward">DTO with values that is required for copy data forward.</param>
            <returns>OK if data's copying is successfully done, otherwise bad request</returns>
            <response code="200">Data is copied successfully.</response>
            <response code="400">Data is not coped successfully.</response>
            <response code="500">Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.OverrideAssigments(System.Collections.Generic.List{ESolve.Entities.DTOs.WarningDetailsDTO})">
            <summary>
            Assign employees that break constraints
            </summary>
            <param name="warningDetails">Rules that user accepted.</param>
            <returns>OK if data's copying is successfully done, otherwise bad request</returns>
            <response code="200">Employee are assigned successfully.</response>
            <response code="400">Something went wrong.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.Put(System.Int64,ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData)">
            <summary>
            Update existing schedule with new passed values.
            </summary>
            <param name="id">Primary Key of Schedule which will be updated.</param>
            <param name="schedule">Schedule object with new values.</param>
            <returns></returns>
            <response code="200">Schedule updated successfully.</response>
            <response code="400">Schedule can't be updated.</response>
            <response code="500">Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.UnAssign(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            This endpoint removes all employee assignments from this Subgroup and all Subgroups in ParentChild structure
            </summary>
            <param name="id">SubGroup Primary Key.</param>
            <param name="startDate">Start date of current displayed period.</param>
            <param name="endDate">End date of current displayed period.</param>
            <returns>OK if action is successful, otherwise False.</returns>
            <response code="200">All assignments successfully removed.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.SchedulesController.Delete(System.Int64)">
            <summary>
            Delete Schedule and all connected entities where ScheduleID can't be NULL.
            </summary>
            <param name="id">Represent Primary Key of Schedule which we want to delete.</param>
            <returns>Ok if Schedule is successfully deleted or BadRequest.</returns>
            <response code="200">Schedule deleted successful.</response>
            <response code="400">Schedule can't be deleted.</response>
        </member>
        <member name="T:ESolve.Controllers.SecurityController">
            <summary>
            Endpoints for managing security.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SecurityController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Security})">
            <summary>
            Constructor which initialize all repositories needed for methods in PasswordComplexityController. 
            </summary>
            <param name="securityRepository"></param>
        </member>
        <member name="M:ESolve.Controllers.SecurityController.Get(System.Boolean)">
            <summary>
            Get password security from database.
            </summary>
            <param name="secured">Indicator for whether the endpoint should be authorized or not.</param>
            <returns>Return password security object from database.</returns>
            <response code="200">Returns password security object from database.</response>
            <response code="400">Returns if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.SecurityController.Put(System.Int64,ESolve.Entities.Models.Security)">
            <summary>
            Update password security in database with new values which are passed in security object.
            </summary>
            <param name="id">Security primary key.</param>
            <param name="security">Security object with new values.</param>
            <returns>Security with updated values.</returns>
            <response code="200">Updated Security and Link to access him in Header.</response>
            <response code="400">Return if action is failed from some reason.</response>
            <response code="400">Security with passed id doesn't exist.</response>
        </member>
        <member name="T:ESolve.Controllers.ShiftsController">
            <summary>
            Controller for shifts
            </summary>
            <summary>
            Endpoints for managing shifts.
            </summary>
        </member>
        <member name="F:ESolve.Controllers.ShiftsController._shiftManager">
            <summary>
            Manager for shifts
            </summary>
        </member>
        <member name="M:ESolve.Controllers.ShiftsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Shift})">
            <summary>
            Constructor which initialize ShiftManager
            </summary>
            <param name="shiftManager">Repository which will be injected in ShiftManager</param>
        </member>
        <member name="M:ESolve.Controllers.ShiftsController.GetAll">
            <summary>
            Get all shifts
            </summary>
            <returns>All shifts from database</returns>
            <response code="200">All shifts from database See <see cref="T:ESolve.Entities.Models.Shift"/> for details.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ShiftsController.GetAll(System.Int64,System.Int64,System.Int32)">
            <summary>
            Get all shifts by user id
            </summary>
            <param name="id">Id of user</param>
            <param name="jobID">Job's primary key</param>
            <param name="IsRegular">Indicator for type of job. Regular, Template etc etc</param>
            <returns>All shifts from database for user</returns>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ShiftsController.Get(System.Int64)">
            <summary>
            Get shift with passed id
            </summary>
            <returns>Shift from database with passed primary key.</returns>
            <response code="200">Shift from database with passed primary key. See <see cref="T:ESolve.Entities.Models.Shift"/> for details.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ShiftsController.IsShiftCodeUnique(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            EndPoint to check if a shift group with such a code already exists
            </summary>
            <param name="shiftCode">The code we are checking for</param>
            <returns>If code is uniq we return http code 200, but if code isn't unique we return http code 201 with appropriate message</returns>
            <response code="200">Shift from database with passed primary key. See <see cref="T:ESolve.Entities.Models.Shift"/> for details.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.ShiftsController.Delete(System.Int64)">
            <summary>
            Deletes shift from database
            </summary>
            <param name="id">Shift's primary key</param>
            <returns>Ok if shift is successfully deleted, false if it is not.</returns>
            <response code="200">Shift is successfully deleted.</response>
            <response code="400">Something went wrong while deleting shift.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.SkillCodesController">
            <summary>
            Endpoints for managing SkillCodes
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SkillCodesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SkillCode})">
            <summary>
            Constructor which initialize SkillCode Manager
            </summary>
            <param name="repository">Repository which will be injected in SkillCodeManager</param>
        </member>
        <member name="M:ESolve.Controllers.SkillCodesController.GetSkillCodeName(System.Int64)">
            <summary>
            Endpoint for passed SkillCode Id returns SkillCode Name
            </summary>
            <param name="id">Skill Code primary Key</param>
            <returns>Ok if name or Id exists otherwise BadRequest.</returns>
            <response code="200">SkillCode Name.</response>
            <response code="400">Error has been occured during action excecuting.</response>
            <response code="404">You have entered Id that doesn't exists in Database.</response>
        </member>
        <member name="M:ESolve.Controllers.SkillCodesController.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            This method checks is SkillCode Name passed inside filter unique in Database. 
            If we adding new SkillCode in filter model propertie Id we put 0, otherwise we put SkilCode.Id test
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.IdStringContentFilterModel"/> for details.</param>
            <returns></returns>
            <response code="200">SkillCode is available.</response>
            <response code="400">SkillCode Name has been occupied from another SkillCode.</response>
        </member>
        <member name="M:ESolve.Controllers.SkillCodesController.GetComboValues">
            <summary>
            Returns all SkillCodes in Id and Name structure. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for details.
            </summary>
            <returns>All SkillCodes in Id and Name structure</returns>
            <response code="200">Returns All SkillCodes in Id and Name structure</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception occur's.</response>
        </member>
        <member name="T:ESolve.Controllers.SkillMatricesController">
            <summary>
            SkillMatrices Endpoints.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SkillMatricesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SkillMatrix},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SkillCode},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobAvailability},ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize dataManager's
            </summary>
            <param name="skillMatrixRepository">SkillMatrix repository for managing SkillMatrix data.</param>
            <param name="skillCodeManager">SkillCode repository for managing SkillCode data.</param>
            <param name="jobAvailabilitymanager">JobAvailability repository for managing JobAvailability data.</param>
            <param name="jobTypeManager">JobTypeValueManager repository for managing Job type value data.</param>
            <param name="templateJobAvailabilityManager">TemplateJobAvailabilityManager repository for managing TemplateJobAvailability data.</param>
            <param name="assignmentNotificationManager">Assignment notification manager</param>
            <param name="configuration">Application's configuration</param>
        </member>
        <member name="M:ESolve.Controllers.SkillMatricesController.GetSkillsByEmployee(System.Int64)">
            <summary>
            End point for filters all skills for the passed id from the employee
            </summary>
            <param name="id">Id of employee</param>
            <returns>A list of skills for a employee</returns>
        </member>
        <member name="M:ESolve.Controllers.SkillMatricesController.FilterSkillMatrix(ESolve.Entities.Filters.SkillMatricesFilterModel)">
            <summary>
            Filter skill matrix
            </summary>
            <param name="filter">Filter which poses does we filtering Employees or SkillCodes. See <see cref="T:ESolve.Entities.Filters.SkillMatricesFilterModel"/> for model details</param>
            <returns>PagedCollectionResponse of SkillMatricesDTO objects</returns>
            <response code="200">PagedCollectionResponse of SkillMatricesDTO objects.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SkillMatricesController.PopulateFilter">
            <summary>
            Returns the list of 
            </summary>
            <returns>List of available skill codes</returns>        
            <response code="200">Collection of String/List pair of skill codes and job type filter parameters</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SkillMatricesController.Add(System.Int64)">
            <summary>
            Method adds passed skill code into tbl skillmatrices. Assigns all employes from tblEmployees with False Value.
            </summary>
            <param name="id">Skill Code Primary Key.</param>
            <returns>Created if action is sucessfull, otherwise BadRequest</returns>
            <response code="201">All Employees Are Assigned to the passed SkillCode.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SkillMatricesController.Put(ESolve.Entities.DTOs.SkillMatrixDTO)">
            <summary>
            This method will update Value propertie in Database table tblSkillMatrices. 
            New Value is passed inside SkillMatrixDTO object. See <see cref="T:ESolve.Entities.DTOs.SkillMatrixDTO"/> for model details.
            </summary>
            <param name="skillMatrixDTO">SkillMatrixDTO with new values.</param>
            <returns>Ok if action is sucessful otherwise BadRequest.</returns>
            <response code="200">Value has been sucessfully updated.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SkillMatricesController.Delete(System.Int64)">
            <summary>
            This endpoint removes all assigned values int tblSkillMatrices, after that removes passed SkillCode.
            </summary>
            <param name="id">SkillCode Primary Key.</param>
            <returns>Ok if action is sucessful otherwise BadRequest.</returns>
            <response code="200">SkillCode has been sucessfully deleted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.SpecialDatesController">
            <summary>
            Endpoints for special dates
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SpecialDatesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SpecialDate})">
            <summary>
            Constructor which initialize SpecialDateManager
            </summary>
            <param name="specialDateManager">Manager for special dates</param>
        </member>
        <member name="M:ESolve.Controllers.SpecialDatesController.GetAll">
            <summary>
            Get all special dates from database
            </summary>
            <returns>All special dates from database</returns>
            <response code="200">Ok with list of special dates</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.SpecialDatesController.Get(System.Int64)">
            <summary>
            Get special date with passed ID
            </summary>
            <returns>All special dates from database</returns>
            <response code="200">Ok with list of special dates</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.SpecialDatesController.Add(ESolve.Entities.Models.SpecialDate)">
            <summary>
            Adding new special date
            </summary>
            <param name="specialDate">Sepcial date object with values.</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.SpecialDatesController.Put(System.Int64,ESolve.Entities.Models.SpecialDate)">
            <summary>
            Update existing special date from database
            </summary>
            <param name="specialDate">Special date object with new values.</param>
            <param name="id">Special date0s primary key</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.SpecialDatesController.Delete(System.Int64)">
            <summary>
            Deleting special date with passed primary key
            </summary>
            <param name="id">Special dates primary key</param>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="T:ESolve.Controllers.SpecialDateTypesController">
            <summary>
            Endpoints for managing Special Date Types
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SpecialDateTypesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SpecialDateType})">
            <summary>
            Constructor which initialize SpecialDateType manager
            </summary>
            <param name="specialDateTypeManager">Manager for special date types</param>
        </member>
        <member name="M:ESolve.Controllers.SpecialDateTypesController.GetAll">
            <summary>
            Get all special date types from database
            </summary>
            <returns>All special date types from database</returns>
            <response code="200">Ok with list of special date types</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.SpecialDateTypesController.IsNameExist(System.Int64,System.String)">
            <summary>
            Endpoint for checkiing if special date type name already exists.
            </summary>
            <returns>All Jobs from Database.</returns>
            <response code="200">Ok if there is no passed name, false if name is alredy in user</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.SpecialDateTypesController.AddOrUpdate(System.Collections.Generic.List{ESolve.Entities.Models.SpecialDateType})">
            <summary>
            Inserts or updates list of special date types into database
            </summary>
            <param name="specialDateTypes">List of SpecialDateType objects which will be used for created new special date types in database or update existing</param>
            <returns>Return Ok if special date types are succeessfully added/updated and false if are not.</returns>
            <response code="200">Special date types are added/updated.</response>
            <response code="400">Special date types couldn't be inserted/updated.</response>
        </member>
        <member name="M:ESolve.Controllers.SpecialDateTypesController.Delete(System.Int64)">
            <summary>
            Delete special date type if it is not in use
            </summary>
            <param name="id">Sepcial date type's primary key</param>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="T:ESolve.Controllers.SubGroupsApprovalController">
            <summary>
            Endpoints for managing subGroups approval
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsApprovalController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroupsApproval},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AuditTrail})">
            <summary>
            Constructor which initialize SubGroupsApproval Manager
            </summary>
            <param name="subGroupsApprovalManager">Repository which will be injected in ReportTypeManager. <see cref="T:ESolve.Entities.DataManager.SubGroupsApprovalManager"></see></param>
            <param name="scheduleManager"></param>
            <param name="serviceProvider"></param>
            <param name="subGroupManager"></param>
            <param name="configuration"></param>
            <param name="auditTrailManager">Repository which will be injected in AuditTrailManager</param>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsApprovalController.GetAll(ESolve.Entities.Filters.ScheduleApprovalFilterModel)">
            <summary>
            This Endpoint Return all schedules/subgroups From Database table tblSubGroupsApproval.
            </summary>
            <returns>Return collection of submited schedules and subgroups.</returns>
            <response code="200">Return collection of schedules/subgroups.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsApprovalController.ScheduleSearch(System.Int64)">
            <summary>
            Based on the user id, we return the schedule list
            </summary>
            <param name="userId">Id of user</param>
            <returns>The list of schedules for which the user has the right to make modifications</returns>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsApprovalController.ScheduleApprovalDetails(ESolve.Entities.DTOs.SubmitedScheduleDetailsDTO)">
            <summary>
            Based on the submitted data, we return a list of approval schedules or subgroups
            </summary>
            <param name="submitedScheduleDetails">Object based on when we return submitted schedules or subgroups</param>
            <returns>List of submitted schedules or subgroups</returns>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsApprovalController.AnyChanges(ESolve.Entities.Filters.CalendarViewFilterModel)">
            <summary>
            Endpoint requested every time when some range is locked
            </summary>
            <param name="calendarViewFilterModel">CalendarViewFilterModel object</param>
            <returns>Ok with true</returns>
            <response code="200">Ok with true value</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsApprovalController.IsJobStartingInPast(ESolve.Entities.Filters.CalendarViewFilterModel)">
            <summary>
            Check if any job in the given schedule is starting before current date and time.
            </summary>
            <param name="calendarViewFilterModel"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsApprovalController.SubmitSubGroups(ESolve.Entities.DTOs.SubGroupsForSubmitDTO)">
            <summary>
            Submitt for approval selected range
            </summary>
            <param name="subGroupsForSubmit">An object that contains the subgroup id, the beginning and end of the period being submitted</param>
            <returns>We return the status code 200</returns>
            <response code="201">Schedule inserted sucessfully.</response>
            <response code="400">Schedule can't be inserted.</response>
            <response code="500">Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsApprovalController.ApproveOrRejectSubmitedItem(ESolve.Entities.DTOs.IdBooleanCustomDTO)">
            <summary>
            Submitt for approval selected range
            </summary>
            <param name="idBooleanCustom">An object that contains the subgroup id, the beginning and end of the period being submitted</param>
            <returns>We return the status code 200</returns>
            <response code="201">Schedule inserted sucessfully.</response>
            <response code="400">Schedule can't be inserted.</response>
            <response code="500">Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.SubGroupsController">
            <summary>
            SubGroup Endpoints
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule})">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="repository">Context which will be injected in Repository Context</param>
            <param name="jobAvailabilityManager">Context which will be injected in Repository Context</param>
            <param name="jobManager">Context which will be injected in Repository Context</param>
            <param name="employeeManager">Context which will be injected in Repository Context</param>
            <param name="scheduleManager">Context which will be injected in Repository Context</param>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.Get">
            <summary>
            Returns all SubGroups from Database. Each SubGroup in collection posess Entites which are connected over Foreign Kies.
            See <see cref="T:ESolve.Entities.Models.SubGroup"/> for model details.
            </summary>
            <returns>List of all SubGroups in Database.</returns>
            <response code="200">IEnumerable collection of SubGroups.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.Get(System.Int64)">
            <summary>
            Returns all SubGroup from Database where Primary Key in Database is equal with passed value.
            SubGroup posess Entites which are connected over Foreign Kies.
            See <see cref="T:ESolve.Entities.Models.SubGroup"/> for model details.
            </summary>
            <returns>SubGroup from Database if exists or BadRequest if not.</returns>
            <response code="200">SubGroup from Database.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.GetSubGroupCustomData(System.Int64)">
            <summary>
            Returns all SubGroup CustomData from Database where SubGroup Primary Key in Database is equal with passed value.
            SubGroupCustomData posess Entites which are connected over Foreign Kies.
            See <see cref="T:ESolve.Entities.Models.SubGroupCustomData"/> for model details.
            </summary>
            <returns>SubGroupCustomData from Database if exists</returns>
            <response code="200">SubGroupCustomData from Database.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.GetSubGroupComboValues">
            <summary>
            Returns all SubGroups in Id and Name structure. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for details.
            </summary>
            <returns>All SubGroups in Id and Name structure</returns>
            <response code="200">Returns All SubGroups in Id and Name structure</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.GetDropdownListOfScheduleSubGroups(System.Int64)">
            <summary>
            Endpoint for retrieving a dropdown list of SubGroups of a particular Schedule.
            </summary>
            <param name="id">Represents Primary Key of a Schedule whose SubGroups we'll return.</param>
            <returns>List of IdNameDropDownModels.</returns>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.IsNameUnique(ESolve.Entities.Filters.SubGroupNameFilterModel)">
            <summary>
            Checks is passed SubGroup Unique for selected Schedule and on Parent Child Level for passed Subgroup. 
            SubGroup Name must be unique on depth Level inside some Schedule.
            SubGroup Name must be unique in Parent Child structrue.
            </summary>
            <param name="filter"></param>
            <returns>Ok if name is available or BadRequest if it is occupied</returns>
            <response code="200">Passed Name is available.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.IsDateRangeInSubgroup(ESolve.Entities.DTOs.IdDatesDTO)">
            <summary>
            This endpoint checks is new DateRangeAvailable. New Date range is available if all jobs from thaht soubgroup are inside new interval.
            </summary>
            <param name="idDatesDTO"></param>
            <returns>true if range is available, false if it is not.</returns>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.Add(ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData)">
            <summary>
            Inserts passed SubGroup object in Database. Also, inserts subgroup's custom data
            </summary>
            <param name="subGroup">SubGroup which will be inserted</param>
            <returns>Ok if action is sucessfull, or BadRequest if it is not.</returns>
            <response code="201">SubGroup sucessfully inserted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.Put(System.Int64,ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData)">
            <summary>
            Updates SubGroup values in Database with values passed inside SubGroup object.
            </summary>
            <param name="id">SubGroup Primary Key</param>
            <param name="subGroup">SubGroup which posses new values.</param>
            <returns>Ok if action is sucessfull, or BadRequest if it is not.</returns>
            <response code="200">SubGroup sucessfully updated.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.HideSubgroup(ESolve.Entities.DTOs.IdDateDTO)">
            <summary>
            This endpoint hides SubGroup where Primary Key in Database is equal with passed value from future Schedules.
            HideFrom Data will be seted on Date instance when you invoke this method.
            </summary>
            <param name="idDateDTO">idDateDTO filter. See <see cref="T:ESolve.Entities.DTOs.IdDateDTO"/> object for more details.</param>
            <returns>Ok if action is sucessfull, otherwise False.</returns>
            <response code="200">SubGroup sucessfully hided.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SubGroupsController.RemoveAssigmentsFromSelectedSubgroup(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            This endpoint removes all employee assigments from this Subgroup and all Subgroups in ParentChild structure
            </summary>
            <param name="id">SubGroup Primary Key.</param>
            <param name="startDate">Start date of displayed period.</param>
            <param name="endDate">End date of displayed period.</param>
            <returns>Ok if action is sucessfull, otherwise False.</returns>
            <response code="200">All assigments sucessfully removed.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.SyncController">
            <summary>
            Endpoints for managing Sync
            </summary>
        </member>
        <member name="F:ESolve.Controllers.SyncController._syncRepository">
            <summary>
            Manager for sync
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SyncController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Sync})">
            <summary>
            Constructor which initialize Sync manager
            </summary>
            <param name="syncRepository"></param>
        </member>
        <member name="M:ESolve.Controllers.SyncController.GetSyncHystory(ESolve.Entities.Filters.SyncHistoryFilterModel)">
            <summary>
            Get sync history
            </summary>
            <param name="filter">Filter attributes[SearchTerm, NextPage, PreviousPage etc. etc.]. See <see cref="T:ESolve.Entities.Filters.SyncHistoryFilterModel"/> for details. </param>
            <returns>Pagged collection of SyncHistoryDTO. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/>. See <see cref="T:ESolve.Entities.DTOs.SyncHistoryDTO"/></returns>
            <response code="200">Ok</response>
            <response code="400">Something went wrong</response>
            <response code="500">Some unhandled exception has been occured.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.SyncController.Add(ESolve.Entities.DTOs.SyncDTO)">
            <summary>
            Inserts sync data
            </summary>
            <returns>Message from sync settings</returns>
            <param name="syncDTO">DTO containing data such as ScheduleID, StartDate and EndDate.</param>
            <response code="200">Returns message from Sync settings.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="T:ESolve.Controllers.SyncSettingsController">
            <summary>
            SyncSettings endpoints.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.SyncSettingsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SyncSettings})">
            <summary>
            Constructor which initialize Manager.
            </summary>
            <param name="syncRepository">Repository which will be casted into SyncManager object.</param>
        </member>
        <member name="M:ESolve.Controllers.SyncSettingsController.Get">
            <summary>
            Get SyncSettings information from database.
            </summary>
            <returns>Retruns SyncSettings data from database.s</returns>
            <response code="200">Return Sync object from database. See <see cref="T:ESolve.Entities.Models.SyncSettings"/> for details.</response>
            <response code="400">Something went wrong.</response>
        </member>
        <member name="M:ESolve.Controllers.SyncSettingsController.Put(ESolve.Entities.Models.SyncSettings)">
            <summary>
            Update SyncSettings settings data.
            </summary>
            <param name="syncSettingsDTO">SyncSettings with new values.</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="400">Returns if sync settings with passed ID does not exist.</response>
        </member>
        <member name="T:ESolve.Controllers.TeamsController">
            <summary>
            Endpoints for managing Teams.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.TeamsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Team})">
            <summary>
            Constructor which initalize TeamManager
            </summary>
            <param name="repository">Repository which will be injected in TeamManager</param>
        </member>
        <member name="M:ESolve.Controllers.TeamsController.GetAll">
            <summary>
            This Endpoint Return all Teams From Database table tblTeams.
            See <see cref="T:ESolve.Entities.Models.Team"/> for model details.
            </summary>
            <returns>IEnumerable collection of Teams.</returns>
            <response code="200">IEnumerable collection of Teams.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TeamsController.GetIdNameList">
            <summary>
            This endpoint return combovalues from tblTeams.
            See <see cref="T:ESolve.Entities.Models.Team"/> for model details.
            </summary>
            <returns>List of teams combovalues.</returns>
            <response code="200">IEnumerable collection of Team.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TeamsController.Add(ESolve.Entities.Models.Team[])">
            <summary>
            This method inserts passed array of Teams into Database table tblTeams.
            </summary>
            <param name="teams">Array of Team objects which will be stored in Database.</param>
            <returns>Returns added Teams.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new Teams.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TeamsController.Update(ESolve.Entities.Models.Team[])">
            <summary>
            This method update passed Team objects in Database table tblTeams, with values passed in array of Team objects.
            If passed teamID does not exist, new row will be created.
            </summary>
            <param name="teams">Array of team objects which contains new values.</param>
            <returns>Ok result with updated Team objects, if action is sucessfull or BadRequest if action fails from some reason.</returns>
            <response code="200">Ok result.</response>
            <response code="400">Some error has been occured during saving new Teams.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TeamsController.Delete(System.Int64)">
            <summary>
            Method removes Team object from tblTeams and from all connected tables where TeamID is required.
            </summary>
            <param name="id">Represents id of Team which will be deleted.</param>
            <returns>Ok if Team is deleted or BadRequest if something went wrong.</returns>
            <response code="200">Team has been removed.</response>
            <response code="400">Some error has been occured during deleting existing Team.</response>
            <response code="404">Team with passed Id doesn't exists in Database table tblTeams.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TeamsController.IsLocationNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if name of team is available.
            If we add new team, property Id inside IdStringContentFilterModel model we set on zero.
            If we update existing, property Id inside IdStringContentFilterModel model we set on TeamID.
            </summary>
            <param name="filter">IdStringContentFilterModel model where is TeamID and Team Name</param>
            <returns>Ok if Name is available</returns>
            <response code="200">Name is available</response>
            <response code="400">Name is occupied.</response>
        </member>
        <member name="T:ESolve.Controllers.TemplateJobsController">
            <summary>
            Endpoints for managing Template Jobs
            </summary>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSchedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJob},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobCustomData},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Template},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Ranking},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.BrokenRule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateBrokenRule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Profile},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule})">
            <summary>
            Constructor which initializes all managers.
            </summary>
            <param name="templateScheduleManager">Repository which will be injected in TemplateScheduleManager.</param>
            <param name="templateJobManager">Repository which will be injected in TemplateJobManager.</param>
            <param name="templateSubGroupManager">Repository which will be injected in TemplateSubGroupManager.</param>
            <param name="templateJobAvailabilityManager">Repository which will be injected in TemplateJobAvailabilityManager.</param>
            <param name="templateManager">Repository which will be injected in TemplateManager.</param>
            <param name="jobTypeManager">Repository which will be injected in JobTypeManager.</param>
            <param name="jobAvailabilityManager">Repository which will be injected in JobAvailabilityManager.</param>
            <param name="jobManager">Repository which will be injected in JobManager.</param>
            <param name="templateJobCustomDataManager">Repository which will be injected in TemplateJobCustomDataManager.</param>
            <param name="rankingManager">Repository which will be injected in RankingManager.</param>
            <param name="brokenRulesManager">Repository which will be injected in BrokenRulesManager.</param>
            <param name="templateBrokenRulesManager">Repository which will be injected in TemplateBrokenRulesManager.</param>
            <param name="userManager">Repository which will be injected in UserManager.</param>
            <param name="profileManager">Repository which will be injected in ProfileManager.</param>
            <param name="scheduleManager">Repository which will be injected in ScheduleManager.</param>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.GetAllEmployeeLists(ESolve.Entities.Filters.EmployeeListsFilterModel)">
            <summary>
            List of all employees. Available, assigned, and unavailable
            </summary>
            <param name="filter">EmployeeListsFilterModel object which presents necessary data for pagination.</param>
            <returns>EmployeeJobAssigmentListDTO List of Employees which satisfy each JobTypeRule assigned to the selected Job. See <see cref="T:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO"/> for model details.</returns>
            <response code="200">Returns List of Employees which are unavailable for selected Job. See <see cref="T:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.Get(System.Int64)">
            <summary>
            Get one TemplateJob with all included entities which are connected via foreign keys.
            Returned TemplateJob is TemplateJob where Primary Key in Database is equal with passed id.
            </summary>
            <param name="id">Represents Primary Key in database.</param>
            <returns>TemplateJob if it exists or BadRequest if TemplateJob doesn't exists.</returns>
            <response code="200">Returns Job if he exists in Database. See <see cref="T:ESolve.Entities.Models.Job"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.GetTemplateJobsForPeriodByJobType(ESolve.Entities.Filters.CalendarViewFilterModel)">
            <summary>
            Returns Dictionary with keys - Jobs and JobTypes. 
            Jobs values - all Job from Database where JobStartDate is between passed period and whoose SubGroupID is equal with passed value.
            Job type values - CalendarElementsGroupedByJobTypeDTO objects that contain all jobs with their job types.
            </summary>
            <param name="calendarViewFilterModel"></param>
            <returns>Dictionary (string, object) with jobs and job types</returns>
            <response code="200">Dictionary objects with key - value pair (string, object) which satisfies all requirements.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Returns bad request.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.GetAllAssociatedEmployees(System.Int64,System.String)">
            <summary>
            Returns all associated employees for concurrent template jobjob
            </summary>
            <param name="id">Represent Primary Key of TemplateJob</param>
            <param name="imageSize">Represent Image Size for Employee</param>
            <returns>Array of associated employees. See <see cref="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO"/> for model details.</returns>
            <response code="200">Retrun array of associated employees. See <see cref="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.GetAssociatedEmployeesForDateRange(System.Int64,System.String,System.DateTime,System.DateTime)">
            <summary>
            Returns associated employees in passed date range
            </summary>
            <param name="id">Represent Primary Key of TemplateJob</param>
            <param name="imageSize">Represent Image Size for Employee</param>
            /// <param name="startDate">Start time of date range</param>
            /// <param name="endDate">End time of date range</param>
            <returns>Array of associated employees. See <see cref="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO"/> for model details.</returns>
            <response code="200">Retrun array of associated employees. See <see cref="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO"/> for details.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.Add(ESolve.Entities.DTOs.JobWithCustomDataDTO)">
            <summary>
            Insert passed TemplateJob in Database table tblTemplateJobs.
            </summary>
            <param name="jobWithCustomData">TemplateJob with custom data that will be inserted.</param>
            <returns>Job and Link to him in Response Header [Location propertie] if is created, and BadRequest if Action fails.</returns>
            <response code="200">Job and Link to him in Response Header [Location propertie].</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.CopyJob(ESolve.Entities.DTOs.CopyJobDTO)">
            <summary>
            Copies template job with passed Id and inserts it into database.
            </summary>
            <param name="copyJobDTO">DTO for job coppying.</param>
            <returns>List of new jobs which are copied.</returns>
            <response code="200">Request is successfully done.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.GetMessagesForBrokenRules(ESolve.Entities.DTOs.EmployeeJobAssigmentDTO[])">
            <summary>
            This method is used for getting messages if user want to override assigments
            </summary>
            <param name="employeeJobAssigmentDTOs">List of employeeJobAssigments DTOs with info about job and employee</param>
            <returns>Ok with messages.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.AssignEmployee(ESolve.Entities.DTOs.AssigmentDTO)">
            <summary>
            Method will try to assign passed Employee on passed Job. See <see cref="T:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO"/> for details.
            </summary>
            <param name="assigment">Structure where is Employee which we want to assign and Job on which we want to assign Employee.</param>
            <returns></returns>
            <response code="200">Job and Link to him in Response Header [Location propertie].</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.AssignEmployees(ESolve.Entities.DTOs.AssigmentDTO)">
            <summary>
            Method will try to assign all Employees from passed collection on job specified in each item.
            </summary>
            <param name="assigments">See <see cref="T:ESolve.Entities.DTOs.AssigmentDTO"/> for details.</param>
            <returns>Ok with message if there is new assigments, otherwise return empty ok repsonse if user do not want to override assigments.</returns>
            <response code="200">Returns coresponding message if are all employees assigned or not.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.RemoveEmployeeAssignment(System.Collections.Generic.List{ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO})">
            <summary>
            Removes assigment for passed List of Employees and Template Jobs where each employee is assigned. See <see cref="T:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO"/> for details.
            Method will remove assigment for each item passed in List RemoveEmployeeAssigmentDTO.
            </summary>
            <param name="removeEmployeeAssigmentDTOs">List of employees which should be unassigment</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.RemoveEmployeeAssignment(ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO)">
            <summary>
            Unassigne Passed Employee from passed Job. See <see cref="T:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO"/> for details.
            </summary>
            <param name="removeEmployeeAssigmentDTO">Structure where is EmployeeID and JobID</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.Put(System.Int64,System.Boolean,ESolve.Entities.DTOs.JobWithCustomDataDTO)">
            <summary>
            Update Job in Database with passed values inside Job object
            </summary>
            <param name="id">Primary Key of object which should be updated</param>
            <param name="jobWithCustomData">Job instance with new values</param>
            <param name="isDragAndDropChanged">Indicate that job is updated by drag and drop action.</param>
            <returns>Ok if action sucessfull or BadRequest if Action is not passed.</returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.DeleteList(System.Collections.Generic.List{System.Int64})">
            <summary>
            Deletes List of Jobs where each Job Primary Key in Database is in passed list of Ids. 
            Also method will remove all connected entities where JobID is required.
            </summary>
            <param name="ids">List of Jobs Primary Kies</param>
            <returns></returns>
            <response code="200">Returns Action is sucessfull</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateJobsController.DeleteJobsInPeriod(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Deleting all jobs from selected subgroup and displayed date range
            </summary>
            <param name="id">Subgroup's primary key</param>
            <param name="startDate">Start date of displayed period</param>
            <param name="endDate">End date of displayed period</param>
            <returns>Ok if jobs are successfully removed, otherwise returns BadRequest</returns>
            <response code="200">Jobs are successfully removed.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.TemplateScheduleCustomDatasController">
            <summary>
            Endpoints for managing TemplateScheduleCustomData
            </summary>
        </member>
        <member name="M:ESolve.Controllers.TemplateScheduleCustomDatasController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateScheduleCustomData})">
            <summary>
            Constructor which initialize ScheduleCustomData Manager.
            </summary>
            <param name="repository">Represents IRepositoryBase instance which will be casted in ScheduleCustomDataManager</param>
        </member>
        <member name="M:ESolve.Controllers.TemplateScheduleCustomDatasController.GetCustomData(System.Int64)">
            <summary>
            Endpoint returns all custom Data from Database with values where exists for passed Template Schedule ID
            </summary>
            <param name="id">Schedule Primary Key</param>
            <returns>Collection of the ScheduleCustomDataAddEditDTO objects</returns>
            <response code="200">All custom Data from Database with values.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.TemplateSchedulesController">
            <summary>
            Endpoints for managing Template Schedules
            </summary>
        </member>
        <member name="M:ESolve.Controllers.TemplateSchedulesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSchedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJob})">
            <summary>
            Constructor which initializes all managers.
            </summary>
            <param name="templateScheduleManager">Repository which will be injected in TemplateScheduleManager.</param>
            <param name="scheduleManager">Repository which will be injected in ScheduleManager.</param>
            <param name="templateSubGroupManager">Repository which will be injected in TemplateSubGroupManager.</param>
            <param name="templateJobManager">Repository which will be injected in TemplateJobManager.</param>
        </member>
        <member name="M:ESolve.Controllers.TemplateSchedulesController.Get(System.Int64)">
            <summary>
            Get one TemplateSchedule with all included entities which are connected via foreign keys.
            Returned TemplateSchedule is a TemplateSchedule where TemplateID in DB is equal to the passed ID.
            </summary>
            <param name="id">Template Primary Key used for retrieving Template Schedule.</param>
            <returns>Action result with selected TemplateSchedule</returns>
            <response code="200">TemplateSchedule from Database if exists..</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSchedulesController.GetTemplateScheduleSubGroupsForCalendar(ESolve.Entities.Filters.SubGroupCalendarFilterModel)">
            <summary>
            Template SubGroups in Hierarchy Node Structure where HideFrom is Before or inside Range.
            </summary>
            <param name="templateSubGroupCalendarFilterModel">Represents Filter model for selecting approppiate Template SubGroup.</param>
            <returns>Template SubGroups in Hierarchy Node Structure</returns>
            <response code="200">Template SubGroups in Hierarchy Node Structure where HideFrom is Before or inside Range.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSchedulesController.UpdateTemplateSchedule(System.Int64,ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData)">
            <summary>
            Update existing template schedule with new passed values.
            </summary>
            <param name="id">Primary Key of TemplateSchedule which will be updated.</param>
            <param name="scheduleWithCustomData">TemplateSchedule object with new values.</param>
            <returns></returns>
            <response code="200">Template Schedule updated sucessfully.</response>
            <response code="400">Template Schedule can't be updated.</response>
            <response code="500">Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.TemplatesController">
            <summary>
            Endpoints for managing Templates.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Template},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSchedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJob},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobCustomData},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateScheduleCustomData},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSubGroupCustomData},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobType},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.BrokenRule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobStatus},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.LoneWorkerAlert},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.UnlockedRange},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateBrokenRule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AttendanceConfirmation},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.PushNotifications.AssignmentNotificationManager)">
            <summary>
            Constructor which initializes all managers.
            </summary>
            <param name="templateManager">Repository which will be injected in TemplateManager.</param>
            <param name="templateScheduleManager">Repository which will be injected in TemplateScheduleManager.</param>
            <param name="templateSubGroupManager">Repository which will be injected in TemplateSubGroupManager.</param>
            <param name="templateJobManager">Repository which will be injected in TemplateJobManager.</param>
            <param name="templateJobCustomDataManager">Repository which will be injected in TemplateJobCustomDataManager.</param>
            <param name="templateScheduleCustomDataManager">Repository which will be injected in TemplateScheduleCustomDataManager.</param>
            <param name="templateJobAvailabilityManager">Repository which will be injected in TemplateJobAvailabilityManager.</param>
            <param name="jobTypeManager">Repository which will be injected in JobTypeManager.</param>
            <param name="templateSubGroupCustomDataManager">Repository which will be injected in TemplateSubGroupCustomDataManager.</param>
            <param name="jobAvailabilityManager">Repository which will be injected in JobAvailabilityManager.</param>
            <param name="scheduleManager">Repository which will be injected in ScheduleManager.</param>
            <param name="brokenRuleManager">Repository which will be injected in BrokenRuleManager.</param>
            <param name="jobManager">Repository which will be injected in BrokenRuleManager.</param>
            <param name="jobStatusManager">Repository which will be injected in JobStatusManager.</param>
            <param name="loneWorkerAlertsManager">Repository which will be injected in LoneWorkerAlertsManager.</param>
            <param name="subGroupManager">Repository which will be injected in SubGroupManager.</param>
            <param name="tradeManager">Repository which will be injected in TradeManager.</param>
            <param name="unlockedSubGroupsManager">Repository which will be injected in UnlockedRangesManager.</param>
            <param name="serviceProvider">Service provider which provide us manager for submit for approval notification.</param>
            <param name="templateBrokenRulesManager">Manager for temaplte broken rules manager</param>
            <param name="employeesManager">Manager for employees</param>
            <param name="attendanceConfirmationAlertsManager">Manager for actions on lone worker alerts</param>
            <param name="userManager">Manager for users</param>
            <param name="configuration"></param>
            <param name="assignmentNotificationManager"></param>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.Publish(ESolve.Entities.DTOs.IdDateDTO)">
            <summary>
            Endpoint for publishing a Template.
            </summary>
            <param name="idDateDTO">IdDateDTO object containint ID of the template that should be published and Date from which it should be published.</param>
            <returns>Ok if template is successfully published, BadRequest otherwise.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.Add(ESolve.Entities.DTOs.CreateTemplateDTO)">
            <summary>
            Method that creates a template and creates template jobs, subgroups and schedules.
            </summary>
            <param name="createTemplateDTO"></param>
            <returns>Ok if template is successfully created, bad request otherwise.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.Duplicate(ESolve.Entities.DTOs.IdNameDTO)">
            <summary>
            Endpoint for duplicating a template which also includes duplicating Template Schedule,
            Template SubGroups, Template Jobs, assignments, custom data and permissions.
            </summary>
            <param name="idNameDTO"></param>
            <returns>Ok if template is successfully created, bad request otherwise.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.InsertTemplateIntoSchedule(ESolve.Entities.DTOs.InsertTemplateDTO)">
            <summary>
            Endpoint for inserting an existing Template into an existing Schedule/SubGroup.
            </summary>
            <param name="insertTemplateDTO">DTO containing data used for inserting Template into Schedule/SubGroup.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.GetMaxNumberOfRotations(ESolve.Entities.DTOs.InsertTemplateDTO)">
            <summary>
            Enpoint for retrieving the max number of rotations that can be inserted
            into a Schedule/SubGroup
            </summary>
            <param name="maxRotationsDTO">DTO containing data relevant for calculation of rotations.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.CopyData(ESolve.Entities.DTOs.CopyDataForwardDTO)">
            <summary>
            Copy template's or template subgroup's data forward based on passed date range in CopyDataForwardDTO
            </summary>
            <param name="dataForwardDTO">DTO with values that is required for copy data forward.</param>
            <returns>Ok if data's copying is succesfully done, otherwise bad request</returns>
            <response code="200">Data is copied successfully.</response>
            <response code="400">Data is not coped successfully.</response>
            <response code="500">Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.OverrideAssigments(System.Collections.Generic.List{ESolve.Entities.DTOs.WarningDetailsDTO})">
            <summary>
            Assign employees that break constraints
            </summary>
            <param name="warningDetails">Rules that user accepted.</param>
            <returns>Ok if data's copying is succesfully done, otherwise bad request</returns>
            <response code="200">Employee are assigned successfully.</response>
            <response code="400">Something went wrong.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.GetAllWithFiltersAndPagination(ESolve.Entities.Filters.TemplatesFilterModel)">
            <summary>
            Endpoint for retrieving TemplateDTOs including pagination and filters.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.GetInsertedTemplatesWithFiltersAndPagination(System.Int64,ESolve.Entities.Filters.TemplatesFilterModel)">
            <summary>
            Endpoint for retrieving InsertedTemplateDTOs including pagination and filters.
            </summary>
            <param name="filter"></param>
            <param name="id">Primary Key of Schedule whose Inserted Templates endpoint will retrieve</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.GetDropdownListOfTemplatesForComboSearch(ESolve.Entities.Filters.TemplatesFilterModel)">
            <summary>
            Endpoint for retrieving a dropdown list of Templates.
            </summary>
            <param name="filter">Filter for retrieving a dropdown list of Templates.</param>
            <returns>List of IdNameDropDownModels.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.GetDropdownListOfInsertedTemplatesForComboSearch(System.Int64,ESolve.Entities.Filters.TemplatesFilterModel)">
            <summary>
            Endpoint for retrieving a dropdown list of Inserted Templates for particular Schedule.
            </summary>
            <param name="id">Primary Key of Schedule whose InsertedTemplates will show up in combosearch.</param>
            <param name="filter">Filter for retrieving a dropdown list of Templates.</param>
            <returns>List of IdNameDropDownModels.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.GetDropdownListOfTemplates">
            <summary>
            Endpoint for retrieving a dropdown list of Templates.
            </summary>
            <returns>List of IdNameDropDownModels.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Method that checks if the passed Template name is already in use
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.HideTemplate(ESolve.Entities.DTOs.IdDateDTO)">
            <summary>
            Endpoint used for deleting Template from the list of Templates and hiding it from
            Schedules which are using that Template.
            </summary>
            <param name="idDateDTO"></param>
            <returns>Ok if Template is successfully deleted, BadRequest otherwise.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.DeleteInsertedTemplate(ESolve.Entities.DTOs.IdDateDTO)">
            <summary>
            Endpoint for deleting an inserted template.
            </summary>
            <param name="idNameDTO">DTO containing necessary data for deleting an Inserted Template.</param>
            <returns>Ok if template was successfully deleted. BadRequest otherwise.</returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.UpdateInsertedTemplate(System.Int64,ESolve.Entities.DTOs.InsertTemplateDTO)">
            <summary>
            Endpoint for updating a particular Inserted Template with values from the InsertTemplateDTO .
            </summary>
            <param name="updatedInsertedTemplateDTO">DTO containing InsertedTemplate data which will be updated in the database.</param>
            <param name="id">Primary key of InsertedTemplate which will be updated.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.TemplatesController.UnAssign(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Unassign all employees from selected template's schedule and passed date range
            </summary>
            <param name="id">Template schedule's primary key</param>
            <param name="startDate">Start date of current displayed period.</param>
            <param name="endDate">End date of current displayed period.</param>
            <returns>Ok if action is sucessfull, otherwise False.</returns>
            <response code="200">All assigments sucessfully removed.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.TemplateSubGroupCustomDatasController">
            <summary>
            TemplateSubGroupCustomData endpoints.
            </summary>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubGroupCustomDatasController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSubGroupCustomData},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobCustomData})">
            <summary>
            Constructor which initialize TemplateSubGroupCustomData Manager.
            </summary>
            <param name="sgCDRepository">Represents IRepositoryBase instance which will be casted in TemplateSubGroupCustomDataManager</param>
            <param name="jobCDRepository">Represents IRepositoryBase instance which will be casted in TemplateJobCustomDataManager</param>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubGroupCustomDatasController.GetCustomData(System.Int64)">
            <summary>
            Endpoint returns all custom Data from Database with values where exists for passed SubGroupID
            </summary>
            <param name="id">TemplateSubgroupPrimary Key</param>
            <returns></returns>
            <response code="200">All custom Data from Database with values.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubGroupCustomDatasController.AddList(ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO[])">
            <summary>
            Adding List of SubGroupCustomData. We will store each SubGroupCustom data in Database if not exists. If exists and it is not manualy updated we will update value.
            Same thing is with jobs which belongs to this subgroup or her childs.
            </summary>
            <param name="subGroupCustomDataAddEditDTOs">SubGroupCustomDataAddEditDTOs contains data which will be stored in CustomData.</param>
            <returns>Object if sucessfully created, or appropiate message if it is not.</returns>
            <response code="201">SubGroupCustomData and Link to him in Response Header [Location propertie].</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubGroupCustomDatasController.UpdateArray(ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO[])">
            <summary>
            Updates Values in TemplateSubGroupCustomDatas and TemplateJobCustomDatas which belongs passed TemplateSubGroup.
            If some values are null, we will delete those CustomData in TemplateSubGroup and in TemplateJob if they are not manualy edited.
            </summary>
            <param name="subGroupCustomDataAddEditDTOs">SubGroupCustomDataAddEditDTOs contains data which will be updated/deleted in CustomData.</param>
            <returns>Ok Result or appropiate message</returns>
            <response code="200">All Values are updated/deleted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.TemplateSubgroupsController">
            <summary>
            Template SubGroup endpoints
            </summary>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubgroupsController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateSubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Template},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJobAvailability},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.TemplateJob})">
            <summary>
            Constructor which initializes all managers.
            </summary>
            <param name="templateSubGroupManager">Repository which will be injected in TemplateSubGroupManager.</param>
            <param name="templateManager">Repository which will be injected in TemplateManager.</param>
            <param name="templateJobAvailabilityManager">Repository which will be injected in TemplateJobAvailabillityManager.</param>
            <param name="employeesManager">Repository which will be injected in EmployeeManager.</param>
            <param name="templateJobManager">Repository which will be injected in TemplateJobManager.</param>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubgroupsController.Get(System.Int64)">
            <summary>
            Returns all TemplateSubGroup from Database where Primary Key in Database is equal with passed value.
            TemplateSubGroup posess Entites which are connected over Foreign Kies.
            See <see cref="T:ESolve.Entities.Models.SubGroup"/> for model details.
            </summary>
            <returns>SubGroup from Database if exists or BadRequest if not.</returns>
            <response code="200">SubGroup from Database.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubgroupsController.IsNameUnique(ESolve.Entities.Filters.SubGroupNameFilterModel)">
            <summary>
            Checks is passed Template SubGroup Unique for selected Schedule and on Parent Child Level for passed Template Subgroup. 
            Template SubGroup Name must be unique on depth Level inside some Schedule.
            Template SubGroup Name must be unique in Parent Child structrue.
            </summary>
            <param name="filter"></param>
            <returns>Ok if name is available or BadRequest if it is occupied</returns>
            <response code="200">Passed Name is available.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubgroupsController.Add(ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData)">
            <summary>
            Inserts passed TemplateSubGroup object in Database. Also, inserts subgroup's custom data
            </summary>
            <param name="subGroup">TemplateSubGroup which will be inserted</param>
            <returns>Ok if action is sucessfull, or BadRequest if it is not.</returns>
            <response code="201">SubGroup sucessfully inserted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubgroupsController.Put(System.Int64,ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData)">
            <summary>
            Updates TemplateSubGroup values in Database with values passed inside TemplateSubGroup object.
            </summary>
            <param name="id">TemplateSubGroup Primary Key</param>
            <param name="subGroup">TemplateSubGroup which posses new values.</param>
            <returns>Ok if action is sucessfull, or BadRequest if it is not.</returns>
            <response code="200">SubGroup sucessfully updated.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubgroupsController.HideSubgroup(ESolve.Entities.DTOs.IdDateDTO)">
            <summary>
            This endpoint hides TemplateSubGroup where Primary Key in Database is equal with passed value from future Schedules.
            HideFrom Data will be seted on Date instance when you invoke this method.
            </summary>
            <param name="idDateDTO">idDateDTO filter. See <see cref="T:ESolve.Entities.DTOs.IdDateDTO"/> object for more details.</param>
            <returns>Ok if action is sucessfull, otherwise False.</returns>
            <response code="200">SubGroup sucessfully hided.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TemplateSubgroupsController.RemoveAssigmentsFromSelectedSubgroup(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            This endpoint removes all employee assigments from this TemplateSubgorup and all TemplateSubgroupsSubgroups in ParentChild structure
            </summary>
            <param name="id">Template SubGroup Primary Key.</param>
            <param name="startDate">Start date of displayed period.</param>
            <param name="endDate">End date of displayed period.</param>
            <returns>Ok if action is sucessfull, otherwise False.</returns>
            <response code="200">All assigments sucessfully removed.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.TradesController">
            <summary>
            Controller for trades
            </summary>
        </member>
        <member name="M:ESolve.Controllers.TradesController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.AbstractModels.TradeOffer},System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.JobAvailability},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor which initialize Trades manager
            </summary>
            <param name="tradesManager">Manager for trades.</param>
            <param name="serviceProvider">Service provider which provide us manager for push notification</param>
            <param name="jobAvailabilityManager">Mnager for job availabilities</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Controllers.TradesController.GetTradeWarning">
            <summary>
            Getting content of trade warning to notify employee that he will be still assigned unless trade offer is accepted.
            </summary>
            <returns>Ok with warning's content.</returns>
            <response code="200">Ok</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TradesController.GetWarningForAcceptingTradeOffer">
            <summary>
            Getting content of warning for accepting trade offer in order to notify employee that he will be assigned if he accept trade offer.
            </summary>
            <returns>Ok with warning's content.</returns>
            <response code="200">Ok</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TradesController.GetTradeBoard(ESolve.Entities.Filters.TradeBoardFilterModel)">
            <summary>
            Getting trade board
            </summary>
            <param name="filter">Filter for getting trade board</param>
            /// <returns>Pagged collection of TradeBoardDTO. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/>. See <see cref="T:ESolve.Entities.DTOs.TradeBoardDTO"/></returns>
            <response code="200">Ok</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TradesController.AcceptTradeOffer(System.Int64)">
            <summary>
            Accepting trade offer
            </summary>
            <param name="id">Primary key of employee own trade offer (forign key in employee trade offer - first table)</param>
            <returns>Ok if trade offer is sucessfully accepted.</returns>
            <response code="200">Ok if trade is succesfully accepted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TradesController.DeclineTradeOffer(System.Int64)">
            <summary>
            Decline trade offer
            </summary>
            <param name="id">Primary key of employee trade offer (primary key key in employee trade offer - first table)</param>
            <returns>Ok if trade offer is succesfully delined.</returns>
            <response code="200">Ok if trade is succesfully accepted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TradesController.Add(ESolve.Entities.Models.EmployeeOwnTradeOffer)">
            <summary>
            Adding trade offers
            </summary>
            <returns>Ok if trade offers are added, bad request if something went wrong.</returns>
            <param name="tradeOffer">Trade offer for adding</param>
            <response code="200">Returns ok if trade offer is succuessfully added.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.TradesController.Remove(System.Int64)">
            <summary>
            Removing empoyee own trade offer, this will delete all trade offers from employee who offered these offers
            </summary>
            <param name="id">Trade offer's primary key</param>
            <returns>Ok if trade offer is deleted, bad request if something went wrong.</returns>
            <response code="200">Returns Ok if tradee offer is deleted.</response>
            <response code="400">Returns appropiate message if action failed from some reason.</response>
            <response code="500">Some unhandled exception has been occured.</response>
        </member>
        <member name="T:ESolve.Controllers.UserController">
            <summary>
            Endpoints for users
            </summary>
        </member>
        <member name="M:ESolve.Controllers.UserController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Token},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AuditTrail},ESolve.Entities.RepositoryContext,Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ASSOMigrationDetails})">
            <summary>
            Constructor which initialize all DataManagers
            </summary>
            <param name="userManager">Repository which will be injected in UserManager.</param>
            <param name="accountManager">Repository which will be injected in AccountManager.</param>
            <param name="auditTrailManager">Repository which will be injected in AuditTrailManager.</param>
            <param name="repositoryContext"></param>
            <param name="configuration"></param>
            <param name="employeesManager"></param>
            <param name="assoMigrationDetailsManager"></param>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetAll(ESolve.Entities.Filters.UsersFilterModel)">
            <summary>
            Returns all users from database table tblusers
            </summary>
            <param name="filter">Filter which poses does we filtering Employees or SkillCodes. See <see cref="T:ESolve.Entities.Filters.SkillMatricesFilterModel"/> for model details</param>
            <returns>PagedCollectionResponse of SkillMatricesDTO objects</returns>
            <response code="200">PagedCollectionResponse of SkillMatricesDTO objects.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetFilters(ESolve.Entities.Pagination.SampleFilterModel,System.String)">
            <summary>
            Returns all users filtering and searching parameters
            </summary>
            <param name="filter">Filter which poses does we filtering Employees or SkillCodes. See <see cref="T:ESolve.Entities.Filters.SkillMatricesFilterModel"/> for model details</param>
            <param name="field">User's field for filter input</param>
            <returns>PagedCollectionResponse of SkillMatricesDTO objects</returns>
            <response code="200">PagedCollectionResponse of SkillMatricesDTO objects.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetLinkedAccount">
            <summary>
            Endpoint for receiving current User's Linked Account (if they have one).
            </summary>
            <returns>Ok</returns>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetOne(System.Int64,System.String)">
            <summary>
            Get one user from tblUsers
            </summary>
            <param name="id">User's primary key.</param>
            <param name="imageSize">Image size to display</param>
            <returns>Ok with UserDTO object which contains user's info and user's permissions</returns>
            <response code="200">Ok with UserDTO object.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetUsersOfProfilesDropDown(ESolve.Entities.Filters.UserOrProfileFilterModel)">
            <summary>
            Return all users or all profiles that match with passed search term in UserOrProfileFilterModel
            </summary>
            <param name="filterModel">Filter for dropdown list of users or profiles.</param>
            <returns>List of object with ids and names</returns>
            <response code="200">Ok with list of objects with ids and names</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetComboValues">
            <summary>
            Returns lists fro dropdown lists in user management when we want to add/update new user
            </summary>
            <returns>All values for dropdown lists</returns>
            <response code="200">All values for drop-down lists.</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.IsEmailUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Method check is email occupied from another Employees. 
            We send Employee Id and Email which we want to check. 
            If we adding new employee without id, we set Id tp 0.
            </summary>
            <param name="filter">Filter posses Id which represents EmployeeId and Content which represents new Email.</param>
            <returns>Indicator is passed Email available for passed EmployeeID.</returns>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetSubgroups(System.Int64)">
            <summary>
            Returns subgroups of selected schedule in drop-down list in schedule permission tab.
            </summary>
            <param name="id">Schedule's primary key</param>
            <returns>Schedule's subgroups</returns>
            <response code="200">Schedule's subgroups</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetUsersWithLoneWorkerPermission">
            <summary>
            Get users that can be lone worker admins
            </summary>
            <returns>List of IdNameDropDown models that present users with lone worker alerts permissions</returns>
            <response code="200">Schedule's subgroups</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetUsersWithLoneWorkerPermission(System.Int64,System.Boolean)">
            <summary>
            Get users that can be lone worker managers
            </summary>
            <returns>List of IdNameDropDown models that present users with lone worker alerts permissions</returns>
            <response code="200">Schedule's subgroups</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetUsersWithAttendanceConfirmationPermission(System.Int64,System.Boolean)">
            <summary>
            Get users that have attendance confirmation permission
            </summary>
            <returns>List of IdNameDropDown models that present users with attendance confirmation permissions</returns>
            <response code="200">Schedule's subgroups</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.GetSsoUserAdminRight">
            <summary>
            Get user system Administrative rights
            </summary>
            <returns></returns>
            <response code="200">Schedule's subgroups</response>
            <response code="400">Returns appropriate message if action failed from some reason.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.Add(ESolve.Entities.DTOs.UserDTO)">
            <summary>
            Inserts new user into database.
            </summary>
            <param name="userDTO">DTO with values</param>
            <returns>Ok if action is successfully done, bad request if something went wrong.</returns>
            <response code="201">User inserted successfully.</response>
            <response code="400">User could not be inserted.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.MigrateUsersAndEmployeesToASSO">
            <summary>
            Migrate Users and Employees to ASSO
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.UserController.IsEmployeeUsernameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Method check is Username occupied from another Employees. 
            We send Employee Id and Username which we want to check. 
            If we adding new employee without id, we set Id tp 0.
            </summary>
            <param name="filter">Filter posses Id which represents EmployeeId and Content which represents new Username.</param>
            <returns>Indicator is passed Username available for passed EmployeeID.</returns>
        </member>
        <member name="M:ESolve.Controllers.UserController.AssignUserProfil(ESolve.Entities.DTOs.UserProfileDTO)">
            <summary>
            Method assign(Bulk update) User Profile to selected Users.
            </summary>
            <param name="userProfileDTO"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.UserController.Update(System.Int64,ESolve.Entities.DTOs.UserDTO)">
            <summary>
            This method updates passed user in UserDTO object. Also, it updates user's permission
            </summary>
            <param name="userDTO">UserDTO object with user and user's permissions</param>
            <param name="id">User's primary key</param>
            <returns>Ok if action is successfully done</returns>
            <response code="200">Ok result if user is updated.</response>
            <response code="400">Some error has been occurred during saving User</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="M:ESolve.Controllers.UserController.Delete(System.Int64)">
            <summary>
            This endpoint deletes user from database
            </summary>
            <param name="id">User's primary key that will be deleted</param>
            <returns>Ok if user is successfully deleted.</returns>
            <response code="200">User is removed.</response>
            <response code="400">Some error has been occurred during deleting existing User.</response>
            <response code="404">User with passed Id doesn't exists in Database table tblUsers.</response>
            <response code="500">If Unhandled Exception has been occurred.</response>
        </member>
        <member name="T:ESolve.Controllers.UserDashboardController">
            <summary>
            Endponits for user dashboard
            </summary>
        </member>
        <member name="M:ESolve.Controllers.UserDashboardController.#ctor(ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Job},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroup},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.User},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Schedule},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.SubGroupsApproval})">
            <summary>
            Constructor which initialize JobData Manager
            </summary>
            <param name="jobRepository">Repository for managing Jobs</param>
            <param name="subGroupManager">Repository which will be injected in SubGroupManager</param>
            <param name="userManager">Repository which will be injected in JobManager</param>
            <param name="scheduleManager">Repository which will be injected in ScheduleManager</param>
            <param name="subGroupsApprovalManager">Repository which will be injected in ReportTypeManager. <see cref="T:ESolve.Entities.DataManager.SubGroupsApprovalManager"></see></param>
        </member>
        <member name="M:ESolve.Controllers.UserDashboardController.ScheduleDetails(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For selected range, endpoint will return all schedules with details where logged in user have permissions
            </summary>
            <param name="range">Date range</param>
            <returns>UserDashboardInfoDTO. See <see cref="T:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO"/> for more info</returns>
            <response code="200">UserDashboardInfoDTO object with data for widgets.</response>
            <response code="500">If Unhandled Exception has been occured.</response>
        </member>
        <member name="M:ESolve.Controllers.UserDashboardController.ScheduleDetailsTable(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For selected range, endpoint will return all schedules in DataTable format with details where logged in user have permissions
            </summary>
            <param name="range">Date range</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Controllers.UserDashboardController.ScheduleApprovalTable">
            <summary>
            Get All absence requests where currently logged in user can manage absences
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.CustomExceptions.UnauthorizedException">
            <summary>
            Custom Exception Class used for Unauthorized responses
            </summary>
        </member>
        <member name="M:ESolve.CustomExceptions.UnauthorizedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ESolve.Entities.WrongEmailCredentialsException">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.WrongEmailCredentialsException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.WrongEmailCredentialsException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ESolve.Entities.WrongEmailCredentialsException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:ESolve.Entities.Models.AbsenceAbstract">
            <summary>
            Absence Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.Id">
            <summary>
            Absence Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.AbsenceCodeID">
            <summary>
            AbsenceCode Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.StartDate">
            <summary>
            Absence Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.EndDate">
            <summary>
            Absence End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.NumberOfHours">
            <summary>
            Number of hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.ManuallyEdited">
            <summary>
            Indicator are hours edited manually
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.EmployeeComment">
            <summary>
            Employee comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.ManagerComment">
            <summary>
            Manager absence comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceAbstract.AbsenceCode">
            <summary>
            AbsenceCode Object connected over foreign key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.AbsenceAbstract.MapAbsenceToAbsenceDtoModel">
            <summary>
            Current object maps to new AbsenceCreateUpdateDTO entity
            </summary>
            <returns>New AbsenceCreateUpdateDTO object with properties initialized on values which current object posses.</returns>
        </member>
        <member name="T:ESolve.Entities.Models.NotificationAbstract">
            <summary>
            Notification Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationAbstract.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationAbstract.Title">
            <summary>
            Notification Title
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationAbstract.Content">
            <summary>
            Notification Title
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationAbstract.Link">
            <summary>
            Notification Title
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AbsenceCode">
            <summary>
            Absence Code Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceCode.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceCode.Name">
            <summary>
            Absence Status Code
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceCode.Description">
            <summary>
            Absence Status Description
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceCode.Color">
            <summary>
            Absence Status Color
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceCode.CountsForReconciliation">
            <summary>
            Absence Status Counts For Reconciliation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceCode.CountsForRefPeriodAbs">
            <summary>
            CountsForRefPeriodAbs
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceCode.CountAsWorked">
            <summary>
            Should this absence code be considered as an employee as worked, eventhough on holiday
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AbsencePermissions">
            <summary>
            AbsencePermissions model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsencePermissions.Id">
            <summary>
            Gets or sets the Id
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsencePermissions.AbsenceCalendar">
            <summary>
            Gets or sets a value indicating whether AbsenceCalendar
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.AbsencePermissions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.AbsencePermissions.#ctor(ESolve.Entities.Models.AbsencePermissions)">
            <summary>
            Copy construcotr
            </summary>
            <param name="original"></param>
        </member>
        <member name="T:ESolve.Entities.Models.AbsencePreferences">
            <summary>
            Absence Preferences Database table.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsencePreferences.Id">
            <summary>
            AbsencePreferences Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsencePreferences.DeadlineDays">
            <summary>
            Absence Request Deadline Days
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AbsenceRequest">
            <summary>
            Absence Request Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.EmployeeAbsenceID">
            <summary>
            EmployeeAbsence Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.AbsenceStatusID">
            <summary>
            AbsenceStatus Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.EmployeeID">
            <summary>
            Employee Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.UserID">
            <summary>
            USer Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.AbsenceCodeID">
            <summary>
            AbsenceCode Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.Action">
            <summary>
            Enum Key which Action Employee want to do.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.StartDate">
            <summary>
            Absence Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.EndDate">
            <summary>
            Absence End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.NumberOfHours">
            <summary>
            Number of hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.ManuallyEdited">
            <summary>
            Indicator are hours edited manually
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.EmployeeComment">
            <summary>
            Employee comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.ManagerComment">
            <summary>
            Manager absence comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.DeletePending">
            <summary>
            Delete pending request
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.AbsenceStatus">
            <summary>
            Absence Status Object connected over foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.Employee">
            <summary>
            Employee Object connected over foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.AbsenceCode">
            <summary>
            AbsenceCode Object connected over foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.User">
            <summary>
            User which will resolve this request
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.EmployeeAbsence">
            <summary>
            EmployeeAbsence which will resolve this request
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceRequest.EmployeeNotifications">
            <summary>
            EmployeeNotification connected to this AbsenceRequest
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.AbsenceRequest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.AbsenceRequest.#ctor(ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Copy constructor 
            </summary>
            <param name="absenceRequest"></param>
        </member>
        <member name="M:ESolve.Entities.Models.AbsenceRequest.Convert(ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceUpdate,System.Int64,System.Int64,ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Convert passed object
            </summary>
            <param name="employeeAbsenceUpdate"></param>
            <param name="absenceRequestID"></param>
            <param name="employeeID"></param>
            <param name="absenceWithOldValue"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Models.AbsenceStatus">
            <summary>
            AbsenceStatus Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceStatus.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceStatus.Status">
            <summary>
            Absence Status
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AbsenceStatus.Color">
            <summary>
            Absence Status Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AdvancedSSO">
            <summary>
            Represents Employee Entity in app.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AdvancedSSO.Id">
            <summary>
            record Id - Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AdvancedSSO.IsOverRuleOrganizationHint">
            <summary>
            Indicator can we over rule organization hint.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AdvancedSSO.OrganizationHint">
            <summary>
            Organization hint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AdvancedSSO.AuthenticationDomain">
            <summary>
            Authentication Domain
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Agency">
            <summary>
            Model for Agency entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Agency.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Agency.Name">
            <summary>
            Name of agency
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AgencyJobAssignment">
            <summary>
            Model for agency assignment on job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AgencyJobAssignment.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AgencyJobAssignment.Job">
            <summary>
            Job Entity connected with foreign key.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AgencyReasonForCover">
            <summary>
            Model for Agency Reason To Cover
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AgencyReasonForCover.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AgencyReasonForCover.Name">
            <summary>
            Name of agency's reason to cover
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AgencyTemplateJobAssignment">
            <summary>
            Model for agency assignment on template
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AgencyTemplateJobAssignment.TemplateJobID">
            <summary>
            TemplateJob Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AgencyTemplateJobAssignment.TemplateJob">
            <summary>
            TemplateJob Entity connected with foreign key.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.APIResponsesForMobile`1">
            <summary>
            Generic API response class for mobile application (Root level response class)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ESolve.Entities.Models.APIResponsesForMobile`1.Status">
            <summary>
            Response status
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.APIResponsesForMobile`1.Error_Message">
            <summary>
            Error message with the reason of API failure
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.APIResponsesForMobile`1.Error_Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.APIResponsesForMobile`1.Data">
            <summary>
            Response data 
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.APIResponsesForMobile`1.ToString">
            <summary>
            ToString overrides in order to produce JSON
            </summary>
            <returns>ErrorDetails in JSON Format</returns>
        </member>
        <member name="T:ESolve.Entities.Models.ASSOMigrationDetails">
            <summary>
            ASSOMigrationDetails data model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.Date">
            <summary>
            Sync date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.EmployeeOrUserId">
            <summary>
            Employee or User Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.IsUser">
            <summary>
            Is User or Employee - True if User else Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.AdvancedId">
            <summary>
            Advanced Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.Status">
            <summary>
            Status of migration
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.Message">
            <summary>
            Store error in case of failed migration else store success text
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.IsDeleted">
            <summary>
            To indicate whether the record should be consider or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.FirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.LastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.Email">
            <summary>
            email address
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ASSOMigrationDetails.EmployeeID">
            <summary>
            Employee Number
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.ASSOMigrationDetails.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AttendanceConfirmation">
            <summary>
            Model for Attendance Confirmation Alert
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.EmployeeNotificationDateTime">
            <summary>
            Employee's notification date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.Response">
            <summary>
            Attendance Confirmation Response
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.ResponseTime">
            <summary>
            Date and time when employee responded
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.ManagerNotificationDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.ResponseWindow">
            <summary>
            Response window for the employee's notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.DateOfAttendanceConfirmationItem">
            <summary>
            Date when row in the attendance confirmation log is created
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.ManagerFirstName">
            <summary>
            Manager's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.ManagerLastName">
            <summary>
            Manager's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.JobID">
            <summary>
            Job's primary key that presents foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.EmployeeID">
            <summary>
            Employee's primary key that presents foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.Job">
            <summary>
            Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AttendanceConfirmation.Employee">
            <summary>
            Employee
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AuditTrail">
            <summary>
            Represents Audit trail entity in app.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.OperationDateTime">
            <summary>
            Operation date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.FunctionName">
            <summary>
            Function name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.FunctionDetails">
            <summary>
            Function details
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.Operation">
            <summary>
            Operation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.PreviousValue">
            <summary>
            Previous value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.CurrentValue">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AuditTrail.FunctionId">
            <summary>
            Function Id
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.AutoSolveTime">
            <summary>
            Model for auto solve time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AutoSolveTime.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.AutoSolveTime.Time">
            <summary>
            Auto Solve time
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.BackwardCompatibilityCheck">
            <summary>
            Represents PermissionType model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BackwardCompatibilityCheck.Id">
            <summary>
            Gets or sets the Id
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BackwardCompatibilityCheck.FieldName">
            <summary>
            Gets or sets the Field Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BackwardCompatibilityCheck.IsImplemented">
            <summary>
            Gets or sets the IsImplemented
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.BrokenRule">
            <summary>
            Broken Rule Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.RuleName">
            <summary>
            Rule that employee breaks, possible values are
            Maximum Number Of Hours
            Employee Leaver Status
            Maximum Number Of Days Of The Week
            Employee Must Not Work With Another Employee
            Employee Must Work With Another Employee
            Maximum Number Of Job Types
            Maximum Number Of Job Types Consecutively
            Skill
            LengthOfService
            ComparisonRule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.MaxAllowed">
            <summary>
            This is a ticks of hours defined in max hours constraint or
            number of days defined in max number of days of the week constraint or
            number of max allowed in max number of job type or
            number of job types defined in max number of job types consecutively
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.NumberOfDays">
            <summary>
            Constraint's date range count of days
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.DayOfWeek">
            <summary>
            Day of week defined in maximum number of days of the week constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.Skill">
            <summary>
            Skill that employee didn't have in assigment time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.LengthOfService">
            <summary>
            Lenght of service rule
            For example => 1 month
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.ComparisonRuleFieldValue">
            <summary>
            Value that employee does not have in comparison rule employee field 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.Operator">
            <summary>
            Value that employee does not have in comparison rule employee field 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.EmployeeField">
            <summary>
            Employee field defined in ComparisonRule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.EmployeeBFullName">
            <summary>
            Employee B Full name with who employeeA must or must not work
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.JobTypeName">
            <summary>
            Job type name from constraints
            Maximum Number Of Job Types or
            Maximum Number Of Job Types Consecutively
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.AbsenceCode">
            <summary>
            Absence code
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.User">
            <summary>
            First name and last name of user who has overrided employee on job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.EmployeeID">
            <summary>
            Employee's Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.JobID">
            <summary>
            Job's Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.ConstraintID">
            <summary>
            Constraint's Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.Employee">
            <summary>
            Employee Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.Job">
            <summary>
            Job Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.BrokenRule.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor">
            <summary>
            Default constructor
            </summary>
            
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Int64,System.Int32,System.Nullable{System.Int64})">
            <summary>
            This constructor is used to create broken rule based on maximum number of hours broken constraint, days off within a period 
            and maximum number of job types
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="maxAllowed">Number of hours allowed by constraint</param>
            <param name="days">Constraint's date range count of days</param>
            <param name="constraintID">Constraint Primary Key</param>
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Int64,System.String,System.Int64)">
            <summary>
            This constructor is used to create broken rule based on maximum number of job types consecutively broken constraint 
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="maxAllowed">Number of jobtypes allowed by constraint</param>
            <param name="jobTypeName">Name of JobType defined by Constraint</param>
            <param name="constraintID">ID of the Constraint which will be overriden.</param>
            
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Int64,System.Int32,System.String,System.Nullable{System.Int64})">
            <summary>
            This constructor is used to create broken rule based on maximum number of job types and maximum number of job types consecutevely
            and maximum number of job types
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="maxAllowed">Number of hours allowed by constraint</param>
            <param name="jobTypeName">Job type's name</param>
            <param name="days">Constraint's date range count of days</param>
            <param name="constraintID">Constraint's primary key</param>
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Int64,System.String,System.Int32,System.Nullable{System.Int64})">
            <summary>
            This consctructor is used to create brokend rule base on maximum numbe of the day of the week constraint
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="maxAllowed">Max allowed value </param>
            <param name="dayOfWeek">Days of the week from constriant</param>
            <param name="days">Number of days in range</param>
            <param name="constraintID">Constraint's primary key</param>
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(System.Int64,System.Int64,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            This constructor is used for create broken rule based on skill that employee does not have or
            based on length of service that employee does not have or
            broken absence constraint
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="ruleValue">Skill name, length of service rule or employeeB fullname</param>
            <param name="constraintID">Constraint's primary key</param>
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(System.Int64,System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor is used for create broken rule based on comparison rule that employee does not satisfy
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="comparisonRuleFieldValue">Job type's comparison rule value</param>
            <param name="employeeField">Job type's comparison rule employee field</param>
            <param name="operator">Job type's comparison rule operator</param>
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            Constructor with employeeID, jobID and rule name
            It is used for not already assigned constraint
            </summary>
            <param name="employeeID"></param>
            <param name="jobID"></param>
            <param name="ruleName"></param>
            <param name="user"></param>
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Construcotr with employee's primary key, job's primary key, rule name and max allowed value.
            Used for split shifts constraint
            </summary>
            <param name="employeeID">employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">rule name</param>
            <param name="maxAllowed">Max allowed value</param>
            <param name="constraintID">Constraint's primary key</param>
        </member>
        <member name="M:ESolve.Entities.Models.BrokenRule.#ctor(ESolve.Entities.Models.TemplateBrokenRule)">
            <summary>
            Constructor which uses TemplateBrokenRule object and creates a BrokenRule object
            off it
            </summary>
            <param name="templateBrokenRule">TemplateBrokenRule object.</param>
        </member>
        <member name="T:ESolve.Entities.Models.Class">
            <summary>
            Class Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Class.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Class.Name">
            <summary>
            Class Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Company">
            <summary>
            Company Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Company.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Company.Name">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Company.HeaderBar">
            <summary>
            Company HeaderBar Color
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Company.NavigationBar">
            <summary>
            Company NavigationBar Color
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Company.Logo">
            <summary>
            Company Logo
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConfigSettings">
            <summary>
            Model for Config Settings
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConfigSettings.Id">
            <summary>
            Config settings record Id - Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConfigSettings.Key">
            <summary>
            Config settings key field name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConfigSettings.Value">
            <summary>
            Config settings key field value
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Constraint">
            <summary>
            Represents Constraint model
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.#ctor(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Constructor which initalize all required parameters
            </summary>
            <param name="name">Constraint Name</param>
            <param name="constraintRuleID">Constraint Rule ID</param>
            <param name="scheduleID">Schedule ID</param>
            <param name="isConstraintActive">Will constraint be applied on schedule</param>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.#ctor(System.String,System.Int64,System.Int64,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Constraint for Minimal Number Of Hours Constraint
            </summary>
            <param name="name">Constraint Name</param>
            <param name="constraintRuleID">Constraint Rule ID</param>
            <param name="scheduleID">Schedule Id</param>
            <param name="dateRangeType">Date range type</param>
            <param name="offset">Offset</param>
            <param name="ammount">Amount</param>
            <param name="baseDate">Base Date</param>
            <param name="baseDateRange">Base Date Range</param>
            <param name="hoursType">Hours Type</param>
            <param name="setValue">Value</param>
            <param name="maxHours">Max Hours value from dropdown</param>
            <param name="comparisonMode">Comparison Mode</param>
            <param name="operator">Selected Operator</param>
            <param name="comparisonValue">Comparison Value</param>
            <param name="employeeField">Selected Employee Field</param>
            <param name="customDataID">Custom Data ID</param>
            <param name="isConstraintActive">Is constraint applied on schedule</param>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.#ctor(System.String,System.Int64,System.Int64,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Double},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
             Constraint for Maximal Number Of Days Of The Week Constraint
            </summary>
            <param name="name"></param>
            <param name="constraintRuleID"></param>
            <param name="scheduleID"></param>
            <param name="dateRangeType"></param>
            <param name="offset"></param>
            <param name="ammount"></param>
            <param name="baseDate"></param>
            <param name="baseDateRange"></param>
            <param name="dayOfWeek"></param>
            <param name="maxCount"></param>
            <param name="countOverNights"></param>
            <param name="comparisonMode"></param>
            <param name="operator"></param>
            <param name="comparisonValue"></param>
            <param name="employeeField"></param>
            <param name="customDataID"></param>
            <param name="isConstraintActive"></param>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintRuleID">
            <summary>
            Constraint Rule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintName">
            <summary>
            Constraint Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.IsConstraintActive">
            <summary>
            Indicator is Constraint applied on schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.Schedule">
            <summary>
            Schedule Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintRule">
            <summary>
            Constraint Rule Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintEMWWAEs">
            <summary>
            Collection of ConstraintEMWWAE Cosntraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintEMNWWAEs">
            <summary>
            Collection of ConstraintEMNWWAE Cosntraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintSetValues">
            <summary>
            Collection of ConstraintSetValue
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintMNODOTW">
            <summary>
            Collection of ConstraintMaximum Number Of Days Of The Week
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintMNOH">
            <summary>
            Collection of Constraint Maximum Number Of Hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintMNOJTC">
            <summary>
            Collection of Constraint Maximum Number Of Job Types Consecutively
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintDOWP">
            <summary>
            Days Of Within A Period Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintSS">
            <summary>
            Split shifts constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintMNOJT">
            <summary>
            Maximum number of job type constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.ConstraintMNOJTIME">
            <summary>
            Maximum number of job times constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Constraint.BrokenRules">
            <summary>
            Collection of Broken Rules connected over foreign Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.GetConstraintsAsNonTracking(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Getting constraints of passed schedules
            </summary>
            <param name="scheduleIds">Schedules' primary key</param>
            <param name="repositoryContext">Db context</param>
            <returns>List of constraints</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.GetConstraintsWhichAreNotHardCodedAsNonTracking(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Getting constraints that are not hard coded of passed schedules
            </summary>
            <param name="scheduleIds">Schedules' primary key</param>
            <param name="repositoryContext">Db context</param>
            <returns>List of constraints</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.GetAllConstraintsWhichAreNotHardCodedAsNonTracking(ESolve.Entities.RepositoryContext)">
            <summary>
            Getting all constraint from db that are not hard coded.
            </summary>
            <param name="repositoryContext">Db context</param>
            <returns>List of constraints</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.GetEmployeePlannedAbsenceConstraint(ESolve.Entities.RepositoryContext)">
            <summary>
            Getting Employee Planned Absence constraint
            </summary>
            <param name="repositoryContext">Db Context</param>
            <returns>List of constraints</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.GetConstraintsForAutoSolve(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Getting constraitns for preparing data for autosolve
            </summary>
            <param name="scheduleIDs">Schedules' primary key</param>
            <param name="repositoryContext">Db context</param>
            <returns>List of constraints</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.GetTimeDependentConstraintConstraintsWhichAreNotHardCodedAsNonTracking_(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Getting time dependent constraints
            </summary>
            <param name="scheduleIds">Schedules' primary keys</param>
            <param name="repositoryContext">Db context</param>
            <returns>List of constraints</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.Models.Constraint.GetConstraintsForUnassignAll(ESolve.Entities.RepositoryContext)">
            <summary>
            Getting constraints for unassign all action
            </summary>
            <param name="repositoryContext">Db context</param>
            <returns>List of constraints that are necessary for unassing all action</returns>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintBaseDateRange">
            <summary>
            Model for Constraint BaseDate Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintBaseDateRange.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintBaseDateRange.BaseDate">
            <summary>
            Selected Base Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintBaseDateRange.BaseDateRange">
            <summary>
            Selected Range for base date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintBaseDateRange.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintCustomData">
            <summary>
            Model class For Constraint Custom Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomData.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomData.CustomDataID">
            <summary>
            CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomData.Operator">
            <summary>
            Selected Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomData.EmployeeField">
            <summary>
            Selected Employee Field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomData.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomData.CustomData">
            <summary>
            Custom Data Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintCustomRange">
            <summary>
            Model for Constraint Custom Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomRange.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomRange.Offset">
            <summary>
            Selected offset for range
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomRange.Amount">
            <summary>
            Selected Amount of days for range
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintCustomRange.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintDateRange">
            <summary>
            Constraint with date range 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.IsPayPeriod">
            <summary>
            Indicator is selected Range Pay Period
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.IsMonth">
            <summary>
            Indicator is selected Range Month
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.IsWeek">
            <summary>
            Indicator is selected Range Week
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.CustomDataID">
            <summary>
            Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintSetValueID">
            <summary>
            Constraint Set Value Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintCustomDataID">
            <summary>
            Constraint Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintCustomRangeID">
            <summary>
            Constraint Custom Range Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintBaseDateRangeID">
            <summary>
            Constraint BaseDate Range Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.CustomData">
            <summary>
            Custom Data Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintSetValue">
            <summary>
            Set Value Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintCustomData">
            <summary>
            Set Value Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintCustomRange">
            <summary>
            Constraint Custom Range Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDateRange.ConstraintBaseDateRange">
            <summary>
            Constraint BaseDate Range Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintDOWP">
            <summary>
            Model for Days Off Within Period constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDOWP.StartDay">
            <summary>
            Constraint's start day
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDOWP.NumberOfRestDays">
            <summary>
            Constraint's number of rest days
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintDOWP.MustBeConsecutive">
            <summary>
            Indicator if rest days must be consecutive or not
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintEMNWWAE">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMNWWAE.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMNWWAE.EmployeeAID">
            <summary>
            Employee A Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMNWWAE.EmployeeBID">
            <summary>
            Employee B Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMNWWAE.ReferenceArea">
            <summary>
            ReferenceArea
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMNWWAE.EmployeeA">
            <summary>
            Employee A Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMNWWAE.EmployeeB">
            <summary>
            Employee B Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMNWWAE.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintEMWWAE">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMWWAE.ConstraintID">
            <summary>
            Employee B Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMWWAE.EmployeeAID">
            <summary>
            Employee A Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMWWAE.EmployeeBID">
            <summary>
            Employee B Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMWWAE.ReferenceArea">
            <summary>
            ReferenceArea
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMWWAE.EmployeeA">
            <summary>
            Employee A Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMWWAE.EmployeeB">
            <summary>
            Employee B Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintEMWWAE.Constraint">
            <summary>
            Employee B Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintMNODOTW">
            <summary>
            Model class For constraint Maximum Number Of Days Of The Wek
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNODOTW.DayOfWeek">
            <summary>
            Selected Day Of Week
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNODOTW.MaxCount">
            <summary>
            Max Count of Assigments for selected Day
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNODOTW.CountOvernights">
            <summary>
            Will Constraint count overnight jobs
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintMNOH">
            <summary>
            Model class For constraint Maximum Number Of Hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOH.SetValue">
            <summary>
            Set Value for hours value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOH.MaxHoursField">
            <summary>
            Value from Employee Max Hours Field
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintMNOJT">
            <summary>
            Model class For constraint Maximum Number Of JobType
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJT.MaxCount">
            <summary>
            Max count of job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJT.JobTypeID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJT.JobType">
            <summary>
            JobType Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintMNOJTC">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.MaximalCount">
            <summary>
            Represents how many consecutive days an Employee can work the same JobType
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.RestDays">
            <summary>
            Represents how many days an Employee won't be able
            to work [all/specific jobtype]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.CustomDataID">
            <summary>
            Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.ConstraintSetValueID">
            <summary>
            Constraint Set Value Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.ConstraintCustomDataID">
            <summary>
            Constraint Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.JobTypeID">
            <summary>
            Foreign Key of connected JobType
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.CustomData">
            <summary>
            Custom Data Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.ConstraintSetValue">
            <summary>
            Set Value Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.ConstraintCustomData">
            <summary>
            Set Value Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTC.JobType">
            <summary>
            JobType object connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintMNOJTIME">
            <summary>
            Model for Maximum Number Of Job Times Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTIME.JobStartFrom">
            <summary>
            Job's start from time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTIME.JobStartTo">
            <summary>
            Job's start to time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTIME.JobEndFrom">
            <summary>
            Job's end from time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTIME.JobEndTo">
            <summary>
            Job's end to time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintMNOJTIME.MaxCount">
            <summary>
            Maximum number of job times that employee can be assigned in entered date range
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintRule">
            <summary>
            Represent Constraint Rule Entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintRule.Id">
            <summary>
            Primary Key in Database tblConstraintRuleFields
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintRule.Name">
            <summary>
            Represents Constraint Rule Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintSetValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSetValue.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSetValue.Operator">
            <summary>
            Selected Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSetValue.EmployeeField">
            <summary>
            Selected Employee Field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSetValue.ComparisonValue">
            <summary>
            Comparison Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSetValue.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ConstraintSS">
            <summary>
            Model for Split shifts constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.MinimumRestPeriod">
            <summary>
            Minimum rest period
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.MaximumGap">
            <summary>
            Minimum gap period
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.CustomDataID">
            <summary>
            Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.ConstraintSetValueID">
            <summary>
            Constraint Set Value Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.ConstraintCustomDataID">
            <summary>
            Constraint Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.Constraint">
            <summary>
            Constraint Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.CustomData">
            <summary>
            Custom Data Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.ConstraintSetValue">
            <summary>
            Set Value Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ConstraintSS.ConstraintCustomData">
            <summary>
            Set Value Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.CostCode">
            <summary>
            CostCode Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CostCode.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CostCode.Name">
            <summary>
            CosCode Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CostCode.Description">
            <summary>
            CostCode Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.CustomData">
            <summary>
            CustomData represent user defined custom data specific type defined in tblCustomDataType and value.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomData.CustomDataTypeID">
            <summary>
            CustomDataType Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomData.OrganisationFieldId">
            <summary>
            OrganisationField Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomData.Name">
            <summary>
            CustomData Name
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.CustomData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.CustomData.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initalize all required fileds for inserting CsutomData in DataBase
            </summary>
            <param name="customDataTypeID">CustomDataTypeID</param>
            <param name="name">CustomData Name</param>
        </member>
        <member name="M:ESolve.Entities.Models.CustomData.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            Constructor which initalize all required fileds for inserting CsutomData in DataBase
            </summary>
            <param name="id">CustomDataID</param>
            <param name="customDataTypeID">CustomDataTypeID</param>
            <param name="name">CustomData Name</param>
        </member>
        <member name="P:ESolve.Entities.Models.CustomData.CustomDataType">
            <summary>
            CustomDataType Object connected over foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomData.OrganisationField">
            <summary>
            OrganisationField Object connected over foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.CustomDataDefaultList">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.CustomDataDefaultList.#ctor">
            <summary>
             Default constructor
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataDefaultList.GetLocation">
            <summary>
            Get location list
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataDefaultList.GetDepartment">
            <summary>
            Get department list
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataDefaultList.GetCostCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataDefaultList.GetClass">
            <summary>
            Get cost code list
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataDefaultList.GetDivision">
            <summary>
            Get division list
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataDefaultList.GetJobTitle">
            <summary>
            Get job title list
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataDefaultList.GetTeam">
            <summary>
            Get team list
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.CustomDataLookup">
            <summary>
            Represents CustomDataLookup Model
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.CustomDataLookup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.CustomDataLookup.#ctor(System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="customDataID"></param>
            <param name="item"></param>
        </member>
        <member name="M:ESolve.Entities.Models.CustomDataLookup.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="customDataID"></param>
            <param name="item"></param>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataLookup.Id">
            <summary>
            Primary Key in Database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataLookup.CustomDataID">
            <summary>
            Represents Primary Key From tblCustomDatas
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataLookup.Name">
            <summary>
            Represent Array Item
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataLookup.CustomData">
            <summary>
            CustomDataLookups CustomData.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataLookup.IsEmployeeDataValue">
            <summary>
            Is Employee data value
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.CustomDataLookup.Equals(System.Object)">
            <summary>
            Check are two objects same
            </summary>
            <param name="obj">Object which will be compared with caller</param>
            <returns>True if are same, else false</returns>
        </member>
        <member name="M:ESolve.Entities.Models.CustomDataLookup.GetHashCode">
            <summary>
            Genereting unique hash code
            </summary>
            <returns>Unique HashCode</returns>
        </member>
        <member name="T:ESolve.Entities.Models.CustomDataType">
            <summary>
            CustomDataType class represent predefined Custom Data types. CustomDataType can be e.g Number, Text, Lookup etc. 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataType.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomDataType.Name">
            <summary>
            CustomDataType Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.CustomReportData">
            <summary>
            Class Represent custom data for reports choosing.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomReportData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomReportData.Schedules">
            <summary>
            Represent list with id and names of all schedules which be displayed for user.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomReportData.EmployeeData">
            <summary>
            Represent employee data with id and names;
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomReportData.Employees">
            <summary>
            Represent list with id and names of all employees which be displayed for user.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomReportData.ReportGroups">
            <summary>
            Represent list with id and names of all report groups which be displayed for user.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.CustomReportData.StartDateOfPeriod">
            <summary>
            Start date of period
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Department">
            <summary>
            Deparmtent Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Department.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Department.Name">
            <summary>
            Department Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Department.Description">
            <summary>
            Department Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Division">
            <summary>
            Division Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Division.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Division.Name">
            <summary>
            Division Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Division.Description">
            <summary>
            Division Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.IdNameDropDownModel">
            <summary>
            Class Represent Id and Name Model. It is used for comboboxes. 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.IdNameDropDownModel.Id">
            <summary>
            Represent Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.IdNameDropDownModel.Name">
            <summary>
            Represent Name which be displayed for user.
            </summary>
        </member>
        <member name="F:ESolve.Entities.Models.IdNameDropDownModel.handle">
            <summary>
            Pointer to an external unmanaged resource.
            </summary>
        </member>
        <member name="F:ESolve.Entities.Models.IdNameDropDownModel.component">
            <summary>
            Other managed resource this class uses.
            </summary>
        </member>
        <member name="F:ESolve.Entities.Models.IdNameDropDownModel.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.IdNameDropDownModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.IdNameDropDownModel.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initialize all properties.
            </summary>
            <param name="Id">Database Primary Key</param>
            <param name="Name">Name which be displayed for user</param>
        </member>
        <member name="M:ESolve.Entities.Models.IdNameDropDownModel.Dispose">
            <summary>
            Disposing IdNameDropDownModel
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.IdNameDropDownModel.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. If disposing equals true, 
            the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed. 
            If disposing equals false, the method has been called by the runtime from inside the finalizer and you 
            should not reference other objects.Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ESolve.Entities.Models.IdNameDropDownModel.CloseHandle(System.IntPtr)">
            <summary>
            Use interop to call the method necessary to clean up the unmanaged resource.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.Models.IdNameDropDownModel.Finalize">
            <summary>
            Use C# destructor syntax for finalization code. This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize. Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.IdNameValuesDropDownModel">
            <summary>
            Class Represent Model with Id, Name and Values Model. It is used for comboboxes. 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.IdNameValuesDropDownModel.Id">
            <summary>
            Represent Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.IdNameValuesDropDownModel.Name">
            <summary>
            Represent Name which be displayed for user.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.IdNameValuesDropDownModel.Values">
            <summary>
            Values list
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.DropDowModels.JobTypeDropDownModel">
            <summary>
            Model for job's job type drop down in job's dialog
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDowModels.JobTypeDropDownModel.LoneWorkerJob">
            <summary>
            Indicator if job type support lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDowModels.JobTypeDropDownModel.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDowModels.JobTypeDropDownModel.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDowModels.JobTypeDropDownModel.AttendanceConfirmation">
            <summary>
            Indicator if job type support attendace confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDowModels.JobTypeDropDownModel.AttendanceTimeBeforeStart">
            <summary>
            Time Before Job Start for attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDowModels.JobTypeDropDownModel.AttendanceResponseWindow">
            <summary>
            AttendanceConfirmation response window
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.DropDownModels.LinkedEmployeeModel">
            <summary>
            Details require while linking employee to user
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDownModels.LinkedEmployeeModel.EmployeeId">
            <summary>
            EmployeeId
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDownModels.LinkedEmployeeModel.EmployeeNumber">
            <summary>
            EmployeeNumber
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDownModels.LinkedEmployeeModel.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDownModels.LinkedEmployeeModel.IsASSOEnabled">
            <summary>
            IsASSOEnabled
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.DropDownModels.LinkedEmployeeModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmailNotifications">
            <summary>
            EmailNotifications
            </summary>
        </member>
        <member name="F:ESolve.Entities.Models.EmailNotifications.emailBody">
            <summary>
            emailBody
            </summary>
        </member>
        <member name="F:ESolve.Entities.Models.EmailNotifications.emailaddress">
            <summary>
            emailaddress
            </summary>
        </member>
        <member name="F:ESolve.Entities.Models.EmailNotifications.emailSubject">
            <summary>
            emailSubject
            </summary>
        </member>
        <member name="F:ESolve.Entities.Models.EmailNotifications.employeeId">
            <summary>
            userId
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmailSettings">
            <summary>
            Represents EmailSettings model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmailSettings.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmailSettings.SmtpServer">
            <summary>
            Server for sending email
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmailSettings.SmtpPort">
            <summary>
            Port number
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmailSettings.SmtpAddress">
            <summary>
            Address from which will be email sent
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmailSettings.SmtpPassword">
            <summary>
            Password for SMTP authentification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmailSettings.SmtpUsername">
            <summary>
            User Name to display
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Employee">
            <summary>
            Represents Employee Entity in app.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Employee.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Employee.#ctor(System.Int64,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Int64,System.Nullable{System.Int64},System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,ESolve.Entities.Models.Profile,ESolve.Entities.Models.Gender,ESolve.Entities.Models.Department,ESolve.Entities.Models.CostCode,ESolve.Entities.Models.Division,ESolve.Entities.Models.JobTitle,ESolve.Entities.Models.Team,ESolve.Entities.Models.Class,ESolve.Entities.Models.JobType,ESolve.Entities.Models.TargetRuleGroup,ESolve.Entities.Models.WorkRules,ESolve.Entities.Models.NotificationType,ESolve.Entities.Models.User,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="employeeNumber"></param>
            <param name="firstname"></param>
            <param name="surname"></param>
            <param name="profileID"></param>
            <param name="genderID"></param>
            <param name="departmentID"></param>
            <param name="costCodeID"></param>
            <param name="divisionID"></param>
            <param name="jobTitleID"></param>
            <param name="teamID"></param>
            <param name="classID"></param>
            <param name="jobTypeID"></param>
            <param name="targetRuleGroupID"></param>
            <param name="workRulesID"></param>
            <param name="notificationID"></param>
            <param name="managerID"></param>
            <param name="startDate"></param>
            <param name="leaveDate"></param>
            <param name="address2"></param>
            <param name="address1"></param>
            <param name="address3"></param>
            <param name="address4"></param>
            <param name="dateOfBirth"></param>
            <param name="telephoneNumber"></param>
            <param name="mobileNumber"></param>
            <param name="payRate"></param>
            <param name="maxHours1"></param>
            <param name="maxHours2"></param>
            <param name="maxHours3"></param>
            <param name="maxHours4"></param>
            <param name="maxHours5"></param>
            <param name="allowedTrades"></param>
            <param name="availability"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="role"></param>
            <param name="profile"></param>
            <param name="gender"></param>
            <param name="department"></param>
            <param name="costCode"></param>
            <param name="division"></param>
            <param name="jobTitle"></param>
            <param name="team"></param>
            <param name="class"></param>
            <param name="jobType"></param>
            <param name="targetRuleGroup"></param>
            <param name="notification"></param>
            <param name="manager"></param>
            <param name="image"></param>
            <param name="isAccessEmailSent"></param>
            <param name="isSystemAccessEmailSent"></param>
            <param name="password"></param>
            <param name="workRules"></param>
            <param name="weeklyHours"></param>
            <param name="isLocked"></param>
            <param name="loginFailedCount"></param>
        </member>
        <member name="M:ESolve.Entities.Models.Employee.#ctor(ESolve.Entities.DTOs.EmployeeDTO)">
            <summary>
            
            </summary>
            <param name="employeeDTO"></param>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.EmployeeNumber">
            <summary>
            System unique identifier.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.GenderID">
            <summary>
            Represents Primary Key From tblGenders
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.DepartmentID">
            <summary>
            Represents Primary Key From tblDepartments
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.CostCodeID">
            <summary>
            Represents Primary Key From tblCostCodes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.DivisionID">
            <summary>
            Represents Primary Key From tblDivisions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.JobTitleID">
            <summary>
            Represents Primary Key From tblJobTitles
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.TeamID">
            <summary>
            Represents Primary Key From tblTeams
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.ClassID">
            <summary>
            Represents Primary Key From tblClasses
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.JobTypeID">
            <summary>
            Represents Primary Key From tblJobTypes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.TargetRuleGroupID">
            <summary>
            Represents Primary Key From tblTargetRuleGroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.WorkRulesID">
            <summary>
            Represents primary key from tblWorkRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.NotificationTypeID">
            <summary>
            Represents Primary Key From tblNotifications
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.ManagerID">
            <summary>
            Represents Primary Key From tblManagers
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.StartDate">
            <summary>
            Date when Employee is started working in company.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.LeaveDate">
            <summary>
            Date when employee leave company.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Address2">
            <summary>
            Address2 where Employee lives.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Address1">
            <summary>
            Address1 where Employee lives.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Address3">
            <summary>
            Address3 where Employee lives.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Address4">
            <summary>
            Address4 where Employee lives.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.DateOfBirth">
            <summary>
            Employee Date of birth.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.PayRate">
            <summary>
            PayRate
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.MaxHours1">
            <summary>
            MaxHours1
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.MaxHours2">
            <summary>
            MaxHours2
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.MaxHours3">
            <summary>
            MaxHours3
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.MaxHours4">
            <summary>
            MaxHours4
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.MaxHours5">
            <summary>
            MaxHours5
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.AllowedTrade">
            <summary>
            Does Employee allows to be seted up in trades.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Availability">
            <summary>
            Indicator can we call Employee if he is not on work.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.WeeklyHours">
            <summary>
            WeeklyHours
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.LoginFailedCount">
            <summary>
            LoginFailedCount
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.IsLocked">
            <summary>
            IsLocked
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.EMWWAEEmployeesA">
            <summary>
            ConstraintEmployeeMustWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.TemplateEMWWAEEmployeesA">
            <summary>
            TemplateConstraintEmployeeMustWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.EMWWAEEmployeesB">
            <summary>
            ConstraintEmployeeMustWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.TemplateEMWWAEEmployeesB">
            <summary>
            TemplateConstraintEmployeeMustWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.EMNWWAEEmployeesA">
            <summary>
            ConstraintEmployeeMusNottWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.TemplateEMNWWAEEmployeesA">
            <summary>
            TemplateConstraintEmployeeMustNotWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.EMNWWAEEmployeesB">
            <summary>
            ConstraintEmployeeMustNotWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.TemplateEMNWWAEEmployeesB">
            <summary>
            TemplateConstraintEmployeeMustNotWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.RecordsForTrade">
            <summary>
            TemplateConstraintEmployeeMustNotWorkWithAnotherEmployee Entities connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.LoneWorkerAlerts">
            <summary>
            Lone worker alerts for current job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.AttendanceConfirmations">
            <summary>
            Attendance Confrimation alerts for current job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.LoneWorkerTransactionLogs">
            <summary>
            Lone worker transaction log
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.SkillMatrices">
            <summary>
            EmployeeSkills
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.ScheduleAssigmentsResults">
            <summary>
            ScheduleAssigmentsResults for Sync History
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Gender">
            <summary>
            Employees Gender.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Location">
            <summary>
            Employees Locations.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Department">
            <summary>
            Employees Department.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.CostCode">
            <summary>
            Employees CostCode.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Division">
            <summary>
            Employees Division.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.JobTitle">
            <summary>
            Employees JobTitle.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Team">
            <summary>
            Employees Team.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Class">
            <summary>
            Employees Class.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.JobType">
            <summary>
            Employees JobType.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.TargetRuleGroup">
            <summary>
            Employees TargetRuleGroup.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.WorkRules">
            <summary>
            Employees WorkRules.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.NotificationType">
            <summary>
            Employees NotificationType.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.Manager">
            <summary>
            Employees AbsenceManager.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.EmployeeNotifications">
            <summary>
            Collection of employee notifications
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.AbsenceRequests">
            <summary>
            Collection of employee absence requests
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.EmployeeAbsences">
            <summary>
            Collection of employee absences
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.JobOffers">
            <summary>
            Collection of JobOffers Connected over foreign kie
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.JobOfferForAutoAssigments">
            <summary>
            Collection of JobOfferForAutoAssigment Connected over foreign kie
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Employee.EmployeeSyncs">
            <summary>
            EmployeeSync Entities connected with foreign key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Employee.Equals(System.Object)">
            <summary>
            Equals Method for comparing two Employees.
            </summary>
            <param name="obj">Employee Object which we want to compare.</param>
            <returns>True if passed object is same as caller.</returns>
        </member>
        <member name="M:ESolve.Entities.Models.Employee.GetHashCode">
            <summary>
            Generate HashCode.
            </summary>
            <returns>HashCode for this Entity.</returns>
        </member>
        <member name="M:ESolve.Entities.Models.Employee.MapEmployeeToEmployeeSolverDTO">
            <summary>
            Maps Object Properties to the new EmployeeSolverDTO.
            See <see cref="T:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO"/> for more details.
            </summary>
            <returns>Newly created EmployeeSolverDTO</returns>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeAbsence">
            <summary>
            Employee Absences Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeAbsence.EmployeeID">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeAbsence.Employee">
            <summary>
            Employee Connected over foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeAbsence.AbsenceRequests">
            <summary>
            Collection of absence requests
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeAvailability">
            <summary>
            EmployeeAvailability
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeAvailability.Id">
            <summary>
            Gets or sets the Id
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeAvailability.DayOfWeek">
            <summary>
            Day of week
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeAvailability.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeAvailability.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeAvailability.EmployeeId">
            <summary>
            Represents Primary Key From tblEmployees
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeeAvailability.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeeAvailability.#ctor(ESolve.Entities.Models.EmployeeAvailability)">
            <summary>
            Copy construcotr
            </summary>
            <param name="original"></param>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeConstraint">
            <summary>
            Employees Job Constraint Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeConstraint.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeConstraint.Value">
            <summary>
            Indicator does Employee Satisfies Current Constraint on Current Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeConstraint.EmployeeID">
            <summary>
            Represents Primary Key From tblEmployees.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeConstraint.JobID">
            <summary>
            Represents Primary Key From tblJobs.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeConstraint.ConstraintID">
            <summary>
            Represents Primary Key From tblConstraints.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeeConstraint.#ctor">
            <summary>
            Default Constrint
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeeConstraint.#ctor(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Create New Employee constraint
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="jobID">Job Primary Key</param>
            <param name="constraintID">Constraint Primary Key</param>
            <param name="value">Indicator Does Employee satisfies Constraint</param>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeConstraint.Employee">
            <summary>
            Employee object.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeConstraint.Job">
            <summary>
            Job object.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeConstraint.Constraint">
            <summary>
            Constraint object.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeeConstraint.GetEmployeeConstraints(ESolve.Entities.RepositoryContext,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Getting employee constraitns by passed employees' and jobs' primary keys
            </summary>
            <param name="repositoryContext">Db context</param>
            <param name="employeeIds">Employees' primary keya</param>
            <param name="jobIds">Jobs' primary keys</param>
            <returns>List of EmployeeConstraint objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeDataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeDataType.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeDataType.name">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeLocation">
            <summary>
            Represents Employee locations in the application
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocation.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocation.EmployeeId">
            <summary>
            Represents Primary Key From tblEmployees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocation.LocationId">
            <summary>
            Represents Primary Key From tblLocations.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocation.Employee">
            <summary>
            Linked Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocation.Location">
            <summary>
            Linked Location
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeLocationViaIntegration">
            <summary>
            Represents employee's location received via Integration endpoint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocationViaIntegration.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocationViaIntegration.EmployeeId">
            <summary>
            Represents Primary Key From tblEmployees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocationViaIntegration.LocationId">
            <summary>
            Represents Primary Key From tblLocations.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocationViaIntegration.EmployeeLocationId">
            <summary>
            Represents Primary Key From tblEmployeeLocations
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeLocationViaIntegration.EmployeeLocation">
            <summary>
            Linked EmployeeLocation
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeeLocationViaIntegration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeeLocationViaIntegration.#ctor(ESolve.Entities.Models.EmployeeLocation)">
            <summary>
            Copy constructor from EmployeeLocation
            </summary>
            <param name="employeeLocation"></param>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeNotification">
            <summary>
            Represents model of Employee Notifications
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeNotification.EmployeeID">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeNotification.AbsenceRequestID">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeNotification.Employee">
            <summary>
            Employee model connected via foerign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeNotification.AbsenceRequest">
            <summary>
            AbsenceRequest model connected via foerign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeOwnTradeOffer">
            <summary>
            Model for employee's own trade offers (offers that he offered to others)
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeePermissions">
            <summary>
            EmployeePermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeePermissions.Id">
            <summary>
            Gets or sets the Id
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeePermissions.EmployeeAvailability">
            <summary>
            Gets or sets a value indicating whether EmployeeAvailability
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeePermissions.EmployeeAbsenceAuthorisation">
            <summary>
            Gets or sets a value indicating whether EmployeeAbsenceAuthorisation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeePermissions.EmployeeDetails">
            <summary>
            Gets or sets a value indicating whether EmployeeDetails
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeePermissions.EmployeeDetailsMaintenance">
            <summary>
            Gets or sets a value indicating whether EmployeeDetailsMaintenance
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeePermissions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeePermissions.#ctor(ESolve.Entities.Models.EmployeePermissions)">
            <summary>
            Copy construcotr
            </summary>
            <param name="original"></param>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeSchedHrsStatus">
            <summary>
            EmployeeSchedHrsStatus Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSchedHrsStatus.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSchedHrsStatus.Name">
            <summary>
            EmployeeSchedHrsStatus Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSchedHrsStatus.PrimaryColor">
            <summary>
            EmployeeSchedHrsStatus Primary Color
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSchedHrsStatus.SecondaryColor">
            <summary>
            EmployeeSchedHrsStatus Secondary Color
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSchedHrsStatus.Description">
            <summary>
            EmployeeSchedHrsStatus Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeSync">
            <summary>
            Sync Employee Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSync.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSync.SyncID">
            <summary>
            Sync Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSync.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSync.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSync.Employee">
            <summary>
            Employee Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSync.Job">
            <summary>
            Job Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeSync.Sync">
            <summary>
            Sync Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeTile">
            <summary>
            Represents Employee Tile model which is used to determine which employee's info will display on employee's tile
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.EmployeeNumber">
            <summary>
            Employee number field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Gender">
            <summary>
            Gender field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Location">
            <summary>
            Location field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Department">
            <summary>
            Department field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.CostCode">
            <summary>
            Cost code field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Division">
            <summary>
            Divison field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.JobTitle">
            <summary>
            Job title field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Team">
            <summary>
            Team field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Class">
            <summary>
            Class field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.JobType">
            <summary>
            Job type field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Manager">
            <summary>
            Manager field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.StartDate">
            <summary>
            Start date field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.LeaveDate">
            <summary>
            Leave date field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Address2">
            <summary>
            Address2 field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Address1">
            <summary>
            Address2 number field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Address3">
            <summary>
            Address3 field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Address4">
            <summary>
            Address4 field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.DateOfBirth">
            <summary>
            Date of birth field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.TelephoneNumber">
            <summary>
            Telephone number field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.MobileNumber">
            <summary>
            Mobile number field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.PayRate">
            <summary>
            Pay period field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.MaxHours1">
            <summary>
            Max hours 1 field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.MaxHours2">
            <summary>
            Max hours 2 field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.MaxHours3">
            <summary>
            Max hours 3 field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.MaxHours4">
            <summary>
            Max hours 4 field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.MaxHours5">
            <summary>
            Max hours 5 field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.AllowedTrade">
            <summary>
            Allowed trade field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.Email">
            <summary>
            Email field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.ScheduledHours">
            <summary>
            Scheduled hours field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTile.AdditionalInfo">
            <summary>
            Additional info field
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.EmployeeTile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.EmployeeTradeOffer">
            <summary>
            Model for employee's trade offer
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTradeOffer.EmployeeOwnTradeOfferID">
            <summary>
            Represents Primary Key From tblEmployeesOwnTradeOffers
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.EmployeeTradeOffer.EmployeeOwnTradeOffer">
            <summary>
            EmployeeOwnTradeOffer
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ErrorDetails">
            <summary>
            Error Details Model for interceptor
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ErrorDetails.StatusCode">
            <summary>
            Request Status Code 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ErrorDetails.Message">
            <summary>
            Request Message
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.ErrorDetails.ToString">
            <summary>
            ToString overrided in order to produce JSON
            </summary>
            <returns>ErrorDetails in JSON Format</returns>
        </member>
        <member name="T:ESolve.Entities.Models.GDPR">
            <summary>
            Class Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.GDPR.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.GDPR.Period">
            <summary>
            Period of time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.GDPR.Count">
            <summary>
            Number of periods
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Gender">
            <summary>
            Represent Gender Model.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Gender.Id">
            <summary>
            Primary Key in Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Gender.Name">
            <summary>
            Name of Gender.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Gender.Description">
            <summary>
            Description of Gender.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ImageSize">
            <summary>
            ImageSize Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ImageSize.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ImageSize.Size">
            <summary>
            Image Size Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ImageSize.Width">
            <summary>
            Image Width
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ImageSize.Height">
            <summary>
            Image Height
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ImageSize.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.InsertedJob">
            <summary>
            InsertedJob model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.InsertedTemplateID">
            <summary>
            InsertedTemplate Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.JobID">
            <summary>
            Job Foreign Key.
            If it's null, it means that Job was deleted from Schedule
            and could be reinserted by Publishing a Template.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.JobStartDateTime">
            <summary>
            Represent's Job's Start DateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.JobEndDateTime">
            <summary>
            Represents Job's End DateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.TemplateJobID">
            <summary>
            TemplateJob Foreign Key.
            If it's null, it means that TemplateJob was deleted from Template
            and could be deleted from Schedule(s) by Publishing a Template.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.ShouldUpdateJob">
            <summary>
            Indicates that either Job or TemplateJob have been updated, meaning that
            Job should be updated to TemplateJob's values upon Publishing.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.InsertedTemplate">
            <summary>
            InsertedTemplate object connected via InsertedTemplateID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.Job">
            <summary>
            Job object connected via JobID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedJob.TemplateJob">
            <summary>
            TemplateJob object connected via TemplateJobID Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.InsertedSubGroup">
            <summary>
            InsertedJob model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.InsertedTemplateID">
            <summary>
            InsertedTemplate Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.SubGroupID">
            <summary>
            SubGroup Foreign Key.
            If it's null, it means that SubGroup was deleted from Schedule
            and could be reinserted by Publishing a Template.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.ParentID">
            <summary>
            SubGroup's Parent ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.TemplateSubGroupID">
            <summary>
            TemplateSubGroup Foreign Key.
            If it's null, it means that TemplateSubGroup was deleted from Template
            and could be deleted from Schedule(s) by Publishing a Template.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.TemplateSubGroupParentID">
            <summary>
            TemplateSubGroup's Parent ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.ShouldResetSubGroup">
            <summary>
            Indicator for whether or not the SubGroup should be reset to values of TemplateSubGroup.
            True if SubGroup or TemplateSubGroup are edited. False after the Publish.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.InsertedTemplate">
            <summary>
            InsertedTemplate object connected via InsertedTemplateID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.SubGroup">
            <summary>
            SubGroup object connected via SubGroupID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.Parent">
            <summary>
            Parent SubGroup object connected via ParentID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedSubGroup.TemplateSubGroup">
            <summary>
            TemplateSubGroup object connected via TemplateSubGroupID Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.InsertedTemplate">
            <summary>
            Model that represents InsertedTemplate entity.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.Id">
            <summary>
            InsertedTemplate's Primary Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.TemplateID">
            <summary>
            Primary Key of the Template whose data is inserted
            into the Schedule/SubGroup.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.ScheduleID">
            <summary>
            Primary Key of a Schedule into which
            the data is inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.SubGroupID">
            <summary>
            Primary Key of a SubGroup into which
            the data is inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.StartDate">
            <summary>
            Date from which the data is inserted into
            the Schedule/SubGroup.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.EndDate">
            <summary>
            Date until which the data is inserted into
            the Schedule/SubGroup.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.Rotations">
            <summary>
            Number of times the Template data has been inserted
            into the Schedule/SubGroup, one after another.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.Template">
            <summary>
            Template object connected via Foreign Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.Schedule">
            <summary>
            Schedule object connected via Foreign Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.SubGroup">
            <summary>
            SubGroup object connected via Foreign Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.InsertedTemplate.InsertedSubGroups">
            <summary>
            InsertedSubGroup object connected via Foreign Key.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Job">
            <summary>
            Represents Job model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Name">
            <summary>
            Job Name [Unique on subgroup level]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.JobStartDateTime">
            <summary>
            Job Start Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.JobEndDateTime">
            <summary>
            Job End Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Hours">
            <summary>
            Job hours. [No of effective hours for that job]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManualEditedHours">
            <summary>
            Property which indicates would App calculate Hours.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Hours1">
            <summary>
            Hours of day 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManualEditedHours1">
            <summary>
            Indicator if hours field for day 1 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Hours2">
            <summary>
            Hours of day 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManualEditedHours2">
            <summary>
            Indicator if hours field for day 2 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Hours3">
            <summary>
            Hours of day 3
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManualEditedHours3">
            <summary>
            Indicator if hours field for day 3 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Hours4">
            <summary>
            Hours of day 4
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManualEditedHours4">
            <summary>
            Indicator if hours field for day 4 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Hours5">
            <summary>
            Hours of day 5
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManualEditedHours5">
            <summary>
            Indicator if hours field for day 5 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Hours6">
            <summary>
            Hours of day 6
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManualEditedHours6">
            <summary>
            Indicator if hours field for day 6 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Notes">
            <summary>
            Job Notes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.NoOfEmployeesRequired">
            <summary>
            Number of required Employees for Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.AllowedTrade">
            <summary>
            Trade block
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManualEditedAllowedTrade">
            <summary>
            Flag that indicates if allowed trade field is manual edited or not.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.IsConcurrent">
            <summary>
            Is Job concurent
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ReferenceArea">
            <summary>
            Concurrent job's reference area for calculation associated emplployees.
            Possible values are: Schedule / Subgroup / Subgroup Lower Subgroupss
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.SortOrder">
            <summary>
            Sort order.s
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.IsCriticalTask">
            <summary>
            Is Job Critical
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Approved">
            <summary>
            Is job approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.NumberOfValidAssigned">
            <summary>
            Number of valid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.NumberOfInvalidAssigned">
            <summary>
            Number of invalid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.LoneWorkerJob">
            <summary>
            Indicator if job is lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManuallyEditedLoneWorkerJob">
            <summary>
            Indicator if lone worker job is manullay updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManuallyEditedReccuringIntervals">
            <summary>
            Indicator if reccuring intervals is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManuallyEditedResponseWindow">
            <summary>
            Indicator if response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.AttendanceConfirmation">
            <summary>
            Indicator if job need attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManuallyEditedAttendanceConfirmation">
            <summary>
            Indicator if attendance confirmation check box is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.AttendanceTimeBeforeStart">
            <summary>
            Time before job start for the attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManuallyEditedAttendanceTimeBeforeStart">
            <summary>
            Indicator if time before job start is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.AttendanceResponseWindow">
            <summary>
            Attendance Confirmation Response Window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ManuallyEditedAttendanceResponseWindow">
            <summary>
            Indicator if attendance confirmation response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.CanBeResubmittedForApproval">
            <summary>
            Indicator to see if an approved job can be sent for re-approval
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.SubGroupID">
            <summary>
            SubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.JobTypeID">
            <summary>
            JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.JobStatusID">
            <summary>
            JobStatus Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.ShiftID">
            <summary>
            Shift Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.SubGroup">
            <summary>
            SubGroup Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.JobType">
            <summary>
            JobType Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.JobStatus">
            <summary>
            JobStatus Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.Shift">
            <summary>
            Shift Entity conneted with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.EmployeeConstraints">
            <summary>
            EmplyoeesConstraints connected with foreign keys
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.JobOffers">
            <summary>
            JobOfferStatuses Entity connected with foreign kie.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.JobOfferForAutoAssigments">
            <summary>
            Collection of JobOfferForAutoAssigment Connected over foreign kie
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.LoneWorkerAlerts">
            <summary>
            Lone worker alerts for current job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.AttendanceConfirmations">
            <summary>
            Attendance Confrimation alerts for current job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.LoneWorkerTransactionLogs">
            <summary>
            Lone worker transaction log
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Job.EmployeeSyncs">
            <summary>
            EmployeeSync Entity connected with foreign kie.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Job.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Job.#ctor(ESolve.Entities.Models.Job)">
            <summary>
            Copy constructor
            </summary>
            <param name="originalJob"></param>
        </member>
        <member name="M:ESolve.Entities.Models.Job.#ctor(ESolve.Entities.Models.TemplateJob,System.Int64)">
            <summary>
            Constructor that takes TemplateJob and ID as parameters.
            Uses another constructor for updating values and uses passed ID
            for its own ID.
            *Must change SubGroupID*
            </summary>
            <param name="originalJob">TemplateJob whose values are used for creating a Job instance.</param>
            <param name="id">Primary Key of the existing Job.</param>
        </member>
        <member name="M:ESolve.Entities.Models.Job.#ctor(ESolve.Entities.Models.TemplateJob)">
            <summary>
            Constructor that uses TemplateJob to create Job.
            *Must change SubGroupID*
            </summary>
            <param name="originalJob">TemplateJob</param>
        </member>
        <member name="M:ESolve.Entities.Models.Job.#ctor(ESolve.Entities.DTOs.JobWithCustomDataDTO)">
            <summary>
            Generate job from jobWithCustomDataDTO
            </summary>
            <param name="jobWithCustomDataDTO"></param>
        </member>
        <member name="M:ESolve.Entities.Models.Job.CompareJobFieldsForCalculations(ESolve.Contracts.IJob)">
            <summary>
            Methods compares properties of passed instance with this 
            and returns name of each field which posses diff value. 
            </summary>
            <param name="job">Job entity to compare</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.Models.Job.UpdateJobStatus(ESolve.Entities.RepositoryContext)">
            <summary>
            For passed JobAvailabilitites Update Job Status
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Job.UpdateJobsStatus(ESolve.Entities.RepositoryContext,System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed JobAvailabilitites Update Job Status
            </summary>
            <param name="repositoryContext">RepositoryContext</param>
            <param name="jobIds">Job ids which will be updated</param>
        </member>
        <member name="T:ESolve.Entities.Models.JobAvailability">
            <summary>
            Table where are stored all employees for all jobs with indicator is employee available for that job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.Id">
            <summary>
            Employees Availability for certain Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.IsAssigned">
            <summary>
            Indicator is Employee in Assigned or Available List
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.CompletelyValid">
            <summary>
            Indicator is Employee Completely Valid
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.OriginalCompletelyValid">
            <summary>
            Indicator is Employee Valid before applying constraints or modifying job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.OriginalCompletelyValidUpdated">
            <summary>
            Indicator is OriginalCompletelyValid flag is updated for a given unlocked range to make sure that
            it retains the original value of CompletelyValid flag when job was approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.IsOverriden">
            <summary>
            Indicator is assigment is overriden or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.SkillCode">
            <summary>
            Does Employee satisfies SkillCodeRequirements
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.LengthOfService">
            <summary>
            Does employee satisifes Length Of Service
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.ComparisonRule">
            <summary>
            Does Employee Satisifes ComparisonRule Formula's
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.NotAlreadyAssigned">
            <summary>
            Does Employee satisifes Not Already assigned Constraint.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.MaxNumberOfHours">
            <summary>
            Does Employee Satisifes MaxNumber Of Hours Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.MaxNoOfDaysOfTheWeek">
            <summary>
            Does Employee Satisifes MaxNumber Of Days Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.SplitShifts">
            <summary>
            Does employee satisfy split shifts constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.DaysOffWithinAPeriod">
            <summary>
            Does employee satisfy Days Off Within A Periodconstraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.MNOJT">
            <summary>
            Does Employee Satisfies Maximum Number Of JobTypes Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.MNOJTC">
            <summary>
            Does Employee Satisfies Maximum Number Of Job Types Consecutively
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.EMNWWAE">
            <summary>
            Does Employee Satisfies Employee Must Not Work With Another Employee Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.EMWWAE">
            <summary>
            Does Employee Satisfies Employee Must Work With Another Employee Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.EmployeePlannedAbsence">
            <summary>
            Does employee satisfies Employee Planned Absence constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.MNOJTIME">
            <summary>
            Does employee satisfies Maximum Number Of Job Times constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.IsApproved">
            <summary>
            Indicator is Assigment Approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.IsNotified">
            <summary>
            Indicator is Assigment is Notified to Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.EmployeeAvailability">
            <summary>
            Does employee satisfies employee available constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.UserWhoHasAssigned">
            <summary>
            Firstname and lastname of user who has assigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.EmployeeID">
            <summary>
            Employee Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.JobID">
            <summary>
            Job Database Primary Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobAvailability.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobAvailability.#ctor(ESolve.Entities.Models.JobAvailability)">
            <summary>
            Copy constructor
            </summary>
            <param name="jobAvailability"></param>
        </member>
        <member name="M:ESolve.Entities.Models.JobAvailability.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor for Adding NEW JobAvailability. IsAssigned, SkillCode, JobType and CompletelyValid will be setted on False
            </summary>
            <param name="employeeID">Employee Primary key</param>
            <param name="jobID">Job Primary Key</param>
        </member>
        <member name="M:ESolve.Entities.Models.JobAvailability.SetAllConstraintsToTrue">
            <summary>
            Setting true for all constraints
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobAvailability.IsCompletelyValid">
            <summary>
            Checking if job's availability is completely valie
            </summary>
            <returns>True if job's availability is completely valid, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.Models.JobAvailability.SetCompletlyValidConstraints">
            <summary>
            Setting all constraints to true and checking if job's availaiblity is completely valid
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.Employee">
            <summary>
            Employee Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.Job">
            <summary>
            Job Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobAvailability.RecordsForTrade">
            <summary>
            Record for trades for current availability
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobCustomData">
            <summary>
            JobCustomData Model
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobCustomData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobCustomData.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            Constructor which initialize all params
            </summary>
            <param name="id">SubGroupCustomData Primary Key</param>
            <param name="jobID">Job PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="manualyUpdated">Indicator is some value manualy updated</param>
        </member>
        <member name="M:ESolve.Entities.Models.JobCustomData.#ctor(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            Constructor which initialize all params without PrimaryKey
            </summary>
            <param name="jobID">Job PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="manualyUpdated">Indicator is some value manualy updated</param>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.JobID">
            <summary>
            Job Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.CustomDataID">
            <summary>
            CustomData Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.CustomDataLookupID">
            <summary>
            CustomDataLookup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.Number">
            <summary>
            Represents Number value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.Text">
            <summary>
            Represents Text value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.ManuallyUpdated">
            <summary>
            Indicator is filed manualy updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.Job">
            <summary>
            Job object connected over JobId foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.CustomData">
            <summary>
            CustomData object connected over CustomDataID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobCustomData.CustomDataLookup">
            <summary>
            CustomDataLookup object connected over CustomDataLookupID foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobHistory">
            <summary>
            Represents JobHistory model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Name">
            <summary>
            Job Name [Unique on subgroup level]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.JobStartDateTime">
            <summary>
            Job Start Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.JobEndDateTime">
            <summary>
            Job End Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Hours">
            <summary>
            Job hours. [No of effective hours for that job]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManualEditedHours">
            <summary>
            Property which indicates would App calculate Hours.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Hours1">
            <summary>
            Hours of day 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManualEditedHours1">
            <summary>
            Indicator if hours field for day 1 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Hours2">
            <summary>
            Hours of day 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManualEditedHours2">
            <summary>
            Indicator if hours field for day 2 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Hours3">
            <summary>
            Hours of day 3
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManualEditedHours3">
            <summary>
            Indicator if hours field for day 3 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Hours4">
            <summary>
            Hours of day 4
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManualEditedHours4">
            <summary>
            Indicator if hours field for day 4 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Hours5">
            <summary>
            Hours of day 5
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManualEditedHours5">
            <summary>
            Indicator if hours field for day 5 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Hours6">
            <summary>
            Hours of day 6
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManualEditedHours6">
            <summary>
            Indicator if hours field for day 6 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Notes">
            <summary>
            Job Notes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.NoOfEmployeesRequired">
            <summary>
            Number of required Employees for Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.AllowedTrade">
            <summary>
            Trade block
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManualEditedAllowedTrade">
            <summary>
            Flag that indicates if allowed trade field is manual edited or not.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.IsConcurrent">
            <summary>
            Is Job concurent
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ReferenceArea">
            <summary>
            Concurrent job's reference area for calculation associated emplployees.
            Possible values are: Schedule / Subgroup / Subgroup Lower Subgroupss
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.SortOrder">
            <summary>
            Sort order.s
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.IsCriticalTask">
            <summary>
            Is Job Critical
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Approved">
            <summary>
            Is job approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.NumberOfValidAssigned">
            <summary>
            Number of valid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.NumberOfInvalidAssigned">
            <summary>
            Number of invalid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.LoneWorkerJob">
            <summary>
            Indicator if job is lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManuallyEditedLoneWorkerJob">
            <summary>
            Indicator if lone worker job is manullay updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManuallyEditedReccuringIntervals">
            <summary>
            Indicator if reccuring intervals is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManuallyEditedResponseWindow">
            <summary>
            Indicator if response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.AttendanceConfirmation">
            <summary>
            Indicator if job need attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManuallyEditedAttendanceConfirmation">
            <summary>
            Indicator if attendance confirmation check box is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.AttendanceTimeBeforeStart">
            <summary>
            Time before job start for the attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManuallyEditedAttendanceTimeBeforeStart">
            <summary>
            Indicator if time before job start is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.AttendanceResponseWindow">
            <summary>
            Attendance Confirmation Response Window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ManuallyEditedAttendanceResponseWindow">
            <summary>
            Indicator if attendance confirmation response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.CanBeResubmittedForApproval">
            <summary>
            Indicator to see if an approved job can be sent for re-approval
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.SubGroupID">
            <summary>
            SubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.JobTypeID">
            <summary>
            JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.JobStatusID">
            <summary>
            JobStatus Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.ShiftID">
            <summary>
            Shift Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.JobId">
            <summary>
            Id of the Job that we are traking via this record
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.SubGroup">
            <summary>
            SubGroup Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.JobType">
            <summary>
            JobType Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.JobStatus">
            <summary>
            JobStatus Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Shift">
            <summary>
            Shift Entity conneted with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobHistory.Job">
            <summary>
            Job Entity connected with foreign key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobHistory.CompareJobFieldsForCalculations(ESolve.Contracts.IJob)">
            <summary>
            Get list of job fields that are changed
            </summary>
            <param name="job">Job to compare with</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.Models.JobHistory.UpdateJobStatus(ESolve.Entities.RepositoryContext)">
            <summary>
            Update job status
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.Models.JobHistory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobHistory.#ctor(ESolve.Entities.Models.Job)">
            <summary>
            Create JobHistory from the Job
            </summary>
            <param name="originalJob"></param>
        </member>
        <member name="T:ESolve.Entities.Models.JobOffer">
            <summary>
            JobOffer Database Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.UserID">
            <summary>
            User Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.JobOfferStatusID">
            <summary>
            JobOfferStatus Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.JobOfferDate">
            <summary>
            Date when Offer is created
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.JobOfferStatus">
            <summary>
            JobOfferStatus Entity connected with foreign kie.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.Employee">
            <summary>
            JobOfferStatuses Entity connected with foreign kie.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.Job">
            <summary>
            JobOfferStatuses Entity connected with foreign kie.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOffer.User">
            <summary>
            User Entity connected with foreign kie.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobOfferForAutoAssigment">
            <summary>
            Database model for JobOffers For AutoAssigment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOfferForAutoAssigment.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOfferForAutoAssigment.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOfferForAutoAssigment.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOfferForAutoAssigment.Employee">
            <summary>
            JobOfferStatuses Entity connected with foreign kie.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOfferForAutoAssigment.Job">
            <summary>
            JobOfferStatuses Entity connected with foreign kie.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobOfferStatus">
            <summary>
            JobOfferStatus Database Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOfferStatus.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobOfferStatus.Name">
            <summary>
            JobOffer Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobStatus">
            <summary>
            JobStatus Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobStatus.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobStatus.Name">
            <summary>
            JobStatus Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobStatus.PrimaryColor">
            <summary>
            JobStatus Primary Color
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobStatus.SecondaryColor">
            <summary>
            JobStatus Secondary Color
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobStatus.Description">
            <summary>
            JobStatus Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTitle">
            <summary>
            JobTitle Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTitle.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTitle.Name">
            <summary>
            JobTitle Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTitle.Description">
            <summary>
            JobTitle Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobType">
            <summary>
            JobType Model
            </summary>    
        </member>
        <member name="P:ESolve.Entities.Models.JobType.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.Name">
            <summary>
            Jobtype Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.TimeUnitValue">
            <summary>
            TimeUnit Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.AllowedTrade">
            <summary>
            Trade blocks are allowed or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.IsLengthOfServiceNonEssential">
            <summary>
            Indicaator if length of service is non essential or not
            True if it is non essential, false if it is essential!
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.LoneWorkerJob">
            <summary>
            Indicator if job type support lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.AttendanceConfirmation">
            <summary>
            Indicator if job type support attendace confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.AttendanceTimeBeforeStart">
            <summary>
            Time Before Job Start for attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.AttendanceResponseWindow">
            <summary>
            AttendanceConfirmation response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.TimeUnitID">
            <summary>
            TimeUnit Foreign Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobType.#ctor(System.String)">
            <summary>
            Constructor which initialize Name Property
            </summary>
            <param name="Name">Jobtype Name</param>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.TimeUnit">
            <summary>
            TimeUnit object connected via TimeUnitID Foreign Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobType.Employees">
            <summary>
            List Of Employees which belong this JobType
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeAuditModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeAuditModel.jobType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeAuditModel.jobTypeEssentialSkillsFromDB">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeAuditModel.jobTypeNonEssentialSkillsFromDB">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeComparisonRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.ComparisonMode">
            <summary>
            Represents Selected ComparisonMode
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.Operator">
            <summary>
            Represents Selected Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.EmployeeField">
            <summary>
            Represents Selected Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.TextValue">
            <summary>
            Represents Selected Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.NumberValue">
            <summary>
            Represents Selected Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.JobTypeID">
            <summary>
            JobType Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.CustomDataID">
            <summary>
            CustomData Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.JobType">
            <summary>
            JobType object connected via JobTypeID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRule.CustomData">
            <summary>
            CustomData object connected via CustomDataID Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeComparisonRuleTextValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRuleTextValue.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeComparisonRuleTextValue.LocationTextValue">
            <summary>
            Represents Selected Text Value
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeEssentialComparisonRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeEssentialComparisonRule.JobTypeEssentialComparisonRuleTextValues">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeEssentialComparisonRuleTextValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeEssentialComparisonRuleTextValue.JobTypeEssentialComparisonRuleId">
            <summary>
            JobTypeComparisonRule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeEssentialComparisonRuleTextValue.JobTypeEssentialComparisonRule">
            <summary>
            JobTypeComparisonRule object connected via JobTypeComparisonRuleId Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeEssentialSkill">
            <summary>
            Job Type Essential skill
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobTypeEssentialSkill.#ctor">
            <summary>
            Default constructors
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobTypeEssentialSkill.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            Constructor with all attributes
            </summary>
            <param name="jobTypeID">Job type's primary key</param>
            <param name="skillCodeID">Skill code's primary key</param>
            <param name="skillGroup">Skill group name</param>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeNonEssentialComparisonRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeNonEssentialComparisonRule.JobTypeNonEssentialComparisonRuleTextValues">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeNonEssentialComparisonRuleTextValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeNonEssentialComparisonRuleTextValue.JobTypeNonEssentialComparisonRuleId">
            <summary>
            JobTypeComparisonRule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeNonEssentialComparisonRuleTextValue.JobTypeNonEssentialComparisonRule">
            <summary>
            JobTypeComparisonRule object connected via JobTypeComparisonRuleId Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeNonEssentialSkill">
            <summary>
            Job type's non-essential skill
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.JobTypeNonEssentialSkill.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            Constructor with all attributes
            </summary>
            <param name="jobTypeID">Job type's primary key</param>
            <param name="skillCodeID">Skill code's primary key</param>
            <param name="skillGroup">Skill group's name</param>
        </member>
        <member name="M:ESolve.Entities.Models.JobTypeNonEssentialSkill.#ctor">
            <summary>
            Constructor with all attributes
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.JobTypeSkill">
            <summary>
            Parent class for job type's skills
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeSkill.SkillCodeID">
            <summary>
            Skill code's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeSkill.JobTypeID">
            <summary>
            Job type's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeSkill.SkillGroup">
            <summary>
            Skill group name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeSkill.SkillCode">
            <summary>
            Skill code's foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.JobTypeSkill.JobType">
            <summary>
            Job type's foreing key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.License">
            <summary>
            Model for License
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.License.Id">
            <summary>
            License record Id - Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.License.LicenseData">
            <summary>
            License data
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.LinkedEmployeeRight">
            <summary>
            Represtns linkeed employee right model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkedEmployeeRight.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkedEmployeeRight.Name">
            <summary>
            Lineked employee right's name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.LinkInfo">
            <summary>
            Model for LinkInfo, this is part od Push Notification model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.Id">
            <summary>
            Database Primary Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.StartDateTime">
            <summary>
            Represent start of period
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.EndDateTime">
            <summary>
            Represent end of period
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.LoneWorkerAction">
            <summary>
            Indicator if lone worker action is required
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.AttendanceConfirmationAction">
            <summary>
            Indicator if attendance confirmation action is required
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.CurrentView">
            <summary>
            Represents current view for the link in the notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.SubGroupId">
            <summary>
            Represents Primary Key From tblSubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.ScheduleId">
            <summary>
            Represents Primary Key From tblSchedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.UserId">
            <summary>
            Represents Primary Key From tblUser
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.EmployeeId">
            <summary>
            Represents Primary Key From tblEmployee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.AbsenceRequestID">
            <summary>
            Absence Request Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.JobID">
            <summary>
            Job's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.SubGroup">
            <summary>
            SubGroup from database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.Schedule">
            <summary>
            Schedule from database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.User">
            <summary>
            User from database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.Employee">
            <summary>
            Employee from database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.AbsenceRequest">
            <summary>
            AbsenceRequest from database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LinkInfo.Job">
            <summary>
            Job from database
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Locales">
            <summary>
            Represents Locales Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Locales.Id">
            <summary>
            Primary Key in Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Locales.Name">
            <summary>
            Name of Locale.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Locales.Value">
            <summary>
            Value of Locale
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Location">
            <summary>
            Location Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Location.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Location.Name">
            <summary>
            Location Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.LockedJobs">
            <summary>
            Model represents Jobs whic are locked by user
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.Id">
            <summary>
            DataBase Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.JobAvailabilityID">
            <summary>
            JobAvailabilityID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.EmployeeID">
            <summary>
            EmployeeID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.JobID">
            <summary>
            JobID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.JobStartDate">
            <summary>
            Start Date and Time when Job is Locked
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.JobEndDateTime">
            <summary>
            End Date and Time when Job is Locked
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.IsCompletelyValid">
            <summary>
            Was Employee Completely Valid in moment of locking
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.UserID">
            <summary>
            Id of User Who locked table
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LockedJobs.IsFromPublishTemplate">
            <summary>
            Indicator if table is locked via Publish Template event
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.LoneWorkerAlert">
            <summary>
            Model for lone worker alerts
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerAlert.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerAlert.AlertDateTime">
            <summary>
            DateTime when alert is sent to lone worker manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerAlert.Notes">
            <summary>
            Notes about alert
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerAlert.IsOpened">
            <summary>
            Flag if alert is opened or closed
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerAlert.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerAlert.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerAlert.Employee">
            <summary>
            Employee Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerAlert.Job">
            <summary>
            Job Entity connected with foreign key.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.LoneWorkerCheckIn">
            <summary>
            Model for lone worker check ins
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerCheckIn.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerCheckIn.TimeToSendConfirmation">
            <summary>
            Time when new confirmation alert need to be send for this job to assigned employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerCheckIn.OrdinalNumberOfSending">
            <summary>
            Ordinal number for sending confirmation alert based on response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerCheckIn.JobID">
            <summary>
            Job's primary key that presents foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerCheckIn.EmployeeID">
            <summary>
            Employee's primary key that presents foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerCheckIn.Job">
            <summary>
            Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerCheckIn.Employee">
            <summary>
            Employee
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.LoneWorkerTransactionLog">
            <summary>
            Model for Lone Worker Trancation Log
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.Date">
            <summary>
            Lone Worker Alerts Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.FirstNotificationDateTime">
            <summary>
            First Notification Date Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.SecondNotificationDateTime">
            <summary>
            Second Notification Date Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.EmployeeResponse">
            <summary>
            Employee Response
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.ManagerNotification">
            <summary>
            Manager Notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.ManagerName">
            <summary>
            Manager's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.AdminNotification">
            <summary>
            Admin Notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.AdminName">
            <summary>
            Admin's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.JobID">
            <summary>
            Job's primary key that presents foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.EmployeeID">
            <summary>
            Employee's primary key that presents foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.Job">
            <summary>
            Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.LoneWorkerTransactionLog.Employee">
            <summary>
            Employee
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.NotificationDetailsForMobileDevice">
            <summary>
            Class contains properties for notification details for mobile device
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationDetailsForMobileDevice.NotificationBody">
            <summary>
            Notification body
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationDetailsForMobileDevice.Category">
            <summary>
            Notification category
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationDetailsForMobileDevice.Title">
            <summary>
            Notification title
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationDetailsForMobileDevice.JobId">
            <summary>
            Job id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationDetailsForMobileDevice.LinkTo">
            <summary>
            Notification linked to entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationDetailsForMobileDevice.NotificationCreatedDate">
            <summary>
            Notification created date
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.NotificationType">
            <summary>
            NotificationType Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationType.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.NotificationType.Name">
            <summary>
            Notification Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.OrganisationField">
            <summary>
            Represents OrganisationField model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.OrganisationField.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.OrganisationField.Name">
            <summary>
            Field's name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.PanelPermission">
            <summary>
            Panel permissionm represent a permission for employee tab
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PanelPermission.Id">
            <summary>
            Gets or sets the Id
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PanelPermission.PermissionTypeID">
            <summary>
            Gets or sets the PermissionTypeID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PanelPermission.PermissionOptionID">
            <summary>
            Gets or sets the PermissionTypeID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PanelPermission.ProfileID">
            <summary>
            Gets or sets the ProfileID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PanelPermission.PermissionType">
            <summary>
            PermissionType
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PanelPermission.Profile">
            <summary>
            Profile
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PanelPermission.PermissionOption">
            <summary>
            PanelPermissionOption
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.PanelPermission.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.PanelPermission.#ctor(ESolve.Entities.Models.PanelPermission)">
            <summary>
            Copy construcotr
            </summary>
            <param name="original"></param>
        </member>
        <member name="T:ESolve.Entities.Models.PermissionOption">
            <summary>
            Panel permission options for dropdown list
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PermissionOption.Id">
            <summary>
            Gets or sets the Id
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PermissionOption.Name">
            <summary>
            Gets or sets the Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.PermissionType">
            <summary>
            Represents PermissionType model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PermissionType.Id">
            <summary>
            Gets or sets the Id
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PermissionType.Name">
            <summary>
            Gets or sets the Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PermissionType.IsUserPanel">
            <summary>
            Gets or sets the IsUserPanel
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Profile">
            <summary>
            EmployeeProfile Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.Name">
            <summary>
            Employee Profile Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.IsUserProfile">
            <summary>
            True if user's profile, false if employee's profile
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.SchedulePermissionsID">
            <summary>
            Represents Primary Key From tblSchedulePermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.AbsencePermissionsID">
            <summary>
            Represents Primary Key From tblAbsencePermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.SystemPermissionsID">
            <summary>
            Represents Primary Key From tblSystemPermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.EmployeePermissionsID">
            <summary>
            Represents Primary Key From tblEmployeePermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.ReportPermissionsID">
            <summary>
            Represents Primary Key From tblReportPermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.SchedulePermissions">
            <summary>
            SchedulePermisssions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.AbsencePermissions">
            <summary>
            SchedulePermisssions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.SystemPermissions">
            <summary>
            SystemPermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.EmployeePermissions">
            <summary>
            EmployeePermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.ReportPermissions">
            <summary>
            ReportPermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Profile.PanelPermissions">
            <summary>
            List of PanelPermissions
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Profile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Profile.#ctor(ESolve.Entities.Models.Profile)">
            <summary>
            Copy constructor
            </summary>
            <param name="originalProfile"></param>
        </member>
        <member name="T:ESolve.Entities.Models.PushNotification">
            <summary>
            Push Notification model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.Id">
            <summary>
            PushNotification Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.NotificationTitle">
            <summary>
            Represent title of notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.NotificationContent">
            <summary>
            Represent content of notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.ActionRequired">
            <summary>
            Represents whether any action is required on the notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.IsReaded">
            <summary>
            Represents whether the notification has been reviewed
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.DateCreated">
            <summary>
            Represents when the notification was created
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.LoneWorkerCheckedIn">
            <summary>
            Indicator if notification is archived and employee is checked in on lone worker alert
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.AttendanceResponded">
            <summary>
            Indicator if employee responend on attendance confirmation alert
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.LinkTo">
            <summary>
            Represents the topic of the link
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.Color">
            <summary>
            Color of link
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.Category">
            <summary>
            Category of notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.UserId">
            <summary>
            Represents Primary Key From tblUser
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.EmployeeId">
            <summary>
            Represents Primary Key From tblEmployee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.LinkInfoId">
            <summary>
            Represents Primary Key From tblLinkInfo
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.User">
            <summary>
            User from database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.Employee">
            <summary>
            Employee from database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotification.LinkInfo">
            <summary>
            LinkInfo from database
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.PushNotificationToAndroidMobileDevice">
            <summary>
            Notification Data for mobile device
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotificationToAndroidMobileDevice.MobileDeviceId">
            <summary>
            Mobile device id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotificationToAndroidMobileDevice.NotificationData">
            <summary>
            Notification data for mobile device
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.PushNotificationToiOSMobileDevice">
            <summary>
            Class contains properties to send push notification to mobile device
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotificationToiOSMobileDevice.MobileDeviceId">
            <summary>
            Mobile device id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.PushNotificationToiOSMobileDevice.NotificationDetailForMobileDevice">
            <summary>
            Notification details for mobile device
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Ranking">
            <summary>
            Represent Ranking Entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.Name">
            <summary>
            Ranking Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.Active">
            <summary>
            is ranking active on selected schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.RankingOrder">
            <summary>
            Ranking order
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.RankingRuleID">
            <summary>
            Ranking Rule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.RankingTypeID">
            <summary>
            Ranking type Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.ScheduleID">
            <summary>
            Scheduler Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.RankingRule">
            <summary>
            Ranking Rule connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.RankingType">
            <summary>
            Ranking type connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.Employee">
            <summary>
            Employee connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.Schedule">
            <summary>
            Schedule connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Ranking.RankingComparisonValues">
            <summary>
            Ranking's comparison values
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.RankingComparisonValue">
            <summary>
            Ranking's comparsion value model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingComparisonValue.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingComparisonValue.Name">
            <summary>
            Name of comparison value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingComparisonValue.RankingID">
            <summary>
            Ranking Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingComparisonValue.Ranking">
            <summary>
            Ranking connected with RankingID foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.RankingRule">
            <summary>
            Represent Ranking Rule Entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.ReverseOrder">
            <summary>
            Is Reverse Order of rankings
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.DateRange">
            <summary>
            Date Range
            dropdown list
            values - Day / Week / Month / Pay period / Custom
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.Offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.BaseDate">
            <summary>
            Base Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.BaseDateRange">
            <summary>
            Base Date Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.DayOfWeek">
            <summary>
            Day Of Week
            dropdown list
            values - Monday / Tuesday / Wednesday / Thursday / Friday / Saturday / Sunday
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.CountOvernights">
            <summary>
            Count Overnights
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.JobStartFrom">
            <summary>
            Job Start From
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.JobStartTo">
            <summary>
            Job Start To
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.JobEndFrom">
            <summary>
            Job End From
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.JobEndTo">
            <summary>
            Job End To
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.ComparisonMode">
            <summary>
            Comparasion Mode
            dropdown list
            values - Set Value / Custom Data / No Comparison
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.ComparisonValue">
            <summary>
            Comparasion Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.Operator">
            <summary>
            Comparison rule's operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.EmployeeField">
            <summary>
            Comaprison rule's operator, true if operator is =
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.RestrictedToJobTypeID">
            <summary>
            Restricted Job Type Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.CustomDataID">
            <summary>
            Custom data's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.JobType">
            <summary>
            Job Type connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingRule.CustomData">
            <summary>
            CustomData connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.RankingType">
            <summary>
            Represent Ranking Type Entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.Name">
            <summary>
            Ranking Rule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.ReverseOrder">
            <summary>
            Is Reverse Order of rankings
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.RestrictedToJobTypeID">
            <summary>
            Is RestrictedToJobType
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.DateRange">
            <summary>
            Date Range
            dropdown list
            values - Day / Week / Month / Pay period / Custom
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.Offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.BaseDate">
            <summary>
            Base Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.BaseDateRange">
            <summary>
            Base Date Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.DayOfWeek">
            <summary>
            Day Of Week
            dropdown list
            values - Monday / Tuesday / Wednesday / Thursday / Friday / Saturday / Sunday
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.CountOvernights">
            <summary>
            Count Overnights
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.JobStartFrom">
            <summary>
            Job Start From
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.JobStartTo">
            <summary>
            Job Start To
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.JobEndFrom">
            <summary>
            Job End From
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.JobEndTo">
            <summary>
            Job End To
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.ComparisonMode">
            <summary>
            Comparasion Mode
            dropdown list
            values - Set Value / Custom Data / No Comparison
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.Operator">
            <summary>
            Operator for comparison rule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.EmployeeField">
            <summary>
            Employee field for comparison rule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.ComparisonValue">
            <summary>
            Comparison value for comparison rule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RankingType.CustomDataID">
            <summary>
            Custom data field for comparison rule
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.RecordForTrade">
            <summary>
            RecordForTrade model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RecordForTrade.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RecordForTrade.OriginalAssignedEmployeeID">
            <summary>
            Represents Primary Key of employee who was assignd From tblEmployees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RecordForTrade.JobAvailabilityID">
            <summary>
            New assignment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RecordForTrade.OriginalAssignedEmployee">
            <summary>
            Employee who was assigned on job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.RecordForTrade.JobAvailability">
            <summary>
            New assignment
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ReportGroup">
            <summary>
            Report Type Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportGroup.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportGroup.Name">
            <summary>
            Report Group Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ReportPermissions">
            <summary>
            ReportPermissions model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportPermissions.Id">
            <summary>
            Gets or sets the Id
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportPermissions.Reports">
            <summary>
            Gets or sets a value indicating whether Reports
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportPermissions.ScheduleReport">
            <summary>
            Gets or sets a value indicating whether ScheduleReport
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportPermissions.ScheduleSummaryReport">
            <summary>
            Gets or sets a value indicating whether ScheduleSummaryReport
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportPermissions.ScheduleEmployeeBreakdownReport">
            <summary>
            Gets or sets a value indicating whether ScheduleEmployeeBreakdownReport
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.ReportPermissions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.ReportPermissions.#ctor(ESolve.Entities.Models.ReportPermissions)">
            <summary>
            Copy construcotr
            </summary>
            <param name="original"></param>
        </member>
        <member name="T:ESolve.Entities.Models.ReportType">
            <summary>
            Report Type Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportType.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ReportType.Name">
            <summary>
            Report Type Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Schedule">
            <summary>
            Schedule Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Schedule.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Schedule.Name">
            <summary>
            Schedule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Schedule.StartDate">
            <summary>
            Schedule Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Schedule.EndDate">
            <summary>
            Schedule End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Schedule.ApplyConstraintFromScheduleId">
            <summary>
            Apply constraint to the schedule from given Schedule Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Schedule.InsertedTemplates">
            <summary>
            List of Inserted Templates
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ScheduleAssigmentsResults">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.Status">
            <summary>
            Represents Primary Key From Sync Status
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.ScheduleName">
            <summary>
            Schedule's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.EmployeeName">
            <summary>
            Employee's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.JobStartDateTime">
            <summary>
            Job's start date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.JobEndDateTime">
            <summary>
            Job's end date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.EmployeeNumber">
            <summary>
            Employee's number
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.JobID">
            <summary>
            Job Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.EmployeeID">
            <summary>
            Represents Primary Key From Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.ScheduleSyncRequestResultID">
            <summary>
            Represents Primary Key From Sync Status
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleAssigmentsResults.ScheduleSyncRequestResult">
            <summary>
            ScheduleSyncRequestResult object connected over foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ScheduleCustomData">
            <summary>
            Schedule Custom Data Model
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.ScheduleCustomData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.ScheduleCustomData.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String)">
            <summary>
            Constructor which initalize all params required for save and update actions
            </summary>
            <param name="id">ScheduleCustomData Primary Key</param>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="number">Number value</param>
            <param name="text">Text value</param>
        </member>
        <member name="M:ESolve.Entities.Models.ScheduleCustomData.#ctor(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String)">
            <summary>
            Constructor which initalize all params required for save and update actions. Without ScheduleCustomData Primary Key Value.
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="number">Number value</param>
            <param name="text">Text value</param>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.ScheduleID">
            <summary>
            Schedule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.CustomDataID">
            <summary>
            CustomData Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.CustomDataLookupID">
            <summary>
            Selected CustomDataLookup item ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.Number">
            <summary>
            Represents Number value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.Text">
            <summary>
            Represents Text value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.Schedule">
            <summary>
            Schedule object connected via ScheduleID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.CustomData">
            <summary>
            CustomData object connected via CustomDataID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleCustomData.CustomDataLookup">
            <summary>
            CustomDataLookup object connected via CustomDataLookupID Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ScheduleDatePreference">
            <summary>
            ScheduleDatePreference Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleDatePreference.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleDatePreference.StartDayOfWeek">
            <summary>
            Start Day of Week
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleDatePreference.PayPeriodStartDate">
            <summary>
            Pay Period Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleDatePreference.PayPeriodNumberOfDays">
            <summary>
            Pay Period Number of Days
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleDatePreference.IsMonthlyPayPeriod">
            <summary>
            Field that indicate is Pay Period on Monhly basis
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleDatePreference.ScheduleInitialDateRange">
            <summary>
            Schedule Initial Date Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleDatePreference.LocalesID">
            <summary>
            Locales Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleDatePreference.Locales">
            <summary>
            Locales connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ScheduleMaxAndMinJobDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleMaxAndMinJobDate.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleMaxAndMinJobDate.ScheduleID">
            <summary>
            Shedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleMaxAndMinJobDate.MinJobDate">
            <summary>
            Job inside Schedule with Min Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleMaxAndMinJobDate.MaxJobDate">
            <summary>
            Job inside Schedule with Max Date
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.ScheduleMaxAndMinJobDate.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.ScheduleMaxAndMinJobDate.#ctor(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Constructor with parameters for creating New
            </summary>
            <param name="scheduleID">Chedule Primary Key</param>
            <param name="minJobDate">Min Date value</param>
            <param name="maxJobDate">Max Date Value</param>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleMaxAndMinJobDate.Schedule">
            <summary>
            Schedule Entity connected with foreign key.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SchedulePermissions">
            <summary>
            Schedule Permissions model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.Id">
            <summary>
            Gets or sets the Id
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.AccessExistingSchedules">
            <summary>
            Gets or sets a value indicating whether AccessExistingSchedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.CreateNewSchedules">
            <summary>
            Gets or sets a value indicating whether CreateNewSchedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.DeleteExistingSchedules">
            <summary>
            Gets or sets a value indicating whether DeleteExistingSchedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.ManageTemplates">
            <summary>
            Gets or sets a value indicating whether ManageTemplates
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.AssignAgency">
            <summary>
            Gets or sets a value indicating whether AssignAgency
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.ScheduleConstraintConfiguration">
            <summary>
            Gets or sets a value indicating whether ScheduleConstraintConfiguration
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.AssignFromUnavailable">
            <summary>
            Gets or sets a value indicating whether AssignFromUnavailable
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.TemporaryConstraintDisabling">
            <summary>
            Gets or sets a value indicating whether TemporaryConstraintDisabling
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.ScheduleRankingConfiguration">
            <summary>
            Gets or sets a value indicating whether ScheduleRankingConfiguration
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.ScheduleApprovalAndSync">
            <summary>
            Gets or sets a value indicating whether ScheduleApproval
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.ChangeApprovedSchedules">
            <summary>
            Gets or sets a value indicating whether ChangeApprovedSchedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.ViewBudgets">
            <summary>
            Gets or sets a value indicating whether ViewBudgets
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.ViewSchedule">
            <summary>
            Gets or sets a value indicating whether AllowedViewTheirOwnSchedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.TradeBoard">
            <summary>
            Gets or sets a value indicating whether AllowedToAccessTheTradeboardAndTradeJobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.JobOffers">
            <summary>
            Gets or sets a value indicating whether AllowedReceiveAndAcceptJobOffers
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.SetAvailability">
            <summary>
            Gets or sets a value indicating whether AllowedAccessAndAmendTheirEmployeeAvailability
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.UseShifts">
            <summary>
             Gets or sets a value that indicates whether the user can use shifts
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.LoneWorkerAlerts">
            <summary>
            Gets or sets a value that indicates whether the user can receive lone worker alerts
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.AttendanceConfirmation">
            <summary>
            Gets or sets a value that indicates whether the user can be attendance confirmation manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.JobTypeMaintenance">
            <summary>
            Permission for Job Type Maintenence
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.AllowOverlappingAssignments">
            <summary>
            Permisison for allowig user to override overlapping jobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePermissions.AutoSolve">
            <summary>
            Permisison for allowig user to perform Auto Solve
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SchedulePermissions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SchedulePermissions.#ctor(ESolve.Entities.Models.SchedulePermissions)">
            <summary>
            Copy construcotr
            </summary>
            <param name="original">Original value used for copying/creating new instance</param>
        </member>
        <member name="T:ESolve.Entities.Models.SchedulePreference">
            <summary>
            SchedulePreference Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.MaxNumberOfSubGroups">
            <summary>
            Schedule maximum number of subgroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.TradeDeadlineValue">
            <summary>
            Dedline value for trade
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.AutoAssignmentsForJobOffers">
            <summary>
            Indicator are AutoAssigments Allowed
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.AcceptedAutoAssignmentsDeadlineForJobOffers">
            <summary>
            Time in whic auto acceptance is allowed
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.AutoSolveAsPermission">
            <summary>
            Indicator of AutoSolve as a User Permission Allowed
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.LoneWorkerAdmin1ID">
            <summary>
            Lone worker admin's (user) primary key (the first one)
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.LoneWorkerAdmin2ID">
            <summary>
            Lone worker admin's (user) primary key (the second one)
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.LoneWorkerAdmin1">
            <summary>
            User object connected via LoneWorkerAdmin1ID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SchedulePreference.LoneWorkerAdmin2">
            <summary>
            User object connected via LoneWorkerAdmin2ID foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ScheduleRight">
            <summary>
            Represents Schedule Right model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleRight.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleRight.Name">
            <summary>
            Schedule right's name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.ScheduleSyncRequestResult">
            <summary>
            Model for ScheduleSyncRequestResult
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleSyncRequestResult.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleSyncRequestResult.Status">
            <summary>
            Represents Primary Key From Sync Status
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleSyncRequestResult.SyncID">
            <summary>
            Represents Primary Key From tblSyncs
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.ScheduleSyncRequestResult.Sync">
            <summary>
            Sync 
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Security">
            <summary>
            Represents Password complexity in app.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Security.Id">
            <summary>
            Password complexitit primary key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Security.MinimumLength">
            <summary>
            MinimumLength of password.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Security.MinimumUpperCharacters">
            <summary>
            Minimum number of upper characters in password.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Security.MinimumSpecialCharacters">
            <summary>
            Minimum number of special characters in password.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Security.MinimumNumericCharacters">
            <summary>
            Minimum number of numeric characters in password.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Security.DaysBeforePasswordExpires">
            <summary>
            Days before password expires.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Security.TimeoutMinutes">
            <summary>
            Timeout minutes
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Security.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Security.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Int32)">
             <summary>
             
             </summary>
             <param name="id"></param>
             <param name="minimumLength"></param>
             <param name="minimumUpperCharacters"></param>
             <param name="minimumSpecialCharacters"></param>
             <param name="minimumNumericCharacters"></param>
             <param name="daysBeforePasswordExpires"></param>
            <param name="timeoutMinutes"></param>
        </member>
        <member name="T:ESolve.Entities.Models.Shift">
            <summary>
            Represents Shift model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Code">
            <summary>
            Represent code of shift
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Description">
            <summary>
            Description for shift
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.StartTime">
            <summary>
            Start time of shift
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.EndTime">
            <summary>
            End time of shift
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.NumberOfDays">
            <summary>
            Number of days
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Hours">
            <summary>
            Total hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Hours1">
            <summary>
            First day
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Hours2">
            <summary>
            Second day
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Hours3">
            <summary>
            Third day
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Hours4">
            <summary>
            Fourth day
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Hours5">
            <summary>
            Fifth day
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.Hours6">
            <summary>
            Sixth day
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.ShiftsGroupId">
            <summary>
            ShiftsGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.ShiftsGroup">
            <summary>
            ShiftsGroup Object connected over foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Shift.TemplateJobs">
            <summary>
            Template Jobs connected over foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SkillCode">
            <summary>
            SkillCode Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillCode.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillCode.Name">
            <summary>
            Skillcode Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillCode.Description">
            <summary>
            SkillCode Description
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SkillCode.#ctor(System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="T:ESolve.Entities.Models.SkillMatrix">
            <summary>
            SkillMatrix Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrix.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrix.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SkillMatrix.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SkillMatrix.#ctor(System.Boolean,System.Int64,System.Int64)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="Value">Indicator does Selected Employee have selected SkillCode</param>
            <param name="EmployeeID">Selected Employee</param>
            <param name="SkillCodeID">Selected SkillCode</param>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrix.EmployeeID">
            <summary>
            Employee Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrix.SkillCodeID">
            <summary>
            SkillCode Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrix.Employee">
            <summary>
            Employee object connected via EmployeeID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrix.SkillCode">
            <summary>
            SkillCode object connected via SkillCodeID Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SkillMatrixFilterSearch">
            <summary>
            Mopel for saving filters of skill matrix page
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixFilterSearch.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixFilterSearch.SkillCodeID">
            <summary>
            Skill Code Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixFilterSearch.JobTypeID">
            <summary>
            Job Type Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixFilterSearch.SkillMatrixSearchID">
            <summary>
            SkillMatrixSearch foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixFilterSearch.JobType">
            <summary>
            Job Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixFilterSearch.SkillCode">
            <summary>
            Job Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixFilterSearch.SkillMatrixSearch">
            <summary>
            Skill Matrix Search
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SkillMatrixSearch">
            <summary>
            Model for skill matrix's search
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.ColumnPage">
            <summary>
            Selected column page of pagination
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.ColumnLimit">
            <summary>
            Selected colument limit of pagination
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.IsEmployee">
            <summary>
            Listed page by employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.Page">
            <summary>
            Selected page of pagination
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.Limit">
            <summary>
            Selected Limit of items per page of pagination
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.SortOrder">
            <summary>
            Skill matrix sort order 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.AreRowsSwapped">
            <summary>
            Flag that indicates if rows are swapped or not which means if employees present columns or rows in skill matrix
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.UserID">
            <summary>
            User foreign key. If this value is null it means that user is admin
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SkillMatrixSearch.User">
            <summary>
            User by foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SpecialDate">
            <summary>
            Special date model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SpecialDate.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SpecialDate.Date">
            <summary>
            Date which represets special date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SpecialDate.SpecialDateTypeID">
            <summary>
            Special date type primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SpecialDate.SpecialDateType">
            <summary>
            SpecialDateType connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SpecialDateType">
            <summary>
            Special date's type model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SpecialDateType.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SpecialDateType.Name">
            <summary>
            Special date type's name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SubGroup">
            <summary>
            SubGroup Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.Name">
            <summary>
            SubGroup Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.StartDate">
            <summary>
            SubGroup Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.EndDate">
            <summary>
            SubGroup End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.SortOrder">
            <summary>
            SubGroup SortOrder
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.HideFrom">
            <summary>
            Represents Date from which we will not show SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.IsFromTemplate">
            <summary>
            Indicator representing whether SubGroup was created
            by Inserting a Template
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.ScheduleID">
            <summary>
            Schedule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.ParentGroupID">
            <summary>
            SubGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.LoneWorkerManager1ID">
            <summary>
            User's foreign key for lone worker manager 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.LoneWorkerManager2ID">
            <summary>
            User's forign key for lone worker manager 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.AttendanceManager1ID">
            <summary>
            User's foreign key for AttendanceConfirmationManager 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.AttendanceManager2ID">
            <summary>
            User's forign key for AttendanceConfirmationManager 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.Schedule">
            <summary>
            Schedule object connected via ScheduleID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.ParentGroup">
            <summary>
            SubGroup object connected via ParentGroupID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.TemplateSubGroup">
            <summary>
            TemplateSubGroup object connected via TemplateSubGroupID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.UnlockedSubGroups">
            <summary>
            Unlocked SubGroups connected over Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.LoneWorkerManager1">
            <summary>
            User object connected via LoneWorkerManager1ID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.LoneWorkerManager2">
            <summary>
            User object connected via LoneWorkerManager2ID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.AttendanceManager1">
            <summary>
            User object connected via AttendanceConfirmationManager1 foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroup.AttendanceManager2">
            <summary>
            User object connected via AttendanceConfirmationManager2 foreign key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SubGroup.#ctor(ESolve.Entities.Models.SubGroup)">
            <summary>
            Constructor that uses passed SubGroup's values.
            </summary>
            <param name="subGroup"></param>
        </member>
        <member name="M:ESolve.Entities.Models.SubGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SubGroup.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.Models.SubGroup.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Models.SubGroupCustomData">
            <summary>
            SubGroup CustomData Model
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SubGroupCustomData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SubGroupCustomData.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Double},System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Constructor which initialize all params
            </summary>
            <param name="id">SubGroupCustomData Primary Key</param>
            <param name="subGroupID">SubGroup PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="lookupID">CustomDataLookup Primary Key</param>
            <param name="manualyUpdated">Indicator is some value manualy updated</param>
        </member>
        <member name="M:ESolve.Entities.Models.SubGroupCustomData.#ctor(System.Int64,System.Int64,System.Nullable{System.Double},System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Constructor which initialize all params without PrimaryKey
            </summary>
            <param name="subGroupID">SubGroup PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="lookupID">CustomDataLookup Primary Key</param>
            <param name="manualyUpdated">Indicator is some value manualy updated</param>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.SubGroupID">
            <summary>
            SubGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.CustomDataID">
            <summary>
            CustomData Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.CustomDataLookupID">
            <summary>
            CustomDataLookup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.Number">
            <summary>
            Represents Number value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.Text">
            <summary>
            Represents Text value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.ManuallyUpdated">
            <summary>
            Indicator is filed manualy updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.SubGroup">
            <summary>
            SubGroup Entity connected over Foreig Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.CustomData">
            <summary>
            CustomData Entity connected over Foreig Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupCustomData.CustomDataLookup">
            <summary>
            CustomDataLookup Entity connected over Foreig Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SubGroupsApproval">
            <summary>
            SubGroup Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.IsApproved">
            <summary>
            Represents whether the subgroup is approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.SubmitedDate">
            <summary>
            Represents the date when the subgroup was submitted
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.StartDate">
            <summary>
            Represents the start of submission period for the subgroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.EndDate">
            <summary>
            It represents the end of submission period for the subgroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.IsSchedule">
            <summary>
            Represents is submited whole schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.Comment">
            <summary>
            Comment for approved or rejected item
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.CurrentView">
            <summary>
            Represent the current view of approval schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.IsVisible">
            <summary>
            Indicator should User see this approval[Used For situation when user submitt subgroup with childs]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.IsReminded">
            <summary>
            Indicator are reminder sent to users
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.ScheduleID">
            <summary>
            Schedule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.SubGroupID">
            <summary>
            SubGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.UserId">
            <summary>
            USer Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.ParentGroupID">
            <summary>
            ParentGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.Schedule">
            <summary>
            Schedule object connected via SubGroupID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.SubGroup">
            <summary>
            SubGroup object connected via SubGroupID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.User">
            <summary>
            User object connected via USerID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SubGroupsApproval.ParentGroup">
            <summary>
            Parent of Submitted Item
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SuperAdmin">
            <summary>
            Represents User Entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SuperAdmin.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SuperAdmin.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SuperAdmin.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SuperAdmin.IsFirstLogin">
            <summary>
            Indicator is initial password changed
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SuperAdmin.ApiKey">
            <summary>
            Api Key for Super Admin
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SuperAdmin.EmailAddress">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SuperAdmin.AdvancedId">
            <summary>
            ASSO AdvancedId
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Sync">
            <summary>
            Represents Sync model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.SyncLastRun">
            <summary>
            Last run of sync
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.SyncSuccessful">
            <summary>
            Sync successful data
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.ScheduleId">
            <summary>
            Represents ID of the Schedule on top of which the Sync was pressed
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.StartDate">
            <summary>
            Represents Start Date of the date range seen on the calendar.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.EndDate">
            <summary>
            Represents End Date of the date range seen on the calendar.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.SyncStatusID">
            <summary>
            Represents Primary Key From tblEmployees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.SyncStatus">
            <summary>
            Sync Statuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.EmployeeSyncs">
            <summary>
            EmplyoeeSyncs connected with foreign keys
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Sync.ScheduleSyncRequestResults">
            <summary>
            ScheduleSyncRequestResult objects connected over foreign kie
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SyncSettings">
            <summary>
            SyncSetttings model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SyncSettings.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SyncSettings.Message">
            <summary>
            SyncSettings message
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SyncSettings.DisplaySyncButton">
            <summary>
            Dispaly sync button
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SyncStatus">
            <summary>
            Represents Sync model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SyncStatus.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SyncStatus.Name">
            <summary>
            Sync name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SyncStatus.Syncs">
            <summary>
            Sync Objects connected voer foreign kie
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.SystemPermissions">
            <summary>
            SystemPermissions model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.Id">
            <summary>
            Gets or sets the Id
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.TargetRules">
            <summary>
            Gets or sets a value indicating whether TargetRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.EmployeeRosters">
            <summary>
            Gets or sets a value indicating whether EmployeeRosters
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.SkillsMatrix">
            <summary>
            Gets or sets a value indicating whether SkillsMatrix
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.CreateSkillCodes">
            <summary>
            Gets or sets a value indicating whether CreateSkillCodes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.WorkRules">
            <summary>
            Gets or sets a value indicating whether WorkRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.ScheduleFormulas">
            <summary>
            Gets or sets a value indicating whether ScheduleFormulas
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.GDPRDataDelete">
            <summary>
            Gets or sets a value indicating whether GDPR permission
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.BudgetMaintenance">
            <summary>
            Gets or sets a value indicating whether BudgetMaintenance
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.UserManagement">
            <summary>
            Gets or sets a value indicating whether UserManagement
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.DataIntegrations">
            <summary>
            Gets or sets a value indicating whether DataIntegrations
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.SystemPreferences">
            <summary>
            Gets or sets a value indicating whether SystemPreferences
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.EmployeeDetails">
            <summary>
            Gets or sets a value indicating whether AllowedToAccessTheirOwnEmployeeDetailsOnlyThePanelsTheProfileHasAccessTo
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.ChangePassword">
            <summary>
            Gets or sets a value indicating whether AllowedChangeTheirOwnPassword
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.SystemPermissions.License">
            <summary>
            Gets or sets a value indicating whether License
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SystemPermissions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.SystemPermissions.#ctor(ESolve.Entities.Models.SystemPermissions)">
            <summary>
            Copy construcotr
            </summary>
            <param name="original"></param>
        </member>
        <member name="T:ESolve.Entities.Models.TargetRule">
            <summary>
            Represent Target Rule model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.MinimumTargetHours">
            <summary>
            Minimum Target Hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.PeriodType">
            <summary>
            Period Type
            dropdown list;
            values - Pay Period / Period in Days
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.PeriodInDays">
            <summary>
            Period In Days
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.MinimumTargetPay">
            <summary>
            Minimum Target Pay
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.DayOfWeek">
            <summary>
            Day Of Week
            dropdown list; 
            values - Monday / Tuesday / Wednesday / Thursday / Friday / Saturday / Sunday
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.CountOvernights">
            <summary>
            Conut Overnights
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.JobStartFrom">
            <summary>
            Job Start From
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.JobStartTo">
            <summary>
            JOb Start To
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.JobEndFrom">
            <summary>
            Job End From
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.JobEndTo">
            <summary>
            Job End to
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.TargetRuleConfigID">
            <summary>
            Target Rule Config Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.RestrictedJobTypeID">
            <summary>
            Job Type Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.TargetRuleConfig">
            <summary>
            Target Rule Config Entity connected with foregn key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRule.JobType">
            <summary>
            Job Type Entity connected with foregn key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TargetRuleConfig">
            <summary>
            Represent Target Rule Config Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.Name">
            <summary>
            Target Rule Config Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.IsMinimumTargetHours">
            <summary>
            Is Minimum Target Hours type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.IsMinimumTargetPay">
            <summary>
            Is Minimum Target Pay type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.IsMinimumDaysOfWeek">
            <summary>
            Is Minimum Days Of Week type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.IsMinimumJobTypes">
            <summary>
            Is Minimum Job Types type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.IsMinimumJobTypesConsecutivly">
            <summary>
            Is Minimum Job Types Consecutivly type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.IsMinimumJobTimes">
            <summary>
            Is Minimum Job Times type
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleConfig.IsEmployeeRoster">
            <summary>
            Is Employee Roster type
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TargetRuleGroup">
            <summary>
            TargetRuleGroup Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleGroup.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TargetRuleGroup.Name">
            <summary>
            TargetRuleGroup Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Team">
            <summary>
            Team Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Team.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Team.Name">
            <summary>
            Team Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Team.Description">
            <summary>
            Team Description
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Template">
            <summary>
            Represents Template model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.Name">
            <summary>
            Template's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.Created">
            <summary>
            Template's creation date.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.LastModified">
            <summary>
            Date representing when the Template was last modified.
            If it's null, it means that it has never been modified.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.LastPublished">
            <summary>
            Date representing when the Template was last published.
            If it's null, it means that it has never been published.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.InUse">
            <summary>
            Whether or not the template is in use.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.HideFrom">
            <summary>
            Represents Date from which we will not show Template's data.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.StartDate">
            <summary>
            Represents Date from which the data is copied into template.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.EndDate">
            <summary>
            Represents Date to which the data is copied into template.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Template.CanBePublished">
            <summary>
            Represents whether the modified template can be published or not.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateBrokenRule">
            <summary>
            Template Broken Rule Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.RuleName">
            <summary>
            Rule that employee breaks
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.Skill">
            <summary>
            Skill that employee didn't have in assigment time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.ComparisonRuleFieldValue">
            <summary>
            Value that employee does not have in comparison rule employee field 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.Operator">
            <summary>
            Value that employee does not have in comparison rule employee field 
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.EmployeeField">
            <summary>
            Employee field defined in ComparisonRule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.EmployeeBFullName">
            <summary>
            Employee B Full name with who employeeA must or must not work
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.JobTypeName">
            <summary>
            Job type name from constraints
            Maximum Number Of Job Types or
            Maximum Number Of Job Types Consecutively
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.User">
            <summary>
            User's firstname and lastname
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.EmployeeID">
            <summary>
            Employee's Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.JobID">
            <summary>
            Template Job's Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.Employee">
            <summary>
            Employee Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateBrokenRule.TemplateJob">
            <summary>
            Job Entity connected with foreign key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateBrokenRule.#ctor">
            <summary>
            Default constructor
            </summary>
            
        </member>
        <member name="M:ESolve.Entities.Models.TemplateBrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Int64,System.Int32)">
            <summary>
            This constructor is used to create broken rule based on maximum number of hours broken constraint and days off within a period 
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="maxAllowed">Number of hours allowed by constraint</param>
            <param name="days">Constraint's date range count of days</param>
            
        </member>
        <member name="M:ESolve.Entities.Models.TemplateBrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Int64,System.String,System.Int32)">
            <summary>
            This consctructor is used to create brokend rule base on maximum numbe of the day of the week constraint
            </summary>
            <param name="employeeID"></param>
            <param name="jobID"></param>
            <param name="ruleName"></param>
            <param name="maxAllowed"></param>
            <param name="dayOfWeek"></param>
            <param name="days"></param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateBrokenRule.#ctor(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            This constructor is used for create broken rule based on skill that employee does not have or
            based on length of service that employee does not have
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="ruleValue">Skill name, length of service rule or employeeB fullname</param>
            
        </member>
        <member name="M:ESolve.Entities.Models.TemplateBrokenRule.#ctor(System.Int64,System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor is used for create broken rule based on comparison rule that employee does not satisfy
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">Rule's name</param>
            <param name="comparisonRuleFieldValue">Job type's comparison rule value</param>
            <param name="employeeField">Job type's comparison rule employee field</param>
            <param name="operator">Job type's comparison rule operator</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateBrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Boolean,System.String)">
            <summary>
            Constructor with employeeID, jobID and rule name
            It is used for not already assigned constraint
            </summary>
            <param name="employeeID"></param>
            <param name="jobID"></param>
            <param name="ruleName"></param>
            <param name="isNotAlreadyAssigned"></param>
            <param name="user"></param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateBrokenRule.#ctor(System.Int64,System.Int64,System.String,System.Int64)">
            <summary>
            Construcotr with employee's primary key, job's primary key, rule name and max allowed value.
            Used for split shifts constraint
            </summary>
            <param name="employeeID">employee's primary key</param>
            <param name="jobID">Job's primary key</param>
            <param name="ruleName">rule name</param>
            <param name="maxAllowed">Max allowed value</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateBrokenRule.#ctor(ESolve.Contracts.IBrokenRule)">
            <summary>
            Constructor that maps IBrokenRule to a TemplateBrokenRule entity.
            </summary>
            <param name="brokenRule">BrokenRule or TemplateBrokenRule entity which will be copied into a new TemplateBrokenRule entity.</param>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateConstraint">
            <summary>
            Represents TemplateConstraint model.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateConstraint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateConstraint.#ctor(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Constructor which initalize all required parameters
            </summary>
            <param name="name">TemplateConstraint Name</param>
            <param name="templateConstraintRuleID">Template Constraint Rule ID</param>
            <param name="templateScheduleID">Template Schedule ID</param>
            <param name="isTemplateConstraintActive">Will constraint be applied on Template Schedule</param>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.TemplateConstraintName">
            <summary>
            TemplateConstraint Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.IsTemplateConstraintActive">
            <summary>
            Indicator is TemplateConstraint applied on TemplateSchedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.TemplateConstraintRuleID">
            <summary>
            Template Constraint Rule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.TemplateScheduleID">
            <summary>
            TemplateSchedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.TemplateSchedule">
            <summary>
            TemplateSchedule Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.TemplateConstraintRule">
            <summary>
            Template Constraint Rule Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.TemplateConstraintEMWWAEs">
            <summary>
            Collection of TemplateConstraintEMWWAE Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.TemplateConstraintEMNWWAEs">
            <summary>
            Collection of TemplateConstraintEMNWWAE Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraint.TemplateConstraintSetValues">
            <summary>
            Collection of TemplateConstraintSetValue
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateConstraintEMNWWAE">
            <summary>
            Represents TemplateConstraintEMNWWAE model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMNWWAE.ReferenceArea">
            <summary>
            ReferenceArea
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMNWWAE.TemplateConstraintID">
            <summary>
            TemplateConstraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMNWWAE.EmployeeAID">
            <summary>
            Employee A Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMNWWAE.EmployeeBID">
            <summary>
            Employee B Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMNWWAE.EmployeeA">
            <summary>
            Employee A Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMNWWAE.EmployeeB">
            <summary>
            Employee B Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMNWWAE.TemplateConstraint">
            <summary>
            TemplateConstraint Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateConstraintEMWWAE">
            <summary>
            Represents TemplateConstraintEMWWAE model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMWWAE.ReferenceArea">
            <summary>
            ReferenceArea
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMWWAE.TemplateConstraintID">
            <summary>
            TemplateConstraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMWWAE.EmployeeAID">
            <summary>
            Employee A Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMWWAE.EmployeeBID">
            <summary>
            Employee B Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMWWAE.EmployeeA">
            <summary>
            Employee A Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMWWAE.EmployeeB">
            <summary>
            Employee B Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintEMWWAE.TemplateConstraint">
            <summary>
            TemplateConstraint entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateConstraintRule">
            <summary>
            Represents Template Constraint Rule entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintRule.Id">
            <summary>
            Primary Key in Database tblTemplateConstraintRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintRule.Name">
            <summary>
            Represents TemplateConstraint Rule Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateConstraintSetValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintSetValue.Operator">
            <summary>
            Selected Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintSetValue.EmployeeField">
            <summary>
            Selected Employee Field
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintSetValue.ComparisonValue">
            <summary>
            Comparison Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintSetValue.TemplateConstraintID">
            <summary>
            TemplateConstraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateConstraintSetValue.TemplateConstraint">
            <summary>
            TemplateConstraint Entity connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateEmployeeConstraint">
            <summary>
            Employees Job Constraint Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateEmployeeConstraint.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateEmployeeConstraint.Value">
            <summary>
            Indicator does Employee Satisfies Current Constraint on Current Template Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateEmployeeConstraint.EmployeeID">
            <summary>
            Represents Primary Key From tblEmployees.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateEmployeeConstraint.JobID">
            <summary>
            Represents Primary Key From tblTemplateJobs.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateEmployeeConstraint.ConstraintID">
            <summary>
            Represents Primary Key From tblTemplateConstraints.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateEmployeeConstraint.#ctor">
            <summary>
            Default Constrint
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateEmployeeConstraint.#ctor(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Create New Employee constraint
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="templateJobID">TemplateJob Primary Key</param>
            <param name="templateConstraintID">TemplateConstraint Primary Key</param>
            <param name="value">Indicator Does Employee satisfies Constraint</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateEmployeeConstraint.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">Database Primary Key</param>
            <param name="employeeID">Employee Primary Key</param>
            <param name="templateJobID">TemplateJob Primary Key</param>
            <param name="templateConstraintID">TemplateConstraint Primary Key</param>
            <param name="value">Indicator Does Employee satisfies Constraint</param>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateEmployeeConstraint.Employee">
            <summary>
            Employee object.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateEmployeeConstraint.TemplateJob">
            <summary>
            Job object.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateEmployeeConstraint.TemplateConstraint">
            <summary>
            Constraint object.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateJob">
            <summary>
            Template Job model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Name">
            <summary>
            Template Job Name [Unique on Template Subgroup level]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.JobStartDateTime">
            <summary>
            Template Job Start Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.JobEndDateTime">
            <summary>
            Template Job End Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Day">
            <summary>
            Property which indicates which day of the viewed Template Schedule's week
            this Template Job belongs to
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Hours">
            <summary>
            Template Job hours. [No of effective hours for that job]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManualEditedHours">
            <summary>
            Property which indicates would App calculate Hours.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Hours1">
            <summary>
            Hours of day 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManualEditedHours1">
            <summary>
            Indicator if hours field for day 1 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Hours2">
            <summary>
            Hours of day 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManualEditedHours2">
            <summary>
            Indicator if hours field for day 2 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Hours3">
            <summary>
            Hours of day 3
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManualEditedHours3">
            <summary>
            Indicator if hours field for day 3 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Hours4">
            <summary>
            Hours of day 4
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManualEditedHours4">
            <summary>
            Indicator if hours field for day 4 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Hours5">
            <summary>
            Hours of day 5
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManualEditedHours5">
            <summary>
            Indicator if hours field for day 5 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Hours6">
            <summary>
            Hours of day 6
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManualEditedHours6">
            <summary>
            Indicator if hours field for day 6 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Notes">
            <summary>
            Template Job Notes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.NoOfEmployeesRequired">
            <summary>
            Number of required Employees for Template Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.AllowedTrade">
            <summary>
            Trade block
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.IsConcurrent">
            <summary>
            Is Template Job concurent
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ReferenceArea">
            <summary>
            Concurrent job's reference area for calculation associated emplployees.
            Possible values are: Schedule / Subgroup / Subgroup Lower Subgroupss
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.SortOrder">
            <summary>
            Sort order.s
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.IsCriticalTask">
            <summary>
            Is Template Job Critical
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Approved">
            <summary>
            Is Template Job approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.NumberOfValidAssigned">
            <summary>
            Number of valid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.NumberOfInvalidAssigned">
            <summary>
            Number of invalid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.LoneWorkerJob">
            <summary>
            Indicator if job is lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManuallyEditedLoneWorkerJob">
            <summary>
            Indicator if lone worker job is manullay updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManuallyEditedReccuringIntervals">
            <summary>
            Indicator if reccuring intervals is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManuallyEditedResponseWindow">
            <summary>
            Indicator if response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.AttendanceConfirmation">
            <summary>
            Indicator if job need attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManuallyEditedAttendanceConfirmation">
            <summary>
            Indicator if attendance confirmation check box is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.AttendanceTimeBeforeStart">
            <summary>
            Time before job start for the attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManuallyEditedAttendanceTimeBeforeStart">
            <summary>
            Indicator if time before job start is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.AttendanceResponseWindow">
            <summary>
            Attendance Confirmation Response Window
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ManuallyEditedAttendanceResponseWindow">
            <summary>
            Indicator if attendance confirmation response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.TemplateSubGroupID">
            <summary>
            Template SubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.JobTypeID">
            <summary>
            JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.JobStatusID">
            <summary>
            JobStatus Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.OriginalJobID">
            <summary>
            Original Job Primary Key. If it's null, it means that
            it was created from scratch and not from an existing Job,
            or it means that the existing Job is now deleted
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.ShiftID">
            <summary>
            Original Job Primary Key. If it's null, it means that
            it was created from scratch and not from an existing Job,
            or it means that the existing Job is now deleted
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.TemplateSubGroup">
            <summary>
            Template SubGroup Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.JobType">
            <summary>
            JobType Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.JobStatus">
            <summary>
            JobStatus Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Job">
            <summary>
            Original Job Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Shift">
            <summary>
            Shift Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.Jobs">
            <summary>
            List of all Jobs that were created by Inserting a Template
            into Schedule/SubGroup. All those jobs were created from
            this TemplateJob.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.InsertedJobs">
            <summary>
            List of all InsertedJobs that have a FK to current TemplateJob.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJob.EmployeeConstraints">
            <summary>
            List of all EmployeeConstraints that have a FK to current TemplateJob.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJob.CompareJobFieldsForCalculations(ESolve.Contracts.IJob)">
            <summary>
            Methods compares properties of passed instance with this 
            and returns name of each field which posses diff value. 
            </summary>
            <param name="job">Job entity to compare</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJob.UpdateJobStatus(ESolve.Entities.RepositoryContext)">
            <summary>
            For passed JobAvailabilitites Update Job Status
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJob.UpdateJobsStatus(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Updating job status for the passed jobs
            </summary>
            <param name="jobIds">Job' primary keys</param>
            <param name="repositoryContext">DbContext</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJob.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJob.#ctor(ESolve.Entities.Models.TemplateJob)">
            <summary>
            Constructor that creates new TemplateJob object
            based on an existing TemplateJob object
            </summary>
            <param name="templateJob">Existing TemplateJob object.</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJob.#ctor(ESolve.Entities.DTOs.JobWithCustomDataDTO)">
            <summary>
            Generate job from TemplateJobWithCustomDataDTO
            </summary>
            <param name="jobWithCustomDataDTO"></param>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateJobAvailability">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.Id">
            <summary>
            Employees Availability for certain Template Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.CompletelyValid">
            <summary>
            Indicator does Employee Satisifes all constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.IsAssigned">
            <summary>
            Indicator is Employee in Assigned or Available List
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.IsOverriden">
            <summary>
            Indicator is assigment is overriden or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.IsUnassigned">
            <summary>
            Indicator for whether an Employee was ever unassigned on
            this particular job.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.SkillCode">
            <summary>
            Does Employee satisfy SkillCodeRequirements
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.ComparisonRule">
            <summary>
            Does Employee Satisfy ComparisonRule Formula's
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.NotAlreadyAssigned">
            <summary>
            Does Employee satisifes Not Already assigned Constraint.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.UserWhoHasAssigned">
            <summary>
            Firstname and lastname of user who has assigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.EmployeeID">
            <summary>
            Employee Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.TemplateJobID">
            <summary>
            Template Job Database Primary Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobAvailability.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobAvailability.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor for Adding NEW TemplateJobAvailability. IsAssigned, SkillCode, JobType and CompletelyValid will be setted on False
            </summary>
            <param name="employeeID">Employee Primary key</param>
            <param name="templateJobID">Job Primary Key</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobAvailability.#ctor(ESolve.Entities.Models.TemplateJobAvailability)">
            <summary>
            Constructor for creating new TemplateJobAvailability off the existing TemplateJobAvailability
            </summary>
            <param name="templateJobAvailability"></param>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.Employee">
            <summary>
            Employee Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobAvailability.TemplateJob">
            <summary>
            Template Job Entity connected with foreign key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobAvailability.IsCompletelyValid">
            <summary>
            Checking if job's availability is completely valid
            </summary>
            <returns>True if job's availability is completely valid, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobAvailability.SetCompletlyValidConstraints">
            <summary>
            Setting all constraints to true and checking if job's availaiblity is completely valid
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobAvailability.Equals(System.Object)">
            <summary>
            Overriden equal method
            </summary>
            <param name="obj">Passed object that represents template job availability</param>
            <returns>True if template job availability is equal to passed obj</returns>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobAvailability.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateJobCustomData">
            <summary>
            TemplateJobCustomData represent user defined custom data specific type defined in tblCustomDataType and value.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobCustomData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobCustomData.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            Constructor which initialize all params
            </summary>
            <param name="id">SubGroupCustomData Primary Key</param>
            <param name="templateJobID">TemplateJob Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="manualyUpdated">Indicator is some value manualy updated</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateJobCustomData.#ctor(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            Constructor which initialize all params without PrimaryKey
            </summary>
            <param name="templateJobID">Job PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="manualyUpdated">Indicator is some value manualy updated</param>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.Number">
            <summary>
            Represents Number value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.Text">
            <summary>
            Represents Text value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.ManualyUpdated">
            <summary>
            Indicator is filed manualy updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.TemplateJobID">
            <summary>
            Template Job Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.CustomDataID">
            <summary>
            CustomData Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.CustomDataLookupID">
            <summary>
            CustomDataLookup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.TemplateJob">
            <summary>
            Template Job object connected over TemplateJobId foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.CustomData">
            <summary>
            CustomData object connected over CustomDataID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateJobCustomData.CustomDataLookup">
            <summary>
            CustomDataLookup object connected over CustomDataLookupID foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateSchedule">
            <summary>
            Template Schedule model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSchedule.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSchedule.Name">
            <summary>
            Template Schedule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSchedule.StartDate">
            <summary>
            Template Schedule Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSchedule.EndDate">
            <summary>
            Template Schedule End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSchedule.TemplateID">
            <summary>
            Template Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSchedule.TemplateScheduleCustomData">
            <summary>
            List of Template Schedule Custom Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSchedule.Template">
            <summary>
             Template object connected via Template Foreign Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateSchedule.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateSchedule.#ctor(ESolve.Entities.Models.TemplateSchedule,System.Int64)">
            <summary>
            Copy constructor
            </summary>
            <param name="originalSchedule">TemplateSchedule whose data will be copied into the new TemplateSchedule.</param>
            <param name="newTemplateID">TemplateID which will be assigned to the new TemplateSchedule.</param>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateScheduleCustomData">
            <summary>
            Template Schedule Custom Data model
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateScheduleCustomData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateScheduleCustomData.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String)">
            <summary>
            Constructor which initalize all params required for save and update actions
            </summary>
            <param name="id">TemplateScheduleCustomData Primary Key</param>
            <param name="templateScheduleID">TemplateSchedule Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="number">Number value</param>
            <param name="text">Text value</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateScheduleCustomData.#ctor(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String)">
            <summary>
            Constructor which initalize all params required for save and update actions. Without ScheduleCustomData Primary Key Value.
            </summary>
            <param name="templateScheduleID">TemplateSchedule Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="number">Number value</param>
            <param name="text">Text value</param>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.NumberValue">
            <summary>
            Represents Number value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.TextValue">
            <summary>
            Represents Text value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.ManuallyUpdated">
            <summary>
            Indicates whether or not the TemplateSchedule's CustomData has been
            manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.TemplateScheduleID">
            <summary>
            TemplateSchedule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.CustomDataID">
            <summary>
            CustomData Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.CustomDataLookupID">
            <summary>
            Selected CustomDataLookup item ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.TemplateSchedule">
            <summary>
            TemplateSchedule object connected via TemplateScheduleID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.CustomData">
            <summary>
            CustomData object connected via CustomDataID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleCustomData.CustomDataLookup">
            <summary>
            CustomDataLookup object connected via CustomDataLookupID Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateScheduleMaxAndMinJobDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleMaxAndMinJobDate.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleMaxAndMinJobDate.MinJobDate">
            <summary>
            Job inside Schedule with Min Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleMaxAndMinJobDate.MaxJobDate">
            <summary>
            Job inside Schedule with Max Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleMaxAndMinJobDate.TemplateScheduleID">
            <summary>
            Shedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateScheduleMaxAndMinJobDate.TemplateSchedule">
            <summary>
            Schedule Entity connected with foreign key.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateScheduleMaxAndMinJobDate.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateScheduleMaxAndMinJobDate.#ctor(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Constructor with parameters for creating New
            </summary>
            <param name="templateScheduleID">Template Schedule Primary Key</param>
            <param name="minJobDate">Min Date value</param>
            <param name="maxJobDate">Max Date Value</param>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateSubGroup">
            <summary>
            Template SubGroup model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.Name">
            <summary>
            Template SubGroup Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.StartDate">
            <summary>
            Template SubGroup Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.EndDate">
            <summary>
            Template SubGroup End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.SortOrder">
            <summary>
            Template SubGroup SortOrder
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.HideFrom">
            <summary>
            Represents Date from which we will not show Template SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.ScheduleID">
            <summary>
            Template Schedule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.ParentGroupID">
            <summary>
            Template SubGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.LoneWorkerManager1ID">
            <summary>
            User's foreign key for lone worker manager 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.LoneWorkerManager2ID">
            <summary>
            User's forign key for lone worker manager 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.AttendanceManager1ID">
            <summary>
            User's foreign key for AttendanceConfirmationManager 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.AttendanceManager2ID">
            <summary>
            User's forign key for AttendanceConfirmationManager 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.TemplateSchedule">
            <summary>
            Template Schedule object connected via ScheduleID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.ParentGroup">
            <summary>
            Template SubGroup object connected via ParentGroupID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.LoneWorkerManager1">
            <summary>
            User object connected via LoneWorkerManager1ID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.LoneWorkerManager2">
            <summary>
            User object connected via LoneWorkerManager2ID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.AttendanceManager1">
            <summary>
            User object connected via AttendanceConfirmationManager1 foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroup.AttendanceManager2">
            <summary>
            User object connected via AttendanceConfirmationManager2 foreign key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateSubGroup.#ctor(ESolve.Entities.Models.TemplateSubGroup)">
            <summary>
            Copy constructor
            </summary>
            <param name="originalTemplateSubGroup"></param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateSubGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.TemplateSubGroupCustomData">
            <summary>
            Model for Template SubGroup Custom Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.Number">
            <summary>
            Represents Number value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.Text">
            <summary>
            Represents Text value in CustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.ManuallyUpdated">
            <summary>
            Indicator is filed manualy updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.TemplateSubGroupID">
            <summary>
            TemplateSubGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.CustomDataID">
            <summary>
            CustomData Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.CustomDataLookupID">
            <summary>
            CustomDataLookup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.TemplateSubGroup">
            <summary>
            TemplateSubGroup Entity connected over Foreig Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.CustomData">
            <summary>
            CustomData Entity connected over Foreig Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TemplateSubGroupCustomData.CustomDataLookup">
            <summary>
            CustomDataLookup Entity connected over Foreig Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateSubGroupCustomData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateSubGroupCustomData.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Double},System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Constructor which initialize all params
            </summary>
            <param name="id">TemplateSubGroupCustomData Primary Key</param>
            <param name="templateSubGroupID">TemplateSubGroup PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="lookupID">CustomDataLookup Primary Key</param>
            <param name="manualyUpdated">Indicator is some value manualy updated</param>
        </member>
        <member name="M:ESolve.Entities.Models.TemplateSubGroupCustomData.#ctor(System.Int64,System.Int64,System.Nullable{System.Double},System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Constructor which initialize all params without PrimaryKey
            </summary>
            <param name="templateSubGroupID">TemplateSubGroup PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="lookupID">CustomDataLookup Primary Key</param>
            <param name="manualyUpdated">Indicator is some value manualy updated</param>
        </member>
        <member name="T:ESolve.Entities.Models.TimeUnit">
            <summary>
            TimeUnit Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TimeUnit.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.TimeUnit.Name">
            <summary>
            TimeUnit Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.Token">
            <summary>
            Token model.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Token.ClientId">
            <summary>
            Token's ClientID (Issuer)
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Token.Value">
            <summary>
            Token's value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Token.CreatedDate">
            <summary>
            Token's creation date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.Token.ExpiryTime">
            <summary>
            Token's expiry time
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Token.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Models.Token.#ctor(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Constructor which initializes all parameters.
            </summary>
            <param name="clientId"></param>
            <param name="value"></param>
            <param name="createdDate"></param>
            <param name="expiryTime"></param>
        </member>
        <member name="T:ESolve.Entities.Models.UnlockedRange">
            <summary>
            Model which represents one unlocked SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedRange.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedRange.UserID">
            <summary>
            User who unlocked SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedRange.StartPeriod">
            <summary>
            Unlocked From
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedRange.EndPeriod">
            <summary>
            Unlocked To
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedRange.UnlocedSubGroups">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UnlockedSubGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedSubGroup.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedSubGroup.UnlockedRangeID">
            <summary>
            UnlockedRange Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedSubGroup.SubGroupID">
            <summary>
            UnlockedRange Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedSubGroup.UnlockedRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UnlockedSubGroup.SubGroup">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.User">
            <summary>
            Represents User Entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.LeaveDate">
            <summary>
            Date when employee leave company.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.ApiKey1">
            <summary>
            Represents API Key 1 for the User
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.ApiKey2">
            <summary>
            Represents API Key 2 for the User
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.AccessAllEmployees">
            <summary>
            Flag indicates if user has access to all employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.AccessAllShifts">
            <summary>
            Flag indicates if user has access to all shifts
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.IsEmployeeLinked">
            <summary>
            Before upgradation process was employee already linked to user.        
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.NotificationTypeID">
            <summary>
            Represents Primary Key From tblNotificationTypes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.LinkedEmployeeID">
            <summary>
            Represents Primary Key From tblEmployees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.LinkedEmployeeRightID">
            <summary>
            Represents Primary key from tblLinkedEmployeeRights
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.NotificationType">
            <summary>
            Employees NotificationType.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.LinkedEmployee">
            <summary>
            Linked Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.LinkedEmployeeRight">
            <summary>
            LinkedEmployee right
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.UserNotifications">
            <summary>
            Collection of user notifications
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.UserAbsences">
            <summary>
            Collection of user absences
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.AbsenceRequests">
            <summary>
            Collection of user absence requests
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.AbsenceEmployees">
            <summary>
            Employees where AbsenceManager is current User
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.SubGroupsApprovals">
            <summary>
            SubGroups for approval where ApprovalManager is current User
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.JobOffers">
            <summary>
            JobOffers where User is current User
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.User.AttendanceConfirmations">
            <summary>
            Attendance Confrimation alerts for current job type
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UserAbsence">
            <summary>
            User Absences Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserAbsence.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserAbsence.User">
            <summary>
            Employee Connected over foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UserEmployeePermission">
            <summary>
            Represents UserEmployeePermission model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.UserID">
            <summary>
            User primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.OrganisationFieldID">
            <summary>
            OrganisationField primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.LocationID">
            <summary>
            Location primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.DepartmentID">
            <summary>
            Department primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.CostCodeID">
            <summary>
            CostCode primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.DivisionID">
            <summary>
            Divison primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.JobTitleID">
            <summary>
            JobTitle primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.ClassID">
            <summary>
            Class primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.TeamID">
            <summary>
            Team primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.User">
            <summary>
            User connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.OrganisationField">
            <summary>
            OrganisationField connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.Location">
            <summary>
            Location connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.Department">
            <summary>
            Department connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.CostCode">
            <summary>
            Department connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.Division">
            <summary>
            Division connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.JobTitle">
            <summary>
            JobTitle connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.Class">
            <summary>
            Class connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserEmployeePermission.Team">
            <summary>
            Class connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UserImage">
            <summary>
            Employee Image Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserImage.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserImage.Image">
            <summary>
            Image Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserImage.ImageSizeID">
            <summary>
            ImageSize Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserImage.EmployeeID">
            <summary>
            Employee Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserImage.UserID">
            <summary>
            User's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserImage.ImageSize">
            <summary>
            ImageSize object connected over foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserImage.Employee">
            <summary>
            Employee object connected over foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserImage.User">
            <summary>
            User object connected over foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UserMobileDeviceMapping">
            <summary>
            UserMobileDeviceMapping
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserMobileDeviceMapping.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserMobileDeviceMapping.UserId">
            <summary>
            User/Employee Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserMobileDeviceMapping.MobileDeviceId">
            <summary>
            User's Mobile Device Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserMobileDeviceMapping.IsUser">
            <summary>
            Specifies if it is user or employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserMobileDeviceMapping.Platform">
            <summary>
            Specifies whether the mobile device is android or iOS
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserMobileDeviceMapping.DeviceIdentifier">
            <summary>
            Specifies DeviceIdentifier
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UserNotification">
            <summary>
            Represents model of User Notifications
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserNotification.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserNotification.EmployeeID">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserNotification.AbsenceRequestID">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserNotification.User">
            <summary>
            User model connected via foerign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserNotification.Employee">
            <summary>
            Employee model connected via foerign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserNotification.AbsenceRequest">
            <summary>
            AbsenceRequest model connected via foerign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UserSchedulePermission">
            <summary>
            Represents user's schedule permission model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.UserID">
            <summary>
            User primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.ScheduleID">
            <summary>
            Schedule primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.SubGroupID">
            <summary>
            Subgroup primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.ScheduleRightID">
            <summary>
            Schedule right primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.User">
            <summary>
            User connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.Schedule">
            <summary>
            Schedule connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.SubGroup">
            <summary>
            Subgroup connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserSchedulePermission.ScheduleRight">
            <summary>
            ScheduleRight connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UserShiftsPermission">
            <summary>
            Represents user's shifts permission model
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.Models.UserShiftsPermission.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserShiftsPermission.UserId">
            <summary>
            User primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserShiftsPermission.ShiftsGroupId">
            <summary>
            User primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserShiftsPermission.User">
            <summary>
            User connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserShiftsPermission.ShiftsGroup">
            <summary>
            Shifts Group connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.UserTemplatePermission">
            <summary>
            Represents template's permission model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserTemplatePermission.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserTemplatePermission.TemplateID">
            <summary>
            Template primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserTemplatePermission.ScheduleRightID">
            <summary>
            ScheduleRight primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserTemplatePermission.UserID">
            <summary>
            User primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserTemplatePermission.Template">
            <summary>
            Template connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserTemplatePermission.ScheduleRight">
            <summary>
            ScheduleRight connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.UserTemplatePermission.User">
            <summary>
            User connected with foreign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.Models.WorkRules">
            <summary>
            TargetRuleGroup Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.WorkRules.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Models.WorkRules.Name">
            <summary>
            TargetRuleGroup Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.AbstractUser">
            <summary>
            Abstract class for applicaton's users
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Id">
            <summary>
            Database Primary Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Firstname">
            <summary>
            User's first name
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Surname">
            <summary>
            User's last name
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Username">
            <summary>
            User's username
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Email">
            <summary>
            User's email
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Image">
            <summary>
            Base64 String which represent user's image
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.TelephoneNumber">
            <summary>
            User's telephone number
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.MobileNumber">
            <summary>
            User's mobile number
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.IsTemporaryPassword">
            <summary>
            Indicator if user's password is temporary
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.DatePasswordModified">
            <summary>
            Date when user's password is last modified.
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.IsSystemAccessEmailSent">
            <summary>
            Indicator if access email sent to the user
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.IsAccessEmailSent">
            <summary>
            Old password because user cannot change current password to old password
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.OldPassword">
            <summary>
            Old password because user cannot change current password to old password
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Role">
            <summary>
            Role representing account's authorization level.
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.ConnectionId">
            <summary>
            Storage field for user connection id, for signalR notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.IsLoggedOut">
            <summary>
            Indicates whether or not the User/Employee is currently logged out
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.AdvancedId">
            <summary>
            Stores AdvancedId that we get from SSO
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.ProfileID">
            <summary>
            Represents Primary Key From tblProfiles
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractUser.Profile">
            <summary>
            Profile from database
            </summary>
        </member>
        <member name="T:ESolve.Entities.AbstractModels.AgencyAssignment">
            <summary>
            Abstract class fro Agency Assignment
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.AgencyAssignment.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.AgencyAssignment.AgencyID">
            <summary>
            Agency Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.AgencyAssignment.AgencyReasonForCoverID">
            <summary>
            AgencyReasonForCover Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.AgencyAssignment.AgencyWorker">
            <summary>
            Agency Worker Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.AgencyAssignment.Agency">
            <summary>
            Agency Entity connected with foreign key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.AgencyAssignment.AgencyReasonForCover">
            <summary>
            AgencyReasonForCover Entity connected with foreign key.
            </summary>
        </member>
        <member name="T:ESolve.Entities.AbstractModels.TradeOffer">
            <summary>
            Abstract class for trade offers
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.TradeOffer.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.TradeOffer.EmployeeID">
            <summary>
            Employee that received trade offer
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.TradeOffer.JobID">
            <summary>
            Job where trade is offered
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.TradeOffer.Employee">
            <summary>
            Employee model connected via foerign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.AbstractModels.TradeOffer.Job">
            <summary>
            Job model connected via foerign key
            </summary>
        </member>
        <member name="T:ESolve.Entities.ConstraintAbstract">
            <summary>
            Abstract Constraint. Base class for all constraints in application.
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintAbstract.Id">
            <summary>
            Database Primary Key.
            </summary>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.CheckerBase">
            <summary>
            Base Class for Availability calculations
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerBase.Constraint">
            <summary>
            Constraint with which will we work
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerBase.ConstraintDateRange">
            <summary>
            Constraint that have date range
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerBase.JobsForUpdateStatuses">
            <summary>
            Collection of Jobs for Update statuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerBase.JobAvailabilities">
            <summary>
            Job Availabilities in Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerBase.RepositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerBase.EmployeeConstraints">
            <summary>
            Collection of Employees Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerBase.JobStatuses">
            <summary>
            All JobStatuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerBase.Employees">
            <summary>
            Employees with populated values for connected Entities
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.#ctor(ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Constructor which initialize Repository Context and Populate JobStatuses 
            </summary>
            <param name="repositoryContext">Repository Context</param>
            <param name="initializeJobStatuses">Indicator will we initialize JobStatuses</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext)">
            <summary>
            Creating NEW LeaverStatus Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Creating NEW LeaverStatus Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="loadJobStatuses">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.#ctor(System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext)">
            <summary>
            Activate/Deactivate Leaver Status Constraint
            </summary>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext)">
            <summary>
            Creating NEW LeaverStatus Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.AddConstraint">
            <summary>
            Availability Calculations when we add new constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Availability Calculations when we updating existing Constraint
            </summary>
            <param name="constraintDB">Constraint from Database before update</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Checking constraint on employee add action
            </summary>
            <param name="employee">Employee that is added</param>
            <param name="job">Job for checking</param>
            <param name="jobAvailability">Job's availability for checking</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Checking constraint on assign/unassign action
            </summary>
            <param name="employee">Employee that is being checked</param>
            <param name="job">Job for checking</param>
            <param name="jobAvailability">Job availability to check</param>
            <param name="isAssigment">Flag if action is assign or unassign</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Checking constraint on job add action
            </summary>
            <param name="assigments">Assignments that will be included in calculations</param>
            <param name="jobAvailability">Availability that is being checked</param>
            <param name="jobTemp">Added job</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.TemplateJobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Checking constraint on template's job add action
            </summary>
            <param name="assigments"></param>
            <param name="templateJobAvailabilityId">Template's job avaialiblity primary key that is being checked</param>
            <param name="templateJobTemp">Added template job</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.JobUpdate(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.Job,System.DateTime,System.DateTime)">
            <summary>
            Checking constraint on job update action
            </summary>
            <param name="jobAvailability">Job availability that is being checked</param>
            <param name="jobTemp">Job for checking</param>
            <param name="oldStartDate">Job's old start date</param>
            <param name="oldEndDate">Job's old end date</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Checking constraint on job delete action
            </summary>
            <param name="assigments">Assignments that will be included in calculations</param>
            <param name="jobAvailabilityId">Job availaiblity primary key</param>
            <param name="jobTemp">Job for checking</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.TemplateJobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Checking constraint on template job delete action
            </summary>
            <param name="assigments">Assignments that will be included in calculations</param>
            <param name="jobAvailabilityId">Job availaiblity primary key</param>
            <param name="jobTemp">Job for checking</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Checking constraint after getting autosolve's result
            </summary>
            <param name="job">Job that is being checked.</param>
            <param name="jobAvailability">Job availability that is being checked</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.ActivateDeactivate(System.Boolean)">
            <summary>
            Availability Calculations when we Activate/Deactivate Constraint
            </summary>
            <param name="isActive">Current Activity of Constraint</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.IsComparisonModeApplicableForEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="employee"></param>
            <param name="comparisonRuleEmployeeField"></param>
            <param name="comparisonRuleTextValue"></param>
            <param name="comparisonRuleOperator"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CheckerBase.UpdateJobStatuses">
            <summary>
            Iterate trough Collection Of Jobs where Status should be updated. Update it and SaveChanges in Database.
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker">
            <summary>
            Checker for Days Off Within A Period Checker
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.#ctor">
            <summary>
            DefaultConstructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Adding New Days Off Within A Period Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Direction for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Int32)">
            <summary>
            Constructor for Activate/Deactivate New Days Off Within A Period Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="employeeConstraints">Employee Constraints</param>
            <param name="currentAction">Employee Constraints</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor that is used for Job add, job update, job delete, copy job, copy data forward
            assign/unassign, add employee actions
            </summary>
            <param name="constraint">Maximum number of job times constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom datas</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="nameOfFirstDayInWeek">Name of the fiest in the week</param>
            <param name="jobAvailabilities">Job availbilities to check</param>
            <param name="repositoryContext">DbContext</param>
            <param name="employees">Employees</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.List{ESolve.Entities.Models.BrokenRule},System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor that is used for Assign/Unassign actions
            </summary>
            <param name="constraint">Maximum number of job times constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom datas</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="nameOfFirstDayInWeek">Name of the fiest in the week</param>
            <param name="jobAvailabilities">Job availbilities to check</param>
            <param name="repositoryContext">DbContext</param>
            <param name="employees">Employees</param>
            <param name="brokenRules">Broken rules</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Int32)">
            <summary>
            Construcotor used in employee add action
            </summary>
            <param name="constraint">Maximum number of days of the week constraint</param>
            <param name="jobCustomDataForConstraints">Custom data of jobs</param>
            <param name="scheduleDatePreference">Schedule date preference from database</param>
            <param name="nameOfFirstDayInWeek">Name of the first day in week defined in schdule date preference</param>
            <param name="employees">List of employees</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Calculation of availabilities when constraint is updated.
            </summary>
            <param name="constraintDB">Constraint with old values</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Check days off wihtin a peirod constraint on adding new employee
            </summary>
            <param name="employee">Added employee</param>
            <param name="job"></param>
            <param name="jobAvailability">JobAvailability to check</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Check days off within a period constrain on assign or unassign action
            </summary>
            <param name="employee">Current employee</param>
            <param name="job">Current job</param>
            <param name="jobAvailability">JobAvailability to check</param>
            <param name="isAssigment">Flag indicates that this method is  called by assign or unassign actions</param>
            <returns>True if employee satisfies constraint, otherwise return false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Check Days Off Within A Period Constraint on job's adding action
            </summary>
            <param name="assigments">Dictionary with one availabilitiy that will be checked.</param>
            <param name="jobAvailability">Job's availaiblity</param>
            <param name="jobTemp">Job</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Check constraint on job's deleting action
            </summary>
            <param name="assigments">Assigments that will be checked</param>
            <param name="jobAvailabilityId">Job's availaiblity primary key</param>
            <param name="jobTemp">Job</param>
            <returns>True if employee satisfies constraint, otherwise return false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.IsConstraintApplicableOnEmployee(ESolve.Entities.Models.JobAvailability,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.ConstraintDOWP)">
            <summary>
            For passed Employee And Job Check should current Constraint be applied.
            </summary>
            <param name="jobAvailability">Job availabilitiy that will be checked</param>
            <param name="employee">Employee that will be checked</param>
            <param name="constraint">Constraint for check</param>
            <returns>True if constraint is applicatble on employee, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.DoesEmployeeSatisfiesDaysOffWithinAPeriod(ESolve.Entities.Models.JobAvailability,System.DateTime,System.DateTime)">
            <summary>
            Check if employee satisfies Days Off Within A Period constraint
            </summary>
            <param name="jobAvailability">Job's availability for checking</param>
            <param name="dateRangeStart">Range start days</param>
            <param name="dateRangeEnd">Range end dayss</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.CheckOtherAssigmentsOnJobOrJobTypeChange(System.Collections.Generic.List{ESolve.Entities.Models.JobStatus},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability})">
            <summary>
            This method chekcs availabilities based on operations like updating job or job type.
            </summary>        
            <param name="jobStatuses">Jobs' statuses</param>
            <param name="assignments"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.DaysOffWithinAPeriodChecker.IsDaysOffWithinAPeriodApplicable(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,System.Int64)">
            <summary>
            Check if  Days Off Within A Period constraint is applicable on job and employee
            </summary>
            <param name="employee">Emplyoee for checking</param>
            <param name="jobID">Job's primary key for chekcing custom data.</param>
            <returns>True if constraint is applicable, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.#ctor(ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Check if it is called
            </summary>
            <param name="repositoryContext"></param>
            <param name="loadJobStatuses"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.#ctor(ESolve.Entities.Models.ConstraintSetValue,ESolve.Entities.Models.Constraint,ESolve.Entities.RepositoryContext,ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            Constructor for add constratin
            </summary>
            <param name="constraintSetValue"></param>
            <param name="constraint"></param>
            <param name="repositoryContext"></param>
            <param name="jobTypeManager"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.AddConstraint">
            <summary>
            Checking employee availability constraint on adding constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Checking employee field value constraint on updating constraint
            </summary>
            <param name="constraintDB">Constraint with old values</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <param name="isAssigment"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Check constraint on job add action
            </summary>
            <param name="assigments"></param>
            <param name="jobAvailability"></param>
            <param name="jobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.TemplateJobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implementeds
            </summary>
            <param name="assigments"></param>
            <param name="templateJobAvailabilityId"></param>
            <param name="templateJobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Not implemented
            </summary>
            <param name="assigments"></param>
            <param name="jobAvailabilityId"></param>
            <param name="jobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.JobUpdate(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.Job,System.DateTime,System.DateTime)">
            <summary>
            Not implemented
            </summary>
            <param name="jobAvailability"></param>
            <param name="jobTemp"></param>
            <param name="oldStartDate"></param>
            <param name="oldEndDate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.GetScheduleSubGroups">
            <summary>
            For constraints schedule method will return all SubGroup Ids
            </summary>
            <returns>List of SubGroups Primary kies</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.DoesEmployeeSatisfiesEmployeeAvailability(ESolve.Entities.Models.Job,System.Int64)">
            <summary>
            Checking if employee satisfies employee availability constraint
            </summary>
            <param name="job">Job object for checking constraint</param>
            <param name="employeeID">Employee's primary key for checking constraint</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeAvailabilityConstraintChecker.ScheduleIdsWhichAreOverlapingWithCurrent(ESolve.Entities.Models.Schedule)">
            <summary>
            Get All Schedule Ids which are overllaping with passed Schedule
            </summary>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.#ctor(ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Check if it is called
            </summary>
            <param name="repositoryContext"></param>
            <param name="loadJobStatuses"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.AddConstraint">
            <summary>
            Checking employee field value constraint on adding constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Checking employee field value constraint on updating constraint
            </summary>
            <param name="constraintDB">Constraint with old values</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <param name="isAssigment"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Checking employee field value constraint on job adding
            </summary>
            <param name="assigments"></param>
            <param name="jobAvailability"></param>
            <param name="jobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.TemplateJobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implementeds
            </summary>
            <param name="assigments"></param>
            <param name="templateJobAvailabilityId"></param>
            <param name="templateJobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Not implemented
            </summary>
            <param name="assigments"></param>
            <param name="jobAvailabilityId"></param>
            <param name="jobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.JobUpdate(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.Job,System.DateTime,System.DateTime)">
            <summary>
            Not implemented
            </summary>
            <param name="jobAvailability"></param>
            <param name="jobTemp"></param>
            <param name="oldStartDate"></param>
            <param name="oldEndDate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.ActivateDeactivateHelper(System.Boolean,ESolve.Entities.Models.Constraint)">
            <summary>
            Checking employee field value constraint on activating/deactivating constraint
            </summary>
            <param name="isActive"></param>
            <param name="constraintUpdated"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.ActivateDeactivate(System.Boolean)">
            <summary>
            Checking employee field value constraint on activating/deactivating constraint
            </summary>
            <param name="isActive"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.DoesEmployeeHaveEnoughExpirience(System.DateTime,System.DateTime,System.String,System.Int32)">
            <summary>
            Length Of Service Job type Rule
            </summary>
            <param name="jobStartDate">Desired Job Start Date</param>
            <param name="employeeStartDate">Desired Employee Start Date</param>
            <param name="timeUnit">Selected Time Unit in job Type Rule</param>
            <param name="timeUnitValue">Entered Value in Job type Rule</param>
            <returns>True if employee satisfies condition</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.GetScheduleSubGroups">
            <summary>
            For constraints schedule method will return all SubGroup Ids
            </summary>
            <returns>List of SubGroups Primary kies</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.ScheduleIdsWhichAreOverlapingWithCurrent(ESolve.Entities.Models.Schedule)">
            <summary>
            Get All Schedule Ids which are overllaping with passed Schedule
            </summary>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeFieldValueConstraintChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustNotWorkWithAnotherEmployeeConstraintChecker.#ctor(ESolve.Entities.Models.ConstraintEMNWWAE,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobStatus},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Assign
            </summary>
            <param name="constraintEMNWWAE">Employee Must Not Work Constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Jobs' custom data</param>
            <param name="scheduleDatePreference">Schedule Date Preferences</param>
            <param name="nameOfFirstDayInWeek">First day of the week</param>
            <param name="employeeConstraints">Employee Constraints for employees and jobs that will be checked</param>
            <param name="jobAvailabilities">Availabilities and assignments that will be checked</param>
            <param name="jobStatuses">Job statuses</param>
            <param name="repositoryContext">DB context</param>
            <param name="currentAction">Direction for constraint's calculations</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustNotWorkWithAnotherEmployeeConstraintChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Direction for constraint's calculations</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustNotWorkWithAnotherEmployeeConstraintChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustNotWorkWithAnotherEmployeeConstraintChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <param name="isAssigment"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustNotWorkWithAnotherEmployeeConstraintChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustWorkWithAnotherEmployeeConstraintChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Direction for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustWorkWithAnotherEmployeeConstraintChecker.#ctor(ESolve.Entities.Models.ConstraintEMWWAE,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobStatus},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="constraintEMWWAE">Must Work Constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Jobs' custom data</param>
            <param name="scheduleDatePreference">Schedule Date Preference</param>
            <param name="nameOfFirstDayInWeek">First day of the week</param>
            <param name="jobAvailabilities">Availabilites and assignments that will be checked</param>
            <param name="jobStatuses">Job statuses</param>
            <param name="currentAction">Direction for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustWorkWithAnotherEmployeeConstraintChecker.#ctor(ESolve.Entities.Models.ConstraintEMWWAE,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability})">
            <summary>
            JobUpdate
            </summary>
            <param name="constraintEMWWAE"></param>
            <param name="assigments"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustWorkWithAnotherEmployeeConstraintChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Checking constraint on assign/unassign action
            </summary>
            <param name="employee">Current employee</param>
            <param name="job">Current job</param>
            <param name="jobAvailability">JobAvailability to check</param>
            <param name="isAssigment">Flag indicates that this method is  called by assign or unassign actions</param>
            <returns>True if employee satisfies constraint, otherwise return false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustWorkWithAnotherEmployeeConstraintChecker.AddConstraint">
            <summary>
            Applying Constraint on all Jobs in Schedule
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustWorkWithAnotherEmployeeConstraintChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Not Implemented. It is not possibile to apply this constraint on newly added Employee
            </summary>
            <param name="employee">Employee on which we will apply constraint</param>
            <param name="job">Job</param>
            <param name="jobAvailability">Availability</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.EmployeeMustWorkWithAnotherEmployeeConstraintChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker">
            <summary>
            Checker for Maximum Number Of Job Times Checker
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.ConstraintMNOJTIME">
            <summary>
            Maximum number of job time constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.BrokenRules">
            <summary>
            Broken rules for constraints
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Adding/Updating New Maximum Number Of Job Times Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor for Activate/Deactivate Maximum Number Of Job Times Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor that is used for Job add, job update, job delete, copy job, copy data forward
            assign/unassign, add employee actions
            </summary>
            <param name="constraint">Maximum number of job times constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom datas</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="nameOfFirstDayInWeek">Name of the fiest in the week</param>
            <param name="jobAvailabilities">Job availbilities to check</param>
            <param name="repositoryContext">DbContext</param>
            <param name="employees">Employees</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.List{ESolve.Entities.Models.BrokenRule},System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor that is used for Assign/Unassign actions
            </summary>
            <param name="constraint">Maximum number of job times constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom datas</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="nameOfFirstDayInWeek">Name of the fiest in the week</param>
            <param name="jobAvailabilities">Job availbilities to check</param>
            <param name="repositoryContext">DbContext</param>
            <param name="employees">Employees</param>
            <param name="brokenRules">Broken rules</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.AddConstraint">
            <summary>
            Adding new Maximum Number Of Times Constraint
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Update Maximum Number Of Job Times Constraint
            </summary>
            <param name="constraintDB">Constraint with old values</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Checking Maximum Number Of Job Times Constraint
            </summary>
            <param name="employee">Employee that is being checked</param>
            <param name="job">Job that is beign checked</param>
            <param name="jobAvailability">Job availability of employee and job</param>
            <param name="isAssigment">If action is assignment or unassignment</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Checking constraint when job is added
            </summary>
            <param name="assigments">Assignments for calculations</param>
            <param name="jobAvailability">Job availability that is being checked</param>
            <param name="jobTemp">Added job</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.JobUpdate(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.Job,System.DateTime,System.DateTime)">
            <summary>
            Check Maximum Number Of Job Times constraint on JobUpdate action
            </summary>
            <param name="jobAvailability">Job availability to check</param>
            <param name="jobTemp">Job object</param>
            <param name="oldStartDate">Job's old start date</param>
            <param name="oldEndDate">Job's old end date</param>
            <returns>True if employee satisfies constraint, otherwise return false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Check maximum number of job times constraint on job delete action
            </summary>
            <param name="assigments">Assignments</param>
            <param name="jobAvailabilityId">Job availabiitliy that is being checked.</param>
            <param name="jobTemp">Job object</param>
            <returns>True if employee satisfies constraint, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Checking constraint after getting autosolve's result
            </summary>
            <param name="job">Job that is being checked.</param>
            <param name="jobAvailability">Job availability that is being checked</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.IsConstraintApplicableOnEmployee(ESolve.Entities.Models.JobAvailability,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.ConstraintMNOJTIME)">
            <summary>
            For passed Employee And Job Check should current Constraint be applied.
            </summary>
            <param name="jobAvailability">Job availabilitiy that will be checked</param>
            <param name="employee">Employee that will be checked</param>
            <param name="constraint">Constraint for check</param>
            <returns>MNOHConstraintDTO object with info if constraint is applicatble on employee or not</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.DoesEmployeeSatisfiesMNOJTIMEConstraint(ESolve.Entities.Models.JobAvailability,System.DateTime,System.DateTime)">
            <summary>
            This method checks if employee satisfies Maximum Number of Job Times Constraint
            </summary>
            <param name="jobAvailability"></param>
            <param name="dateRangeStart"></param>
            <param name="dateRangeEnd"></param>
            <returns>True if employee satisfies constraint, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTimesChecker.CheckMaxJobTimesConstraintOnJobUpdate(System.Collections.Generic.List{ESolve.Entities.Models.JobStatus},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability})">
            <summary>
            This method is used to check maximum number of job times constraint after job update action 
            This is for case where we need to check other assignments based on job's change
            </summary>
            <param name="jobStatuses">Job statuses</param>
            <param name="assignments">Assignments that will be included in calculations.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker">
            <summary>
            Checker class for MaximumNumberOfJobTypesConsecutively Constraint.
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Adding New Maximum Number Of JobTypes Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Activate/Deactivate Maximum Number Of JobTypes Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor for Job CRUD operations as well as for CopyJob actions
            and for CalculateAssignmentsAfterAction
            </summary>
            <param name="constraint"></param>
            <param name="jobCustomDataForConstraintsDTOs"></param>
            <param name="scheduleDatePreference"></param>
            <param name="nameOfFirstDayInWeek"></param>
            <param name="jobAvailabilities"></param>
            <param name="repositoryContext"></param>
            <param name="employees"></param>
            <param name="isAssignment"></param>
            <param name="shouldInitializeEmployeeConstraints">Indicator based on which constructor will take EmployeeConstraints from DB.</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO})">
            <summary>
            Constructor for EmployeeAdd
            </summary>
            <param name="constraint"></param>
            <param name="jobCustomDataForConstraintsDTOs"></param>
            <param name="repositoryContext"></param>
            <param name="employees"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability})">
            <summary>
            Constructor for CopyDataForward
            </summary>
            <param name="constraint"></param>
            <param name="jobCustomDataForConstraintsDTOs"></param>
            <param name="repositoryContext"></param>
            <param name="employees"></param>
            <param name="availabilities"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Constructor for Assign/Unassign
            </summary>
            <param name="constraint"></param>
            <param name="jobCustomDataForConstraintsDTOs"></param>
            <param name="repositoryContext"></param>
            <param name="isAssignment"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.RepositoryContext,System.Boolean,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor for assign/unassign all method
            </summary>
            <param name="constraint">Current constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Jobs' custom data</param>
            <param name="repositoryContext">Db context</param>
            <param name="isAssignment">Flag if this is assign or unassign</param>
            <param name="jobAvailabilities">List of job availaiblities</param>
            <param name="employeeConstraints">List of job availaiblities</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Override of the method JobAdd.
            </summary>
            <param name="assigments">Dictionary for JobAvailabilities.</param>
            <param name="jobAvailability">Job availability</param>
            <param name="jobTemp">New Job.</param>
            <returns>True if Employee from the JobAvailability will be available for the new Job. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.JobUpdate(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.Job,System.DateTime,System.DateTime)">
            <summary>
            Not implemented.
            </summary>
            <param name="jobAvailability">Job availability that is being checked</param>
            <param name="jobTemp">Job to be updated/</param>
            <param name="oldStartDate">Old Job's StartDate.</param>
            <param name="oldEndDate">Old Job's EndDate.</param>
            <returns>True if Employee from the JobAvailability is available for the Job. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Override of the method JobDelete.
            </summary>
            <param name="assigments">List of assignments.</param>
            <param name="jobAvailabilityId">ID of the JobAvailability.</param>
            <param name="jobTemp">Job that is being evaluated at the moment.</param>
            <returns>True if Employee satisfies the Constraint. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.AddConstraint">
            <summary>
            Method that recalculates relevant availabilities for the MNOJTC Constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Method that applies a Constraint on new employees
            </summary>
            <param name="employee">EmployeeSolverDTO object</param>
            <param name="job">Job on which the Constraint is being applied.</param>
            <param name="jobAvailability">Relevant job availability</param>
            <returns>True if Employee satisfies Constraint.False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Override of the UpdateConstraint method which
            recalculates relevant assignments as per new Constraint values.
            </summary>
            <param name="constraintDB">Updated Constraint.</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Override of the method for assign/unassign Employees
            </summary>
            <param name="employee">EmployeeSolverDTO Object</param>
            <param name="job">Job object on which the action is being taken.</param>
            <param name="jobAvailability">JobAvailability.</param>
            <param name="isAssigment">Whether or not the assignment should adapt to other assignments</param>
            <returns>True if Employee is successfully assigned/unassigned.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.GetConsecutiveDates(System.Collections.Generic.List{System.DateTime},System.Int32)">
            <summary>
            Method that goes through list of dates and returns first X consecutive dates.
            </summary>
            <param name="dates">List containing consecutive and nonconsecutive dates.</param>
            <param name="consecutiveDays">Number of consecutive dates to return.</param>
            <returns>List of X consecutive dates.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.UpdateMNOJTCconstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Method that updates availabilities for the passed Constraint.
            </summary>
            <param name="mnojtcConstraint">Constraint object whose relevant availabilities should be recalculated.</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.UpdateRelevantConstraints(System.Collections.Generic.List{ESolve.Entities.Models.Constraint})">
            <summary>
            Method that iterates through MNOJTC Constraints and recalculates their assignments.
            </summary>
            <param name="constraintsToUpdate">List of Constraints to recalculate.</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.PrepareEmployeesForMNOJTC(System.Boolean,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability})">
            <summary>
            Method that initializes EmployeeConstraints and Employees based on
            passed employees and jobAvailabilities
            </summary>
            <param name="shouldInitializeEmployeeConstraints">Indicator for whether or not the EmployeeConstraints should be initialized.</param>
            <param name="employees">List of EmployeeSolverDTO used for EmployeeConstraints and Employees collections.</param>
            <param name="jobAvailabilities">JobAvailabilities used for extracting EmployeeIDs for initialization of relevant Employees.</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.PrepareDataForMNOJTC">
            <summary>
            Method that initializes JobAvailabilities and EmployeeAssignments
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.GenerateAssignedDatesForCurrentAssignment(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
             Method that generates assigned dates from current assignment.
            </summary>
            <param name="assignmentStartEndDate">Assignment's start and end date.</param>
            <returns>List of assigned dates.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.GetConsecutiveDaysFromListOfDates(System.Collections.Generic.List{System.DateTime},ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            Method that iterates through list of sorted days and,
            starting from the last day (first element), returns number of consecutive days
            </summary>
            <param name="sortedDays">List of (descendingly)sorted days</param>
            <param name="relevantDate">Represents a date range whose consecutivness within entire list should be checked.</param>
            <returns>Number of consecutive days within the sortedDays list.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.CalculateConsecutiveDays(System.Collections.Generic.List{System.DateTime},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Method that generates a tuple containing an int and a list of dates.
            Method takes assignment and calculates how many days it lasts,
            add those days into the list of assigned dates and then
            calculates number of consecutive days the Employee is assigned on.
            </summary>
            <param name="listOfDatesForMaxCount">List of assigned days.</param>
            <param name="startDate">Start date of the assignment.</param>
            <param name="endDate">End date of the assignment.</param>
            <param name="shouldCountFromRelevantDateRange">Indicates whether ConsecutiveDays should be calculated against start and end date, or within entire list independently.</param>
            <returns>Tuple where first item is number of consecutive days and second item is list of assigned days.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.IsConstraintApplicableOnEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Method that checks if Constraint is applicable on the passed Employee.
            </summary>
            <param name="currentEmployee">EmployeeSolverDTO object.</param>
            <param name="jobAvailability">Employee's JobAvailability.</param>
            <returns>True if Constraint is applicable, False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.DoesEmployeeSatisfiesMaximumNumberOfJobTypesConsecutivelyConstraint(ESolve.Entities.Models.JobAvailability,System.Int64)">
            <summary>
            Method that checks if passed JobAvailability satisfies the MNOJTC Constraint.
            </summary>
            <param name="jobAvailability">JobAvailability object.</param>
            <param name="employeeID">ID of the Employee.</param>
            <returns>True if passed JobAvailability satisfies the MNOJTC Constraint. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConsecutivelyChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker">
            <summary>
            Checker for maximum number of job types
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.ConstraintMNOJT">
            <summary>
            Maximum number of job type constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.BrokenRules">
            <summary>
            Broken rules for constraints
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Adding/Updating New Maximum Number Of JobTypes Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor for Activate/Deactivate Maximum Number Of JobTypes Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor that is used for Job add, job update, job delete, copy job, copy data forward
            assign/unassign, add employee actions
            </summary>
            <param name="constraint">Maximum number of job types constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom datas</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="nameOfFirstDayInWeek">Name of the fiest in the week</param>
            <param name="jobAvailabilities">Job availbilities to check</param>
            <param name="repositoryContext">DbContext</param>
            <param name="employees">Employees</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.List{ESolve.Entities.Models.BrokenRule},System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor that is used for Assign/Unassign actions
            </summary>
            <param name="constraint">Maximum number of job types constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom datas</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="nameOfFirstDayInWeek">Name of the fiest in the week</param>
            <param name="jobAvailabilities">Job availbilities to check</param>
            <param name="repositoryContext">DbContext</param>
            <param name="employees">Employees</param>
            <param name="brokenRules">Broken rules</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.AddConstraint">
            <summary>
            Adding new maximum number of job types constraint
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Updating existing maximum number of job types constraint
            </summary>
            <param name="constraintDB">Constraint with old values</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Check Maximum Number Of Job Type constraint on JobAdd action
            </summary>
            <param name="assigments">Assignments that we are checking</param>
            <param name="jobAvailability">Job availaiblity</param>
            <param name="jobTemp">Job</param>
            <returns>True if employee satisfies constraint, otherwise return false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.JobUpdate(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.Job,System.DateTime,System.DateTime)">
            <summary>
            Check Maximum Number Of Job Type constraint on JobUpdate action
            </summary>
            <param name="jobAvailability">Job availability to check</param>
            <param name="jobTemp">Job object</param>
            <param name="oldStartDate">Job's old start date</param>
            <param name="oldEndDate">Job's old end date</param>
            <returns>True if employee satisfies constraint, otherwise return false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Check maximum number of job types constraint on job delete action
            </summary>
            <param name="assigments">Assignments</param>
            <param name="jobAvailabilityId">Job availabiitliy that is being checked.</param>
            <param name="jobTemp">Job object</param>
            <returns>True if employee satisfies constraint, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Check maximum number of job types constraint on assign/unassgin employee
            </summary>
            <param name="employee">employee that will be assignm or unassign</param>
            <param name="job">Job object</param>
            <param name="jobAvailability">Availability to check</param>
            <param name="isAssigment">Flag if this method is called from assign or unassign action</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.TemplateJobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implemented
            </summary>
            <param name="assigments">Assignments</param>
            <param name="templateJobAvailabilityId">Job Availability from template that will be checked</param>
            <param name="templateJobTemp">TemplateJob object</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="employee">Employee that will be added</param>
            <param name="job">Job object</param>
            <param name="jobAvailability">Job availability to checkj</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.TemplateJobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implmeented
            </summary>
            <param name="assigments">Assignments</param>
            <param name="jobAvailabilityId">Job availability's primary key that will be checked</param>
            <param name="jobTemp">Job object</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Checking constraint after getting autosolve's result
            </summary>
            <param name="job">Job that is being checked.</param>
            <param name="jobAvailability">Job availability that is being checked</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.IsConstraintApplicableOnEmployeeAndJob(System.Int64,System.Int64,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO)">
            <summary>
            Checking if maximum number of job types is aplicable on employee and job
            </summary>
            <param name="jobID">Job's primary key</param>
            <param name="jobTypeID">Job type's primary key</param>
            <param name="employee">Employee which is being checked</param>
            <returns>True if constraint is aplicable on employee, otherwise return false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.DoesEmployeeSatisfiesMaximumNumberOfJobTypesConstraint(ESolve.Entities.Models.JobAvailability,System.DateTime[])">
            <summary>
            Checking if employee satisfies maximum number of job types constraint
            </summary>
            <param name="jobAvailability">Job availability that is being checked</param>
            <param name="dateRange">Date range of job</param>
            <returns>True if employee satisfies constraint, otherwise return false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.MaximumNumberOfJobTypesConstraintChecker.CheckMaxJobTypeConstraintOnJobUpdate(System.Collections.Generic.List{ESolve.Entities.Models.JobStatus},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability})">
            <summary>
            This method is used to check maximum number of job types constraint after job update action 
            This is for case where we need to check other assignments based on job's change
            </summary>
            <param name="jobStatuses">Job statuses</param>
            <param name="assignments">Assignments that will be included in calculations.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.NotAlreadyAssignedConstraintChecker.#ctor">
            <summary>
            Default constructor which is used for autosolve
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.NotAlreadyAssignedConstraintChecker.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Models.Constraint)">
            <summary>
            Construcor with db context and constraint
            </summary>
            <param name="repositoryContext">Db Context</param>
            <param name="constraint">Constraint</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.NotAlreadyAssignedConstraintChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.NotAlreadyAssignedConstraintChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Checking constraint on assign/unassign action
            </summary>
            <param name="employee">Current employee</param>
            <param name="job">Current job</param>
            <param name="jobAvailability">Job availability to check</param>
            <param name="isAssigment">Flag indicates that this method is  called by assign or unassign actions</param>
            <returns>True if employee satisfies constraint, otherwise return false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.NotAlreadyAssignedConstraintChecker.DoesEmployeeSatisfiesNAAC(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},System.Int64,ESolve.Contracts.IJob)">
            <summary>
            Check not already assigned constraint
            </summary>
            <param name="assigments">Assignments that can be included in calculculations for constraint</param>
            <param name="jobAvailabilityId">Job availabilitiy's primar key which will be checked </param>
            <param name="jobTemp">Job where not aleredy assgiend constraint is being checked</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.NotAlreadyAssignedConstraintChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Adding New employee Planned absence constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Activate/Deactivate constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.AbsenceRequest},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Int32)">
            <summary>
            Constructor for jobs calculations
            </summary>
            <param name="constraint"></param>
            <param name="jobAvailabilities"></param>
            <param name="absences"></param>
            <param name="repositoryContext"></param>
            <param name="employees"></param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.AddConstraint">
            <summary>
            Adding Employee planned absence constraint
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Check constraint on job add action
            </summary>
            <param name="assigments"></param>
            <param name="jobAvailability"></param>
            <param name="jobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Updating existing constraint
            </summary>
            <param name="constraintDB">Constraint with old values</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Checking constraint on assign/unassign action
            </summary>
            <param name="employee">Current employee</param>
            <param name="job">Current job</param>
            <param name="jobAvailability">JobAvailbility to check</param>
            <param name="isAssigment">Flag indicates that this method is  called by assign or unassign actions</param>
            <returns>True if employee satisfies constraint, otherwise return false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Not implemented
            </summary>
            <param name="assigments"></param>
            <param name="jobAvailabilityId"></param>
            <param name="jobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.JobUpdate(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.Job,System.DateTime,System.DateTime)">
            <summary>
            Not implemented
            </summary>
            <param name="jobAvailability"></param>
            <param name="jobTemp"></param>
            <param name="oldStartDate"></param>
            <param name="oldEndDate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.TemplateJobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implemented
            </summary>
            <param name="assigments"></param>
            <param name="templateJobAvailabilityId"></param>
            <param name="templateJobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.TemplateJobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implemented
            </summary>
            <param name="assigments"></param>
            <param name="jobAvailabilityId"></param>
            <param name="jobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.DoesEmployeeSatisfiesEmployeePlannedAbsence(ESolve.Entities.Models.Job,System.Int64)">
            <summary>
            Checking if employee satisfies employee planned absence constraint
            </summary>
            <param name="job">Job object for checking constraint</param>
            <param name="employeeID">Employee's primary key for checking constraint</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.PlannedAbsenceChecker.CheckEmployeePlannedAbsenceOnJobOrJobTypeUpdate(System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Collections.Generic.List{ESolve.Entities.Models.JobStatus})">
            <summary>
            Checking constraint on job or job type update
            </summary>
            <param name="employeeConstraints">List of employee constraint that may be changed</param>
            <param name="jobStatuses">Job statuses from db</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker">
            <summary>
            Checker for split shifts
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.ConstraintSS">
            <summary>
            Split Shifts Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.BrokenRules">
            <summary>
            Broken rules messages
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.#ctor">
            <summary>
            DefaultConstructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.Models.BrokenRule},System.Int32)">
            <summary>
            
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="brokenRules">Broken rules of override assigments</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.AddConstraint">
            <summary>
            Applying constraint on adding it
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Applying constraint on updating it
            </summary>
            <param name="constraintDB">Constraint from database with old values.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Method for checking availabilities on new assigment
            </summary>
            <param name="employee">Employee that will be checked.</param>
            <param name="job">Job where employee is assigned</param>
            <param name="jobAvailability">Employee's availability on passed job.</param>
            <param name="isAssigment">Indicator if it is assigment</param>
            <returns>True if employee satisfies split shifts constraint, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Checking split shifts constraint on job deleting action
            </summary>
            <param name="assigments">Availabiltiiy to check</param>
            <param name="jobAvailabilityId">Availabiliity's primary key</param>
            <param name="jobTemp">Job for checking</param>
            <returns>True if employee satisfies splits shifts constraint, otherwise return false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.ApplySplitShiftsConstraint(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability})">
            <summary>
            Apply split shifts constraint on passed jobs' availaiblities
            </summary>
            <param name="jobAvailabiltiies">Availabiliies for checking</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.IsSplitShiftsConstraintApplicable(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,System.Int64)">
            <summary>
            Check if split shifts constraint is applicable on job and employee
            </summary>
            <param name="employee">Emplyoee for checking</param>
            <param name="jobID">Job's primary key for chekcing custom data.</param>
            <returns>True if constraint is applicable, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.DoesEmployeeSatisfiesSplitShiftsConstraint(ESolve.Entities.Models.JobAvailability)">
            <summary>
            Check if employee satisfies split shifts constraint
            </summary>
            <param name="jobAvailability">Job's availability for checking</param>
            <returns>True if employee satisfies constraint, otherwise return false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.CheckOtherAssigmentsOnJobOrJobTypeChange(System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Collections.Generic.List{ESolve.Entities.Models.JobStatus},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability})">
            <summary>
            This method chekcs availabilities based on operations like updating job or job type.
            </summary>
            <param name="employeeConstraints">Employee constraints to update</param>
            <param name="jobStatuses">Jobs' statuses</param>
            <param name="availabilitiesToCheck">Jobs' statuses</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.SplitShiftsChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.TemplateEmployeeFieldValueConstraintChecker.#ctor(ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Check if it is called
            </summary>
            <param name="repositoryContext"></param>
            <param name="loadJobStatuses"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.TemplateEmployeeFieldValueConstraintChecker.GetScheduleSubGroups">
            <summary>
            For constraints schedule method will return all SubGroup Ids
            </summary>
            <returns>List of SubGroups Primary kies</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.TemplateEmployeeFieldValueConstraintChecker.ScheduleIdsWhichAreOverlapingWithCurrent(ESolve.Entities.Models.Schedule)">
            <summary>
            Get All Schedule Ids which are overllaping with passed Schedule
            </summary>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.CalculationsCheckers.TemplateNotAlreadyAssignedConstraintChecker.#ctor">
            <summary>
            Default constructor which is used for autosolve
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.Employees">
            <summary>
            Employees with populated values for connected Entities
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.EmployeeAssigments">
            <summary>
            Employee Assigments
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.ScheduleDatePreference">
            <summary>
            Schedule Date Preference
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.NameOfFirstDayInWeek">
            <summary>
            Name of First Day in Week
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.JobCustomDatas">
            <summary>
            All Job Custom Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.StartDateOfFirstJobInSchedule">
            <summary>
            Start date of the first job in schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.Absences">
            <summary>
            Employees' absences
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.PeriodStartDate">
            <summary>
            Period start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.PeriodEndDate">
            <summary>
             Period end date
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.CurrentAction">
            <summary>
            Value that indicates if jobs need to be checked from left to right or from both sides of current job
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Calculations directin of constraint</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Creating NEW LeaverStatus Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="loadJobStatuses">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext)">
            <summary>
            Creating NEW LeaverStatus Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.#ctor(ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Constructor which initialize Repository Context and Populate JobStatuses 
            </summary>
            <param name="repositoryContext">Repository Context</param>
            <param name="initializeJobStatuses">Indicator will we initialize JobStatuses</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.PrepareDataForCalculations">
            <summary>
            Prepare data for constraints calculations
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.SetHoursValue(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO)">
            <summary>
            Get hours for maximum number of hours constraint
            </summary>
            <param name="employee">Employee for getting hours if hours in maximum number of hours constraint is employee specific max hours field.</param>
            <returns>Number of hours or null if employee does not have max hours in any of max hours fields.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.GetConstraintDateRangeForJob(System.DateTime,System.DateTime,ESolve.Entities.Models.ConstraintDateRange)">
            <summary>
            Generate job's date range for constraint's calculations 
            </summary>
            <param name="jobStartDate">Job's start date</param>
            <param name="jobEndDate">Job's end date</param>
            <param name="constraintDateRange">Object with date range type</param>
            <returns>Array of dates where the first element is start date of date range and the last element is end date of date range</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.AddAssignmentOnCopying(ESolve.Entities.Models.JobAvailability)">
            <summary>
            Add new assigments by copy data action
            </summary>
            <param name="newAssignment"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.DynamicConstraintBase.SetCompletelyValidAndIsNotified(ESolve.Entities.Models.JobAvailability)">
            <summary>
            Set CompletelyValid and IsNotified flags for JobAvailability based on constraints
            </summary>
            <param name="jobAvailability"></param>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker">
            <summary>
            The main <c>Leaver Status Constraint</c> class.
            Contains all methods for performing manual calculations for <c>Leaver Status Constraint</c>.
            <list type="bullet">
            <item>
            <term>AddConstraint</term>
            <description>Manual Calculations for NEW Leaver Status Constraint.</description>
            </item>
            </list>
            </summary>
            <remarks>
            <para>This class can calculate availabilities for each employee, when we add new Leaver Status Constraint.</para>
            </remarks>
            
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext)">
            <summary>
            Adding NEW Leaver Status Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.#ctor(System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext)">
            <summary>
            Activate/Deactivate Leaver Status Constraint
            </summary>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Apply Leaver Status Constraint on New Employee
            </summary>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.AddConstraint">
            <summary>
            Add new Leaver Status Constraint manual calculations
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments 
            provided to a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Availability Calculations when we updating existing Leaver Status Constraint
            </summary>
            <param name="constraintDB">Constraint from Database before update</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Check constraint on employee adding
            </summary>
            <param name="employee">Added employee</param>
            <param name="job">Current job</param>
            <param name="jobAvailability">JobAvailability to check</param>
            <returns>True if employee satisfies constraint, otherwise return false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Not implemented
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <param name="isAssigment"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.CalculateAvailabilityForConstraint(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability})">
            <summary>
            Method comapres Each Employee Leave Data if exists with JobEndDate. If Employees Leave Date is smaller than JobEndDate
            than Employee is unavailable for that Job. Otherwise he is available.
            </summary>
            <param name="JobAvailabilities">Collection of all Schedule Job Availabilities</param>
            <exception cref="T:System.InvalidOperationException">Caused by item.Value.Employee.LeaveDate.Value. Thrown when LeaveDate is null.</exception>
            <exception cref="T:System.ArgumentNullException">Caused by JobsForUpdateStatuses.Any. Thrown when some of arguments is null.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.LeaverStatusChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.BrokenRules">
            <summary>
            Broken rules for constraints
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.#ctor">
            <summary>
            DefaultConstructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Int32)">
            <summary>
            Construcotor used in employee add action
            </summary>
            <param name="constraint">Maximum number of days of the week constraint</param>
            <param name="jobCustomDataForConstraints">Custom data of jobs</param>
            <param name="scheduleDatePreference">Schedule date preference from database</param>
            <param name="nameOfFirstDayInWeek">Name of the first day in week defined in schdule date preference</param>
            <param name="employees">List of employees</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Adding New Maximum Number Of Hours Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Activate/Deactivate New Maximum Number Of Hours Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Int32)">
            <summary>
            Constructor used in job's calculations
            </summary>
            <param name="constraint">Maximum number of days of the week constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom data of jobs</param>
            <param name="scheduleDatePreference">Schedule date preference from database</param>
            <param name="nameOfFirstDayInWeek">The first day in week set in schedule date preference</param>
            <param name="jobAvailabilities">Availabilities for calculations</param>
            <param name="repositoryContext">Database context</param>
            <param name="employees">Employees for checking constraint</param>
            <param name="employeeConstraints">Employee constraints from database</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobStatus},System.Collections.Generic.List{ESolve.Entities.Models.BrokenRule},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Int32)">
            <summary>
            Constructor used for assigning and unassign employees from job
            </summary>
            <param name="constraint">Maximum number of days of the week constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom data of jobs</param>
            <param name="scheduleDatePreference">Schedule date preference from database</param>
            <param name="nameOfFirstDayInWeek">The first day in week set in schedule date preference</param>
            <param name="jobAvailabilities">Availabilities for calculations</param>
            <param name="jobStatuses">Database context</param>
            <param name="brokenRules">Broken rules from database for passed constraint</param>
            <param name="employeeConstraints">Employee constraint from database</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.JobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Contracts.IJobAvailability},ESolve.Contracts.IJobAvailability,ESolve.Contracts.IJob)">
            <summary>
            Checking constraint on job add action
            </summary>
            <param name="assigments">JobAvailability object that is being checked</param>
            <param name="jobAvailability">JobAvailiblity  that is being checked</param>
            <param name="jobTemp">Job object where constraint is being checked</param>
            <returns>True if employee satisfies constraint, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.TemplateJobAdd(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implemented
            </summary>
            <param name="assigments"></param>
            <param name="templateJobAvailabilityId"></param>
            <param name="templateJobTemp"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.JobUpdate(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.Job,System.DateTime,System.DateTime)">
            <summary>
            Not implemented
            </summary>
            <param name="jobAvailability"></param>
            <param name="jobTemp"></param>
            <param name="oldStartDate"></param>
            <param name="oldEndDate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.JobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},System.Int64,ESolve.Entities.Models.Job)">
            <summary>
            Checking constraint on job delete action
            </summary>
            <param name="assigments">Dictionary with availbility that is being checked</param>
            <param name="jobAvailabilityId">Primary key of the availability that is being checked</param>
            <param name="jobTemp">Job where constraint is being checked</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.AddConstraint">
            <summary>
            Method which should be called when we adding new Constraint
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Availability Calculations when we updating existing Maximum Number Of Hours Constraint
            </summary>
            <param name="constraintDB">Constraint from Database before update</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Checking constraint on employee add action
            </summary>
            <param name="employee">Added employee</param>
            <param name="job">Job for checking constraint</param>
            <param name="jobAvailability">Availaiblity that presents passed employee on passed job</param>
            <returns>True if added employee satisfies constraint, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Checking constraint on assign and unassign actions
            </summary>
            <param name="employee">Employee that is assigned or unassigned</param>
            <param name="job">Job where employee is assigned or unassigned</param>
            <param name="jobAvailability">Avaialbilty that presets passed employee on passed job</param>
            <param name="isAssigment">Flag that presents if this method is called by assign or unassign action.</param>
            <returns>True if employee satisfies constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.TemplateJobDelete(System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.TemplateJobAvailability},System.Int64,ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implemented
            </summary>
            <param name="assigments">Assigments for calculations</param>
            <param name="jobAvailabilityId">Primary key of the job availbility that is being checked</param>
            <param name="jobTemp">Job where constraint is being checked</param>
            <returns>True if employee satisfires constraint, otherwise returns false</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.IsMNODOTWConstraintApplicableForEmployee(ESolve.Entities.Models.JobAvailability,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.ConstraintMNODOTW)">
            <summary>
            For passed Employee And Job Check should current Constraint be applied.
            </summary>
            <param name="jobAvailability">Job availabilitiy that will be checked</param>
            <param name="employee">Employee that will be checked</param>
            <param name="constraint">Constraint for check</param>
            <returns>MNOHConstraintDTO object with info if constraint is applicatble on employee or not</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.DoesEmployeeSatisfiesMaximumNumberOfDaysOfTheWeek(ESolve.Entities.Models.JobAvailability,ESolve.Entities.ConstraintsCheckers.CheckerDTOs.MNOHConstraintDTO,System.Boolean)">
            <summary>
            This method checks if employee satisfies max number of days of the week constraint
            </summary>
            <param name="jobAvailability">Job availbility that is being checked</param>
            <param name="constraintIsApplicable">Object with info if constraint is applicable on employee as well as date range of current job</param>
            <param name="leftToRightAssignments">Flag if we are including assgiemnts from the future in calculations</param>
            <returns>True employee satisfies constraint, otherwise returns false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfDaysOfTheWeekChecker.CheckMaxNumberOfDaysConstraintsOnDeletingAssignmets(System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Collections.Generic.List{ESolve.Entities.Models.JobStatus},System.Boolean)">
            <summary>
            Method that check Maximum Number Of Days Of The Week after changes on other assignmntes
            </summary>
            <param name="employeeConstraints">List of employee constraints</param>
            <param name="jobStatuses">Job statuses from db</param>
            <param name="leftToRight">Flag if assignment are included from left to right or from both sides.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.BrokenRules">
            <summary>
            Broken rules for constraints
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.#ctor">
            <summary>
            DefaultConstructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Adding/Updating New Maximum Number Of Hours Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor for Activate/Deactivate Maximum Number Of Hours Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor that is used for Job add, job update, job delete, copy job, copy data forward
            assign/unassign, add employee actions
            </summary>
            <param name="constraint">Maximum number of job types constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom datas</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="nameOfFirstDayInWeek">Name of the fiest in the week</param>
            <param name="jobAvailabilities">Job availbilities to check</param>
            <param name="repositoryContext">DbContext</param>
            <param name="employees">Employees</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Int32)">
            <summary>
            Construcotor used in employee add action
            </summary>
            <param name="constraint">Maximum number of days of the week constraint</param>
            <param name="jobCustomDataForConstraints">Custom data of jobs</param>
            <param name="scheduleDatePreference">Schedule date preference from database</param>
            <param name="nameOfFirstDayInWeek">Name of the first day in week defined in schdule date preference</param>
            <param name="employees">List of employees</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.String,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.List{ESolve.Entities.Models.BrokenRule},System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint})">
            <summary>
            Constructor that is used for Assign/Unassign actions
            </summary>
            <param name="constraint">Maximum number of job types constraint</param>
            <param name="jobCustomDataForConstraintsDTOs">Custom datas</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="nameOfFirstDayInWeek">Name of the fiest in the week</param>
            <param name="jobAvailabilities">Job availbilities to check</param>
            <param name="repositoryContext">DbContext</param>
            <param name="employees">Employees</param>
            <param name="brokenRules">Broken rules</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.#ctor(ESolve.Entities.Models.Constraint,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext,System.Int32)">
            <summary>
            Constructor for Activate/Deactivate New Maximum Number Of Hours Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="currentAction">Directrion for constraint's calculation</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.AddConstraint">
            <summary>
            Method which should be called when we adding new Constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.UpdateConstraint(ESolve.Entities.Models.Constraint)">
            <summary>
            Availability Calculations when we updating existing Maximum Number Of Hours Constraint
            </summary>
            <param name="constraintDB">Constraint from Database before update</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability)">
            <summary>
            Checking constraint on employee add action
            </summary>
            <param name="employee">Current employee</param>
            <param name="job">Current job</param>
            <param name="jobAvailability">JobAvailability to check</param>
            <returns>True if added employee satisfies constraint, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.AssignUnAssignEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Contracts.IJobAvailability,System.Boolean)">
            <summary>
            Check constraint on assign/unassign action
            </summary>
            <param name="employee">Current employee</param>
            <param name="job">Current job</param>
            <param name="jobAvailability">JobAvilability to check</param>
            <param name="isAssigment">Flag that indicated that this method is called by assign or unassign action</param>
            <returns>True if employee satisfies constraint</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.DoesEmployeeSatisfiesMaximumNumberOfHours(ESolve.Entities.Models.JobAvailability,ESolve.Entities.ConstraintsCheckers.CheckerDTOs.MNOHConstraintDTO)">
            <summary>
            
            </summary>
            <param name="jobAvailability"></param>
            <param name="constraintIsApplicable"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.SumTotalHours(ESolve.Entities.Models.Job,ESolve.Entities.ConstraintsCheckers.CheckerDTOs.MNOHConstraintDTO,System.Double)">
            <summary>
            This method is used for summation total hours for passed job
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.CheckMaxHoursConstraintsOnDeletingAssignmets(System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Collections.Generic.List{ESolve.Entities.Models.JobStatus},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability})">
            <summary>
            Method that check Maximum Number of Hours constraint after changes on other assignmntes
            </summary>
            <param name="employeeConstraints">List of employee constraints</param>
            <param name="jobStatuses">Job statuses from db</param>
            <param name="assignments"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.MaximumNumberOfHoursChecker.CheckAvailabilityAfterAutoSolve(ESolve.Entities.Models.Job,ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not implemented
            </summary>
            <param name="job"></param>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.CheckerDTOs.MNOHConstraintDTO">
            <summary>
            Return
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerDTOs.MNOHConstraintDTO.IsConstraintApplicable">
            <summary>
            Indicator if contraint is applicable
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerDTOs.MNOHConstraintDTO.PeriodStartDate">
            <summary>
            Period's start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerDTOs.MNOHConstraintDTO.PeriodEndDate">
            <summary>
            Period's end date
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.CheckerDTOs.MNOHConstraintDTO.HoursValue">
            <summary>
            Hours value
            </summary>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase">
            <summary>
            Base class for Constraint Form
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Models.Constraint,System.String,System.Int32)">
            <summary>
            Constructor that initializes RepositoryContext, Constraint, ConstraintKey and number of Constraint fields.
            </summary>
            <param name="repositoryContext">Repository Context.</param>
            <param name="constraint">Constraint which will be initialized.</param>
            <param name="constraintKey">Constraint key.</param>
            <param name="constraintFieldsLength">Number of constraint fields.</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.#ctor(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which is used for generating constraint  from Constraint Form
            </summary>
            <param name="constraintForm">Constraint form which have all properties needed for generating constraint</param>
            <param name="repositoryContext">Context which is used in order to access DataBase</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.AddUpdateBaseConstraint">
            <summary>
            Updating or adding constraint
            </summary>
            <returns>True if constraint is added or updated, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.GetDateRange">
            <summary>
            This method Return all defined Date Ranges sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.GetHoursTypes">
            <summary>
            This method Return all defined Hours Types sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.GetComparisonModes">
            <summary>
            This method Return all defined Comparison modes sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.GetYesNoDropDown">
            <summary>
            This method returns possibilities Yes and No
            </summary>
            <returns>Array of IdNameDropDownModel</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.GetMaxHours">
            <summary>
            This method Return all defined Max Hours sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.GetDaysOfWeek">
            <summary>
            This method Return all Days of week sorted by Day of week
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.ConstraintFormBase.GetConstraintOperators">
            <summary>
            This method Return all Operators defined in constraint module sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.Forms.DaysOffWithinAPeriodForm">
            <summary>
            Form for Days Off Within A Period Constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.DaysOffWithinAPeriodForm.#ctor(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="constraintForm"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.DaysOffWithinAPeriodForm.GetDWOPConstraint">
            <summary>
            Get Days off Withing A Period constraint from database
            </summary>
            <returns>DOWP Constraint</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.GenerateForm.GetConstraintFromForm(ESolve.Entities.DTOs.FormSpecificationDTO,System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            Based on values in form and constrintRuleName, method will generate constraint.
            Repository context is used as connection to the database
            </summary>
            <param name="form">Form which user populated on some client app</param>
            <param name="constraintRuleName">Constraint Rule Name</param>
            <param name="repositoryContext">Context which is used as a connection to the database</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfDaysOfTheWeekForm.#ctor(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which is used for generating constraint MaximumNumberOfDaysOfTheWeek from Constraint Form
            </summary>
            <param name="constraintForm">Constraint form which have all properties needed for generating constraint</param>
            <param name="repositoryContext">Context which is used in order to access DataBase</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfDaysOfTheWeekForm.GetMNODOTWConstraint">
            <summary>
            Get MNODTW Constraint from DataBase
            </summary>
            <returns>ConstraintMNODOTW. See <see cref="T:ESolve.Entities.Models.ConstraintMNODOTW"/> for more details</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfHoursForm.#ctor(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="constraintForm"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTimesForm">
            <summary>
            Form for Maximum Number Of Job Times Constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTimesForm.#ctor(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="constraintForm"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTimesForm.GetMNOJTIMEConstraint">
            <summary>
            Getting Maximum Number Of Job Times Constraint
            </summary>
            <returns>ConstraintMNOJTIME object</returns>
        </member>
        <member name="F:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.MNOJT_BACKEND_KEY_BACKEND_KEY">
            <summary>
            Backend key for this constraint
            </summary>
        </member>
        <member name="F:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.NUMBER_OF_CONSTRAINT_FIELDS_FOR_MNOJT_CONSTRAINT">
            <summary>
            Number of fields that this constraint has
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.ConstraintMNOJT">
            <summary>
            Maximum number of job type constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Models.Constraint)">
            <summary>
            Constructor for instantating MaximumNumberOfJobTypesForm
            </summary>
            <param name="repositoryContext">DbContext</param>
            <param name="constraint">MNOJT constraint</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.#ctor(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor for instantating MaximumNumberOfJobTypesForm
            </summary>
            <param name="constraintForm">Constraint's form</param>
            <param name="repositoryContext">DbContext</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.GenerateConstraintForm(ESolve.Contracts.ILoggedInUser)">
            <summary>
            Generating maximum number of job type's form
            </summary>
            <param name="loggedInUser">Current logged in user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.GenerateConstraintFromForm(ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            Generate constraint from form that is sent from frontedn
            </summary>
            <param name="constraintForm">Constraint's form</param>
            <returns>Constraint with values.</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.GetMNOJTConstraint">
            <summary>
            Getting Maximum number of job type constraint
            </summary>
            <returns>Maximum number of job type constraint</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.MaximumNumberOfJobTypesForm.AddUpdateConstraint(ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            Adding or updating constraint
            </summary>
            <returns>True if constraint is succesfully added or updated</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.PlannedAbsenceForm.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Models.Constraint)">
            <summary>
            Constructor
            </summary>
            <param name="repositoryContext">DB context</param>
            <param name="constraint">Constraint entity</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.PlannedAbsenceForm.#ctor(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor
            </summary>
            <param name="constraintForm">Constraint's form</param>
            <param name="repositoryContext">Db Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.PlannedAbsenceForm.GenerateConstraintForm(ESolve.Contracts.ILoggedInUser)">
            <summary>
            Generating form for employee planeed absence constraint
            </summary>
            <param name="loggedInUser">Current logged in user</param>
            <returns>List of fields for employee planned absnece constraint</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.PlannedAbsenceForm.GenerateConstraintFromForm(ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            Generating constraint form
            </summary>
            <param name="constraintForm"></param>
            <returns>Constraint</returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.PlannedAbsenceForm.AddUpdateConstraint(ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            Add or Update Constraint
            </summary>
            <returns>True if Employee Planned Absence is updated, otherwise returns false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.Forms.SplitShiftsForm">
            <summary>
            Form for split shifts constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.Forms.SplitShiftsForm.#ctor(ESolve.Entities.DTOs.FormSpecificationDTO,ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="constraintForm"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="T:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase">
            <summary>
            Base Class for Template Availability calculations
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.Constraint">
            <summary>
            Constraint with which will we work
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.ConstraintDateRange">
            <summary>
            Constraint that have date range
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.JobsForUpdateStatuses">
            <summary>
            Collection of Jobs for Update statuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.JobAvailabilities">
            <summary>
            Job Availabilities in Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.RepositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.EmployeeConstraints">
            <summary>
            Collection of Employees Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.JobStatuses">
            <summary>
            All JobStatuses
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.#ctor(ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Constructor which initialize Repository Context and Populate JobStatuses 
            </summary>
            <param name="repositoryContext">Repository Context</param>
            <param name="initializeJobStatuses">Indicator will we initialize JobStatuses</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.#ctor(ESolve.Entities.Models.TemplateConstraint,System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},ESolve.Entities.RepositoryContext)">
            <summary>
            Creating NEW LeaverStatus Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.#ctor(ESolve.Entities.Models.TemplateConstraint,System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Creating NEW LeaverStatus Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
            <param name="loadJobStatuses">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.#ctor(System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},ESolve.Entities.RepositoryContext)">
            <summary>
            Activate/Deactivate Leaver Status Constraint
            </summary>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.#ctor(ESolve.Entities.Models.TemplateConstraint,System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{ESolve.Entities.Models.TemplateEmployeeConstraint},ESolve.Entities.RepositoryContext)">
            <summary>
            Creating NEW LeaverStatus Constraint
            </summary>
            <param name="constraint">Constraint which we add</param>
            <param name="jobsForUpdateStatuses">Collection of all Jobs where we will update Job Statuses</param>
            <param name="employeeConstraints">Collection of Employee Constraints Which Will be stored in Database</param>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="repositoryContext">Repository Context</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.AddConstraint">
            <summary>
            Availability Calculations when we add new constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.UpdateConstraint(ESolve.Entities.Models.TemplateConstraint)">
            <summary>
            Availability Calculations when we updating existing Constraint
            </summary>
            <param name="constraintDB">Constraint from Database before update</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.ApplyConstraintOnAddedEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.TemplateJob,System.Int64)">
            <summary>
            
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="availabilityID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.ActivateDeactivate(System.Boolean)">
            <summary>
            Availability Calculations when we Activate/Deactivate Constraint
            </summary>
            <param name="isActive">Current Activity of Constraint</param>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.IsComparisonModeApplicableForEmployee(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="employee"></param>
            <param name="comparisonRuleEmployeeField"></param>
            <param name="comparisonRuleTextValue"></param>
            <param name="comparisonRuleOperator"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.UpdateJobStatuses">
            <summary>
            Iterate trough Collection Of Jobs where Status should be updated. Update it and SaveChanges in Database.
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.ConstraintsCheckers.TemplateCheckerBase.GetJobStatus(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Based on passed parameters method return JobStatus ID
            </summary>
            <param name="numberOfRequiredEmployees">Number of Required Employees</param>
            <param name="numberOfAvailableEmployees">Number Available Employees</param>
            <param name="numberOfValidAssignment">Number of Valid Assigned Employees</param>
            <param name="isConcurrent">Indicator Is passed Job Concurent</param>
            <returns>Job Status ID</returns>
            <exception cref="T:System.ArgumentNullException">If some Collection of parameter is NULL</exception>
        </member>
        <member name="T:ESolve.Entities.CustomDataServices.JobCustomDataService">
            <summary>
            Service for subgroup's or schdule's custom data change
            </summary>
        </member>
        <member name="M:ESolve.Entities.CustomDataServices.JobCustomDataService.ScheduleOrSubgroupCustomDataChanged(System.Object,ESolve.Entities.EventArgsToSendData.CustomDataEventArgs)">
            <summary>
            Method for event handler
            </summary>
            <param name="source">object that raising events</param>
            <param name="args">Passed data to event</param>
        </member>
        <member name="M:ESolve.Entities.CustomDataServices.JobCustomDataService.TemplateScheduleOrSubgroupCustomDataChanged(System.Object,ESolve.Entities.EventArgsToSendData.TemplateCustomDataEventArgs)">
            <summary>
            Method for event handler
            </summary>
            <param name="source">object that raising events</param>
            <param name="args">Passed data to event</param>
        </member>
        <member name="T:ESolve.Entities.CustomDataServices.SubgroupCustomDataService">
            <summary>
            Service for schedule's custom data change
            </summary>
        </member>
        <member name="M:ESolve.Entities.CustomDataServices.SubgroupCustomDataService.ScheduleCustomDataChanged(System.Object,ESolve.Entities.EventArgsToSendData.CustomDataEventArgs)">
            <summary>
            Method for event handler
            </summary>
            <param name="source">object that raising events</param>
            <param name="args">Passed data to event</param>
        </member>
        <member name="M:ESolve.Entities.CustomDataServices.SubgroupCustomDataService.TemplateScheduleCustomDataChanged(System.Object,ESolve.Entities.EventArgsToSendData.TemplateCustomDataEventArgs)">
            <summary>
            Method for event handler
            </summary>
            <param name="source">object that raising events</param>
            <param name="args">Passed data to event</param>
        </member>
        <member name="T:ESolve.Entities.DataManager.AbsenceCodeManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.Add(ESolve.Entities.Models.AbsenceCode,System.Int64)">
            <summary>
            Adds new absence code into database
            </summary>
            <param name="entity">Absence code that will be added.</param>
            <param name="loggedInUser">logged in user</param>
            <returns>True if absence code is successfully added, fals if is not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.Get(System.Int64)">
            <summary>
            Gets absence code with passed primary key.
            </summary>
            <param name="id">Absence code's primary key.</param>
            <returns>Absence code with passed primary key.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.GetAll">
            <summary>
            Gets all absence codes from database.
            </summary>
            <returns>IEnumberable list with all absence code from database.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.Update(ESolve.Entities.Models.AbsenceCode,System.Int64)">
            <summary>
            Updates existing absence code in database.
            </summary>
            <param name="entity">Absence code that will be updated.</param>
            <param name="loggedInUserId">logged in user</param>
            <returns>True i absence code is succesfully updated, false if it is not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.Delete(ESolve.Entities.Models.AbsenceCode,System.Int64)">
            <summary>
            Deletes absence code from database.
            </summary>
            <param name="entity">Absence code that will be removed.</param>
            <param name="loggedInUserId">logged in user</param>
            <returns>True if absence code is succesfully removed, false if it is not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.CheckIfNameAlreadyExist(System.Int64,System.String)">
            <summary>
            Checks if absence code name is already in use
            </summary>
            <param name="id">Absence code's primary key</param>
            <param name="name">Absence code's name</param>
            <returns>True if name is already in use, false if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.AuditLogForAbsenceCode(ESolve.Entities.Models.AbsenceCode,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="loggedInUserId"></param>
            <param name="oldAbsenceCodeName"></param>
            <param name="action"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.Add(ESolve.Entities.Models.AbsenceCode)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.Update(ESolve.Entities.Models.AbsenceCode)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceCodeManager.Delete(ESolve.Entities.Models.AbsenceCode)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.AbsencePreferencesManager">
            <summary>
            Manager for working wit absence preferences
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsencePreferencesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            AbsenceManager constructor which initialize Repository context.
            </summary>
            <param name="context">Represents repository with which AbsenceManager will communicate.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsencePreferencesManager.Add(ESolve.Entities.Models.AbsencePreferences)">
            <summary>
            Inserts passed AbsencePreferences object in Database table tblAbsencePreferences.
            </summary>
            <param name="entity">Represents AbsencePreferences object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsencePreferencesManager.Delete(ESolve.Entities.Models.AbsencePreferences)">
            <summary>
            NotImplemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsencePreferencesManager.Get(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsencePreferencesManager.GetAll">
            <summary>
            NotImplemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsencePreferencesManager.Update(ESolve.Entities.Models.AbsencePreferences)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.AbsenceRequestManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            AbsenceRequestManager constructor which initialize Repository context.
            </summary>
            <param name="context">Represents repository with which AbsenceRequestManager will communicate.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.Add(ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Inserts passed AbsenceRequest object in Database table tblAbsenceRequests.
            </summary>
            <param name="entity">Represents AbsenceRequest object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.Delete(ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Method will remove passed entity
            </summary>
            <param name="entity">Absence request which will be removed</param>
            <returns>Indicator was action sucessfull</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.Get(System.Int64)">
            <summary>
            For passed Id method will find object with that primary key.
            </summary>
            <param name="id">Absence Request Primary key</param>
            <returns>Null if object doesn't exists, or object if he exists.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.GetAll">
            <summary>
            NotImplementer
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.Update(ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Updates passed object in Database
            </summary>
            <param name="entity">AbsenceRequest entity with new values</param>
            <returns>Bool indidator does method updated values</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.Get(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed collection of Ids method will find objects with those primary kies.
            </summary>
            <param name="ids">Collection of Absence Request Primary key</param>
            <returns>Null if object doesn't exists, or object if he exists.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.AddUserRequest(ESolve.Entities.Models.AbsenceRequest,System.Int64)">
            <summary>
            For passed employeeid method will find user id based on employee, set that value in absence request and store him,
            </summary>
            <param name="absenceRequest">Absence request which will be updated and stored</param>
            <param name="employeeID">Employee which AbsencemanagerId will setted in UserID</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.AddEmployeeRequestByAdmin(ESolve.Entities.Models.AbsenceRequest,System.Int64)">
            <summary>
            For passed employeeid method will find user id based on employee, set that value in absence request and store him,
            </summary>
            <param name="absenceRequest">Absence request which will be updated and stored</param>
            <param name="employeeID">Employee which AbsencemanagerId will setted in UserID</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.Reject(System.Int64)">
            <summary>
            For passed absence request method will reject absencerequest
            </summary>
            <param name="absenceRequestID">Absence Request Primary KEy</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.Approve(System.Int64)">
            <summary>
            For passed absence request method will do actions defined in absencerequest
            </summary>
            <param name="absenceRequestID">Absence Request Primary KEy</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.DeleteAbsenceRequest(System.Int64,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.PushNotifications.AbsenceNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Deleting absence requests
            </summary>
            <param name="id">Primary key of the absence who will be removed</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="absenceRequestManager">Manager for absence requests</param>
            <param name="absenceNotificationManager">Manager for absence notifications</param>
            <param name="configuration"></param>
            <returns>True if absence request is successfully removed, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.GenerateRquestForAbsence(ESolve.Entities.Models.EmployeeAbsence,ESolve.Enums.AbsenceActions)">
            <summary>
            For passed absence and absence action method will generate Absence request
            </summary>
            <param name="absence">Absence object</param>
            <param name="absenceActions">Selected Absence Action</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.MapAbsenceCreateUpdateDTOToAbsenceRequest(ESolve.Entities.DTOs.AbsenceCreateUpdateDTO)">
            <summary>
            For passed dto method will map appropiate fileds to the new AbsenceRequest
            </summary>
            <param name="absenceCreateUpdateDTO"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.GetPreviewAbsenceRequestDTO(System.Int64)">
            <summary>
            Get AbsenceAddEdit Dto
            </summary>
            <param name="Id">AbsenceRequest Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.UpdateRequestStatus(ESolve.Entities.Models.AbsenceRequest,System.String)">
            <summary>
            Updates passed object in Database
            </summary>
            <param name="entity">AbsenceRequest entity with new values</param>
            <param name="status">Statusn name</param>
            <returns>Bool indidator does method updated values</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.IsThereAnyApprovedAbsenceForEmployeeInPassedRange(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            For passed employeeID and DateTime Range method will return TRue if there is any approved absence request
            otherwise it will return FALSE
            </summary>
            <param name="sDate">Period StartDate</param>
            <param name="eDate">Period EndDate</param>
            <param name="employeeID">Employee Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.GetApprovedAbsencesForEmployeeInPassedRange(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            For passed employeeID and DateTime Range method will return his all Approved Absences
            </summary>
            <param name="sDate">Period StartDate</param>
            <param name="eDate">Period EndDate</param>
            <param name="employeeID">Employee Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.ApplyEmployeePlannedAbsenceOnApproveOrReject(System.Collections.Generic.List{ESolve.Entities.Models.AbsenceRequest},System.Boolean)">
            <summary>
            Applying Employee Planned Absnece constraints when requsts are approved
            This method is also used when approved request is removed
            </summary>
            <param name="absences">Absences that are approved or rejected</param>
            <param name="rejectAction">Indicatior if absences are rejected/removed or approved/added</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AbsenceRequestManager.ApplyEmployeePlannedAbsenceOnModifying(ESolve.Entities.Models.AbsenceRequest,ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Applying Employee planeed absence constraints when absence request is modified.
            </summary>
            <param name="absence">Absence request with new values</param>
            <param name="oldAbsence">Absence request with old values</param>
        </member>
        <member name="T:ESolve.Entities.DataManager.AccountManager">
            <summary>
            Managing accounts
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.SwitchAccounts(ESolve.Contracts.ILoggedInUser,ESolve.Entities.AbstractUser,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Method which will logout currently logged in user and login the linked account.
            </summary>
            <param name="loggedInUser">Currently logged in user.</param>
            <param name="linkedAccount">Current User's linked account.</param>
            <param name="context"></param>
            <returns>True if accounts were successfully switched. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.Logout(ESolve.Contracts.ILoggedInUser,Microsoft.AspNetCore.Http.HttpContext,System.Boolean,System.String)">
            <summary>
            Method that sets User's/Employee's IsLoggedOut flag to true, which further prevents
            User's/Employee's past JWTs to grant access to the application.
            </summary>
            <param name="loggedInUser">Currently logged in user.</param>
            <param name="mobileDeviceId">Mobile device Id</param>
            <param name="httpContext"></param>
            <param name="isUserSwitchingAccount"></param>
            <returns>True if User/Employee is successfully logged out, false otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.LoginUser(ESolve.Entities.DTOs.LoginDTO,ESolve.Entities.DataManager.JobManager,Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.DataManager.LicenseManager,System.Boolean)">
            <summary>
            Login user
            </summary>
            <param name="loginDTO">DTO object containing login information.</param>
            <param name="jobManager">Manager used for user's image retrieval.</param>
            <param name="configuration">Application's configuration properties.</param>
            <param name="_licenseManager">license Manager</param>
            <param name="forMobile"></param>
            <returns>LoginDTO object with values which are Boolean value (if user can successfully login or not) 
            and message (reason why bool value is true or false) along with JWT.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.UpdateFCMSettings(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Updates FCM setting in configSettings table if value is null or empty
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.AddDefaultPersonalpanelInUserProfile">
            <summary>
            For all user profiles - By default add personal panel permission 
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.assoPasswordUpdate(ESolve.Entities.DTOs.LoginDTO,System.String,System.Int64,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="loginDTO"></param>
            <param name="accessToken"></param>
            <param name="currentUserId"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.UpdatePassword(ESolve.Entities.DTOs.LoginDTO,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean,System.Boolean)">
            <summary>
            Method for updating employee's password. If user forgot his password, new password will be generate and send to user's email.
            Also method is used for sending advanced people access email.
            </summary>
            <param name="loginDTO">Passed object with new password value.</param>
            <param name="configuration">Configuration for app</param>
            <param name="sendForMobile">send for mobile</param>
            <param name="isFromMobileController">Indicate weather request come's from mobile controller</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.SendEmail(System.String,System.String,System.String,System.String,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Method is used for sending email to user.
            </summary>
            <param name="receiverEmail">Employee's email</param>
            <param name="password">Employee's password</param>
            <param name="username">Employee's username</param>
            <param name="name">Employee's name</param>
            <param name="configuration">Application's configuration</param>
            <param name="sendSystemAccessMail">Flag if manager is sending Advanced People access email.</param>
            <param name="customerName"></param>
            <param name="sendForMobile"></param>
            <param name="sendAccessDetailsMail"></param>
            <param name="sendAccessDetails"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is
            not valid.</exception>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when
            a composite format string is not well formed.</exception>
            <exception cref="T:System.InvalidOperationException">The exception that is thrown when a method call is invalid for the object&#39;s
            current state.</exception>
            <exception cref="T:System.ObjectDisposedException">The exception that is thrown when an operation is performed on a disposed object.</exception>
            <exception cref="T:System.Net.Mail.SmtpException">Represents the exception that is thrown when the System.Net.Mail.SmtpClient is
            not able to complete a Overload:System.Net.Mail.SmtpClient.Send or Overload:System.Net.Mail.SmtpClient.SendAsync
            operation.</exception>
            <exception cref="T:System.Net.Mail.SmtpFailedRecipientException">Represents the exception that is thrown when the System.Net.Mail.SmtpClient is
            not able to complete a Overload:System.Net.Mail.SmtpClient.Send or Overload:System.Net.Mail.SmtpClient.SendAsync
            operation to a particular recipient.</exception>
            <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">The exception that is thrown when email is sent using an System.Net.Mail.SmtpClient
            and cannot be delivered to all recipients.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GenerateNewToken(ESolve.Entities.DTOs.TokenRequestDTO,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            Method that generates Access Token.
            </summary>
            <param name="tokenRequest">Token taken from client's local storage.</param>
            <param name="_configuration">Application's configuration properties.</param>
            <param name="setLinkedAccountIndicator">Indicates whether or not the method should check if the User has a Linked Account.</param>
            <returns>Access Token.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.IsUsernameValid(ESolve.Utils.TokenUtils,System.String)">
            <summary>
            Check is passed username equal with logged in user
            </summary>
            <param name="tokenUtils"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.CreateAccessToken(ESolve.Entities.AbstractUser,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Method that creates Access Token for the passed User.
            </summary>
            <param name="user">User for which the method will create Access Token.</param>
            <param name="_configuration">Application's configuration properties.</param>
            <param name="setExpiryTime">Indicates whether or not the token should have its Expiration time set.</param>
            <param name="isAdmin">If client side wants to create api key for admin</param>
            <param name="tokenExpiryTime"></param>
            <returns>Access Token within the TokenResponseDTO object.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GenerateNewTokenUsingExpiryTime(ESolve.Entities.DTOs.TokenRequestDTO,Microsoft.Extensions.Configuration.IConfiguration,System.Int32)">
            <summary>
            Method that Generate access token using passed expiry time.
            </summary>
            <param name="tokenRequest"></param>
            <param name="_configuration"></param>
            <param name="tokenExpiryTime"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GetLinkedAccount(System.Int64,System.String)">
            <summary>
            Method that retrieves linked account for the passed User
            </summary>
            <param name="id">ID of the User who wants to switch between accounts.</param>
            <param name="role">Current Role of the User.</param>
            <returns>Linked Account if found, null otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.IsSuperAdmin(System.String)">
            <summary>
            Check is there super admin with passed username
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GetAccountByUsername(System.String)">
            <summary>
            Method that returns Employee based on the passed username.
            </summary>
            <param name="username">Username against which the Employee is being looked for.</param>
            <returns>Employee object.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GetSuperAdminByUsername(System.String)">
            <summary>
            Method that returns Employee based on the passed username.
            </summary>
            <param name="username">Username against which the Employee is being looked for.</param>
            <returns>Employee object.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GetRoleByUsername(System.String)">
            <summary>
            Method that returns User's role based on the passed User's username.
            </summary>
            <param name="username">User's username.</param>
            <returns>User's Role.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GetTokenExpiration">
            <summary>
            Method that returns TimeoutMinutes for the user's session length.
            </summary>
            <returns>User's session length in minutes</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.SendMailToEmployeeAndManager(ESolve.Entities.DTOs.LoginDTO,ESolve.Entities.Models.Employee,ESolve.Entities.Models.User,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            Sending email to the employee and user
            This method need to be called when employee and user has the same email addresses and end user forgot his password.
            </summary>
            <param name="loginDTO">LoginDTO object with data.</param>
            <param name="employee">Employee whose password will be changed and who will receive email.</param>
            <param name="user">User whose password will be changes and who will receive email. </param>
            <param name="configuration">App's configuration</param>
            <returns>Message to inform if email is sent or not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.SendMailToSuperAdmin(ESolve.Entities.DTOs.LoginDTO,ESolve.Entities.Models.SuperAdmin,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            Send password reset email to super admin user
            </summary>
            <param name="loginDTO"></param>
            <param name="superAdmin"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.CalculateExpireTime(ESolve.Utils.TokenUtils)">
            <summary>
            Method that return calculated expiry time.
            </summary>
            <param name="tokenUtils"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GetUserAndEmployeeCount">
            <summary>
            Get users and employees count which are not present in ASSO
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.RemoveMobileDeviceIdRecord(System.String,ESolve.Entities.AbstractUser,System.Boolean)">
            <summary>
            Method to remove mobile device id record associated with user or employee
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.Add(ESolve.Entities.Models.Token)">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.Update(ESolve.Entities.Models.Token)">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AccountManager.Delete(ESolve.Entities.Models.Token)">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.AdvancedSSOManager">
            <summary>
            Advanced SSO Manager
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="context">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.Get">
            <summary>
            Get Advanced SSO details
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.Update(ESolve.Entities.Models.AdvancedSSO)">
            <summary>
            Update advanced SSO details
            </summary>
            <param name="entity">advancedSSO entity</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.IsOrganizationHintEmpty(ESolve.Entities.Models.AdvancedSSO)">
            <summary>
            Check Is Organization Hint Empty
            </summary>
            <param name="advancedSSO"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.GetASSOConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Get all ASSO related Urls to be used in UI 
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.ESolve#Entities#Repository#IRepositoryBase{ESolve#Entities#Models#AdvancedSSO}#Get(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.Add(ESolve.Entities.Models.AdvancedSSO)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.Delete(ESolve.Entities.Models.AdvancedSSO)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AdvancedSSOManager.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.AssignAgencyManager">
            <summary>
            Manager for Assign Agency Feature
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.AssignAgencyManager._repositoryContext">
            <summary>
            DB context
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.GetAll(ESolve.Entities.Filters.AgencyFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)">
            <summary>
            Get items from tblAgencies or tblAgencyReasonsForCover
            </summary>
            <param name="agencyFilterModel">Filter for getting items from database.</param>
            <param name="url">Url of request</param>
            <param name="methodName">Methods's name</param>
            <param name="className">Class of methoda</param>
            <returns>Paged collection of IdNamDropDown object that presents items from tblAgencies or tblAgencyReasonsForCover based on Agency flag in agencyFilterModel.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.GetById(System.Boolean,System.Int64)">
            <summary>
            Getting agency or agency reason for cover with passed primary key
            </summary>
            <param name="isAgency">Flag that indicates if user is looking for agency or agency reason for cover</param>
            <param name="id">Primary key of agency or agency reason for cover</param>
            <returns>IdNameDropDownModel object with id and name</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.GetAgenciesAndAgencyReasonsForCover">
            <summary>
            Get agencies and agency rasons for cover
            </summary>
            <returns>AgencyComboValueDTO object with list of agencies and list of agency reasos for cover</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.Search(ESolve.Entities.DTOs.AgencySearchDTO)">
            <summary>
            Getting items for search from tblAgencies or tblAgencyReasonsToCover
            </summary>
            <param name="agencySearchDTO">AgencySearchDTO object with search term and indicator if user is looking for items from tblAgencies or from tblAgencyReasonsToCover.</param>
            <returns>List of IdNameDropDownModel object that represents items from tblAgencies or tblAgencyReasonsToCover</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.Add(ESolve.Entities.Models.IdNameDropDownModel,System.Boolean)">
            <summary>
            Adding entity into tblAgencies or agencyReasonForCover
            </summary>
            <param name="entity">Entity to add</param>
            <param name="isAgency">Flag if user is adding new agency or new agency reason for cover</param>
            <returns>True if entity is successfully added, false if something went wrong.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.Update(ESolve.Entities.Models.IdNameDropDownModel,System.Boolean)">
            <summary>
            Updating entity from tblAgencies or agencyReasonForCover
            </summary>
            <param name="entity">Entity to update</param>
            <param name="isAgency">Flag if user is updating agency or  agency reason for cover</param>
            <returns>True if entity is successfully updated, false if something went wrong.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.IsNameUnique(System.Boolean,ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Checking if name is name of agency or agency reason for cover is already in user
            </summary>
            <param name="isAgency">Flag if user is looking for agencies or agency reasons for cover.</param>
            <param name="idStringContentFilterModel">IdStringContentFilterModel object with id if this is called by adding action and content that represents name that will be check for unique.</param>
            <returns>True if name is unique, false if name is already in use.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.Delete(System.Boolean,System.Int64)">
            <summary>
            Removing agency or agency reason for cover from database
            </summary>
            <param name="isAgency">Flag if user is deleting for agencies or agency reasons for cover.</param>
            <param name="id">Entity's primary key</param>
            <returns>True if entity is removed, othwrwise returns false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.AssignAgency(ESolve.Entities.DTOs.AssignAgencyDTO,ESolve.Entities.DataManager.TemplateManager,ESolve.Entities.DataManager.JobManager,System.Int64)">
            <summary>
            Assigning agency on job or template job
            </summary>
            <param name="assignAgencyDTO">AssignAgencyDTO object with information about assigning agency on the job or template job.</param>
            <param name="templateManager">Manager for templates</param>
            <param name="jobManager">Manager for job</param>
            <param name="loggedInUserId">Logged-in user Id</param>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.UnAssignAgency(System.Boolean,System.Int64,ESolve.Entities.DataManager.TemplateManager)">
            <summary>
            UnAssigning agency on job or template job
            </summary>
            <param name="isTemplate">Indicator if unassign action is on template job or normaln job</param>
            <param name="id">AAgencyJobAssignment's or AgencyTemplateJobAssignment's primary key</param>
            <param name="templateManager">Manager for templates</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.Add(ESolve.Entities.Models.Agency)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.Delete(ESolve.Entities.Models.Agency)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.Update(ESolve.Entities.Models.Agency)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AssignAgencyManager.AuditLogForAgency(System.Collections.Generic.List{System.Tuple{System.Object,System.Object,System.Object}},ESolve.Entities.DataManager.JobManager,ESolve.Entities.Models.Job,System.Int64)">
            <summary>
            Audit log for agency
            </summary>
            <param name="dict"></param>
            <param name="jobManager"></param>
            <param name="job"></param>
            <param name="loggedInUserId"></param>
        </member>
        <member name="T:ESolve.Entities.DataManager.ASSOMigrationDetailsManager">
            <summary>
            Class contains methods related with Advanced SSO migration details
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.Add(ESolve.Entities.Models.ASSOMigrationDetails)">
            <summary>
            Add records
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.Delete(ESolve.Entities.Models.ASSOMigrationDetails)">
            <summary>
            Not implemented
            </summary>
            [ExcludeFromCodeCoverage]
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            [ExcludeFromCodeCoverage]
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.GetAllActiveRecords">
            <summary>
            Get all active records
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.GetAll">
            <summary>
            Get all records
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.GetMigrationDetailsAsExcel">
            <summary>
            Get migration details as excel
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.ClearOldRecords">
            <summary>
            Clear old records
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.Update(ESolve.Entities.Models.ASSOMigrationDetails)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.GetExcelFileName">
            <summary>
            File name
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ASSOMigrationDetailsManager.AuditLogForMigrationDetails(System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Audit log for user/employee migration details
            </summary>
            <param name="userID"></param>
            <param name="auditTrailManager"></param>
        </member>
        <member name="T:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager">
            <summary>
            Manager for attendance confirmations alerts
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager._repositoryContext">
            <summary>
            Db Context
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager._pushNotificationManager">
            <summary>
            Manager for push notifications
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.#ctor(ESolve.Entities.RepositoryContext,System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}})">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Context which will be injected into RepositoryContext variable.</param>
            <param name="serviceProvider">Service provider for notifications</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.SendAttendanceConfirmationAlerts(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for sending attendance confirmation alerts
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.UpdateAttendanceConfrimationAlertsAfterJobUpdate(System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext)">
            <summary>
            Updating time for sending attendance confirmation alert to the manager
            </summary>
            <param name="jobs">Updated jobs</param>
            <param name="repositoryContext">DB context</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.ReplyingToAttendanceConfrirmationAlert(System.Boolean,System.Int64,ESolve.Contracts.ILoggedInUser,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for generating notification and attendance confiramtion entry if employee has responed on attendance confirmation alert
            </summary>
            <param name="answer">Employee's answer on the attendance confirmation alert.</param>
            <param name="jobID">Job for attendance</param>
            <param name="user">Employee that is logged in</param>
            <param name="configuration">Configuration</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.GetAttendanceConfirmationsForPassedJobs(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            Get attendance confirmations alerts for passed jobs and employee
            Ths method is used for action where employee can do right-click on job that is in on calendar and press "attendance"
            This is avaialble on job where assigned employee
            </summary>
            <param name="jobHistoryIDs">Pointer to the Job's primary key</param>
            <param name="employeeID">Employee's primary key</param>
            <returns>List of lone worker check ins</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.GetAll(ESolve.Entities.Filters.AttendanceConfirmationFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Get all attendance confirmation from database
            </summary>
            <param name="filter">Filter for getting employees</param>
            <param name="url">Url for the page</param>
            <param name="methodName">Method name</param>
            <param name="className">Class name</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>PagedCollectionResponse with AttendanceConfirmationDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.CreateNotificationForAssignedEmployee(System.Int64,ESolve.Entities.Models.Job,System.String,System.String,System.DateTime)">
            <summary>
            Creating attendance confirmation notification for assigned employee
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="job">Job</param>
            <param name="dateFormat">Date format to show job's start date</param>
            <param name="nameOfTheFirstDayInWeek">The first day in week defined in schedule preferences</param>
            <param name="currentTime">Current date-time</param>
            <returns>Notification that will be send to an employee</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.CreateNotificationForAttendanceConfirmationManager(ESolve.Entities.Models.Employee,ESolve.Entities.Models.Job,System.String,System.String,System.Int64,System.DateTime)">
            <summary>
            Creating attendance confirmation notification for attendance confirmation manager
            </summary>
            <param name="employee">Employee object</param>
            <param name="job">Job</param>
            <param name="dateFormat">Date format to show job's start date</param>
            <param name="nameOfTheFirstDayInWeek">The first day in week defined in schedule preferences</param>
            <param name="managerID">Attendance manager's primary key</param>
            <param name="currentTime">Current time</param>
            <returns>Notification that will be send to an manager</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.CreateNotificationForAsweringOnAttendanceConfirmationAlert(ESolve.Entities.Models.Employee,ESolve.Entities.Models.Job,System.String,System.String,System.Int64,System.DateTime,System.Boolean)">
            <summary>
            Createing attednace confirmation alert to the manager when employee aswered no to to att conf
            </summary>
            <param name="employee">Employee object</param>
            <param name="job">Job</param>
            <param name="dateFormat">Date format to show job's start date</param>
            <param name="nameOfTheFirstDayInWeek">The first day in week defined in schedule preferences</param>
            <param name="managerID">Attendance manager's primary key</param>
            <param name="currentTime">Current time</param>
            <param name="answer">Employee's answer on attendance confirmation alert</param>
            <returns>Notification that will be send to an manager</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.Add(ESolve.Entities.Models.AttendanceConfirmation)">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.Update(ESolve.Entities.Models.AttendanceConfirmation)">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager.Delete(ESolve.Entities.Models.AttendanceConfirmation)">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.AuditTrailManager">
            <summary>
            Methods related with Audit trail
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.Add(ESolve.Entities.Models.AuditTrail,System.Int64)">
            <summary>
            Insert records in Audit trail table
            </summary>
            <param name="auditTrail"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.Add(ESolve.Entities.Models.AuditTrail)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.Delete(ESolve.Entities.Models.AuditTrail)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.Get(System.Int64)">
            <summary>
            NotImplemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.GetAll">
            <summary>
            Returns all Audit trail records
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.Update(ESolve.Entities.Models.AuditTrail)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.GetAll(ESolve.Entities.Filters.AuditTrailFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            getting all audit trail data
            </summary>
            <param name="filter"></param>
            <param name="url"></param>
            <param name="methodName"></param>
            <param name="className"></param>
            <param name="loggedInUser"></param>
            <returns>PagedCollectionResponse with AuditTrailDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.FormatDateTime(System.String,System.String,System.String,ESolve.Entities.Models.AuditTrail)">
            <summary>
            Format date time according to system preferences for audit trail
            </summary>
            <param name="dateTime"></param>
            <param name="dateFormat"></param>
            <param name="columnName"></param>
            <param name="audit"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.GetFunctionName(ESolve.Entities.Pagination.SampleFilterModel)">
            <summary>
            get function names based on search parameter
            </summary>
            <param name="filter"></param>
            <returns>list of function names</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AuditTrailManager.GetAuditTrailResult(System.DateTime,System.DateTime,System.Collections.Generic.List{ESolve.Entities.Models.AuditTrail})">
            <summary>
            get audit trail based on passed stratDate and EndDate
            </summary>
            <param name="stDate"></param>
            <param name="enDate"></param>
            <param name="audits"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.AutoSolveTimeManager">
            <summary>
            Manager for Auto solve time
            </summary>
            
        </member>
        <member name="M:ESolve.Entities.DataManager.AutoSolveTimeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            AutoSolveTimeManager constructor which initialize Repository context.
            </summary>
            <param name="context">Represents repository with which AutoSolveTimeManager will communicate.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.AutoSolveTimeManager.Get">
            <summary>
            Get auto solve time from database
            </summary>
            <returns>Auto solve time</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AutoSolveTimeManager.Update(System.Int32)">
            <summary>
            Method is used for updating time of auto solve
            </summary>
            <param name="time">New time of auto solve</param>
            <returns>True if value is updated, otherwiese returns false</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.AutoSolveTimeManager.Update(ESolve.Entities.Models.AutoSolveTime)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AutoSolveTimeManager.Add(ESolve.Entities.Models.AutoSolveTime)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AutoSolveTimeManager.Delete(ESolve.Entities.Models.AutoSolveTime)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AutoSolveTimeManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.AutoSolveTimeManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.AvailableJobsManager">
            <summary>
            Contains methods for available jobs
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AvailableJobsManager.#ctor">
            <summary>
            Constructor to initialize Available jobs manager
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.AvailableJobsManager.GetAllAvailableJobs(ESolve.Entities.Filters.AvailableJobsFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.JobOfferManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.DataManager.JobManager)">
            <summary>
            Get available jobs of logged in employee which includes offered job and jobs that are put on trade by other employees
            </summary>
        </member>
        <member name="T:ESolve.Entities.DataManager.BrokenRulesManager">
            <summary>
            Manager for broken rules
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.BrokenRulesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.BrokenRulesManager.Add(ESolve.Entities.Models.BrokenRule)">
            <summary>
            Add new Broken rule in database
            </summary>
            <param name="entity">Broken rule object</param>
            <returns>True if adding was succesfully done, false if not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.BrokenRulesManager.Delete(ESolve.Entities.Models.BrokenRule)">
            <summary>
            Delete exisit broken rule from tblBrokenRules
            </summary>
            <param name="entity">Broken rule object</param>
            <returns>True if deleting was succesffuly done, false if not</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.BrokenRulesManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.BrokenRulesManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.BrokenRulesManager.Update(ESolve.Entities.Models.BrokenRule)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.BrokenRulesManager.Add(System.Collections.Generic.List{ESolve.Entities.Models.BrokenRule})">
            <summary>
            This method is used for adding list of broken rules into database
            </summary>
            <param name="brokenRules"></param>
            <returns>True if adding is sucessfully added, otherwise return false.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.ClassManager">
            <summary>
            The main <c>Math</c> class.
            Contains all methods for performing basic math functions.
            <para>
            Add -> Adding new Class object into Database.
            See <see cref="M:ESolve.Entities.DataManager.ClassManager.Add(ESolve.Entities.Models.Class)"/> to add new Class.
            </para>
            <para>
            Delete -> Deleting existing Class from Database.
            See <see cref="M:ESolve.Entities.DataManager.ClassManager.Delete(ESolve.Entities.Models.Class)"/> to remove existing Class.
            </para>
            <para>
            Get
            <para>
            <list type="">
            <item>
            <term>Get Class from Database based on passed Id.</term>
            <description>See <see cref="M:ESolve.Entities.DataManager.ClassManager.Get(System.Int64)"/> in order to get Class by Id.</description>
            </item>
            <item>
            <term>Unique name</term>
            <description>Check if Class name in use.</description>
            </item>
            <item>
            <term>Add array of classes.</term>
            <description>Add passed array of classes.</description>
            </item>
            <item>
            <term>Update array of classes.</term>
            <description>Update passed array of classes. If in array is class which is not in database, it will be added.</description>
            </item>
            </list>
            </para>
            </para>
            <para>
            ComboValues -> Get all classes from Database in Id Name model.
            See <see cref="M:ESolve.Entities.DataManager.ClassManager.GetIdNameList"/> to see combovalues.
            </para>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            ClassManager constructor which initialize Repository context.
            </summary>
            <param name="context">Represents repository with which ClassManager will communicate.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.Add(ESolve.Entities.Models.Class)">
            <summary>
            Inserting new Class object into Database.
            </summary>
            <param name="entity">Represents object which we will insert</param>
            <returns>True if action is succeeded, otherwise ret value will be False.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.Add(ESolve.Entities.Models.Class[])">
            <summary>
            Inserts passed array of Class objects in Database table tblClasses.
            </summary>
            <param name="classes">Represents array of Class object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.Update(ESolve.Entities.Models.Class[])">
            <summary>
            Updates Class objects in Database table tblClasses with values passed inside array of Class objects in function argument.
            If classID does not exist, new row will be added.
            </summary>
            <param name="updatedClasses">Class objects with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.Delete(ESolve.Entities.Models.Class)">
            <summary>
            Delete existing Class from Database.
            </summary>
            <param name="entity">Represents Class object which will be deleted.</param>
            <returns>True if object is deleted, otherwise ret value will be False.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.Get(System.Int64)">
            <summary>
            Get Class from Database based on class Id.
            </summary>
            <param name="id">Represents Id in Database.</param>
            <returns>Class object from Database where Id is equal with passed, or null if object with passed Id doesn't exists in database.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.GetAll">
            <summary>
            Get All Class objects from Database.
            </summary>
            <returns>List of Class objects.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.Update(ESolve.Entities.Models.Class)">
            <summary>
            Update existing class in database with new values.
            </summary>
            <param name="entity">Class object with new values</param>
            <returns>True if Class is updated, false if it is not.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.GetIdNameList">
            <summary>
            Gets All objects from tblClasses in Database. Creates List of IdNameDropDownModel objects. In order to see model check <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/>
            </summary>
            <returns>List of IdNameDropDownModel objects</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ClassManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if Class Name is unique in Database table tblClasses.
            </summary>
            <param name="filter">Id and Location Name value</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.ConfigSettingsManager">
            <summary>
            Manager for ConfigSettings
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.Add(ESolve.Entities.Models.ConfigSettings)">
            <summary>
            Insert config settings details
            </summary>
            <param name="entity">ConfigSettings entity for insert</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.Delete(ESolve.Entities.Models.ConfigSettings)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.Get(System.Int64)">
            <summary>
            Not Implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.Get(System.String)">
            <summary>
            Not Implemented
            </summary>
            <param name="key">configuration settings key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.GetAll">
            <summary>
            Get all ConfigSettings from DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.Update(ESolve.Entities.Models.ConfigSettings)">
            <summary>
            Updating ConfigSettings
            </summary>
            <param name="entity">ConfigSettings entity for update</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.Add(System.Collections.Generic.List{ESolve.Entities.Models.ConfigSettings})">
            <summary>
            Insert config settings details
            </summary>
            <param name="configSettingsDTO">ConfigSettings list</param>
            <returns>True or false</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConfigSettingsManager.Update(System.Collections.Generic.List{ESolve.Entities.Models.ConfigSettings})">
            <summary>
            Update config settings details
            </summary>
            <param name="configSettingsDTO">ConfigSettings list</param>
            <returns>True or false</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ConstraintManager">
            <summary>
            ConstraintManager class contains all methods for performing Constraint data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new Constraint object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing Constraint object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing Constraint object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one Constraint object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all Constraint objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all Constraint objects from Database in DropDown Form.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.Add(ESolve.Entities.Models.Constraint)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.Delete(ESolve.Entities.Models.Constraint)">
            <summary>
            Method removes all connected entites and deletes Constraint eneiey from database.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.Get(System.Int64)">
            <summary>
            Return Constraint from database where Primary Key is equal with passed id
            </summary>
            <param name="id">Constraint Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.GetAsNoTracking(System.Int64)">
            <summary>
            Return Constraint from database where Primary Key is equal with passed id
            </summary>
            <param name="id">Constraint Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.GetAll">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.Update(ESolve.Entities.Models.Constraint)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.GetAllConstraintRuleInComboForm">
            <summary>
            Gets all Constraint Rules from database in IdNameDropDownModel form.
            See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.
            </summary>
            <returns>All ConstraintRules Ids and Names order by ConstraintRuleName.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.GetConstraintsListPreview(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            This method returns all Schedule Constraints
            </summary>
            <param name="searchFilter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.GetConstraintFormBasedOnConstraintRuleAndSchedule(ESolve.Entities.Filters.ScheduleConstraintFilterModel,ESolve.Contracts.ILoggedInUser)">
            <summary>
            
            </summary>
            <param name="filterModel"></param>
            <param name="loggedInUser"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.IsNameUnique(ESolve.Entities.Filters.ConstraintNameUniqueFilterModel)">
            <summary>
            From passed filter we get ScheduleId,Constraint Id and Constraint Name. 
            If ConstraintId is grather from 0, then we check Constraint Name value for all constraints on passed Schedule 
            where ConstraintId != passed ConstraintId. 
            If passed ConstraintId is equal with 0. Then we check ConstraintName value for all employees, becouse user want's to check ConstraintName for unsaved Constraint.
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.ConstraintNameUniqueFilterModel"/> for details.</param>
            <returns>True if Name is not occupied or False if that Name is occupied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.ChangeConstraintFlag(System.Int64)">
            <summary>
            Method finds Constraint based on passed Id, changes IsConstraintActive flag and returns all Constraints from that schedule
            </summary>
            <param name="id">Constraint Primary Key</param>
            <returns>Null if constraint with passed Id doesn't exists in DB, otherwise list of all constraints</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.GetConstraintIsActiveFlag(System.Int64)">
            <summary>
            For passed constraintID method return constraints IsActive flag
            </summary>
            <param name="constraintID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.Add(ESolve.Entities.DTOs.FormSpecificationDTO)">
            <summary>
            For passed form we generate appropiate Constraint and store it in database
            </summary>
            <param name="form">Form with data needed for generating constraint UI and values which user have populated</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.GetAllConstraints(ESolve.Entities.RepositoryContext)">
            <summary>
            Returns all specified constraints in application
            </summary>
            <param name="repositoryContext">Context for accesing database</param>
            <returns>Key Value Collection, key is database primary key, and value is constraint</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.GetRepositoryContext">
            <summary>
            Getting DB context of current repository
            </summary>
            <returns>Repository Context</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ConstraintManager.RemoveEntitesFromPreviousRule(System.Int64)">
            <summary>
            Removing entities in relationship in case where constraint's rule is changed
            </summary>
            <param name="constraintID">Constraint's primary key</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.CostCodeManager">
            <summary>
            CostCodeManager class contains all methods for performing CostCode data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new CostCode object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing CostCode object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing CostCode object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one CostCode object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all CostCode objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all CostCode objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Unique name</term>
            <description>Check if passed name of cost code already exists.</description>
            </item>
            <item>
            <term>Add array of cost codes.</term>
            <description>Add passed array of cost codes.</description>
            </item>
            <item>
            <term>Update array of cost codes.</term>
            <description>Update passed array of cost codes. If cost code in array doesn't exist in database, it will be added.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.Add(ESolve.Entities.Models.CostCode)">
            <summary>
            Inserts passed CostCode object in Database table tblCostCodes.
            </summary>
            <param name="entity">Represents CostCode object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.Add(ESolve.Entities.Models.CostCode[])">
            <summary>
            Inserts passed array of CostCode objects in Database table tblCostCodes.
            </summary>
            <param name="costCodes">Represents array of CostCode object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.Update(ESolve.Entities.Models.CostCode[])">
            <summary>
            Updates CostCode objects in Database table tblCostCodes with values passed inside array of CostCode objects in function argument.
            If costCodeID does not exist, new row will be added.
            </summary>
            <param name="updatedCostCodes">CostCode objects with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.Delete(ESolve.Entities.Models.CostCode)">
            <summary>
            Removes passed CostCode object from Database table tblCostCodes.
            </summary>
            <param name="entity">Represents CostCode object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.Get(System.Int64)">
            <summary>
            Returns CostCode object from Database table tblCostCodes where Id is equal with passed value.
            </summary>
            <param name="id">CostCode Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.GetAll">
            <summary>
            Returns all CostCode objects from Database table tblCostCodes.
            </summary>
            <returns>List of CostCode objects. See <see cref="T:ESolve.Entities.Models.CostCode"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.Update(ESolve.Entities.Models.CostCode)">
            <summary>
            Updates CostCode object values in Database table tblCostCodes with values passed inside CostCode object in function argument.
            </summary>
            <param name="entity">CostCode object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.GetIdNameList">
            <summary>
            This method return all CosteCode objects from Database table tblCostCodes in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CostCodeManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if Cost code name is unique in Database table tblCostCodes.
            </summary>
            <param name="filter">Id and Cost code Name value</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.CustomDataLookupManager">
            <summary>
            CustomDataLookupManager class contains all methods for performing CustomDataLookup data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new CustomDataLookup object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing CustomDataLookup object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing CustomDataLookup object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one CustomDataLookup object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all CustomDataLookup objects from Database.</description>
            </item>
            <item>
            <term>Check is Name unique</term>
            <description>Check is a CustomDataLookup Name unique for passed CustomData</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataLookupManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataLookupManager.Add(ESolve.Entities.Models.CustomDataLookup)">
            <summary>
            Inserts passed CustomDataLookup object in Database table tblCustomDataLookups.
            </summary>
            <param name="entity">CustomDataLookup object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataLookupManager.Delete(ESolve.Entities.Models.CustomDataLookup)">
            <summary>
            Removes passed CustomDataLookup object from Database table tblCustomDataLookups.
            </summary>
            <param name="entity">Represents CustomDataLookup object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataLookupManager.Get(System.Int64)">
            <summary>
            Returns CustomDataLookup object from Database table tblCustomDataLookups where Id is equal with passed value.
            </summary>
            <param name="id">CustomDataLookup Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataLookupManager.GetAll">
            <summary>
            NotImplemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataLookupManager.Update(ESolve.Entities.Models.CustomDataLookup)">
            <summary>
            Updates CustomDataLookup object values in Database table tblCustomDataLookups with values passed inside CustomDataLookup object in function argument.
            </summary>
            <param name="entity">CustomDataLookup object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataLookupManager.GetCustomDataLookupsForCustomData(System.Int64)">
            <summary>
            Gets all CustomDataLookup for passed CustomData Id. Items are ordered by Name
            </summary>
            <param name="id">CustomData Primary Key</param>
            <returns>All CustomDataLookup Items which belongs passed CustomData</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference is passed
            to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataLookupManager.IsCustomDataNameUnique(ESolve.Entities.Filters.CustomDataLookupFilterModel)">
            <summary>
            From passed filter we get Id and Name. If Id is grather from 0, then we check Name value for all CustomDataLookups where Id != passed Id. 
            If passed Id is equal with 0. Then we check name value for all CustomDataLookups, becouse user want's to check name for unsaved CustomDataLookups.
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.CustomDataLookupFilterModel"/> for details.</param>
            <returns>True if username is not occupied or False if that username is occupied.</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.CustomDataManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.CustomDataManager._repositoryContext">
            <summary>
            DbContext
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.Add(ESolve.Entities.Models.CustomData)">
            <summary>
            Inserts passed CustomData object in Database table tblCustomDatas.
            </summary>
            <param name="entity">Represents CustomData object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.Delete(ESolve.Entities.Models.CustomData)">
            <summary>
            Method removes passed CustomData from Database. Also this method will remove all connected items over foreign key with passed entity
            </summary>
            <param name="entity">CustomData object which will be removed</param>
            <returns>True if action is sucessfull, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.Get(System.Int64)">
            <summary>
            Returns CustomData object from Database table tblCustomDatas where Id is equal with passed value.
            </summary>
            <param name="id">CustomData Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.Update(ESolve.Entities.Models.CustomData)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.Update(ESolve.Entities.DTOs.CustomDataAddEditDTO)">
            <summary>
            Method gets data from CustomDataAddEditDTO and update CustomData or CustomDataLookups
            </summary>
            <param name="editDTO">CustomDataAddEditDTO with values which will be updated</param>
            <returns>True if all items are updated otherwise false.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.Add(ESolve.Entities.Models.CustomData,ESolve.Entities.DTOs.CustomDataAddEditDTO)">
            <summary>
            Method saves CustomData and after that we populate customDataLookup Table with elements
            </summary>
            <param name="customData">CustomData object</param>
            <param name="customDataAddEditDTO">CustomDataDTO which contains CustomDataLookup</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.GetAllInArray">
            <summary>
            Returns All CustomData in Array. Array Items are CustomDataListDTO. See <see cref="T:ESolve.Entities.DTOs.CustomDataListDTO"/> for model details
            </summary>
            <returns>Returns All CustomData in Array Sorted by CustomData name.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.IsCustomDataAvailableForDelete(System.Int64)">
            <summary>
            Method check does passed Id is in any of Schedule, SubGroup, CustomDataLookup or Job CustomData Tabels. If it is referenced in any method will return true.
            </summary>
            <param name="id">Custom Data Primary key</param>
            <returns>False if passed id is not referenced in other tabels, true if it is.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference is passed
            to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting,
            or conversion operation in a checked context results in an overflow..</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.IsNameUnique(ESolve.Entities.Filters.LongStringFilter)">
            <summary>
            From passed filter we get Id and name. If Id is grather from 0, then we check name value for all custom datas where Id != passed Id. 
            If passed Id is equal with 0. Then we check name value for all customdatas, becouse user want's to check name for unsaved customdata.
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.LongStringFilter"/> for details.</param>
            <returns>True if name is not occupied or False if that name is occupied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.GetCustomDatas">
            <summary>
            Get all custom datas with custom data type and their lookups
            See <see cref="T:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataComboValuesDTO"/> for more details.
            </summary>
            <returns>List of CustomDataDTO objects.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataManager.CheckEmployeetoCustomDataIntegrity(System.Collections.Generic.List{ESolve.Entities.Models.CustomData},System.Collections.Generic.List{ESolve.Entities.Models.CustomDataLookup})">
            <summary>
            Check Employee data lookup fields and if any new field found which is not in Custom data lookup field, then replicate.
            </summary>
            <param name="customDatas"></param>
            <param name="customDatasLookups"></param>
        </member>
        <member name="T:ESolve.Entities.DataManager.CustomDataTypesManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataTypesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataTypesManager.Add(ESolve.Entities.Models.CustomDataType)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataTypesManager.Delete(ESolve.Entities.Models.CustomDataType)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataTypesManager.Get(System.Int64)">
            <summary>
            NotImplemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataTypesManager.GetAll">
            <summary>
            NotImplemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataTypesManager.Update(ESolve.Entities.Models.CustomDataType)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.CustomDataTypesManager.GetIdNameList">
            <summary>
            Gets All CustomDataTypes from database in list of IdNameDropDownModel objects. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for more details.
            </summary>
            <returns>List of IdNameDropDownModel objects.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.DepartmentManager">
            <summary>
            DepartmentManager class contains all methods for performing Department data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new Department object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing Department object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing Department object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one Department object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all Department objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all Department objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Unique name</term>
            <description>Check if Class name in use.</description>
            </item>
            <item>
            <term>Add array of classes.</term>
            <description>Add passed array of classes.</description>
            </item>
            <item>
            <term>Update array of classes.</term>
            <description>Update passed array of class. If in array is class which is not in database, it will be added.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.Add(ESolve.Entities.Models.Department)">
            <summary>
            Inserts passed Department object in Database table tblDepartments.
            </summary>
            <param name="entity">Represents Department object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.Add(ESolve.Entities.Models.Department[])">
            <summary>
            Inserts passed array of Department objects in Database table tblDepartments.
            </summary>
            <param name="departments">Represents array of department objects which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.Update(ESolve.Entities.Models.Department[])">
            <summary>
            Updates department objects in Database table tblDepartments with values passed inside array of Department objects in function argument.
            If departmentID does not exist, new row will be added.
            </summary>
            <param name="updatedDepartments">Department objects with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.Delete(ESolve.Entities.Models.Department)">
            <summary>
            Removes passed Department object from Database table tblDepartments.
            </summary>
            <param name="entity">Represents Department object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.Get(System.Int64)">
            <summary>
            Returns Department object from Database table tblDepartments where Id is equal with passed value.
            </summary>
            <param name="id">Department Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.GetAll">
            <summary>
            Returns all Department objects from Database table tblDepartments.
            </summary>
            <returns>List of Department objects. See <see cref="T:ESolve.Entities.Models.CostCode"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.Update(ESolve.Entities.Models.Department)">
            <summary>
            Updates Department object values in Database table tblDepartments with values passed inside Department object in function argument.
            </summary>
            <param name="entity">Department object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.GetIdNameList">
            <summary>
            This method return all Department objects from Database table tblDepartments in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DepartmentManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if Department Name unique in Database table tblDepartments.
            </summary>
            <param name="filter">Id and Department Name value</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.DivisionManager">
            <summary>
            DivisionManager class contains all methods for performing Division data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new Division object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing Division object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing Division object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one Division object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all Division objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all Division objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Unique name</term>
            <description>Check if Division name in use.</description>
            </item>
            <item>
            <term>Add array of divisiions.</term>
            <description>Add passed array of divisions.</description>
            </item>
            <item>
            <term>Update array of divisions.</term>
            <description>Update passed array of division. If in array is division which is not in database, it will be added.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.Add(ESolve.Entities.Models.Division)">
            <summary>
            Inserts passed Division object in Database table tblDivisions.
            </summary>
            <param name="entity">Represents Division object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.Add(ESolve.Entities.Models.Division[])">
            <summary>
            Inserts passed array of Division objects in Database table tblDivisions.
            </summary>
            <param name="divisions">Represents array of Division object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.Update(ESolve.Entities.Models.Division[])">
            <summary>
            Updates Division objects in Database table tblDivisions with values passed inside array of Division objects in function argument.
            If divisionID does not exist, new row will be added.
            </summary>
            <param name="updatedDivisions">Division objects with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.Delete(ESolve.Entities.Models.Division)">
            <summary>
            Removes passed Division object from Database table tblDivisions.
            </summary>
            <param name="entity">Represents Division object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.Get(System.Int64)">
            <summary>
            Returns Division object from Database table tblDivisions where Id is equal with passed value.
            </summary>
            <param name="id">Division Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.GetAll">
            <summary>
            Returns all Division objects from Database table tblDivisions.
            </summary>
            <returns>List of Division objects. See <see cref="T:ESolve.Entities.Models.Division"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.Update(ESolve.Entities.Models.Division)">
            <summary>
            Updates Division object values in Database table tblDivisions with values passed inside Division object in function argument.
            </summary>
            <param name="entity">Division object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.GetIdNameList">
            <summary>
            This method return all Division objects from Database table tblDivisions in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.DivisionManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if Division Name is unique in Database table tblDivisions.
            </summary>
            <param name="filter">Id and Division Name value</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.EmailSettingsManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmailSettingsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmailSettingsManager.CheckEmail(ESolve.Entities.Models.EmailSettings)">
            <summary>
            Sending email to check if email is valid or not
            </summary>
            <param name="emailSettings">Email settings</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when
            a composite format string is not well formed.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmailSettingsManager.Update(ESolve.Entities.Models.EmailSettings)">
            <summary>
            Updates EmailSettings object values in Database table tblEmailSettings with values passed inside EmailSettings object in function argument.
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmailSettingsManager.Get">
            <summary>
            Method for getting Email settings from database.
            </summary>
            <returns>Email settings.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmailSettingsManager.Add(ESolve.Entities.Models.EmailSettings)">
            <summary>
            Adding email settings into database
            </summary>
            <param name="entity">Email settings object that will be added into database</param>
            <returns>True if email settings are added successfully, otherwise returns false.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmailSettingsManager.Delete(ESolve.Entities.Models.EmailSettings)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmailSettingsManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmailSettingsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.EmployeeAbsenceManager">
            <summary>
            Manager for employee absences
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            AbsenceManager constructor which initialize Repository context.
            </summary>
            <param name="context">Represents repository with which AbsenceManager will communicate.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.Add(ESolve.Entities.Models.EmployeeAbsence)">
            <summary>
            Inserts passed Absence object in Database table tblAbsences.
            </summary>
            <param name="entity">Represents Absence object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.Delete(ESolve.Entities.Models.EmployeeAbsence)">
            <summary>
            This method removes passed EmployeeAbsence From database
            </summary>
            <param name="entity">EmployeeAbsence which will be deleted</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.Get(System.Int64)">
            <summary>
            For passed Id method finds Absence with that primary key
            </summary>
            <param name="id">Absence primary key</param>
            <returns>Returns founded object or null if don't exists</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.GetAll">
            <summary>
            NotImplementer
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.Update(ESolve.Entities.Models.EmployeeAbsence)">
            <summary>
            NotImplementer
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.GetListAbsences(ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO,System.String)">
            <summary>
            For passed employee primary key and date range passed in filter. Method will pull all absences for passed employee in passed range
            </summary>
            <param name="filter">Containts EmployeeID, and Date Range for absences</param>
            <param name="role">Role name of current logged in user</param>
            <returns>List Of Absences Ordered by Absence Start descending</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.GetAbsenceStatuses">
            <summary>
            Get All Absence Statuses from Database
            </summary>
            <returns>List of AbsenceStatusesDTO in alphabeticly order</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.GetAbsenceFromRangeForEmployee(System.Int64,ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            Get EmployeeAbsence from passed parameteres
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="range">Selected range</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.GetAuthorisationList(ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.String,System.Int64)">
            <summary>
            Method get wanted count of employees which satisfies searchTerm criteria. Generate Next and Previous Page link.
            </summary>
            <param name="filter">Employee Filter with data for filtering.</param>
            <param name="url">Url which invoked method</param>
            <param name="methodName">Caller Method name</param>
            <param name="className">Caller class name</param>
            <param name="role"></param>
            <param name="userID"></param>
            <returns>PagedCollectionResponse EmployeeSearchDTO of Employees. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/> and <see cref="T:ESolve.Entities.DTOs.EmployeeSearchDTO"/> for more details. </returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.GetAuthorisationList(System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method get wanted count of employees which satisfies searchTerm criteria. Generate Next and Previous Page link.
            </summary>
            <param name="imageSize">Image Size Primary Key</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>PagedCollectionResponse EmployeeSearchDTO of Employees. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/> and <see cref="T:ESolve.Entities.DTOs.EmployeeSearchDTO"/> for more details. </returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.GenerateAndSaveEmployeeNotificationForAbsenceRequest(ESolve.Entities.Models.AbsenceRequest,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.AbsenceCodeManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.PushNotifications.AbsenceNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method generate user notification for passsed absencerequest
            </summary>
            <param name="absenceRequest">AbsenceRequest absenceRequest</param>
            <param name="employeeManager">Manager for employees</param>
            <param name="absenceCodeManager">Manager for absence codes</param>
            <param name="userManager">Manager for users</param>
            <param name="absenceNotificationManager">Manager for absence notifications</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.Add(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.AbsenceCreateUpdateDTO,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.AbsenceCodeManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.PushNotifications.AbsenceNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adding new absence requst
            </summary>
            <param name="loggedInUser">Current logged in user</param>
            <param name="absenceDTO">Object with data</param>
            <param name="absenceRequestManager">Manager for absences</param>
            <param name="employeesManager">Manager for employees</param>
            <param name="absenceCodeManager">Manager for absence codes</param>
            <param name="userManager">Manager for users</param>
            <param name="absenceNotificationManager">Manager for absence notifications</param>
            <param name="configuration">Configuration</param>
            <returns>True if absence request is successfully added, otherwise return false.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeAbsenceManager.Update(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.AbsenceCreateUpdateDTO,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.PushNotifications.AbsenceNotificationManager,ESolve.Entities.DataManager.UserAbsenceManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.AbsenceCodeManager,ESolve.Entities.DataManager.UserManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Updating absencce
            </summary>
            <param name="loggedInUser">Logged in user</param>
            <param name="absenceDTO">Absence object for updating</param>
            <param name="absenceRequestManager">Manager for absence requests</param>
            <param name="absenceNotificationManager">Manager for absnece notifications</param>
            <param name="userAbsenceManager">Manager for user's absences</param>
            <param name="employeeManager">Manager for employees</param>
            <param name="absenceCodeManager">Manager for absence codes</param>
            <param name="userManager">Manager for users</param>
            <param name="configuration">Configuration</param>
            <returns>Updated absence request</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.EmployeeDataManager">
            <summary>
            Manager for employee data's bussiness logic
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.EmployeeDataManager._repositoryContext">
            <summary>
            Context which will be injected in RepositoryContext
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeDataManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeDataManager.Add(ESolve.Entities.DTOs.EmployeeData)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeDataManager.Delete(ESolve.Entities.DTOs.EmployeeData)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeDataManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeDataManager.GetAll(System.Int64)">
            <summary>
            The method is used to list all organizational groups, with all their values
            </summary>
            <param name="userID">Represents current account's ID.</param>
            <returns>Returns list of EmployeeData object with list of each organizational group</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeDataManager.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeDataManager.Update(ESolve.Entities.DTOs.EmployeeData)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.EmployeeImagesManager">
            <summary>
            EmployeeImageManager class contains all methods for performing EmployeeImage data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new EmployeeImage object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing EmployeeImage object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing EmployeeImage object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one EmployeeImage object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all EmployeeImage objects from Database.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeImagesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeImagesManager.Add(ESolve.Entities.Models.UserImage)">
            <summary>
            Inserts passed EmployeeImage object in Database table tblEmployeeImages.
            </summary>
            <param name="entity">Represents EmployeeImage object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeImagesManager.Delete(ESolve.Entities.Models.UserImage)">
            <summary>
            Removes passed EmployeeImage object from Database table tblEmployeeImages.
            </summary>
            <param name="entity">Represents EmployeeImage object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeImagesManager.Get(System.Int64)">
            <summary>
            Returns EmployeeImage object from Database table tblEmployeeImages where Id is equal with passed value.
            </summary>
            <param name="id">EmployeeImage Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeImagesManager.GetAll">
            <summary>
            Returns all EmployeeImage objects from Database table tblEmployeeImages.
            </summary>
            <returns>List of EmployeeImage objects. See <see cref="T:ESolve.Entities.Models.UserImage"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeImagesManager.Update(ESolve.Entities.Models.UserImage)">
            <summary>
            Updates EmployeeImage object values in Database table tblEmployeeImages with values passed inside EmployeeImage object in function argument.
            </summary>
            <param name="entity">EmployeeImage object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager">
            <summary>
            EmployeeSchedHrsStatusManager class contains all methods for performing EmployeeSchedHrsStatus data functions.
            <list type="bullet">
            <item>
            <term>Update</term>
            <description>Updating existing EmployeeSchedHrsStatus object in Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all EmployeeSchedHrsStatus objects from Database.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager.GetAll">
            <summary>
            Returns all EmployeeSchedHrs Status objects from Database table tblEmployeeSchedHrsStatuses.
            </summary>
            <returns>List of EmployeeSchedHrs Status objects. See <see cref="T:ESolve.Entities.Models.EmployeeSchedHrsStatus"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager.Update(ESolve.Entities.Models.EmployeeSchedHrsStatus)">
            <summary>
            Updates EmployeeSchedHrs Status object values in Database table tblEmployeeSchedHrsStatuses 
            with values passed inside EmployeeSchedHrs Status object in function argument.
            </summary>
            <param name="entity">EmployeeSchedHrs Status object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager.ResetColorToDefault(System.Int64)">
            <summary>
            Updates EmployeeSchedHrs status color to default color.
            </summary>
            <param name="id">EmployeeSchedHrs Status Primary Key.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager.Delete(ESolve.Entities.Models.EmployeeSchedHrsStatus)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager.Get(System.Int64)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager.Add(ESolve.Entities.Models.EmployeeSchedHrsStatus)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeSchedHrsStatusManager.GetEmployeeSchedHrsStatusName(System.String)">
            <summary>
            For passed employeeSchedHrsStatusName find employeeSchedHrsStatus in database and return it
            </summary>
            <param name="employeeSchedHrsStatusName">EmployeeSchedHrsStatus unique name</param>
            <returns>EmployeeSchedHrsStatus for passed name</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.EmployeesManager">
            <summary>
            Managing employee data.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="context">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetAll">
            <summary>
            Gets All Employees with connected entities from Database. See <see cref="T:ESolve.Entities.Models.Employee"/> for details about model.
            </summary>
            <returns>List of Employee objects. See <see cref="T:ESolve.Entities.Models.Employee"/> for details.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.Get(System.Int64)">
            <summary>
            Method goes in Database and try to find employee with passed Id.
            </summary>
            <param name="id">Represents Primary Key in database of wanted Employee.</param>
            <returns>Employee where Id is equal with passed id. See <see cref="T:ESolve.Entities.Models.Employee"/> for details.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetByUsername(System.String)">
            <summary>
            Get employee by passed username
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeForIntegrations(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetAllowedTradeFieldValue(System.Int64)">
            <summary>
            Getting value of allowed trade filed for passed employee
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <returns>True if value of field is true, otherwis false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.Get(System.Int64,ESolve.Entities.Pagination.EmployeeFilterModel,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method try to find employee in database based on passed Id. From filter method gets size of wanted image. If image with that name exists in database,
            method will lookup for employee image if it exists otherwise[employee image or image with specified size doesn't exists] proeprty image will be NULL.
            </summary>
            <param name="id">Represents employee Id in database table tblEmployees.</param>
            <param name="sampleFilterModel"></param>
            <param name="loggedInUser"></param>
            <returns>Employee object where id is equal with passed. If Any.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.Add(ESolve.Entities.DTOs.EmployeeDTO,System.Int64)">
            <summary>
            Method inserts in Database passed Employee. 
            If employee is sucessfully saved and image is passed, method will resize passed image and store it in Database.
            After adding new employee, method will add new employee in tblSkillMatrices.
            </summary>
            <param name="employee">Employee which will be added in Database.</param>
            <param name="userId">User Id</param>
            <returns>True if Employee is sucessfully added in tblEmployees 
            and sucessfully added in tblSkillMatrices, otherwise False will be returned.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.AddFromIntegration(ESolve.Entities.DTOs.EmployeeDTO,System.Int64)">
            <summary>
            Method inserts in Database passed Employee. 
            If employee is sucessfully saved and image is passed, method will resize passed image and store it in Database.
            After adding new employee, method will add new employee in tblSkillMatrices.
            </summary>
            <param name="employee">Employee which will be added in Database.</param>
            <param name="userId">logged In user Id</param>
            <returns>True if Employee is sucessfully added in tblEmployees 
            and sucessfully added in tblSkillMatrices, otherwise False will be returned.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetImageCountForEmployeeID(System.Int64)">
            <summary>
            Returns count of EmployeeImages in tblEmployeeImages where EmployeeId is equal with passed value.
            </summary>
            <param name="id">Id of employee</param>
            <returns>Count of images where EmployeeId is equal with passed value.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.Update(ESolve.Entities.DTOs.EmployeeDTO,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.PushNotificationManager,ESolve.Contracts.ILoggedInUser,Microsoft.Extensions.Configuration.IConfiguration,System.Collections.Generic.List{ESolve.Entities.DTOs.EmployeeAvailabilityDTO})">
            <summary>
            Method find Employee in database and set up new values which are passed in Employee object.
            </summary>
            <param name="updatedEmployee">Employee with new values.</param>
            <param name="tradeManager">EManager for trade offers</param>
            <param name="pushNotificationManager">Manager for notifications</param>
            <param name="loggedInUser">Manager for notifications</param>
            <param name="configuration"></param>
            <param name="employeeAvailability">Employee Availability</param>
            <returns>True if action is sucessfull, otherwise False.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.UpdateEmployeeViaAPIIntegration(ESolve.Entities.DTOs.EmployeeDTO,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.PushNotificationManager,ESolve.Contracts.ILoggedInUser,Microsoft.Extensions.Configuration.IConfiguration,System.Int64)">
            <summary>
            Method find Employee in database and set up new values which are passed in Employee object.
            </summary>
            <param name="updatedEmployee">Employee with new values.</param>
            <param name="tradeManager">EManager for trade offers</param>
            <param name="pushNotificationManager">Manager for notifications</param>
            <param name="loggedInUser">Manager for notifications</param>
            <param name="configuration"></param>
            <param name="userId">User Id</param>
            <returns>True if action is successful, otherwise False.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.UpdateEmployeeConnectionId(ESolve.Entities.Models.Employee)">
            <summary>
            Method for update employee connectionId
            </summary>
            <param name="employee"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.Delete(ESolve.Entities.Models.Employee)">
            <summary>
            Method removes Employee from tblEmployees and objects from connected tables where EmployeeID is required.
            </summary>
            <param name="entity">Employee which will be removed</param>
            <returns>True if action is sucessfull, otherwise False.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.AssignEmployeeProfileBulkUpdate(ESolve.Entities.DTOs.EmployeeProfileDTO)">
            <summary>
            Method for assgin new employee profile to employees.
            </summary>s
            <param name="employeeProfileDTO"></param>
            <returns>True if action is sucessfull, otherwise False.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.UpdateAdvancedId(System.Collections.Generic.List{ESolve.Entities.Models.Employee})">
            <summary>
            Update advancedId of employee
            </summary>
            <param name="employees"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetAll(ESolve.Entities.Pagination.EmployeeFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method get wanted count of employees which satisfies searchTerm criteria. Generate Next and Previous Page link.
            </summary>
            <param name="sampleFilterModel">Employee Filter with data for filtering.</param>
            <param name="url">Url which invoked method</param>
            <param name="methodName">Caller Method name</param>
            <param name="className">Caller class name</param>
            <param name="loggedInUser"></param>
            <returns>PagedCollectionResponse EmployeeSearchDTO of Employees. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/> and <see cref="T:ESolve.Entities.DTOs.EmployeeSearchDTO"/> for more details. </returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeFilters(ESolve.Entities.Pagination.SampleFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.String)">
            <summary>
            This method is used for getting all Employee filtering and searching parameters
            </summary>
            <param name="filter">Filter for employees.</param>
            <param name="url">Url for the next page</param>
            <param name="methodName">Mthod's name</param>
            <param name="className">Class's name</param>
            <param name="field">Filter fields</param>
            <returns>PagedCollectionResponse of EmployeeFilterDTO with items to display with information about next page.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetIdNameListForUsers">
            <summary>
            Gets All Users from database in list of IdNameDropDownModel objects. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for more details.
            </summary>
            <returns>List of IdNameDropDownModel objects.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.IsEmaiOccupied(ESolve.Entities.Filters.IdStringContentFilterModel,System.Boolean)">
            <summary>
            From passed filter we get Id and email. If Id is grather from 0, then we check email value for all employees where Id != passed Id. 
            If passed Id is equal with 0. Then we check email value for all employees, becouse user want's to check email for unsaved employee.
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.IdStringContentFilterModel"/> for details.</param>
            <param name="fromManageAccount">If received control from Manage account workflow</param>
            <returns>True if email is not occupied or False if that email is occupied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeByEmailId(System.String)">
            <summary>
            
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.IsEmployeeNumberUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            From passed filter we get Id and employee number. If Id is grather from 0, then we check employee number value for all employees where Id != passed Id. 
            If passed Id is equal with 0. Then we check employee number value for all employees, becouse user want's to check employee number for unsaved employee.
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.IdStringContentFilterModel"/> for details.</param>
            <returns>True if employee number is not occupied or False if that employee number is occupied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.IsEmployeeUsernameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            From passed filter we get Id and username. If Id is grather from 0, then we check username value for all employees where Id != passed Id. 
            If passed Id is equal with 0. Then we check username value for all employees, becouse user want's to check username for unsaved employee.
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.IdStringContentFilterModel"/> for details.</param>
            <returns>True if username is not occupied or False if that username is occupied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeesForCriteria(System.Boolean,System.String,System.String,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method returns HashSet of Employees which satisfies passed criteria.
            </summary>
            <param name="withEmployeeNumber">Indicator will method search employee number or employee name and surname.</param>
            <param name="columnName">Column name based on which we will sort results</param>
            <param name="sortDirection">Asceding or descending</param>
            <param name="searchTerm">Search criteria</param>
            <param name="searchEmployeesFor"></param>
            <param name="loggedInUser">Represents current account.</param>
            <returns>Employee HashSet</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.TrimValues(ESolve.Entities.Models.Employee)">
            <summary>
            Trim string values
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.UpdateEmployeeAvailability(System.Collections.Generic.List{ESolve.Entities.DTOs.EmployeeAvailabilityDTO})">
            <summary>
            Update employee availability for specific employee
            </summary>
            <param name="employeeAvailabilityDTO"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.CheckIfEmployeeExistsInCosntraint(System.Int64)">
            <summary>
            Checking if employee exists in must work or must not work constraint
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeSolverDTO(System.Int64)">
            <summary>
            Gets Employee By Id and returns EmployeeSolverDTO. For more details see <see cref="T:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO"/>
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeAsNoTracking(System.Int64)">
            <summary>
            Gets Employee By Id and returns EmployeeSolverDTO. For more details see <see cref="T:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO"/>
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <returns>Employee object as no tracking</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.Delete(ESolve.Entities.Models.Employee,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.PushNotificationManager,Microsoft.Extensions.Configuration.IConfiguration,System.Int64)">
            <summary>
            Method deletes employee and recalculates availabilities
            </summary>
            <param name="employee">Employee which will be deleted</param>
            <param name="jobAvailabilityManager">JobAvailabilityManager</param>
            <param name="templateJobAvailabilityManager">TemplateJobAvailabilityManager</param>
            <param name="tradeManager">Manager for trade offers</param>
            <param name="pushNotificationManager">Manager for notifications</param>
            <param name="configuration"></param>        /// 
            <param name="userId">logged In User Id</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeePageComboValues(ESolve.Entities.Filters.EmployeeSearchFilterModel,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Getting employees or skills for dropdown list
            </summary>
            <param name="filterModel">Model for filtering employees or skills</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>List of IdNameDropDownModel which are represent employees or skills</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeName(System.Int64)">
            <summary>
            Method goes in Database and try to find employee with passed Id.
            </summary>
            <param name="id">Represents Primary Key in database of wanted Employee.</param>
            <returns>Employee where Id is equal with passed id.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeByEmailAndAdvancedId(System.String)">
            <summary>
            Get employee by advanced id
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeSolverDTOs(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Contracts.ILoggedInUser,ESolve.Entities.RepositoryContext)">
            <summary>
            Getting employees from database based on user's permission
            </summary>
            <param name="employees">Employees' primary keys to filter employee based on current user's permissions</param>
            <param name="loggedInUser">Current logged in user</param>>
            <param name="repositoryContext">RepositoryContext</param>
            <returns>List of employees that satisfy permissions for current user.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeesByIDsASNoTracking(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed list of ids method will return objects from DB
            </summary>
            <param name="employeeIds">Collection of ids</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.Update(ESolve.Entities.Models.Employee)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.Add(ESolve.Entities.Models.Employee)">
            <summary>
            Add
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetTotalEmployeesCount">
            <summary>
            Get total count of employee in the rostering system
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.AuditLogForEmployee(ESolve.Entities.DTOs.EmployeeDTO,System.String,ESolve.Entities.Models.Employee,System.String)">
            <summary>
            Method insert audit log of employee in tblAuditTrail table.
            </summary>
            <param name="newEmployee">new employee object</param>
            <param name="userName">logged In user name</param>
            <param name="oldEmployee">old employeeDTO object</param>
            <param name="action">action should be insert, update or delete</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.AuditLogForEmployeePasswordModified(ESolve.Entities.DTOs.EmployeeDTO,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Method insert audit log of employee for Date Password Modified in tblAuditTrail table.
            </summary>
            <param name="newEmployee">new employee object</param>
            <param name="userName">logged In user name</param>
            <param name="oldDTPasswordUpdate"></param>
            <param name="action">action should be insert, update or delete</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.SaveAuditData(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This function save employee audit details
            </summary>
            <param name="auditDetails"> Audit details dictionary</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetEmployeeCurrentValue(ESolve.Entities.DTOs.EmployeeDTO,ESolve.Entities.Models.Employee)">
            <summary>
            This method retrun old and new value of employee all parameters
            </summary>
            <param name="employee">employee updated parameter object</param>
            <param name="oldEmployee">employee old parameter object</param>
            <returns> It return employee  details dictionary</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetOldNewValue(System.String,System.String,System.String)">
            <summary>
            This method retrun old and new value of employee single parameters
            </summary>
            <param name="newValue">new value</param>
            <param name="oldValue">old value</param>
            <param name="propertyName">updated parameter name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeesManager.GetLogdInUserName(System.Int64)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.EmployeeTileManager">
            <summary>
            Managing employee tiles in job's lists
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeTileManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="context">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeTileManager.Get">
            <summary>
            Get employee tile info from database
            </summary>
            <returns>Employee tile infor. See <see cref="T:ESolve.Entities.Models.EmployeeTile"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeTileManager.Update(ESolve.Entities.Models.EmployeeTile)">
            <summary>
            Update employee tile's info in database
            </summary>ž
            <param name="entity">Employee tile object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeTileManager.Add(ESolve.Entities.Models.EmployeeTile)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeTileManager.Delete(ESolve.Entities.Models.EmployeeTile)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeTileManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.EmployeeTileManager.GetAll">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.GDPRManager">
            <summary>
            Manager for GDPR
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.GDPRManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.GDPRManager.Add(ESolve.Entities.Models.GDPR)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GDPRManager.Delete(ESolve.Entities.Models.GDPR)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GDPRManager.Get(System.Int64)">
            <summary>
            Not Implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GDPRManager.GetAll">
            <summary>
            Get all gdprs from DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GDPRManager.Update(ESolve.Entities.Models.GDPR)">
            <summary>
            Updating gdpr
            </summary>
            <param name="entity">GDPR entity for update</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GDPRManager.HandleEvent(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:ESolve.Entities.DataManager.GenderManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.GenderManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext.
            </summary>
            <param name="context">Context which will be injected into RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.GenderManager.Add(ESolve.Entities.Models.Gender)">
            <summary>
            Method inserts passed Gender object in Database Table tblGenders. 
            </summary>
            <param name="entity">Object which will be saved.</param>
            <returns>True if action is sucessfull. Or false if it is not.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GenderManager.Delete(ESolve.Entities.Models.Gender)">
            <summary>
            Remove passed Gender object from Database. And all connected elements where GenderID is required.
            </summary>
            <param name="entity">Gender object which will be deleted.</param>
            <returns>True if action is sucessfull, or false if action fails.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GenderManager.Get(System.Int64)">
            <summary>
            Method finds Gender in Database by passed id. 
            </summary>
            <param name="id">Primary Key of wanted object.</param>
            <returns>Gender if he exists or null if object not exists in Database.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GenderManager.GetAll">
            <summary>
            This method collects all items from tblGenders.
            </summary>
            <returns>List of Gender objects</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GenderManager.Update(ESolve.Entities.Models.Gender)">
            <summary>
            Method sets new values for Gender object
            </summary>
            <param name="entity">Gender with new values.</param>
            <returns>True if action is sucessfull, or false if update fails.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.GenderManager.GetIdNameList">
            <summary>
            Gets All Genders from database in list of IdNameDropDownModel objects. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for more details.
            </summary>
            <returns>List of IdNameDropDownModel objects.</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ImageSizeManager">
            <summary>
            ImageSizeManager class contains all methods for performing ImageSize data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new ImageSize object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing ImageSize object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing ImageSize object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one ImageSize object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all ImageSize objects from Database.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ImageSizeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ImageSizeManager.Add(ESolve.Entities.Models.ImageSize)">
            <summary>
            Inserts passed ImageSize object in Database table tblImageSizes.
            </summary>
            <param name="entity">Represents ImageSize object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ImageSizeManager.Delete(ESolve.Entities.Models.ImageSize)">
            <summary>
            Removes passed ImageSize object from Database table tblImageSizes.
            </summary>
            <param name="entity">Represents ImageSize object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ImageSizeManager.Get(System.Int64)">
            <summary>
            Returns ImageSize object from Database table tblImageSizes where Id is equal with passed value.
            </summary>
            <param name="id">ImageSize Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ImageSizeManager.GetAll">
            <summary>
            Returns all ImageSize objects from Database table tblImageSizes.
            </summary>
            <returns>List of ImageSize objects. See <see cref="T:ESolve.Entities.Models.ImageSize"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ImageSizeManager.Update(ESolve.Entities.Models.ImageSize)">
            <summary>
            Updates ImageSize object values in Database table tblImageSizes with values passed inside ImageSize object in function argument.
            </summary>
            <param name="entity">ImageSize object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.JobAvailabilityManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            JobAvailabilityManager constructor which initialize Repository context.
            </summary>
            <param name="context">Represents repository with which JobAvailabilityManager will communicate.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.EmployeeAdd(System.Int64,ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            Calculations for adding new employees
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobTypeManager">Manager for job type.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.EmployeeUpdate(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Calculations for employeee's update
            </summary>
            <param name="employeeToUpdate">Employee From Database with values before Update</param>
            <param name="employeeUpdated">Employee with updated values.</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="assignmentNotificationManager">assignmentNotificationManager</param>
            <param name="configuration">Configuration</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.EmployeeDelete(System.Int64,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.PushNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Calculations for deleteing employee
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="tradesManager">Manager for trades</param>
            <param name="pushNotificationManager">Manager for sending notifications</param>
            <param name="configuration"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <returns>Sorted available employee list based on scheduled hours ranking.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.SkillMatrixUpdateValue(System.Int64,System.Int64,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            This method Finds all JobTypes from tblJobTypes where SkillCodeFormula contains passed SkillCode.
            After that from tblJobAvailabilities we find all Jobs whichs JobType is one from JobTypes founded in previous sentece.
            And calculating does employee satisfies JobTypeFormula.
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="skillCodeID">Skill code's primary key</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="assignmentNotificationManager">Job assignment notification manager</param>
            <param name="configuration">Application's configuration</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">The exception that is thrown when an attempt is made to store an element of the
            wrong type within an array.</exception>
            <exception cref="T:System.RankException">The exception that is thrown when an array with the wrong number of dimensions
            is passed to a method.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.JobTypeUpdate(System.Int64,ESolve.Entities.DTOs.JobTypeCalculationsDTO,ESolve.Entities.DTOs.JobTypeCalculationsDTO,System.Boolean,ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            This method is used to calculate job availabilites on wher job type is updated.
            </summary>
            <param name="jobTypeID">Job type's primary key</param>
            <param name="jobTypeDB">Job type with old values.</param>
            <param name="jobTypeUpdated">Job type with updated values.</param>
            <param name="skillsUpdated">Flag for indicating if there is any changes on job type's skills.</param>
            <param name="assignmentNotificationManager">Job assignment notification manager</param>
            <param name="configuration">Application's configuration</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.JobAdd(ESolve.Entities.Models.Job,ESolve.Entities.DTOs.JobTypeCalculationsDTO)">
            <summary>
            Calculations on adding new job
            </summary>
            <param name="job">Job's primary key</param>
            <param name="jobType">Job type's primary key</param>
            /// <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.CopyJob(System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Boolean,ESolve.Entities.DTOs.JobTypeCalculationsDTO,System.Int64,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Calculates job availabilities on adding range of jobs.
            </summary>
            <param name="newJobs">List of added jobs without concurrent jobs.</param>
            <param name="originalJobs">Originial jobs if this method is called by copy job or copy data forward action.</param>
            <param name="copyAssignments">Indicatior if we need to copy assignments.</param>
            <param name="jobType">Original job's job type</param>
            <param name="scheduleID">Schedule where we are adding jobs.</param>
            <param name="loggedInUser">Current logged in user</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.CopyDataForward(System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability},System.Collections.Generic.List{ESolve.Entities.DTOs.JobTypeCalculationsDTO},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.Constraint},ESolve.Entities.RepositoryContext,ESolve.Entities.Models.ScheduleDatePreference,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{System.Int64}},System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix},System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Int64,System.Boolean,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJobAvailability},ESolve.Contracts.ILoggedInUser)">
            <summary>
            Calculations on copy data action OR on Insert Templates action
            </summary>
            <param name="newJobs">New jobs that are added by copy data action.</param>
            <param name="originalJobAvailabilities">Original job's availaiblities</param>
            <param name="availabilities">Availaiblitie </param>
            <param name="jobTypes">New jobs' types</param>
            <param name="allEmployeesIds">Employees' primary keys</param>
            <param name="allConstraints">Constraint of all schedules</param>
            <param name="repositoryContext">Repository context for database</param>
            <param name="scheduleDatePreference">Date preference for schedule</param>
            <param name="employees">Employees with data</param>
            <param name="jobTypesEmployees">Dictionary with job type's primary key as key and list of employees' primary keys as values</param>
            <param name="skillsWhichEmployeesHave">Employees' skills</param>
            <param name="originalJobs">Jobs that are copied.</param>
            <param name="scheduleID">SSchedule where is jobs' copying.</param>
            <param name="isForTemplates">Indicator for whether or not this method was called from Inserting Templates.</param>
            <param name="employeeConstraintForPublish">List of employee constraint that are alredy exists on template's publishing.</param>
            <param name="templateJobAvailabilities">List of relevant templateJobAvailabilities.</param>
            <param name="loggedInUser">Current logged in user</param>
            This List is null in case where this method is called by schedule or subgroup's copy data forward.
            <returns>CopyDataRetValueDTO with new valid assginemtns and invalid assignemnts</returns>
            /// <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.JobUpdate(System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.List{System.String},ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            Method for calculating job's availaiblity on update
            </summary>
            <param name="entityID">Job with new Values</param>
            <param name="oldEndDate">Old end date of updated job in order to update availaiblities after it if split shifts constraint is active</param>
            <param name="oldStartDate">Old start date of updated job in order to update availaiblities after it if split shifts constraint is active</param>
            <param name="updatedFields">Job with new Values</param>
            <param name="jobTypeManager">Manager for job type</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.JobsUpdateOnTimeChange(System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Boolean,System.Boolean,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability})">
            <summary>
            Update job availabilities on jobs where time is changed
            </summary>
            <param name="updatedJobs">Jobs that are updated by updating shifts. Updated jobs have included subgroups.</param>
            <param name="jobTypeManager">Jobs that are updated by updating shifts. Updated jobs have included subgroups.</param>
            <param name="isUpdateTime">Flag if if action is called from is update action</param>
            <param name="publishTemplateAction">Flag if this method is called by publish template action.</param>
            <param name="repositoryContext">DB context</param>
            <param name="newAssignments">Assignments that are new by publish template action</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.CalculateAssigmentsAfterActions(System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.Constraint},System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Collections.Generic.List{ESolve.Entities.Models.JobStatus},System.Boolean,ESolve.Entities.Models.Job,System.DateTime[])">
            <summary>
            This method is used for checking availaiblities on jobs that are affected by any change or if
            some availaibiites are removed because of job type or custom data.
            </summary>
            <param name="assignments">Assigmentenst for constraints' checkers</param>
            <param name="availabilitiesToCheck">Availaiblities to be checked.</param>
            <param name="constraintOfAllSchedules">Constraints</param>
            <param name="jobCustomDataForConstraints">Jobs custom datas</param>
            <param name="scheduleDatePreference">Schedule date prefereneces</param>
            <param name="employeesConstraints">Employees' constraints</param>
            <param name="jobStatuses">Jobs' statuses</param>
            <param name="leftToRightCheck">Flag if in calcultion are job from right to left or from both sides</param>
            <param name="updatedJob">UPdated job in case where this method is called from update job action.</param>
            <param name="oldDateRangeOfUpdatedJob">Old dates of update job</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null referencem is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.JobsDelete(System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{System.Int64})">
            <summary>
            Calculations for deleting employee
            </summary>
            <param name="jobs"></param>
            <param name="employeesAssignedToPassedJobs"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.RecalculateAvailabilitiesAfterSubGroupOrScheduleDelete(System.Collections.Generic.List{ESolve.Entities.Models.SubGroup},System.DateTime,System.DateTime)">
            <summary>
            Recalculating availabilites on subgroup remove
            </summary>
            <param name="removedSubGroups">Subgroups that are removed.</param>
            <param name="dateRangeStart">Min start date of range that is removed</param>
            <param name="dateRangeEnd">Max end date of range that is removed</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.SetJobAvailabilityForLengthOfService(ESolve.Entities.Models.JobAvailability,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.Job,ESolve.Entities.DTOs.JobTypeCalculationsDTO,System.String)">
            <summary>
            This method is used for set job availability's length of service or returns null if employee will not be in any list
            </summary>
            <param name="jobAvailability"></param>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="jobType"></param>
            <param name="timeUnitName"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.EmployeeAssign(ESolve.Entities.DTOs.EmployeeJobAssigmentDTO,System.Boolean,ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="assigment"></param>
            <param name="isAssigment"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.EmployeeAssignList(ESolve.Entities.DTOs.EmployeeJobAssigmentDTO[],System.Boolean,ESolve.Entities.Models.Job,System.Collections.Generic.List{ESolve.Entities.Models.Job},ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="employeeJobAssigmentDTO"></param>
            <param name="isAssigment"></param>
            <param name="originalJob"></param>
            <param name="jobs"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.EmployeeUnAssignList(System.Collections.Generic.List{ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.EmployeeUnAssignGroup(System.String,System.Int64,System.DateTime,System.DateTime,ESolve.Entities.DataManager.EmployeesManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.ScheduleManager)">
            <summary>
            Unassigin employees
            </summary>
            <param name="type">Type of parent that is being unassigned</param>
            <param name="id">Parent's primary key</param>
            <param name="startDate">Start date of range for unassigning</param>
            <param name="endDate">End date of range for unassigning</param>
            <param name="employeeManager">Manager for employees</param>
            <param name="loggedInUser">Loggedin user</param>
            <param name="subgroupManager">Manager for subgroups</param>
            <param name="scheduleManager">Manager for schedules</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.AutoSolver(ESolve.Entities.Filters.SubGroupCalendarFilterModel,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.RankingManager,ESolve.Entities.DataManager.SubGroupManager)">
            <summary>
            AutoSolving
            </summary>
            <param name="calendarViewFilterModel"></param>
            <param name="loggedInUser">Represents current account's role.</param>
            <param name="employeeManager">Employee manager for getting employees</param>
            <param name="rankingManager">Ranking manager for getting rankings</param>
            <param name="subgroupManager">Manager for subgroups</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.StoreAssigments(ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel,System.String,System.DateTime,System.DateTime,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Storing assignemtns from autosolve result
            </summary>
            <param name="result">Autosolve's result</param>
            <param name="loggedInUserName">firstname and last name of user who executed the autosolve action.</param>
            <param name="startDate">Start date</param>
            <param name="endDate">end date</param>
            <param name="scheduleId">Schedule Id</param>
            <param name="subgroupIds">Selected Subgroup Ids</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.AuditLogForAutosolve(System.String,ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel,System.DateTime,System.DateTime,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Create Audit log for autosolve
            </summary>
            <param name="loggedInUserName"></param>
            <param name="result"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="scheduleId"></param>
            <param name="subgroupIds"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.CreateCheckers(System.Collections.Generic.List{ESolve.Entities.Models.Constraint},System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.List{ESolve.Entities.Models.AbsenceRequest},System.Int32)">
            <summary>
            Creating constraints' checkers
            </summary>
            <param name="constraints">Constrants that will be checked</param>
            <param name="customDatas">Custom data of jobs that will be checked</param>
            <param name="scheduleDatePreference">Schedule Date Preference</param>
            <param name="employeeConstraints">Employee Constraints for jobs and employees that will be checked</param>
            <param name="availabilities">Availabilities and assignments that will be checked</param>
            <param name="repositoryContext">DB context</param>
            <param name="employees">Employees</param>
            <param name="absences">Employees' absences</param>
            <param name="currentAction">Direction for constraints' calculations</param>
            <returns>List of constraints' checkers</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.CheckForBrokenRules(ESolve.Entities.Models.JobAvailability,ESolve.Entities.Models.JobAvailability)">
            <summary>
             This methods check if there is need to delete broken rules messages from tblBrokenRules. For example: when we update or delete job's availaiblity
             </summary>
             <param name="oldJobAvailability">Old job's availability</param>
             <param name="newJobAvailability">New job's availaiblity</param>
             <returns>True if we need to delete broken rules messages, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.CheckIfThereIsChangeOnJobTypeComparisonRules(ESolve.Entities.Models.JobTypeComparisonRule[],ESolve.Entities.Models.JobTypeComparisonRule[])">
            <summary>
            This method is used for checking if there is any change on updating job type
            </summary>
            <param name="jobTypeOldComparisonRules">Old job type's comparison rules</param>
            <param name="jobTypeNewComparisonRules">New job type's comparison rules</param>
            <returns>True if there is change in job type's comparison rules, false if there is not.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.NotifyAssignmentsUpdates(System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability},Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.PushNotifications.AssignmentNotificationManager)">
            <summary>
            Notify employee for their changed job assignment
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.GetEmployeesIdsThatSatisfyJobType(ESolve.Entities.Models.Job,ESolve.Entities.DTOs.JobTypeCalculationsDTO,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix},ESolve.Entities.RepositoryContext)">
            <summary>
            This method return all employee IDs that satisfy passed job type
            </summary>
            <param name="job">Job's primary key</param>
            <param name="jobType">Manager for job type.</param>
            <param name="employeeIds">List of employee IDs</param>
            <param name="skillsWhichEmployeesHave">Skill matrix of true values.</param>
            <param name="repositoryContext">Repository context.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.ApplyMustWorkMustNotWorkAvailabilityAndAlreadyAssignedConstraint(System.Collections.Generic.List{ESolve.Entities.Models.Constraint},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Nullable{System.Int64})">
            <summary>
            This method is used for checking must work, must not work, availability and not already assigned constraint
            </summary>
            <param name="constraints">Constraints that need to be checked</param>
            <param name="employeeIDs">Employees' primary keys</param>
            <param name="scheduleIdsForLoading">Schedules' primary key whose data need to be load</param>
            <param name="jobs">Job that need to be checked</param>
            <param name="jobIDsForDeleting">Jobs' primary keys that are removed</param>
            <param name="jobIDsForAdding">Job's primary keys that are added</param>
            <param name="updatedJobID">Job's primary keys that are added</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.ScheduleDatePreferencesUpdate(System.Collections.Generic.List{ESolve.Entities.Models.Constraint},ESolve.Entities.Models.ScheduleDatePreference,ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            This method checking availabilities when pay period or schedule date preference's day of week is updated
            </summary>
            <param name="constraints">Constraints that need to be checked.</param>
            <param name="scheduleDatePreference">Updated schdule date prefrence</param>
            <param name="assignmentNotificationManager"></param>
            <param name="configuration"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.Add(ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.Delete(ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.Get(System.Int64)">
            <summary>
            Not Implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.GetAll">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.Update(ESolve.Entities.Models.JobAvailability)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.UpdateJobAvailabilityForJobAndEmployee(System.Int64,System.Int64,ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            For passed job and employee id method will find that availability and
            set IsApproved flag to TRUE
            </summary>
            <param name="jobId">Job Primary Key</param>
            <param name="employeeID">Employee Primary Key</param>
            <param name="assignmentNotificationManager"></param>
            <param name="configuration"></param>
            <param name="isEmployeeAlreadyAssigned"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.GetJobIDWhereEmployeeIsApprovedAssignedCompletelyValidAvailabilities(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed list of JobIDs and employeeId, method will return all assigned, approved and completely valid
            assigments for that employee
            </summary>
            <param name="employeeID">Employee Primary key</param>
            <param name="jobHistoryIDs">Collection of Job history IDs</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.GetAvailableCompletelyValidUnAssignedEmployeesFromJobs(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed list of jobIds method will return all Employee ids where employee is available, completeley valid on that job
            </summary>
            <param name="jobIds">CollectionOFJobPrimaryKies</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.GetJobsFromPassedRangeAsNoTrackingForSelectedEmployee(System.Int64,ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed employee primary key and range, method will return list of jobs from selected range
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="range">Selected Range with start and end date</param>
            <returns>Collection of jobs from selected range where employee have availbility, ordered by start time</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobAvailabilityManager.GetNextJobAfterPassedDateAsNoTrackingForSelectedEmployee(System.Int64,System.DateTime)">
            <summary>
            For passed employee primary key and date, method will return first job after passed date
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="selectedDate">Selected date</param>
            <returns>Collection of jobs from selected range where employee have availbility, ordered by start time</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.JobHistoryManager">
            <summary>
            Job history manager
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobHistoryManager.Add(ESolve.Entities.Models.JobHistory)">
            <summary>
            Add 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobHistoryManager.Delete(ESolve.Entities.Models.JobHistory)">
            <summary>
            Delete 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobHistoryManager.Get(System.Int64)">
            <summary>
            Get
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobHistoryManager.GetAll">
            <summary>
            Get all
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobHistoryManager.Update(ESolve.Entities.Models.JobHistory)">
            <summary>
            Update
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.JobManager">
            <summary>
            Manager for job's business logic
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.JobManager._scheduleSubGroupsSortedInParentChildStructure">
            <summary>
            Here Will be stored SubGroupIDs sorted by SortOrder where exists and than by Name where SortOrder is null in ParentChild Structure.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.Add(ESolve.Entities.Models.Job,System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},System.Boolean)">
            <summary>
            Stores Passed Job into Database
            </summary>
            <param name="entity">Job which will be stored</param>
            <param name="customDatas">Added job's custom data</param>
            <param name="isCopyJobAction">Indicates if this method is called from copy to date action</param>
            <returns>True if job is successfully added, otherwise returns false.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.Delete(ESolve.Entities.Models.Job)">
            <summary>
            Removes passed Job object from Database table tblJobs.
            Also removes all connected Entities where JobID can't be null.
            </summary>
            <param name="entity">Represents Location object which will be removed.</param>
            <returns>True if action is successful, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.Get(System.Int64)">
            <summary>
            Returns JobWithCustomDataDTO object from Database table tblJobs where Id is equal with passed value.
            </summary>
            <param name="id">Job Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetOnlyJobAsNoTracking(System.Int64)">
            <summary>
            Method for getting job with passed id from database
            </summary>
            <param name="id"></param>
            <returns>Job with passed id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobs(System.Collections.Generic.List{System.Int64})">
            <summary>
            Method will found all jobs where Primary key matches with some value form list of parameters
            </summary>
            <param name="ids"></param>
            <returns>Job with passed id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobsWithJobType(System.Collections.Generic.List{System.Int64})">
            <summary>
            Method will found all jobs where Primary key matches with some value form list of parameters
            </summary>
            <param name="ids"></param>
            <returns>Job with passed id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetEmployeeAssignedOnPassedJobs(System.Collections.Generic.List{System.Int64})">
            <summary>
            for passed job ids method will return ids from all employees assigned on some of jobs
            </summary>
            <param name="ids">List of job primary keys</param>
            <returns>Job with passed id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetAll">
            <summary>
            Returns all Job objects from Database table tblJobs.
            </summary>
            <returns>List of Job objects. See <see cref="T:ESolve.Entities.Models.Job"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.Update(ESolve.Entities.DTOs.JobWithCustomDataDTO,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,System.Boolean,ESolve.Entities.DataManager.ScheduleManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.PushNotificationManager,ESolve.Entities.DataManager.LoneWorkerAlertsManager,ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Updates Job object values in Database table tblJobs with values passed inside Job object in function argument.
            </summary>
            <param name="jobWithCustomDataDTO">Object with job's attributes and custom data.</param>
            <param name="jobAvailabilityManager">Job object with new values.</param>
            <param name="jobTypeManager">JobTypeValueManager.</param>
            <param name="isDragAndDropChanged">Indicator is job drag and dropped.</param>
            <param name="scheduleManager">Manager for schedules, used in order to access method for retrieving permissions.</param>
            <param name="loggedInUser">Represents logged in user</param>
            <param name="tradeManager">Manager for trades offers</param>
            <param name="pushNotificationManager">Manager for notifications.</param>
            <param name="loneWorkerAlertsManager">Manager for lone worker alerts</param>
            <param name="attendanceConfirmationAlertsManager">Manager for attendance confirmations alerts</param>
            <param name="configuration"></param>
            <returns>True if action is successful, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.InheritSubGroupDetails(ESolve.Entities.Models.Job,System.Int64)">
            <summary>
            Inherit sub group details
            </summary>
            <param name="jobToUpdate"></param>
            <param name="subGroupID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.UpdateJobCustomData(System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},System.Collections.Generic.List{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Update jobs' custom data
            </summary>
            <param name="customDatas">Added or updated custom data</param>
            <param name="subgroups">Subgroups where are the jobs whose custom data will be added or updated</param>
            <param name="jobID">Job's primary key if custom data's is manually updated on job</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.ValidateJobSortOrderDelete(ESolve.Entities.Models.Job)">
            <summary>
            This method sets sort orders when jobs are deleted.
            </summary>
            <param name="job">Job which will be deleted.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.CheckIfUserHasAccessToEmployee(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ScheduleManager,System.Int64)">
            <summary>
            Check if user has access to employee
            </summary>
            <param name="loggedInUser"></param>
            <param name="scheduleManager"></param>
            <param name="jobID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetEmployeeLists(ESolve.Entities.Filters.EmployeeListsFilterModel,ESolve.Entities.DataManager.RankingManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.JobOfferManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            Get employees from database and filter them by values in passed filter model
            </summary>
            <param name="filter">EmployeeListsFilterModel represents filter model for filtering employees.</param>
            <param name="rankingManager">Represents manager for rankings.</param>
            <param name="scheduleManager">Represents manager for schedules.</param>
            <param name="profileManager">Represents manager for profiles.</param>
            <param name="userManager">Represents manager for users.</param>
            <param name="loggedInUser">Represents currently logged in user.</param>
            <param name="jobOfferManager">Represents manager for jobOffers.</param>
            <param name="jobAvailabilityManager">Represents manager for job availabilities.</param>
            <param name="jobTypeManager">Represents manager for job types.</param>
            <returns>EmployeeListsDTO object with requested lists.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetAssignedEmployees(ESolve.Entities.Filters.EmployeeListsFilterModel,System.Boolean,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Contracts.ILoggedInUser,System.Boolean,System.Collections.Generic.List{System.Int64},ESolve.Entities.Models.User,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            Get employees that are valid or invalid assigned on job.
            </summary>
            <param name="filter">EmployeeListsFilterModel represents filter model for filtering employees.</param>
            <param name="isValid">Indicator if we are looking for valid or invalid assignments.</param>
            <param name="profileManager">Repository for profiles.</param>
            <param name="userManager">Repository for users.</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="areEmployeesAnonymous">Represents whether all Employees will show up as Anonymous.</param>
            <param name="employeesIDsUserHasAccessTo">Employees that current logged in user has access to it</param>
            <param name="user">Current logged in user object</param>
            <param name="jobAvailabilityManager">Repository for job availabilities.</param>
            <param name="jobTypeManager">Repository for job types.</param>
            <returns>List of valid or invalid assignments.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetAvailableEmployees(ESolve.Entities.Filters.EmployeeListsFilterModel,ESolve.Entities.Models.Job,System.Boolean,ESolve.Entities.DataManager.RankingManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Contracts.ILoggedInUser,System.Boolean,ESolve.Entities.DataManager.JobOfferManager,System.Collections.Generic.List{System.Int64},ESolve.Entities.Models.User,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            Get employees that are available or available for job.
            </summary>
            <param name="filter">EmployeeListsFilterModel represents filter model for filtering employees.</param>
            <param name="job">Job for getting employees.</param>
            <param name="getAvailable">Indicator if we are looking for available or unavailable employees.</param>
            <param name="rankingManager">Represents manager for rankings.</param>
            <param name="profileManager">Represents manager for profiles.</param>
            <param name="userManager">Represents manager for users.</param>
            <param name="loggedInUser">Current Logged in user</param>
            <param name="employeesIDsUserHasAccessTo">List of employees' primary keys that current logged in user has access to.</param>
            <param name="areEmployeesAnonymous">Represents whether all Employees will show up as Anonymous.</param>
            <param name="jobOfferManager">Manager for Job offers</param>
            <param name="user">Logged in user object</param>
            <returns>List of available or unavailable list of employees.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetAssociatedEmployeesForDateRange(System.Int64,System.String,ESolve.Entities.DataManager.SubGroupManager,System.DateTime,System.DateTime,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Get associated employee for passed date range
            </summary>
            <param name="id">Concurrent job's primary key</param>
            <param name="imageSize">Employee's image size</param>
            <param name="subGroupRepository">Manager used for getting subgroups and child</param>
            <param name="startTime">Start time of date range</param>
            <param name="endTime">End time of date range</param>
            <param name="jobTypeManager">Manger for getting job type info</param>
            <param name="jobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>Returns list of employeeJobAssigments</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetTotalCountOfAvailable(ESolve.Entities.Filters.EmployeeListsFilterModel,System.Boolean)">
            <summary>
            Get total account of available/unavailable/ employees
            </summary>
            <param name="filter">Filter</param>
            <param name="getAvailable">Indicator if we are counting available or unavailable employees</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetTotalCountOfAssigned(ESolve.Entities.Filters.EmployeeListsFilterModel,System.Boolean)">
            <summary>
            Get total count of valid or invalid assigned
            </summary>
            <param name="filter">Filter</param>
            <param name="getValid">Indicator if we are counting valid or invalid assignments</param>
            <returns>Number of valid or invalid assignments.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.IsThereCriticalJobsWithoutAssignedEmployees(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime)">
            <summary>
            For passed Data method will check is there any job in selected subGroups in selected range where Critical Task is not populated
            </summary>
            <param name="subGroupIDs">Selected SubGroups</param>
            <param name="sDate">Interval Start Date</param>
            <param name="eDate">Interval End Date</param>
            <returns>Indicator is there any Critical jobs where all employees are not assigned</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.AreEmployeesAnonymous(System.Int64,ESolve.Entities.DataManager.ScheduleManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method receives subGroupID and account's details and returns whether Employees are Anonymous or not.
            </summary>
            <param name="subGroupID">SubGroupID for which method returns User's permissions.</param>
            <param name="scheduleManager">Manager for schedules, used in order to access method for retrieving permissions.</param>
            <param name="loggedInUser">Represents current account.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.Delete(System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Boolean)">
            <summary>
            Method receives list of job ids, finds connected entities with selected entity and removes them, and after that removes selected job
            </summary>
            <param name="jobs">List of Jobs which will be deleted.</param>
            <param name="isForTemplates">Indicator for whether this method was called from UpdateInsertedTemplate or from DeleteAllJobs.</param>
            <returns>True if all connected entities and same job are deleted.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.DeleteJobsFromSelectedSubgroups(System.Int64,System.DateTime,System.DateTime,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Deleting jobs from passed subgroups and passed date range
            </summary>
            <param name="subgroupID">Subgroup's primary key</param>
            <param name="startDate">Start date of displayed date range</param>
            <param name="endDate">End date of displayed date range</param>
            <param name="subgroupManager">Manager for subgroups in order to get child from passed subgroup</param>
            <param name="scheduleManager">Manager for schedules</param>
            <param name="jobAvailabilityManager">Manager for job's availabilities</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>True if jobs are successfully removed, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.UpdateManualEditedHours(ESolve.Entities.DTOs.IdNameBooleanValues,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            This method will fin Job in Database over Primary Key which is sent inside model. If job exists in database ManualEditedHours property 
            will be set on value passed in object, otherwise method will return false, without doing anything.
            </summary>
            <param name="idNameBooleanValues"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="jobTypeManager"></param>
            <returns>False if Job doesn't exists, otherwise it will return indicator is action successful or not.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument. Possible .FirstOrDefault() method</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.CopyJob(ESolve.Entities.DTOs.CopyJobDTO,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Copies job with passed Id and inserts it into database.
            </summary>
            <param name="copyJobDTO">DTO for job copying.</param>
            <param name="jobAvailabilityManager">Manager for calculating employee's availability.</param>
            <param name="jobTypeManager">Manager for checking if employee satisfy job type rules.</param>
            <param name="loggedInUser">Current logged in user</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <returns>List of new jobs which are copied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.RemoveEmployeeAssigments(ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Contracts.ILoggedInUser,System.Boolean)">
            <summary>
            Method removes Item from tblJobAssigments in DataBase. From passed RemoveEmployeeAssigmentDTO, method generates JobAssigment entity based on EmployeeId and JobID in Function argument. 
            </summary>
            <param name="removeEmployeeAssigmentDTO"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="scheduleManager">Manager for schedules, used in order to access method for retrieving permissions.</param>
            <param name="loggedInUser">Represents current logged-in user.</param>
            <param name="calledFromJobOffer">Represents location from where method has been called.</param>
            <returns>True if method removes only one entity, in all other cases return value will be false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.RemoveEmployeeAssigments(System.Collections.Generic.List{ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO},ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method iterate through passed collection and create List of JobAssigment object's based on EmployeeID JobID in each element in list. When is done, method removes range[created list] from DB.
            </summary>
            <param name="removeEmployeeAssigmentDTOs">Removed assignments</param>
            <param name="jobAvailabilityManager">Manager for job availabilities</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>True if no of removed items in database is equal with created list Count, in all other cases return value will be false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetChildsForSubgroup(System.Int64,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup})">
            <summary>
            This Method Sorts SubGroups in ParentChildStructure by SortOrder and than by Name
            </summary>
            <param name="id">SubGroup ID</param>
            <param name="subGroups">SubGroups which will be filtered</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetImage(System.Int64,System.String,System.Boolean)">
            <summary>
            Get image from database
            </summary>
            <param name="ID">Represents account's ID.</param>
            <param name="imageSize">Represents requested image size.</param>
            <param name="isEmployeeImage">Represents whether method should return an Employee's image or a User's image.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetAllAssociatedEmployees(System.Int64,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Get associated employees for concurrent job with passed id.
            </summary>
            <param name="jobId">Job primary key.</param>
            <param name="subGroupRepository">Repository used for getting subgroup and it's child subgroups.</param>
            <param name="jobAvailabilityManager">Manager for checking employee's availabilities.</param>
            <param name="jobTypeManager">Manager for getting job type's info</param>
            <param name="loggedInUser">Represents current account.</param>
            <returns>Array of associated employees for selected job.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the value of an argument is outside the allowable
            range of values as defined by the invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetEmployeeAssigmentsForDateRange(System.Int64,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability})">
            <summary>
            Get jobAssigment for employee with passed ID and create key value pairs of timespan for time ranges that employee is assigned.
            </summary>
            <param name="employeeId">Employee's primary key</param>
            <param name="startDate">Start date of date range.</param>
            <param name="endDate">End date of date range.</param>
            <param name="employeesRequired">Number of required employees for concurrent job</param>
            <param name="jobAvailabilities">List of job's assignments for calculating associated employees to concurrent job.</param>
            <returns>List of key value pair withing start time and end time of employee assignment</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.AssignEmployee(ESolve.Entities.DTOs.AssigmentDTO,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.BrokenRulesManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,System.Boolean)">
            <summary>
            This method assigns employee to the passed job. Also, checks if assignments is valid or invalid and based on that creates broken rules
            </summary>
            <param name="assigment">Employee job assignments DTO object with employee and job info.</param>
            <param name="jobAvailabilityManager">Manager for job availability.</param>
            <param name="brokenRulesManager">Manager for job broken rules.</param>
            <param name="scheduleManager">Manager for schedules, used in order to access method for retrieving permissions.</param>
            <param name="loggedInUser">Currently loggedIn User.</param>
            <param name="profileManager">Manager for profiles.</param>        
            <param name="userManager">Manager for users.</param>
            <param name="calledFromJobOffer">Indicator is method called from JobOffer</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.AssignEmployees(ESolve.Entities.DTOs.AssigmentDTO,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.BrokenRulesManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Assign Employees on Jobs
            </summary>
            <param name="assigments">DTO with job's primary key and employee's primary key.</param>
            <param name="jobAvailabilityManager">Manager for job's availability.</param>
            <param name="brokenRulesManager">Manager for broken rules.</param>
            <param name="profileManager">Manager for profiles.</param>
            <param name="scheduleManager">Manager for schedules, used in order to access method for retrieving permissions.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>Message about action</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetMessagesFromBrokenRules(ESolve.Entities.DTOs.EmployeeJobAssigmentDTO[],ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.BrokenRulesManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            This method is used for generating message based on broken rules when we are trying to assign employees.
            This method can be used for multiple assignments also.
            </summary>
            <param name="employeeJobAssigmentDTOs">EmployeeJobAssigmentDTO with job's primary key and employee's primary key</param>
            <param name="scheduleManager">Manager for schedule.</param>
            <param name="jobTypeManager">Manager for job type values.</param>
            <param name="jobAvailabilityManager">Manager of job's availability</param>
            <param name="brokenRulesManager">Manager for broken rules.</param>
            <param name="loggedInUser">Current log in user</param>
            <returns>Key value pair where key is list of broken rules and value is number of broken rules.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GenerateBrokenRulesFromDatabase(System.Int64,System.Int64)">
            <summary>
            Method used for generating messages for override assignments from tblBrokenRules
            This method we call when we get employees' lists
            </summary>
            <param name="jobId">Job primary key</param>
            <param name="employeeId">Employee primary key</param>
            <returns>RulesBrokenDTO with broken rules for passed employee</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.ValidateSortOrderOnAddingNewJob(ESolve.Entities.Models.Job)">
            <summary>
            This method set job's sort order on adding it.
            </summary>
            <param name="job">Job which sort order will be calculated.</param>
            <returns>Job with new value of sort order.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
             is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.ValidateSortOrderOnUpdatingExistingJob(ESolve.Entities.Models.Job,ESolve.Entities.Models.Job)">
            <summary>
            This method updates job's sort order.
            </summary>
            <param name="jobDB">Job from database which will be updated.</param>
            <param name="job">Job with new values.</param>
            <returns>Job with new value for sort order.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.ValidateSortOrderOnJobSubgroupChange(ESolve.Entities.Models.Job,ESolve.Entities.Models.Job)">
            <summary>
            This method change sort order of job's subgroup changed
            </summary>
            <param name="jobDB">Job from database which will be updated</param>
            <param name="job">Job with new values.</param>
            <returns>Job with set sort order</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GenerateEmployeeTileInfo(ESolve.Entities.Models.EmployeeTile,System.Int64,System.Int64,System.Boolean,System.Boolean,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Retrieving additional Employee's info form database.
            </summary>
            <param name="employeeTile">Employee tile info from database</param>
            <param name="jobId">Job's primary key</param>
            <param name="employeeId">Employee's primary key</param>
            <param name="assigments">If we are looking for assignment/availability. True if assignment</param>
            <param name="status">Valid/available or Invalid/unavailable status</param>
            <param name="profileManager">Represents a manager for profiles.</param>
            <param name="userManager">Represents a manager for users.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>Employee info for employee with passed id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">The exception that is thrown when binding to a member results in more than one
            member matching the binding criteria. This class cannot be inherited.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception  cref="T:System.Reflection.TargetException">Represents the exception that is thrown when an attempt is made to invoke an
            invalid target.</exception>
            <exception  cref="T:System.Reflection.TargetParameterCountException">The exception that is thrown when the number of parameters for an invocation
            does not match the number expected. This class cannot be inherited.</exception>
            <exception  cref="T:System.MethodAccessException">The exception that is thrown when there is an invalid attempt to access a method,
            such as accessing a private method from partially trusted code.</exception>
            <exception  cref="T:System.Reflection.TargetInvocationException">The exception that is thrown by methods invoked through reflection. This class
            cannot be inherited.</exception>
            <exception  cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the value of an argument is outside the allowable
            range of values as defined by the invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.CalculateScheduleHoursForEmployeeTile(System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.List{ESolve.Entities.Models.AbsenceRequest})">
            <summary>
            Method used for calculate employee's scheduled hours for passed date range.
            </summary>
            <param name="employeeId">Employee's primary key</param>
            <param name="startDate">Start time of date range.</param>
            <param name="endDate">End time of date range.</param>
            <returns>Total hours of employee assignments for passed date range.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobAssigmentsForReferenceArea(ESolve.Entities.Models.Job,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
             Get job assignments that overlaps concurrent job
             </summary>
             <param name="concurrentJob">Concurrent job</param>
             <param name="subGroupRepository">Repository used for getting subgroup and child.</param>
             <param name="jobTypeManager">Manger for getting job type info</param>
             <param name="jobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
             <param name="loggedInUser">Represents current account.</param>
             <returns>Job assignments on overlapping jobs.</returns>
             /// <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
             is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GenerateDatesForNextJob(System.DateTime,System.DateTime,System.Int32,System.DateTime)">
            <summary>
            This method is finding job's dates which are not on weekend, 
            it is used for exclude weekends functionality in job's copying
            </summary>
            <param name="startDate">Initial start date</param>
            <param name="endDate">Initial end date</param>
            <param name="diffInDays">Job's duration</param>
            <param name="endDateOfMaxRange">The last date when job can be copied.</param>
            <returns>Array of date-time with start and end date</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when s
            the value of an argument is outside the allowable
            range of values as defined by the invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.CheckIfThereIsWeekend(System.DateTime,System.DateTime)">
            <summary>
            Method is used for checking if there is weekend between two dates.
            </summary>
            <param name="startDate">Start date of range</param>
            <param name="endDate">End date of range</param>
            <returns>True if there is a weekend, otherwise false</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobIdsInPastFromCollection(System.Collections.Generic.List{System.Int64},System.DateTime)">
            <summary>
            For passed date and collection of ids, method will return all ids from jobs in past
            </summary>
            <param name="jobIDs">Collection of primary keys</param>
            <param name="dateTime">Date before which is past</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetSubGroupIDbyJobID(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetScheduleIDbySubGroupID(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.CalculateJobAvailabilitites(ESolve.Entities.Models.Job,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            For passed Job calculate availabilities
            </summary>
            <param name="job">Job for which we will calculate availabilities</param>
            <param name="jobTypeManager">Job Type Manager</param>
            <param name="jobAvailabilityManager">Job Availability Manager</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobIDsWhichBelongsPassedSGAndInterval(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime)">
            <summary>
            For passed list of subgroups and Interval start and end date.
            Method will return all JobIDs which belongs to the some of passed SG and his
            JobStartDateTime is inside passed interval.
            </summary>
            <param name="subGroupIds">List OfSubGroupIDs</param>
            <param name="sDate">Interval Start DateTime</param>
            <param name="eDate">Interval End DateTime</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobIDsWhichBelongsPassedSGAndInterval(System.Collections.Generic.List{System.Int64},ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed list of subgroups and Interval start and end date.
            Method will return all Jobs in form JobId, JobHours, JobRequiredEmployees in shape of IdLongLongDTO.
            For more details see <see cref="T:ESolve.Entities.DTOs.IdLongLongDTO"/> for more details.
            </summary>
            <param name="subGroupIds">List OfSubGroupIDs</param>
            <param name="range">Interval</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobIDsWhichBelongsPassedSGAndStartsInInterval(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime)">
            <summary>
            For passed list of subgroups and Interval start and end date.
            Method will return all JobOfferNotificationDTO which starts in passed interval.
            See <see cref="T:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO"/> for more details
            </summary>
            <param name="subGroupIds">List OfSubGroupIDs</param>
            <param name="sDate">Interval Start DateTime</param>
            <param name="eDate">Interval End DateTime</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobIDsWhichBelongsPassedSGAndStartsInInterval(System.Int64)">
            <summary>
            For passed jobId.
            Method will return JobOfferNotificationDTO.
            See <see cref="T:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO"/> for more details
            </summary>
            <param name="jobID">Selected Job Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.Update(ESolve.Entities.Models.Job)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.SubmitCachedData(ESolve.Entities.DTOs.SubmitedCachedDataDTO,ESolve.Contracts.ILoggedInUser,ESolve.Entities.RepositoryContext)">
            <summary>
            Method that does the same as the SubmitCachedData original method, except that it's expanded
            so that other Managers can use it as well, by passing their own RepositoryContext.
            </summary>
            <param name="submitedData">SubmitedCachedDataDTO object.</param>
            <param name="loggedInUser">Currently logged-in user.</param>
            <param name="repositoryContext">RepositoryContext passed from other managers</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobIdsFromRange(System.DateTime,System.DateTime)">
            <summary>
            For passed start and end date-time select all Ids
            where jobStartDateTime is inside passed interval.
            </summary>
            <param name="startDate">Period Start Date</param>
            <param name="endDate">Period End Date</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobIdsFromRangeForDashboard(System.DateTime,System.DateTime)">
            <summary>
            For passed start and end date-time select all Ids
            where jobStartDateTime is inside passed interval.
            </summary>
            <param name="startDate">Period Start Date</param>
            <param name="endDate">Period End Date</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetListOfSubGroupsByJobHistoryIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed list of jobIds return subgroups
            </summary>
            <param name="jobIds">List of Job Primary Keys</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.Get(System.Int64,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Returns JobWithCustomDataDTO object from Database table tblJobs where Id is equal with passed value.
            </summary>
            <param name="id">Job Primary Key</param>
            <param name="loggedInUser">CurrentlyLoggedInUser</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.Add(ESolve.Entities.Models.Job)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobTypeName(System.Int64)">
            <summary>
            Get job type name
            </summary>
            <param name="jobTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.CreateAuditTrailObject(ESolve.Entities.Models.Job,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="jobTypeName"></param>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.AuditLogForJobCreate(ESolve.Entities.Models.Job,System.Int64)">
            <summary>
            Log audit for job creation
            </summary>
            <param name="entity"></param>
            <param name="loggedInUserId"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.AuditLogForJobDeletion(System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Int64)">
            <summary>
            Log audit for job deletion
            </summary>
            <param name="jobsList"></param>
            <param name="loggedInUserId"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.CreateAuditTrailObjectForJobUpdation(ESolve.Entities.Models.Job,System.String,System.Collections.Generic.List{System.Tuple{System.Object,System.Object,System.Object}})">
            <summary>
            
            </summary>
            <param name="updatedJob"></param>
            <param name="userName"></param>
            <param name="dict"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.AuditLogForJobUpdation(ESolve.Entities.Models.Job,System.Int64,System.Collections.Generic.List{System.Tuple{System.Object,System.Object,System.Object}})">
            <summary>
            Log audit for job updation
            </summary>
            <param name="updatedJob"></param>        
            <param name="loggedInUserId"></param>
            <param name="dict"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobManager.GetJobDetailsForEmployee(System.Int64,System.Int64)">
            <summary>
            GetJobDetailsForEmployee
            </summary>
            <param name="jobId"></param>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager">
            <summary>
            Manager for working with JobOffers for Auto Assigment
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager.Add(ESolve.Entities.Models.JobOfferForAutoAssigment)">
            <summary>
            Stores passed entity in database
            </summary>
            <param name="entity">Model which will be stored in database</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager.Delete(ESolve.Entities.Models.JobOfferForAutoAssigment)">
            <summary>
            Removes passed JobOfferForAutoAssigment object from Database table tblJobOffersForAutoAssigments.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager.Get(System.Int64)">
            <summary>
            Not Implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager.GetAll">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager.Update(ESolve.Entities.Models.JobOfferForAutoAssigment)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager.GetJobOffersByJobID(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed collection of job ids method will return JobOffers
            </summary>
            <param name="jobIDs">Selected Jobs</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager.GetAcceptedButNotAssignedJobOffers(System.Collections.Generic.List{ESolve.Entities.Models.JobOffer})">
            <summary>
            For passed List OF Accepted JobOffers method will find all job offers which are not accepted
            </summary>
            <param name="acceptedJobOffers">List OF Accepted JobOffers</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.JobOfferManager">
            <summary>
            Manager for storing JobOffers
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.Add(ESolve.Entities.Models.JobOffer)">
            <summary>
            Inserts passed JobOffer object in Database table tblJobOffers.
            </summary>
            <param name="entity">Represents JobOffer object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.Delete(ESolve.Entities.Models.JobOffer)">
            <summary>
            Removes passed JobOffer object from Database table tblJobOffers.
            </summary>
            <param name="entity">Represents JobOffer object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.Get(System.Int64)">
            <summary>
            Returns JobOffer object from Database table tblJobOffers where Id is equal with passed value.
            </summary>
            <param name="id">JobOffer Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetAll">
            <summary>
            Returns all JobOffer objects from Database table tblJobOffers.
            </summary>
            <returns>List of JobOffer objects. See <see cref="T:ESolve.Entities.Models.JobOffer"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.Update(ESolve.Entities.Models.JobOffer)">
            <summary>
            Updates JobOffer object values in Database table tblJobOffers with values passed inside JobOffer object 
            in function argument.
            </summary>
            <param name="entity">JobOffer object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetAllJobIDs">
            <summary>
            Returns all jobIDs which exists in this database table
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.RevokeJobOfferOnScheduleOrSubGroupLevel(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.JobOffer.JobsOfferDTO,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.PushNotifications.JobOfferNotificationManager,ESolve.Entities.DataManager.JobOfferForAutoAssigmentDataManager)">
            <summary>
            For all employees that User can see. Those whic are not Anonymus, method will delete JobOffers
            </summary>
            <param name="loggedInUser">Currently logged in user</param>
            <param name="jobsOfferDTO">JobOffer DTO</param>
            <param name="jobManager">Manager for Jobs</param>
            <param name="jobAvailabilityManager">Manager for JobAvailabilities</param>
            <param name="subGroupManager">Manager for SubGroups</param>
            <param name="userManager">Manager for USers</param>
            <param name="profileManager">Manager for Profiles</param>
            <param name="schedulePermissionsManager">Manager for SchedulePermissions</param>
            <param name="employeesManager">Manager for Employees</param>
            <param name="jobOfferNotificationManager">Manager for JobOffer Notifications</param>
            <param name="jobOfferForAutoAssigmentDataManager">Manager for JobOffer Notifications</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.JobOfferOnJobLevel(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.JobOffer.JobOfferDTO,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.PushNotifications.JobOfferNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            This method will store all employees offer on passed job
            </summary>
            <param name="loggedInUser">Currently loggedin user</param>
            <param name="jobOfferDTO">Represnets model for data transfer. See <see cref="T:ESolve.Entities.DTOs.JobOffer.JobOfferDTO"/> for more details</param>
            <param name="jobManager">Manager for Jobs</param>
            <param name="userManager">Manager for Users</param>
            <param name="profileManager">Manager for Profiles</param>
            <param name="employeesManager">Manager for Employees</param>
            <param name="jobOfferNotificationManager">Manager for JobOfferNotifications</param>
            <param name="configuration">Configuration for address</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.JobOfferOnScheduleOrSubGroupLevel(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.JobOffer.JobsOfferDTO,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.PushNotifications.JobOfferNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Offer jobs for selected subgroups and schedule
            </summary>
            <param name="loggedInUser">Currently logged in user</param>
            <param name="jobsOfferDTO">JobOffer DTO</param>
            <param name="jobManager">Manager for Jobs</param>
            <param name="jobAvailabilityManager">Manager for JobAvailabilities</param>
            <param name="subGroupManager">Manager for SubGroups</param>
            <param name="userManager">Manager for USers</param>
            <param name="profileManager">Manager for Profiles</param>
            <param name="schedulePermissionsManager">Manager for SchedulePermissions</param>
            <param name="employeesManager">Manager for Employees</param>
            <param name="jobOfferNotificationManager">Manager for JobOffer Notifications</param>
            <param name="configuration">Configuration for address</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.CreateJobOffersAnJobOfferNotificationObjects(System.Collections.Generic.List{ESolve.Entities.DTOs.LongLongDTO},ESolve.Contracts.ILoggedInUser,System.Collections.Generic.List{ESolve.Entities.Models.Employee},System.Collections.Generic.List{ESolve.Entities.Models.Profile},System.Collections.Generic.List{ESolve.Entities.DTOs.LongLongDTO},ESolve.Entities.DataManager.ProfileManager,System.Collections.Generic.List{ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO},System.DateTime,System.Collections.Generic.List{ESolve.Entities.Models.JobOffer},System.Int64)">
            <summary>
            Iterate trough available employees on each job and create job offer if employee doesn't have JobOffer specified for this job
            </summary>
            <param name="jobOffersOnJobs">All Job Offers specified for jobs</param>
            <param name="loggedInUser">Logged In User</param>
            <param name="employees">Employees which are in available employees</param>
            <param name="employeeProfiles">Employee Profiles of all employees specified in available list</param>
            <param name="availableEmployeesOnJob">All employees available on each job</param>
            <param name="profileManager">Profile manager</param>
            <param name="jobOfferNotificationDTOs">Job Offer notification list</param>
            <param name="date">Date when notifications are created</param>
            <param name="jobOffers">Collection of job offer objects which will be stored in system</param>
            <param name="jobOfferStatusID">Pending job offer status ID</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetJobOffersByJobID(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed job and list employee method will return JobOffers
            </summary>
            <param name="jobID">Selected Job</param>
            <param name="employeeIDs">employees</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetJobOffersByJobID(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed collection of job ids method will return JobOffers
            </summary>
            <param name="jobIDs">Selected Jobs</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.ConvertJobOfferStatusToMessage(System.String)">
            <summary>
            For passed JobStatusName method will return appropriate message
            </summary>
            <param name="name">JobStatusName</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetJobAndEmployeeOffer(System.Collections.Generic.List{System.Int64})">
            <summary>
            
            </summary>
            <param name="jobIDs"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetJobAndEmployeeOffer(System.Collections.Generic.List{ESolve.Entities.DTOs.LongLongDTO})">
            <summary>
            For Passed of JobId and EmployeeID pairs method will return JobOffers
            </summary>
            <param name="jobEmployeePairs">Collection OfJobPrimary Kies</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetJobAndEmployeeOffer(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            For Passed List Of employee ids and job primary key method will return JobId and EmployeeID pairs where JobOFfer exists
            </summary>
            <param name="employeeIDs">Collection Of Employee Primary Kies</param>
            <param name="jobID">Job Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetEmployeeJobOffersForCalendar(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed range and employee method will return all job offers from passed range.
            </summary>
            <param name="loggedInUser">Currently logged in user</param>
            <param name="range">Selected date range</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetJobOfferFilteredCountForSelectedEmployee(System.Int64,System.Int64[])">
            <summary>
            For passed EmployeeId and list of selected JobOFferStatusIDs method will returon count of items
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="jobOfferStatusIds">Collection of JobStatus Ids</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetJobOfferCountForSelectedEmployee(System.Int64)">
            <summary>
            For passed employee method will return number of JobOffers
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetOffersByScheduleName(System.Int64,System.Decimal,ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter)">
            <summary>
            Method return JobOFfers Sorted by Schedule Name
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="schedDeadlineForJobOffers"></param>
            <param name="filter">JobOffer Filter</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetOffersBySubGroupName(System.Int64,System.Decimal,ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter)">
            <summary>
            Method return JobOFfers Sorted by SubGroup Name
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="schedDeadlineForJobOffers"></param>
            <param name="filter">JobOffer Filter</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetOffersByJobTypeName(System.Int64,System.Decimal,ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter)">
            <summary>
            Method return JobOFfers Sorted by JobType Name
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="schedDeadlineForJobOffers"></param>
            <param name="filter">JobOffer Filter</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetOffersByJobStartDateName(System.Int64,System.Decimal,ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter)">
            <summary>
            Method return JobOFfers Sorted by JobStartDateTime
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="schedDeadlineForJobOffers"></param>
            <param name="filter">JobOffer Filter</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetOffersByJobEndDateTimeName(System.Int64,System.Decimal,ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter)">
            <summary>
            Method return JobOFfers Sorted by JobType Name
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="schedDeadlineForJobOffers"></param>
            <param name="filter">JobOffer Filter</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobOfferManager.GetOffersByJobOfferStatusName(System.Int64,System.Decimal,ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter)">
            <summary>
            Method return JobOFfers Sorted by JobOfferStatus Name
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="schedDeadlineForJobOffers"></param>
            <param name="filter">JobOffer Filter</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.JobStatusManager">
            <summary>
            JobStatusManager class contains all methods for performing JobStatus data functions.
            <list type="bullet">
            <item>
            <term>Update</term>
            <description>Updating existing JobStatus object in Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all JobStatus objects from Database.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.GetAll">
            <summary>
            Returns all Job Status objects from Database table tblJobStatuses.
            </summary>
            <returns>List of Job Status objects. See <see cref="T:ESolve.Entities.Models.JobStatus"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.Update(ESolve.Entities.Models.JobStatus)">
            <summary>
            Updates Job Status object values in Database table tblJobStatuses with values passed inside Job Status object in function argument.
            </summary>
            <param name="entity">Job Status object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.ResetColorToDefault(System.Int64)">
            <summary>
            Updates job status color to default color.
            </summary>
            <param name="id">Job Status Primary Key.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.Delete(ESolve.Entities.Models.JobStatus)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.Get(System.Int64)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.Add(ESolve.Entities.Models.JobStatus)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.GetConcurentStatus">
            <summary>
            Method will find status Id in database where name is equal with Concurrent job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobStatusManager.GetJobStatusJobStatusName(System.String)">
            <summary>
            For passed jobStatusName find jobstatus in database and return it
            </summary>
            <param name="jobStatusName">JobStatus unique name</param>
            <returns>JobStatus for passed name</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.JobTitleManager">
            <summary>
            JobTitleManager class contains all methods for performing JobTitle data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new JobTitle object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing JobTitle object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing JobTitle object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one JobTitle object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all JobTitle objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all JobTitle objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Unique name</term>
            <description>Check if JobTitle name in use.</description>
            </item>
            <item>
            <term>Add array of job titles.</term>
            <description>Add passed array of job titles.</description>
            </item>
            <item>
            <term>Update array of job titles.</term>
            <description>Update passed array of job titles. If in array is job title which is not in database, it will be added.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.Add(ESolve.Entities.Models.JobTitle)">
            <summary>
            Inserts passed JobTitle object in Database table tblJobTitles.
            </summary>
            <param name="entity">Represents JobTitle object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.Add(ESolve.Entities.Models.JobTitle[])">
            <summary>
            Inserts passed array of JobTitle objects in Database table tblJobTitles.
            </summary>
            <param name="jobTitles">Represents array of JobTitle object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.Update(ESolve.Entities.Models.JobTitle[])">
            <summary>
            Updates JobTitle objects in Database table tblJobTitles with values passed inside array of JobTitle objects in function argument.
            If jobTitleID does not exist, new row will be added.
            </summary>
            <param name="updatedJobTitles">JobTitle objects with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.Delete(ESolve.Entities.Models.JobTitle)">
            <summary>
            Removes passed JobTitle object from Database table tblJobTitles.
            </summary>
            <param name="entity">Represents JobTitle object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.Get(System.Int64)">
            <summary>
            Returns JobTitle object from Database table tblJobTitles where Id is equal with passed value.
            </summary>
            <param name="id">JobTitle Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.GetAll">
            <summary>
            Returns all JobTitle objects from Database table tblJobTitles.
            </summary>
            <returns>List of JobTitle objects. See <see cref="T:ESolve.Entities.Models.JobTitle"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.Update(ESolve.Entities.Models.JobTitle)">
            <summary>
            Updates JobTitle object values in Database table tblJobTitles with values passed inside JobTitle object in function argument.
            </summary>
            <param name="entity">JobTitle object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.GetIdNameList">
            <summary>
            This method return all JobTitle objects from Database table tblJobTitles in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTitleManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if JobTitle Name is unique in Database table tblJobTitles.
            </summary>
            <param name="filter">Id and JobTitle Name value</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.JobTypeManager">
            <summary>
            JobTypeManager class contains all methods for performing JobType data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new JobType object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing JobType object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing JobType object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one JobType object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all JobType objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all JobType objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Add new</term>
            <description>Add new with only name passed.</description>
            </item>
            <item>
            <term>PaggedCollection</term>
            <description>Get all JobType objects from Database in PaggedCollection Form.</description>
            </item>
            <item>
            <term>Check Name</term>
            <description>Check is Name unique.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.Add(ESolve.Entities.Models.JobType)">
            <summary>
            Add
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.Delete(ESolve.Entities.Models.JobType)">
            <summary>
            Delete
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.Add(ESolve.Entities.Models.JobType,System.Int64)">
            <summary>
            Method inserts passed object into tblJobtypes. After that method will populate tblJobTypeRules with predefined jobtyperules with default values.
            </summary>
            <param name="jobType">Represent JobType atribute which will be saved.</param>
            <param name="userId">User ID</param>
            <returns>True if jobtype object is added and jobtypeRules are populated with default values. Or false if one of items isn't populated</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.Delete(ESolve.Entities.Models.JobType,System.Int64)">
            <summary>
            Removes passed JobType object from Database table tblJobTypes.
            </summary>
            <param name="jobType">Represents JobType object which will be removed.</param>
            <param name="userId">User Id</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.JobTypeDelete(System.Int64)">
            <summary>
            Delete JobType Method leavs assigments as it is. All unassigned employees will be unavailable
            </summary>
            <param name="jobTypeID"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.Get(System.Int64)">
            <summary>
            Returns JobType object from Database table tblJobTypes where Id is equal with passed value.
            </summary>
            <param name="id">JobType Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetAll">
            <summary>
            Returns all JobType objects from Database table tblJobTypes.
            </summary>
            <returns>List of JobType objects. See <see cref="T:ESolve.Entities.Models.JobType"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.Update(ESolve.Entities.Models.JobType)">
            <summary>
            Updates JobType object values in Database table tblJobTypes with values passed inside JobType object in function argument.
            </summary>
            <param name="entity">JobType object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetAll(ESolve.Entities.Filters.JobTypeFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)">
            <summary>
            Returns JobTypes as Pagged Collection. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/> for model details.
            </summary>
            <param name="sampleFilterModel"></param>
            <param name="url"></param>
            <param name="methodName"></param>
            <param name="className"></param>
            <returns>PagedCollectionResponse as JobTypeDTO. See <see cref="T:ESolve.Entities.DTOs.JobTypeDTO"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.JobTypeCanBeDeleted(System.Int64,System.Int64)">
            <summary>
            Check does passed JobType can be deleted.
            <c>JobType can be deleted</c> 
            <list type="bullet">
            <item>
            <term>JobTypeRemoved</term>
            <description>Selected JobType has different name from 'Job Type Renamed'.</description>
            </item>
            <item>
            <term>There is no Jobs</term>
            <description>There is no Jobs where JobTypeID is equal with passed value.</description>
            </item>
            <item>
            <term>There is no Jobs in the Future</term>
            <description>There is no Jobs in the FUTURE where JobTypeID is equal with passed value.</description>
            </item>
            <item>
            <term>There is no Jobs in range[Today, (Today - _numberOfDaysInPastWhereYouShouldNotUseThisJobType)]</term>
            <description>There is no Jobs in range where JobTypeID is equal with passed value.</description>
            </item>
            </list>
            </summary>
            <param name="jobTypeID">JobType primary Key which we want to delete</param>
            <param name="jobTypeRemovedID">JobTypeRemoved Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.Add(System.String)">
            <summary>
            
            </summary>
            <param name="jobTypeName">JobType Name</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetByJobTypeID(System.Int64)">
            <summary>
            Response for Get JobTypeBy ID
            </summary>
            <param name="jobTypeID">JobType Primary Key</param>
            <returns>JobTypeValueDTO object</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypeSkills(System.Boolean,System.Int64)">
            <summary>
            Returns list of essential or non-essential skills
            </summary>
            <param name="isEssential">Indicator if we are looking for essential or non-essential skills</param>
            <param name="jobTypeID">Job type's primary key</param>
            <returns>List of skills</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypeCalculationsDTO(System.Int64)">
            <summary>
            Getting JobType for calculations
            </summary>
            <param name="jobTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypeTemplateCalculationsDTO(System.Collections.Generic.List{System.Int64})">
            <summary>
            Getting JobType for calculations
            </summary>
            <param name="jobTypeIDs"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypeTemplateCalculationsDTO(System.Int64)">
            <summary>
            Getting JobType for Template calculations
            </summary>
            <param name="jobTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypeCalculationsDTO(System.Collections.Generic.List{System.Int64})">
            <summary>
            Getting JobType for calculations
            </summary>
            <param name="jobTypeIDs"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.UpdateJobTypeValue(ESolve.Entities.DTOs.JobTypeValueDTO,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.PushNotificationManager,ESolve.Entities.DataManager.LoneWorkerAlertsManager,ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager,Microsoft.Extensions.Configuration.IConfiguration,System.Int64)">
            <summary>
            Updating job type
            </summary>
            <param name="jobTypeValueDTO">job type values</param>
            <param name="tradeManager">Manager for trades offers</param>
            <param name="pushNotificationManager">Manager for notifications</param>
            <param name="loneWorkerAlertsManager">Manager for lone worker alerts</param>
            <param name="attendanceConfirmationAlertsManager">Manager for attendance confirmation</param>
            <param name="configuration"></param>
            <param name="userId">User Id</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetAllCustomDataForJobType(System.Int64)">
            <summary>
            Return all SubGroupCustomData with values and other which are not assigned without values
            </summary>
            <param name="jobtypeID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.RemoveComparisonRule(System.Int64)">
            <summary>
            Removing comparison rule
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypeIdNameList">
            <summary>
            This method return all JobType objects from Database table tblJobTypes in JobTypeDropDown model form.
            </summary>
            <returns>List of JobTypeDropDown objects. See <see cref="T:ESolve.Entities.Models.DropDowModels.JobTypeDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetIdNameList">
            <summary>
            This method return all JobType objects from Database table tblJobTypes in IdNameDropDownModel model form.
            </summary>
            <returns></returns>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetAllowedTrade(System.Int64)">
            <summary>
            Get allowed trade flag for job type that has passed primary key.
            </summary>
            <param name="id">Job type's primary key.</param>
            <returns>Value of AllowedTrade property of job type. </returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypeComboSearchValues(System.String)">
            <summary>
            Getting job types which name constraints passed search term
            </summary>
            <param name="searchTerm">Search term</param>
            <returns>List of IdNameDropDownModel object for job types that are matched with search term</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check is JobType Name unique in Database table tblJobTypes.
            </summary>
            <param name="filter">Id and JobType name values</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetSkillCodes">
            <summary>
            Get All SkillCodes
            </summary>
            <returns>All SkillCodes</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetTimeUnits">
            <summary>
            Get All TimeUnits in IdNameDropDownModel.
            </summary>
            <returns>All TimeUnits in IdNameDropDownModel</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetComprasionMode">
            <summary>
            Get All ComparisionModes in IdNameDropDownModel.
            </summary>
            <returns>All ComparisionModes in IdNameDropDownModel</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetOperator">
            <summary>
            Get All Operators in IdNameDropDownModel.
            </summary>
            <returns>All Operators in IdNameDropDownModel</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetOldJobTypeValueDTO(ESolve.Entities.Models.JobType)">
            <summary>
            Get old jobType Value DTO
            </summary>
            <param name="jobTypeToUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.AuditLogJobType(ESolve.Entities.DTOs.JobTypeValueDTO,System.Int64,ESolve.Entities.Models.JobTypeAuditModel,System.String)">
            <summary>
            Method insert audit log of JobType in tblAuditTrail table.
            </summary>
            <param name="newJobTypeValueDTO">new job type value dto</param>
            <param name="userId">user Id</param>
            <param name="oldJobTypeValueDTO">old job type value dto</param>
            <param name="action">action should be insert, update or delete</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypeCurrentValue(ESolve.Entities.DTOs.JobTypeValueDTO,ESolve.Entities.Models.JobTypeAuditModel)">
            <summary>
            This method retrun old and new value of job type all parameters
            </summary>
            <param name="newJobTypeValueDTO">new Job Type Value DTO</param>
            <param name="oldJobTypeValueDTO">old Job Type Value DTO </param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetOldNewValue(System.String,System.String,System.String)">
            <summary>
            This method retrun old and new value of employee single parameters
            </summary>
            <param name="newValue">new value</param>
            <param name="oldValue">old value</param>
            <param name="propertyName">updated parameter name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.SaveAuditData(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This function save job type audit details
            </summary>
            <param name="auditDetails"> Audit details dictionary</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypesWhereCheckingIsRequired">
            <summary>
            Method will return list of JobTypeIDs where something need to be checked in order to calculate Availabilty
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetJobTypesWhereCheckingIsNotRequired(System.Collections.Generic.List{System.Int64})">
            <summary>
            Method will return list of JobTypeIDs where no need for calculations at all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetEssentialSkillCodesForPassedSkillCodeID(System.Int64)">
            <summary>
            For passed skillCodeID we will get list of all JobTypes Where passed skill is in essential list
            </summary>
            <param name="skillCodeID">SkillCode Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.JobTypeManager.GetNonEssentialSkillCodesForPassedSkillCodeID(System.Int64)">
            <summary>
            For passed skillCodeID we will get list of all JobTypes Where passed skill is in non essential list
            </summary>
            <param name="skillCodeID">SkillCode Primary Key</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.LicenseManager">
            <summary>
            Manager for licenses
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            ClassManager constructor which initialize Repository context.
            </summary>
            <param name="context">Represents repository with which ClassManager will communicate.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.Get(ESolve.Entities.DataManager.ConfigSettingsManager,ESolve.Contracts.ILoggedInUser,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Getting licenses
            </summary>
            <param name="configSettingsManager">Config settings manager</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="configuration">App's configuration for reading Rostering Version</param>
            <returns>License object</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.getLicenseData(ESolve.Entities.Models.License)">
            <summary>
            This function extract license details from string
            </summary>
            <param name="licenseRecord">license record</param>
            <returns>LicenseDTO</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.GetNewLicense(ESolve.Entities.DataManager.ConfigSettingsManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for generating new installation ID
            </summary>
            <returns>Value of new installation</returns>
            <exception cref="T:System.InvalidOperationException">The exception that is thrown when a method call is invalid for the object's current
            state.</exception>
            <exception cref="T:Microsoft.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error. This
            class cannot be inherited.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The exception that is thrown when a configuration error has occurred.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:System.IO.IOException">The exception that is thrown when an I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The exception that is thrown when an operation is performed on a disposed object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">The exception that is thrown by methods invoked through reflection. This class
            cannot be inherited.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">The exception that is thrown when an encoder fallback operation fails. This class
            cannot be inherited.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the value of an argument is outside the allowable
            range of values as defined by the invoked method.</exception>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when
            a composite format string is not well formed.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.Get">
            <summary>
            Get license details
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.Add(ESolve.Entities.Models.License)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.Delete(ESolve.Entities.Models.License)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.GetAll">
            <summary>
            Not implmeneted
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.Update(ESolve.DataIntegrations.Models.License.LicenseUpdate,System.Int64,ESolve.Entities.DataManager.AuditTrailManager,ESolve.Entities.DataManager.ConfigSettingsManager)">
            <summary>
            Update License details
            </summary>
            <param name="licenseRequestData">License data received in request</param>
            <param name="loggedInUser">Logged in user</param>
            <param name="auditTrailManager">Object of audit trail manager</param>
            <param name="configSettingsManager">Object of config settings manager></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.AuditLogForLicense(System.Int64,ESolve.Entities.DataManager.AuditTrailManager,AuditOperationTypes,ESolve.Entities.Models.License,ESolve.Entities.DTOs.LicenseDTO)">
            <summary>
            Insert audit log record while add or update license data
            </summary>
            <param name="userID">Logged in user id</param>
            <param name="auditTrailManager">Object of audit trail manager</param>
            <param name="operationType">Operation type</param>
            <param name="licenseToUpdate">Object of updated license properties </param>
            <param name="previouslicenseData">Already saved license data</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.LicenseManager.ApplySHA256HashOnData(System.String)">
            <summary>
            Hash data using SHA256 algorithm 
            </summary>
            <param name="dataToHash">Input Data to hash</param>
            <returns>SHA256 hashed string</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.LocalesManager">
            <summary>
             Locales Manager contains all methods for performing Locales data functions.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocalesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocalesManager.GetAll">
            <summary>s
            Get all Locales from database.
            </summary>
            <returns>All Locales from database</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocalesManager.Add(ESolve.Entities.Models.Locales)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocalesManager.Delete(ESolve.Entities.Models.Locales)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocalesManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocalesManager.Update(ESolve.Entities.Models.Locales)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.LocationManager">
            <summary>
            LocationManager class contains all methods for performing Location data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new Location object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing Location object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing Location object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one Location object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all Location objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all Location objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Unique name</term>
            <description>Check if Location name in use.</description>
            </item>
            <item>
            <term>Add array of locations.</term>
            <description>Add passed array of locations.</description>
            </item>
            <item>
            <term>Update array of locations.</term>
            <description>Update passed array of location. If in array is location which is not in database, it will be added.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.Add(ESolve.Entities.Models.Location)">
            <summary>
            Inserts passed Location object in Database table tblLocations.
            </summary>
            <param name="entity">Represents Location object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.Add(ESolve.Entities.Models.Location[])">
            <summary>
            Inserts passed Location array object in Database table tblLocations.
            </summary>
            <param name="locations">Represents array of location object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.Update(ESolve.Entities.Models.Location[])">
            <summary>
            Updates location objects in Database table tblLocations with values passed inside array of location objects in function argumen. 
            If locationID does not exist, new row will be added.
            </summary>
            <param name="updatedLocations">Location objects with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.Delete(ESolve.Entities.Models.Location)">
            <summary>
            Removes passed Location object from Database table tblLocations.
            </summary>
            <param name="entity">Represents Location object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.Get(System.Int64)">
            <summary>
            Returns Location object from Database table tblLocations where Id is equal with passed value.
            </summary>
            <param name="id">Location Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.GetAll">
            <summary>
            Returns all Location objects from Database table tblLocations.
            </summary>
            <returns>List of Location objects. See <see cref="T:ESolve.Entities.Models.Location"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.Update(ESolve.Entities.Models.Location)">
            <summary>
            Updates Location object values in Database table tblLocations with values passed inside Location object in function argument.
            </summary>
            <param name="entity">Location object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.GetIdNameList">
            <summary>
            This method return all Location objects from Database table tblLocations in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LocationManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if Location Name is unique in Database table tblLocations.
            </summary>
            <param name="filter">Id and Location Name value</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.LoneWorkerAlertsManager">
            <summary>
            Manager for sending lone worker alerts
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.LoneWorkerAlertsManager._repositoryContext">
            <summary>
            Db Context
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.LoneWorkerAlertsManager._pushNotificationManager">
            <summary>
            Manager for push notifications
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.#ctor(ESolve.Entities.RepositoryContext,System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}})">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Context which will be injected into RepositoryContext variable.</param>
            <param name="serviceProvider">Service provider for notifications</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.SendLoneWorkerAlerts(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Sending lone worker alerts 
            </summary>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.CreateNotificationForAssignedEmployee(System.Int64,ESolve.Entities.Models.Job,System.String)">
            <summary>
            Creating notification for assigned employee
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="job">Job</param>
            <param name="nameOfTheFirstDayInWeek">Name of the first day in week from tblScheduleDatePreferences</param>
            <returns>Notification that will be send to an employee</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.GenerateEmailNotificationForAssignedEmployee(ESolve.Entities.Models.Employee,ESolve.Entities.Models.Job,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.CreateNotificationForManagerOrAdmin(System.Int64,ESolve.Entities.Models.Employee,ESolve.Entities.Models.Job,System.Nullable{System.DateTime})">
            <summary>
            Creating lone worker notification for manager or admin
            </summary>
            <param name="userId">User's primary key</param>
            <param name="employee">Employee object</param>s
            <param name="job">Job</param>
            <param name="dateTimeOfNotification">DateTime of the notification for lone worker check in</param>
            <returns>Notification that will be send to user</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.GetEmailNotificationsForManagerOrAdmin(System.Int64,ESolve.Entities.Models.Employee,ESolve.Entities.Models.Job,System.Nullable{System.DateTime},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            GetEmailNotificationsForManagerOrAdmin
            </summary>
            <param name="userId"></param>
            <param name="employee"></param>
            <param name="job"></param>
            <param name="dateTimeOfNotification"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.UpdateLoneWorkerCheckInsAfterJobUpdate(System.Collections.Generic.List{System.Int64})">
            <summary>
            Update lone worker chekins after changes lone worker section on job type or job
            </summary>
            <param name="jobsIDs">Jobs which lone worker section is changed.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.LoneWorkerCheckIn(System.Int64,System.Int64,System.Nullable{System.DateTime},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            This method is used for lone worker Check in
            </summary>
            <param name="jobID">Job's primary key</param>
            <param name="employeeID">Employee's primary key</param>
            <param name="dateTimeOfNotification">DateTime of the notifickation that is sent to the employee for lone worker check in</param>
            <param name="configuration">Configuration</param>
            <returns>Key value pair where key is archoved notifications and value is message.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.GetLoneWorkerCheckInsForPassedJobs(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            Get lone worker check ins for passed jobs and employee
            Ths method is used for action where employee can do right-click on job that is in on calendar and press "check in"
            This is avaialble on job where assigned employee did not response on last lone worker check in fort that job
            </summary>
            <param name="jobHistoryIDs">Pointer to the Job's primary key</param>
            <param name="employeeID">Employee's primary key</param>
            <returns>List of lone worker check ins</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.GetAll(ESolve.Entities.Filters.LoneWorkerAlertFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method get wanted count of lone worker alerts which satisfies searchTerm criteria. Generate Next and Previous Page link.
            </summary>
            <param name="filterModel">Lone Worker Alert Filter with data for filtering.</param>
            <param name="url">Url which invoked method</param>
            <param name="methodName">Caller Method name</param>
            <param name="className">Caller class name</param>
            <param name="loggedInUser">Logged in user</param>
            <returns>PagedCollectionResponse LoneWorkerAlert of Lone Worker Alerts. See <see cref="T:ESolve.Entities.Pagination.PagedCollectionResponse`1"/> and <see cref="T:ESolve.Entities.DTOs.LoneWorkerAlertDTO"/> for more details. </returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, or conversion operation
            in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.GetAll(ESolve.Entities.Filters.LoneWorkerTransactionLogFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Get all attendance confirmation from database
            </summary>
            <param name="filter">Filter for getting employees</param>
            <param name="url">Url for the page</param>
            <param name="methodName">Method name</param>
            <param name="className">Class name</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>PagedCollectionResponse with AttendanceConfirmationDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.FindNextTimeAfterReccuringInterval(System.DateTime,System.DateTime,System.TimeSpan,System.DateTime,System.Boolean)">
            <summary>
            Method for finding next time after reccuring interval 
            </summary>
            <param name="startDate">Job's start date and time</param>
            <param name="endDate">Job's end date and time</param>
            <param name="reccuringInterval">Job's reccuring interval</param>
            <param name="currentTime">Current time</param>
            <param name="includeCurrentTime">Flag if current time can be next recucuring interval (sending lone worker alert imediatly on assign new employee)</param>
            <returns>Time that presents time to send lone worker alert message to employee who is assigned in meanwhile</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.Get(System.Int64)">
            <summary>
            Get Lone Worker Alert By passed ID
            </summary>
            <param name="id"></param>
            <returns>Lone Worker Alert Object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.Update(ESolve.Entities.DTOs.LoneWorkerAlertDTO)">
            <summary>
            Update existing lone worker alert from database
            </summary>
            <param name="entity">LoneWorkerAlertDTO object that will be updated.</param>
            <returns>Ok if lone worker alert is successfully updated, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.Delete(ESolve.Entities.Models.LoneWorkerAlert)">
            <summary>
            Deleting CLOSED lone worker alert from database
            </summary>
            <param name="entity">Lone Worker Alert object that will be deleted</param>
            <returns>True if lone worker alert is successfully deleted, otherwise returns false.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.Add(ESolve.Entities.Models.LoneWorkerAlert)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.LoneWorkerAlertsManager.Update(ESolve.Entities.Models.LoneWorkerAlert)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.NotificationTypeManager">
            <summary>
            NotificationManager class contains all methods for performing Notification data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new Notification object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing Notification object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing Notification object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one Notification object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all Notification objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all Notification objects from Database in DropDown Form.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.NotificationTypeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.NotificationTypeManager.Add(ESolve.Entities.Models.NotificationType)">
            <summary>
            Inserts passed Notification object in Database table tblNotifications.
            </summary>
            <param name="entity">Notification Location object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.NotificationTypeManager.Delete(ESolve.Entities.Models.NotificationType)">
            <summary>
            Removes passed Notification object from Database table tblNotifications.
            </summary>
            <param name="entity">Represents Notification object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.NotificationTypeManager.Get(System.Int64)">
            <summary>
            Returns Notification object from Database table tblNotifications where Id is equal with passed value.
            </summary>
            <param name="id">Notification Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.NotificationTypeManager.GetAll">
            <summary>
            Returns all Notification objects from Database table tblNotifications.
            </summary>
            <returns>List of Notification objects. See <see cref="T:ESolve.Entities.Models.NotificationType"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.NotificationTypeManager.Update(ESolve.Entities.Models.NotificationType)">
            <summary>
            Updates Notification object values in Database table tblNotifications with values passed inside Notification object in function argument.
            </summary>
            <param name="entity">Notification object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.NotificationTypeManager.GetIdNameList">
            <summary>
            This method return all Notification objects from Database table tblNotifications in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.PermissionsManagers.AbsencePermissionsManager">
            <summary>
            Managing AbsencePermissions logic
            </summary>
            
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.AbsencePermissionsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.AbsencePermissionsManager.Add(ESolve.Entities.Models.AbsencePermissions)">
            <summary>
            Adds new absence permission in database
            </summary>
            <param name="entity">AbsencePermissions object to be inserted.</param>
            <returns>True if AbsencePermissions is added.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.AbsencePermissionsManager.Update(ESolve.Entities.Models.AbsencePermissions)">
            <summary>
            Update existing absence permission in database
            </summary>
            <param name="entity">Absence permission to be updated</param>
            <returns>True if absence permission is successfully updated.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.AbsencePermissionsManager.Delete(ESolve.Entities.Models.AbsencePermissions)">
            <summary>
            Delete absence permission from database
            </summary>
            <param name="entity">AbsencePermissions object to be deleted.</param>
            <returns>True if absence permission is deleted.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.AbsencePermissionsManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.AbsencePermissionsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager">
            <summary>
            Managing EmployeePermissions logic
            </summary>
            
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.Add(ESolve.Entities.Models.EmployeePermissions)">
            <summary>
            Adds new employee permission in database
            </summary>
            <param name="entity">EmployeePermissions object to be inserted.</param>
            <returns>True if EmployeePermissions is added.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.Update(ESolve.Entities.Models.EmployeePermissions)">
            <summary>
            Update existing EmployeePermissions in database
            </summary>
            <param name="entity">EmployeePermissions to be updated</param>
            <returns>True if EmployeePermissions is successfully updated.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.Delete(ESolve.Entities.Models.EmployeePermissions)">
            <summary>
            Delete EmployeePermissions from database
            </summary>
            <param name="entity">EmployeePermissions object to be deleted.</param>
            <returns>True if EmployeePermissions deleted</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.CanEmployeeSeeSchedule(ESolve.Entities.Models.Employee)">
            <summary>
            Method which checks does passed Employee have permission to see Schedule
            </summary>
            <param name="employee">Employee which will be checked</param>
            <returns>Indicator does passed employee have permission to see Schedule</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.CanEmployeeTradeJobs(ESolve.Entities.Models.Employee)">
            <summary>
            Method which checks does passed Employee have permission to Trade Jobs
            </summary>
            <param name="employee">Employee which will be checked</param>
            <returns>Indicator does passed employee have permission to Trade Jobse</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.CanEmployeeOfferJobForTrade(System.Int64,System.Int64)">
            <summary>
            For passed job and employee Id, method will check is passed employee already offered passed job.
            </summary>
            <param name="jobId">Job Primary Key</param>
            <param name="employeeId">employee Primary Key</param>
            <returns>Indicator is job already offered</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.CanEmployeeSeeAbsenceCalendar(ESolve.Entities.Models.Employee)">
            <summary>
            Method which checks does passed Employee have permission to See Absence Calendar
            </summary>
            <param name="employee">Employee which will be checked</param>
            <returns>Indicator does passed employee have permission to See Absence Calendar</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.CanEmployeeAccessJobOffers(ESolve.Entities.Models.Employee)">
            <summary>
            Method which checks does passed Employee have permission to See Job Offers
            </summary>
            <param name="employee">Employee which will be checked</param>
            <returns>Indicator does passed employee have permission to See Job Offers</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.EmployeePermissionsManager.CanEmployeeAccessTradeOffers(ESolve.Entities.Models.Employee)">
            <summary>
            Method which checks does passed Employee have permission to See Job Trades
            </summary>
            <param name="employee">Employee which will be checked</param>
            <returns>Indicator does passed employee have permission to See Job Trades</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.PermissionsManagers.PermissionOptionsManager">
            <summary>
            Managing PermissionOptionManager logic (dropdown list in bottom-right side of profile's dialog)
            </summary>
            
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionOptionsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionOptionsManager.GetAll">
            <summary>
            Get all Permission types from database
            </summary>
            <returns>All Permission types.</returns>ž
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionOptionsManager.Delete(ESolve.Entities.Models.PermissionOption)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionOptionsManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionOptionsManager.Add(ESolve.Entities.Models.PermissionOption)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionOptionsManager.Update(ESolve.Entities.Models.PermissionOption)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager">
            <summary>
            Managing PermissionTypeManager logic (dropdown list in right side of employee profile)
            </summary>
            
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager.GetAllByUserRole(System.Boolean)">
            <summary>
            Getting permissions types by current loggedin user's role
            </summary>
            <param name="isUserProfile">Flag if we are getting permissions types fro user or employee profile</param>
            <returns>List of permission types</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager.GetAll(System.Boolean)">
            <summary>
            Get all Permission types for given user type from database
            </summary>
            <param name="isUserProfile">Flag if we are getting permissions types fro user or employee profile</param>
            <returns>All Permission types.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager.GetAll">
            <summary>
            Get all Permission types from database
            </summary>
            <returns>All Permission types.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager.Add(ESolve.Entities.Models.PermissionType)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager.Delete(ESolve.Entities.Models.PermissionType)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.PermissionTypesManager.Update(ESolve.Entities.Models.PermissionType)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.PermissionsManagers.ReportPermissionsManager">
            <summary>
            Managing EmployeePermissions logic
            </summary>
            
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.ReportPermissionsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.ReportPermissionsManager.Add(ESolve.Entities.Models.ReportPermissions)">
            <summary>
            Adds new report permission in database
            </summary>
            <param name="entity">ReportPermissions object to be inserted.</param>
            <returns>True if ReportPermissions is added.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.ReportPermissionsManager.Update(ESolve.Entities.Models.ReportPermissions)">
            <summary>
            Update existing ReportPermissions in database
            </summary>
            <param name="entity">ReportPermissions to be updated</param>
            <returns>True if DashboardReportPermissionsPermissions is successfully updated.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.ReportPermissionsManager.Delete(ESolve.Entities.Models.ReportPermissions)">
            <summary>
            Delete ReportPermissions from database
            </summary>
            <param name="entity">ReportPermissions object to be deleted.</param>
            <returns>True if DashboardReportPermissionsPermission deleted</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.ReportPermissionsManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.ReportPermissionsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager">
            <summary>
            Managing SchedulePermissions logic
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.Add(ESolve.Entities.Models.SchedulePermissions)">
            <summary>
            Adds new schedule permission in database
            </summary>
            <param name="entity">SchedulePermissions object to be inserted.</param>
            <returns>True if Schedule permissions is added.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.Update(ESolve.Entities.Models.SchedulePermissions)">
            <summary>
            Update existing SchedulePermissions in database
            </summary>
            <param name="entity">SchedulePermissions to be updated</param>
            <returns>True if SchedulePermissions is successfully updated.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.Delete(ESolve.Entities.Models.SchedulePermissions)">
            <summary>
            Delete SchedulePermissions from database
            </summary>
            <param name="entity">SchedulePermissions object to be deleted.</param>
            <returns>True if SchedulePermissions deleted</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.CheckDoesUserHaveAccessExistingSchedulesPermission(System.Int64)">
            <summary>
            For passed SchedulePermissionID method will return property AccessExistingSchedules
            </summary>
            <param name="schedulePermissionsID">SchedulePermission Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.CheckCanUserOfferJobs(System.Int64)">
            <summary>
            For passed SchedulePermissionID method will return property JobOffers
            </summary>
            <param name="schedulePermissionsID">SchedulePermission Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.GetSchedulePermissionsForUser(System.Int64,System.Int64)">
            <summary>
            For passed ScheduleID method will return all schedule permissions for passed User
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="userID">User Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SchedulePermissionsManager.GetSubGroupsWithModifyOrLimittedModifyPremissionForPassedScheduleAsNoTracking(ESolve.Contracts.ILoggedInUser,System.Int64,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ProfileManager)">
            <summary>
            For passed Parameters method will return all SubGroups where logged in user have 
            Modify or Limited - Modify Permissions on selected Schedule
            </summary>
            <param name="loggedInUser">Currently logged in user</param>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="subGroupManager">Manager for accesing SubGroup context</param>
            <param name="userManager">Manager for accesing User context</param>
            <param name="profileManager">Manager for accesing Profile context</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.PermissionsManagers.SystemPermissionsManager">
            <summary>
            Managing SystemPermissions logic
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SystemPermissionsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SystemPermissionsManager.Add(ESolve.Entities.Models.SystemPermissions)">
            <summary>
            Adds new system permission in database
            </summary>
            <param name="entity">SystemPermissions object to be inserted.</param>
            <returns>True if SystemPermissions is added.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SystemPermissionsManager.Update(ESolve.Entities.Models.SystemPermissions)">
            <summary>
            Update existing SystemPermissions in database
            </summary>
            <param name="entity">SystemPermissions to be updated</param>
            <returns>True if SystemPermissions is successfully updated.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SystemPermissionsManager.Delete(ESolve.Entities.Models.SystemPermissions)">
            <summary>
            Delete SystemPermissions from database
            </summary>
            <param name="entity">SystemPermissions object to be deleted.</param>
            <returns>True if SystemPermissions deleted</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SystemPermissionsManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.PermissionsManagers.SystemPermissionsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ProfileManager">
            <summary>
            Login for profiles
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.#ctor(ESolve.Entities.RepositoryContext,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.License})">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
            <param name="_licenseManager">Repository which will be injected in LicenseManager. <see cref="T:ESolve.Entities.DataManager.LicenseManager"/></param>
            <param name="configSettingsManager">Repository which will be injected in ConfigSettingsManager. <see cref="T:ESolve.Entities.DataManager.LicenseManager"/></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.Add(ESolve.Entities.DTOs.PermissionDTO,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Inserts passed Profile object in Database table tblProfiles.
            </summary>
            <param name="permissionDTO">dTO with profile info and all permissions info.</param>
            <param name="userId"></param>
            <param name="auditTrailManager"></param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.Update(ESolve.Entities.DTOs.PermissionDTO,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Updates profile and its permissions passed in PermissionDTO object
            </summary>
            <param name="permissionDTO">Object with new values for existing profile.</param>
            <param name="userId"></param>
            <param name="auditTrailManager"></param>
            <returns>True if profile and its permissions are updated.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.Delete(ESolve.Entities.Models.Profile,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Removes passed Profile object from Database table tblProfiles.
            </summary>
            <param name="profile">Represents Profile object which will be removed.</param>
            <param name="userId"></param>
            <param name="auditTrailManager"></param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetById(System.Int64)">
            <summary>
            Returns Profile object from Database table tblProfiels where Id is equal with passed value.
            </summary>
            <param name="id">EmployeeProfile Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.ESolve#Entities#Repository#IRepositoryBase{ESolve#Entities#Models#Profile}#GetAll">
            <summary>
            not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetUserProfileWithSchedulePermissionsByIDAsNoTracking(System.Int64)">
            <summary>
            For passed profile primary key method will return Database object with 
            included SchedulePermissions object
            </summary>
            <param name="profileId">Profile Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetUserProfilesByIDs(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed List of profile ids method will return Database object with 
            included SchedulePermissions object
            </summary>
            <param name="profileIds">Collection of primary kies</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.CheckDoesEmployeeHaveJobOfferPermission(ESolve.Entities.Models.Employee,ESolve.Entities.Models.Profile)">
            <summary>
            For passed employee and profile, method will return does employee have JobOffer permission
            </summary>
            <param name="employee">Employee which will be checked</param>
            <param name="profile">Employee Profile</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.CheckDoesUserHaveSubmittForApprovalPermission(ESolve.Contracts.ILoggedInUser)">
            <summary>
            For passed User method will return indicator does user have permission for submitting for approval
            </summary>
            <param name="loggedInUser">User which will be checked</param>
            <returns>True if User have permission or False if don't have</returns>
            <exception cref="T:System.ArgumentNullException">Exception will be raised if some argument is null</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetAll(ESolve.Entities.Pagination.SampleFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)">
            <summary>
            Get all employees' profiles
            </summary>
            <param name="filterModel">Filter for getting employees profiles</param>
            <param name="url">URL from where is method Invoked</param>
            <param name="methodName">Caller Method Name</param>
            <param name="className">Caller Class Name</param>
            <returns>List of key value pair with id and name of employees' profiles</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is
            not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.DuplicateProfile(System.Int64,System.String,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Method for duplicating existing profile.
            </summary>
            <param name="id">Profile's primary key for copying</param>
            <param name="name">Name of duplicated profile</param>
            <param name="userId"></param>
            <param name="auditTrailManager"></param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.Get(System.Int64)">
            <summary>
            Get Profile with passed id
            </summary>
            <param name="id">Profile's primary key</param>
            <returns>Profile with passed id</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetProfileAsNoTracking(System.Int64)">
            <summary>
            Get Profile as no tracking with passed id
            </summary>
            <param name="id">Profile's primary key</param>
            <returns>Profile as no tracking with passed id</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetIdNameList(System.Boolean)">
            <summary>
            This method return all EmployeeProfile objects from Database table tblEmployeeProfiles in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.Add(ESolve.Entities.Models.Profile)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.Update(ESolve.Entities.Models.Profile)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.Delete(ESolve.Entities.Models.Profile)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetProfilePermissions(ESolve.Contracts.ILoggedInUser)">
            <summary>
            
            </summary>
            <param name="loggedInUser">Represents current account's username.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.setUserProfilesPanelPermissions">
            <summary>
            Method that sets the panel permissions for user profiles as a part of Backward compatibility.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetSystemsAutoSolvePermission">
            <summary>
            Method that Return AutoSolve App Permission for Users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetProfilesAutoSolvePermission(System.Int64)">
            <summary>
            Method that Return AutoSolve App Permission for Users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetLinkedEmployeeRights(System.String)">
            <summary>
            Method that returns Linked Employee rights.
            Return values can be Modify/Read-only/null.
            </summary>
            <param name="username">Represents current account's username.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.CanUserOfferJobs(ESolve.Contracts.ILoggedInUser)">
            <summary>
            For passed User method will return nis permission for OfferingJobs
            </summary>
            <param name="loggedInUser">Currently loggedin user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.CanSelectedUserAssignPassedEmployee(ESolve.Contracts.ILoggedInUser,System.Collections.Generic.List{System.Int64},ESolve.Entities.Models.Job,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ScheduleManager)">
            <summary>
            
            </summary>
            <param name="loggedInUser"></param>
            <param name="employeeIds"></param>
            <param name="job"></param>
            <param name="userManager"></param>
            <param name="scheduleManager"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetPermissionsForAccessingSubGroup(ESolve.Entities.Models.SubGroup,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ScheduleManager)">
            <summary>
            Method will return permissions for passed subgroup and app user
            </summary>
            <param name="subGroup">Selected Subgroup</param>
            <param name="loggedInUser">Currently logged in user</param>
            <param name="userManager">Manager for Accessing Users</param>
            <param name="scheduleManager">Manager for Accessing Schedules</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.AuditLogForUserOrEmployeeProfile(ESolve.Entities.Models.Profile,System.Int64,AuditOperationTypes,ESolve.Entities.DataManager.AuditTrailManager,ESolve.Entities.Models.Profile,System.Collections.Generic.List{ESolve.Entities.Models.PanelPermission},System.Collections.Generic.List{ESolve.Entities.Models.PanelPermission})">
            <summary>
            Audit log for User Profile create/ update/ delete
            </summary>
            <param name="newProfile"></param>
            <param name="userId"></param>
            <param name="operationType"></param>
            <param name="auditTrailManager"></param>
            <param name="oldProfile"></param>
            <param name="newPanelPermissions"></param>
            <param name="oldPanelPermissions"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetUserProfileCurrentDetails(ESolve.Entities.Models.Profile,ESolve.Entities.Models.Profile)">
            <summary>
            Methods that returns User Profile Current and Previous value
            </summary>
            <param name="newProfile"></param>
            <param name="oldProfile"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetEmployeeProfileCurrentDetails(ESolve.Entities.Models.Profile,ESolve.Entities.Models.Profile)">
            <summary>
            Methods that returns Employee Profile Current and Previous value
            </summary>
            <param name="newProfile"></param>
            <param name="oldProfile"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ProfileManager.GetEmployeePanelPermission(System.Collections.Generic.List{ESolve.Entities.Models.PanelPermission},System.Collections.Generic.List{ESolve.Entities.Models.PanelPermission})">
            <summary>
            Methods that returns Employee Panel Permission Current and Previous value
            </summary>
            <param name="newPermission"></param>
            <param name="oldPermission"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.RankingManager">
            <summary>
            RankingManger class contains all methods for performing Ranking type data functions.
            <list type="bullet">
            <item>
            <term>GetAll</term>
            </item>
            <item>
            <term>GetAllBySchedule</term>
            </item>
            <item>
            <term>GetAllByScheduleWithAllRankingFields</term>
            </item>
            <item>
            <term>Get</term>
            </item>
            <item>
            <term>Add</term>
            </item>
            <item>
            <term>Update</term>
            </item>
            <item>
            <term>UpdateAll</term>
            </item>
            <item>
            <term>Delete</term>
            </item>
            <item>
            <term>GetAll</term>
            </item>
            <item>
            <term>IsNameUniqueForSelectedSchedule</term>
            </item>
            <item>
            <term>ChangeRankingOrder</term>
            </item>
            <item>
            <term>MapRankingListViewDTO</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.GetAll">
            <summary>
            Returns all Rankings objects from Database in tblRankings.
            </summary>
            <returns>List of Ranking objects in database. See <see cref="T:ESolve.Entities.Models.Ranking"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.GetAllBySchedule(System.Int64)">
            <summary>
            Returns all Rankings objects with given sheduleId from Database table tblRankings.
            </summary>
            <returns>List of RankingListViewDTO objects based on Rankings in database. See <see cref="T:ESolve.Entities.DTOs.RankingListViewDTO"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.GetAllByScheduleWithAllRankingFields(System.Int64)">
            <summary>
            Returns all rankings of selected schedule (with all fields)
            </summary>
            <returns>List of Ranking objects  in database. See <see cref="T:ESolve.Entities.Models.Ranking"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.Get(System.Int64)">
            <summary>
            Get one Ranking with all included entities which are connected via foreign kies. 
            Returned Ranking is Ranking where Primary Key in Database is equal with passed id.
            </summary>
            <param name="id">Represents Primary Key in database.</param>
            <returns>Returns if it exists or BadRequest if Ranking doesn't exists.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.GetRankingsByScheduleID(System.Int64)">
            <summary>
            Get rankings with ranking rule and type of passed schedule
            </summary>
            <param name="scheduleID">Schedule's primary key</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.GetRankingRules(System.Int64)">
            <summary>
            Method that returns rankingDTO based on passed rankingID
            </summary>
            <param name="id">Ranking primary key</param>
            <returns>Return RankingDTO.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.GetEmployeeFields">
            <summary>
            Get employee fields for drop down in comparison mode
            </summary>
            <returns>IdNameDropDownModel array of employee fields</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.Add(ESolve.Entities.Models.Ranking)">
            <summary>
            Inserts passed Ranking object in Database table tblRankings.
            </summary>
            <param name="entity">Represents Location object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.Add(ESolve.Entities.DTOs.RankingDTO,System.Int64)">
            <summary>
            Inserts Rankiong object in Database table tblRankings based on passed RankingDTO.
            </summary>
            <param name="entity">Represents Location object which will be inserted.</param>
            <param name="loggedInUserId">Logged in userId</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.Update(ESolve.Entities.Models.Ranking)">
            <summary>
            Updates Ranking object values in Database table tblRankings with values passed inside Ranking object in function argument.
            </summary>
            <param name="entity">Ranking object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.Update(ESolve.Entities.DTOs.RankingDTO,System.Int64)">
            <summary>
            Updates Ranking object values in Database table tblRankings with values passed inside RankingDTO object in function argument.
            </summary>
            <param name="entity">Ranking object with new values.</param>
            <param name="loggedInUserId">Logged in userId</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.UpdateAll(ESolve.Entities.DTOs.RankingListViewDTO[],System.Int64)">
            <summary>
            Updates Rankings objects values in Database table tblRankings with values passed inside Job object in function argument.
            </summary>
            <param name="rankingList">Ranking list with new values.</param>
            <param name="loggedInUserId">Logged in UserId</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.Delete(ESolve.Entities.Models.Ranking)">
            <summary>
            Removes passed Ranking object from Database table tblRankings.
            Also removes all connected Entities where RankingID can't be null.
            </summary>
            <param name="entity">Represents Location object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.IsNameUniqueForSelectedSchedule(ESolve.Entities.Filters.RankingNameFilterModel)">
            <summary>
            check if ranking name is unique for selected schedule.
            </summary>
            <param name="filter">Filter with RankingID, ScheduleID and RankingName</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.SortEmployees(System.Int64,ESolve.Entities.Models.Job,ESolve.Entities.Models.TemplateJob,System.Collections.Generic.List{ESolve.Entities.Models.Employee},System.Collections.Generic.List{ESolve.Entities.Models.Ranking})">
            <summary>
            Method used for call methods that are sorting passed employees lists
            </summary>
            <param name="scheduleId">Job' schedule ID</param>
            <param name="job">Job</param>
            <param name="templateJob">TemplateJob</param>
            <param name="employees">List of employees</param>
            <param name="rankings">List of active rankings ordered by descending because ranking with order 1 has priority</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>  
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.ApplyDefaultJob(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.Models.Job,ESolve.Entities.Models.TemplateJob,ESolve.Entities.Models.RankingRule)">
            <summary>
            Apply default job ranking on available list of employees.
            </summary>
            <param name="employees"></param>
            <param name="rankingRule"></param>
            <param name="job"></param>
            <param name="templateJob"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <returns>Sorted available employee list based on default job ranking.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.ApplyScheduledHours(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.Models.Ranking,ESolve.Entities.Models.Job,ESolve.Entities.Models.RankingRule,ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Apply scheduled hours ranking on available list of employees.
            </summary>
            <param name="employees"></param>
            <param name="ranking"></param>
            <param name="job"></param>
            <param name="rankingRule"></param>
            <param name="scheduleDatePreference"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <returns>Sorted available employee list based on scheduled hours ranking.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.ApplyDayOfWeekFrequency(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.Models.Ranking,ESolve.Entities.Models.Job,ESolve.Entities.Models.RankingRule,ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Apply day of week frequency ranking on available list of employees.
            </summary>
            <param name="employees"></param>
            <param name="ranking"></param>ž
            <param name="job"></param>
            <param name="rankingRule"></param>
            <param name="scheduleDatePreference"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <returns>Sorted list of employees.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.ApplyJobTypeFrequency(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.Models.Ranking,ESolve.Entities.Models.Job,ESolve.Entities.Models.RankingRule,ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Apply job type frequency ranking on available list of employees.
            </summary>
            <param name="employees"></param>
            <param name="ranking"></param>
            <param name="job"></param>
            <param name="rankingRule"></param>
            <param name="scheduleDatePreference"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <returns>Sorted list of employees based job type frequency ranking.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.ApplyEmployeeFieldValue(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.Models.Ranking,ESolve.Entities.Models.Job,ESolve.Entities.Models.RankingRule)">
             <summary>
             Apply Employee field value ranking on available employee's list 
             </summary>
             <param name="employees">List of employees that need to be sorted based on employee field value.</param>
             <param name="ranking">Employee filed value ranking with values.</param>
             <param name="job">Ranking will be applied to this job.</param>
             <param name="rankingRule"></param>
             <returns>List of sorted employees.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument. </exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.ApplySkills(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.Models.Job)">
            <summary>
            Apply ranking on available list of employees based on non-essential skills.
            </summary>
            <param name="employees"></param>
            <param name="job"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <returns>Sorted available employee list based on default job ranking.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.GenerateDateRange(ESolve.Entities.Models.RankingRule,ESolve.Entities.Models.Job,ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Generate date range based on selected job and ranking rule.
            </summary>
            <param name="rankingRule"></param>
            <param name="job"></param>
            <param name="scheduleDatePreference"></param>
            <returns> Date range </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.ChangeRankingOrder(System.Int64)">
            <summary>
            Method changes ranking order when user add new ranking.
            </summary>
            <param name="rankingFromId">ID of added ranking</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.MapRankingListViewDTO(ESolve.Entities.DTOs.RankingListViewDTO,System.Int64)">
            <summary>
            Method maps given RankingListViewDTO into Ranking model.
            </summary>
            <param name="rankingListViewDTO"></param>
            <param name="loggedInUserId">Logged in userId</param>
            <returns>Ranking object.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.ValidateRanking(ESolve.Entities.DTOs.RankingDTO)">
            <summary>
            Method validates RankingDTO object fields.
            </summary>
            <param name="ranking"></param>
            <returns>RankingDTO object.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.MapRankingDTOIntoRanking(ESolve.Entities.DTOs.RankingDTO)">
            <summary>
            This method maps RankingDTO into Ranking model.
            </summary>
            <param name="rankingDTO"></param>
            <returns>Return Ranking object.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.SortEmployeesByEmployeeField(System.String,System.Boolean,System.Collections.Generic.List{ESolve.Entities.Models.Employee},System.String,System.String,System.Collections.Generic.List{ESolve.Entities.Models.EmployeeLocation},System.Collections.Generic.List{System.String})">
            <summary>
            Method used for sorting list of employeees by passed value and operator.
            </summary>
            <param name="employeeField">Employee field for comparing.</param>
            <param name="order">Indicator if sorting will be in asc or desc order.</param>
            <param name="employees">List of employees that will be sorted.</param>
            <param name="comparisonValue">Sort employees by value that is equal to passed comparison value.</param>
            <param name="operator">Comparison's operator</param>
            <param name="employeeLocations">Employees' locations</param>
            <param name="comparisonValues">Ranking's comparison values</param>
            <returns>Return sorted list of employees.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.GetFunctionDetails(ESolve.Entities.Models.Ranking)">
            <summary>
            Get details for ranking audit log
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.CheckIfStringEmpty(System.String)">
            <summary>
            Check if string is empty
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.CreateTupleForRankingUpdation(ESolve.Entities.DTOs.RankingDTO,ESolve.Entities.Models.Ranking)">
            <summary>
            Create a tuple with old and current ranking values
            </summary>
            <param name="updatedRanking"></param>
            <param name="oldRanking"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.AuditLogForRankingCreateOrDelete(ESolve.Entities.Models.Ranking,System.Int64,System.String)">
            <summary>
            Log audit while creating/deleting ranking
            </summary>
            <param name="entity"></param>
            <param name="loggedInUserId"></param>
            <param name="action"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.AuditLogForRankingUpdation(System.Int64,System.Collections.Generic.List{System.Tuple{System.Object,System.Object,System.Object}},ESolve.Entities.Models.Ranking,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Log audit for ranking update
            </summary>
            <param name="loggedInUserId"></param>
            <param name="tuples"></param>
            <param name="updatedRanking"></param>
            <param name="comparisonValuesToAdd"></param>
            <param name="comparisonValuesToDelete"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingManager.AuditLogForRankingStatusChange(System.Int64,System.Tuple{System.Object,System.Object,System.Object},ESolve.Entities.Models.Ranking)">
            <summary>
            Log audit for ranking status change
            </summary>
            <param name="loggedInUserId"></param>
            <param name="tuples"></param>
            <param name="entity"></param>
        </member>
        <member name="T:ESolve.Entities.DataManager.RankingRuleManager">
            <summary>
            RankingRuleManager class contains all methods for performing Ranking type data functions.
            <list type="bullet">
            <item>
            <term>Add new ranking</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingRuleManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingRuleManager.Add(ESolve.Entities.Models.RankingRule)">
            <summary>
            Inserts passed RankingRule object in Database table tblRankingRules.
            </summary>
            <param name="entity">Represents Location object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingRuleManager.Delete(ESolve.Entities.Models.RankingRule)">
            <summary>
            not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingRuleManager.Get(System.Int64)">
            <summary>
            not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingRuleManager.GetAll">
            <summary>
            not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingRuleManager.Update(ESolve.Entities.Models.RankingRule)">
            <summary>
            not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.RankingTypeManager">
            <summary>
            RankingTypeManager class contains all methods for performing Ranking type data functions.
            <list type="bullet">
            <item>
            <term>Get All</term>
            </item>
            <item>
            <term>Get</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingTypeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingTypeManager.GetAll">
            <summary>
            Returns all ranking types objects from Database table tblRankingTypes.
            </summary>
            <returns>List of ranking types objects. See <see cref="T:ESolve.Entities.Models.RankingType"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingTypeManager.Get(System.Int64)">
            <summary>
            Returns RankingType object from Database table tblRankingTypes where Id is equal with passed value.
            </summary>
            <param name="id">RankingType Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingTypeManager.GetRankingTypeDTO(System.Int64)">
            <summary>
            Returns RankingTypeDTO object.
            </summary>
            <param name="id">RankingType Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingTypeManager.Add(ESolve.Entities.Models.RankingType)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingTypeManager.Delete(ESolve.Entities.Models.RankingType)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingTypeManager.Update(ESolve.Entities.Models.RankingType)">
            <summary>
            NotImplemented
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.RankingTypeManager.ESolve#Entities#Repository#IRepositoryBase{ESolve#Entities#Models#RankingType}#GetAll">
            <summary>
            not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ReportExport.PdfManager">
            <summary>
            Pdf Manager, manager for generating reports in pdf format.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DataManager.ReportExport.PdfManager.RepositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="P:ESolve.Entities.DataManager.ReportExport.PdfManager.LoggedInUser">
            <summary>
            Represents current account's role.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor that initialize RepositoryContext
            </summary>
            <param name="repositoryContext">Repository context instance</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.#ctor(ESolve.Entities.RepositoryContext,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Constructor that initializes RepositoryContext as well as current account's info.
            </summary>
            <param name="repositoryContext">Repository context instance</param>
            <param name="loggedInUser">Current account's role.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.GetPdfDocument(ESolve.Entities.DTOs.ReportDataDTOs)">
            <summary>
            Based on the passed criteria, we generate a pdf report.
            </summary>
            <param name="reportData">Data with criteria which the report will be generated.</param>
            <returns>For return value, we send the report in pdf format, with printed data from the database based on the received criteria.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.GetReportData(ESolve.Entities.DTOs.ReportDataDTOs,System.String)">
            <summary>
            Obtaining all the data needed to generate a report.
            </summary>
            <param name="report">Data with criteria which the report will be generated.</param>
            <param name="levelName">The name of the first level at which the report generation begins.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.DrawPdf(ESolve.Entities.DTOs.ReportDataDTOs)">
            <summary>
            Drawing a pdf report by assigned and unassigned.
            </summary>
            <param name="reportData">Hierarchically arranged print data</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.DrawPdfTime(ESolve.Entities.DTOs.ReportDataDTOs)">
            <summary>
            Drawing a pdf report by scheduled time.
            </summary>
            <param name="reportData">Hierarchically arranged print data</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.ShouldCreateNewPage(System.Int32,System.Double,System.Boolean)">
            <summary>
            A method for calculating page size, and whether to create a new page
            </summary>
            <param name="possitionOnCurrentPage">The position to which the print is</param>
            <param name="pageHeight">Page height</param>
            <param name="isScheduleTime">At the beginning of each page it is necessary to print the header, based on this parameter we print the schedule time or assignment number</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel1(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method for drawing the first level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="assigned">The value that is drawn as the number of assigned employee for header title</param>
            <param name="unassigned">The value that is drawn as the number of unassigned employee for header title</param>
            <param name="isSubGroup"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel1(System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Method for drawing the first level, with the number of scheduled time
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="time">The value that is drawn as the period of time spent for header title</param>
            <param name="isDecimal">A parameter that tells in which format the time is printed</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel2(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method for drawing the second level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="assigned">The value that is drawn as the number of assigned employee for header title</param>
            <param name="unassigned">The value that is drawn as the number of unassigned employee for header title</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel2(System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Method for drawing the second level, with the number of scheduled time
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="time">The value that is drawn as the period of time spent for header title</param>
            <param name="isDecimal">A parameter that tells in which format the time is printed</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel3(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Method for drawing the third level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="assigned">The value that is drawn as the number of assigned employee for header title</param>
            <param name="unassigned">The value that is drawn as the number of unassigned employee for header title</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
            <param name="shouldHideLines">A parameter that tells whether it is necessary to print level lines</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel3(System.String,System.TimeSpan,System.String,System.Boolean,System.Boolean)">
            <summary>
            Method for drawing the third level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="time">The value that is drawn as the period of time spent for header title</param>
            <param name="isDecimal">A parameter that tells in which format the time is printed</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
            <param name="shouldHideLines">A parameter that tells whether it is necessary to print level lines</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel4(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Method for drawing the fourth level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="assigned">The value that is drawn as the number of assigned employee for header title</param>
            <param name="unassigned">The value that is drawn as the number of unassigned employee for header title</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
            <param name="shouldHideLines">A parameter that tells whether it is necessary to print level lines</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel4(System.String,System.TimeSpan,System.String,System.Boolean,System.Boolean)">
            <summary>
            Method for drawing the fourth level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="time">The value that is drawn as the period of time spent for header title</param>
            <param name="isDecimal">A parameter that tells in which format the time is printed</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
            <param name="shouldHideLines">A parameter that tells whether it is necessary to print level lines</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel5(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method for drawing the fifth level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="assigned">The value that is drawn as the number of assigned employee for header title</param>
            <param name="unassigned">The value that is drawn as the number of unassigned employee for header title</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel5(System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Method for drawing the fifth level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="time">The value that is drawn as the period of time spent for header title</param>
            <param name="isDecimal">A parameter that tells in which format the time is printed</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel6(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method for drawing the fifth level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="assigned">The value that is drawn as the number of assigned employee for header title</param>
            <param name="unassigned">The value that is drawn as the number of unassigned employee for header title</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.drawLevel6(System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Method for drawing the fifth level, with the number of the assignment
            </summary>
            <param name="heading">The value that is drawn as the header title</param>
            <param name="time">The value that is drawn as the period of time spent for header title</param>
            <param name="isDecimal">A parameter that tells in which format the time is printed</param>
            <param name="isSubGroup">A parameter that tells whether an item is a subgroup</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.GetLastLevelForDataForReport(System.Collections.Generic.List{ESolve.Entities.DTOs.DataForReport},System.Int32)">
            <summary>
            This method is used to collect all items at a particular level
            </summary>
            <param name="dataForReports">All data needed to generate a report</param>
            <param name="itemLevel">The number of levels for which we return data</param>
            <returns>The return value is a list of items on a level</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportExport.PdfManager.GenerateAnonymityForDictionary(System.Collections.Generic.Dictionary{System.Int64,System.Boolean},System.String,System.Int64)">
            <summary>
            Method that calculates EmployeeAnonymity for all received subgroups.
            </summary>
            <param name="subGroupsWithAnonymity"></param>
            <param name="role"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ReportGroupManager">
            <summary>
            Manager for report group bussiness logic
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.ReportGroupManager._repositoryContext">
            <summary>
            Context which will be injected in RepositoryContext
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportGroupManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportGroupManager.Add(ESolve.Entities.Models.ReportGroup)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportGroupManager.Delete(ESolve.Entities.Models.ReportGroup)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportGroupManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportGroupManager.GetAll(System.Int64)">
            <summary>
            Display all report groups, based on the selected report type id.
            </summary>
            <param name="id">Represents an id report type</param>
            <returns>Returns the report group list, sorted based on received id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportGroupManager.GetAll">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportGroupManager.Update(ESolve.Entities.Models.ReportGroup)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ReportTypeManager">
            <summary>
            Manager for report type's bussiness logic
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.ReportTypeManager._repositoryContext">
            <summary>
            Context which will be injected in RepositoryContext
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.GetRepositoryContext">
            <summary>
            Obtaining repository context.
            </summary>
            <returns>The return value is repository context.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.GetCustomReportData(System.Int64,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.EmployeeDataManager,ESolve.Entities.DataManager.ReportGroupManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager)">
            <summary>
            Getting custom report data based on passed report type's primary key
            </summary>
            <param name="reportTypeID">Report Type's primary key</param>
            <param name="scheduleManager">Manager for schedules</param>
            <param name="employeeDataManager">Manager for employee data manager</param>
            <param name="reportGroupManager">Manager for report group manager</param>
            <param name="loggedInUser">Logged in user</param>
            <param name="profileManager">Manager for profiles</param>
            <param name="userManager">Manager for users</param>
            <returns>Custom Report Data object</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.Add(ESolve.Entities.Models.ReportType)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.Delete(ESolve.Entities.Models.ReportType)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.Get(System.Int64)">
            <summary>
            Method for finding report type based on received id
            </summary>
            <param name="id">Represents an id of report type</param>
            <returns>The return value is the entire report type object</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.GetAll(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ProfileManager)">
            <summary>
            Returns all Report types objects from Database table tblJobs.
            </summary>
            <param name="loggedInUser">Currently loggedInUser.</param>
            <param name="profileManager">Profile Manager repository.</param>
            <returns>List of Report types objects. See <see cref="T:ESolve.Entities.Models.ReportType"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.Update(ESolve.Entities.Models.ReportType)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ReportTypeManager.GetAll">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ScheduleDatePreferenceManager">
            <summary>
            ScheduleDatePreferenceManager class contains all methods for performing ScheduleDatePreference data functions.
            <list type="bullet">
            <item>
            <term>Update</term>
            <description>Updating existing ScheduleDatePreference object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one ScheduleDatePreference object from Database.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleDatePreferenceManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleDatePreferenceManager.Get">
            <summary>
            Returns ScheduleDatePreference object from Database table tblScheduleDatePreferences
            </summary>
            <returns>ScheduleDatePreference object. See <see cref="T:ESolve.Entities.Models.ScheduleDatePreference"/></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleDatePreferenceManager.Update(ESolve.Entities.Models.ScheduleDatePreference,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Updates ScheduleDatePreference object values in Database table tblScheduleDatePreferences with values passed inside ScheduleDatePreference object in function argument.
            </summary>
            <param name="scheduleDatePreference">ScheduleDatePreference object with new values.</param>
            <param name="jobAvailabilityManager">AutosolveManager object</param>
            <param name="assignmentNotificationManager"></param>
            <param name="configuration"></param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleDatePreferenceManager.Add(ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Implementation of the IRepositoryBase interface
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleDatePreferenceManager.Delete(ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Implementation of the IRepositoryBase interface
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleDatePreferenceManager.Get(System.Int64)">
            <summary>
            Implementation of the IRepositoryBase interface
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleDatePreferenceManager.GetAll">
            <summary>
            Implementation of the IRepositoryBase interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleDatePreferenceManager.Update(ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Implementation of the IRepositoryBase interface
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ScheduleManager">
            <summary>
            ScheduleManager class contains all methods for performing Schedule data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new Schedule object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing Schedule object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing Schedule object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one Schedule object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all Schedule objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all Schedule objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Check Name</term>
            <description>Check is Name unique.</description>
            </item>
            <item>
            <term>Get All CustomData</term>
            <description>Gets All ScheduleCustomData.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetRepositoryContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:ESolve.Entities.DataManager.ScheduleManager._repositoryContext">
            <summary>
            Database context
            </summary>
        </member>
        <member name="E:ESolve.Entities.DataManager.ScheduleManager.ScheduleCustomDataChanged">
            <summary>
            Custom data event handler
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.Add(ESolve.Entities.Models.Schedule)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.Add(ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData,System.Int64,ESolve.Entities.DataManager.AuditTrailManager,ESolve.Entities.DataManager.ConstraintManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.PushNotifications.AssignmentNotificationManager,ESolve.Entities.DataManager.JobTypeManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Inserts passed Schedule object in Database table tblSchedules with his custom data
            And for added Schedule stores Not Already Assigned Constraint.
            </summary>
            <param name="schedule">Represents ScheduleWithCustomData object with custom data which will be inserted.</param>
            <param name="userID">Represents ID of current user.</param>
            <param name="auditTrailManager">AuditTrail Manager class object</param>
            <param name="assignmentNotificationManager"></param>
            <param name="configuration"></param>
            <param name="constraintManager"></param>
            <param name="jobTypeManager"></param>
            <param name="loggedInUser"></param>
            <param name="scheduleManager"></param>
            <returns>True if action is successful, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetConstraintForm(ESolve.Entities.Models.Constraint,System.Int64,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ConstraintManager)">
            <summary>
            Get constraints data to copy it
            </summary>
            <param name="constraint"></param>
            <param name="scheduleId"></param>
            <param name="loggedInUser"></param>
            <param name="constraintManager"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.AuditLogForSchedule(System.Int64,ESolve.Entities.DataManager.AuditTrailManager,AuditOperationTypes,ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Add audit log entry while create, update and delete schedule
            </summary>
            <param name="userID">logged in user id</param>
            <param name="auditTrailManager">object of audit trail manager</param>
            <param name="operationType">Operation type</param>
            <param name="newOrUpdatedSchedule">Schedule object</param>
            <param name="previousScheduleName">Previous schedule name</param>
            <param name="previousStartDate">Previous start date of schedule</param>
            <param name="previousEndDate">Previous end date of schedule</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.Delete(ESolve.Entities.Models.Schedule)">
            <summary>
            Removes passed Schedule object from Database table tblSchedules.
            </summary>
            <param name="entity">Represents Schedule object which will be removed.</param>
            <returns>True if action is successful, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetScheduleWithCustomData(System.Int64)">
            <summary>
            Returns Schedule object with custom data from Database table tblSchedules where Id is equal with passed value.
            </summary>
            <param name="id">Schedule Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetAll">
            <summary>
            Returns all Schedule objects from Database table tblSchedules.
            </summary>
            <returns>List of Schedule objects. See <see cref="T:ESolve.Entities.Models.Schedule"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetEmployees(System.Int64,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Returns EmployeeFilterValueDTO objects for filter by employee
            </summary>
            <param name="scheduleID">Schedule ID</param>
            <returns>List of EmployeeFilterValueDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetScheduleJobTypes(System.Int64)">
            <summary>
            Returns JobTypeFilterValueDTO objects for passed schedule to fulfill filter by job type
            </summary>
            <param name="scheduleID">Schedule ID</param>
            <returns>List of JobTypeFilterValueDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetTemplateJobTypes(System.Int64)">
            <summary>
            Returns JobTypeFilterValueDTO objects for passed schedule to fulfill filter by job type
            </summary>
            <param name="scheduleID">Schedule ID</param>
            <returns>List of JobTypeFilterValueDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.Update(ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobManager,System.Int64,ESolve.Entities.DataManager.AuditTrailManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ConstraintManager,ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            Updates Schedule object values in Database table tblSchedules with values passed inside Schedule object in function argument.
            </summary>
            <param name="scheduleWithCustomData">Schedule object with custom data with new values.</param>
            <param name="subGroupManager">Manager for subgroups</param>ž
            <param name="jobManager">Manager for jobs</param>
            <param name="userID">Logged in user id</param>
            <param name="auditTrailManager">AuditTrail manager class object</param>
            <param name="assignmentNotificationManager"></param>
            <param name="configuration"></param>
            <param name="constraintManager"></param>
            <param name="jobTypeManager"></param>
            <param name="loggedInUser"></param>
            <param name="scheduleManager"></param>
            <returns>True if action is successful, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.Add(ESolve.Entities.Models.Schedule,System.Int64)">
            <summary>
            Inserts passed Schedule object in Database table tblSchedules.
            And for added Schedule stores Not Already Assigned Constraint.
            </summary>
            <param name="schedule">Represents Schedule object which will be inserted.</param>
            <param name="userID">Represents current account's ID.</param>
            <returns>True if action is successful, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.Delete(ESolve.Entities.Models.Schedule,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.TemplateManager,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
             Method will remove Schedule and all connected entities if any.
            </summary>
            <param name="schedule">Schedule which will be deleted.</param>
            <param name="subGroupManager"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="_templateManager">Manager for Templates, used for updating Templates' InUse.</param>
            <param name="userID">Logged in user id</param>
            <param name="auditTrailManager">AuditTrail manager class object</param>
            <returns>True if all items are deleted, or false if any isn't</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetListOfScheduleSubGroups(System.Int64)">
            <summary>
            Method that returns list of Schedule's SubGroups.
            </summary>
            <param name="id">Primary Key of Schedule whose SubGroups method will return.</param>
            <returns>List of Schedule's SubGroups</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetListOfScheduleActiveSubGroups(System.Int64)">
            <summary>
            Method that returns list of Schedule's SubGroups.
            </summary>
            <param name="id">Primary Key of Schedule whose SubGroups method will return.</param>
            <returns>List of Schedule's SubGroups</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetScheduleSubGroups(System.Int64)">
            <summary>
            Returns All Schedule SubGroups in Hierarchy structure.
            </summary>
            <param name="id">Schedule Primary Key</param>
            <returns>All Schedule SubGroups in Hierarchy structure.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetScheduleSubGroupsForSelectedPeriod(ESolve.Entities.Filters.SubGroupCalendarFilterModel,ESolve.Entities.DTOs.LoggedInUser)">
            <summary>
            Returns All Schedule SubGroups in Hierarchy structure which satisfies conditions from filter.
            </summary>
            <param name="subGroupCalendarFilterModel">SubGroup Filter model. See <see cref="T:ESolve.Entities.Filters.SubGroupCalendarFilterModel"/> for model details.</param>
            <param name="loggedInUser">Represents currently loggedIn User.</param>
            <returns>All Schedule SubGroups in Hierarchy structure which satisfies conditions from filter.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.IsSubGroupDateRangeValid(ESolve.Entities.DTOs.IdDatesDTO)">
            <summary>
            Check will there bee jobs which are out of new SubGroup Range.
            </summary>
            <param name="idDatesDTO">See <see cref="T:ESolve.Entities.DTOs.IdDatesDTO"/> for model details</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetAllScheduleIdNamesForReports(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager)">
            <summary>
            This method return all Schedules objects from Database table tblSchedules in IdNameDropDownModel model form.
            </summary>
            <param name="loggedInUser">Represents current user.</param>
            <param name="profileManager">Manager for Profiles.</param>
            <param name="userManager">Manager for Permissions.</param>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetAllScheduleIdNames">
            <summary>
            This method return all Schedules objects from Database table tblSchedules in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check is Schedule Name unique in Database table tblSchedules.
            </summary>
            <param name="filter">Id and Schedule Name values</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.CopyData(ESolve.Entities.DTOs.CopyDataForwardDTO,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Copy data forward method
            </summary>
            <param name="data">DTO for information about copy data forward action</param>
            <param name="jobAvailabilityManager">Manager for jobs' availabilities</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>SummaryDTO with all broken rules messages caused by copying.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.OverrideAssigments(System.Collections.Generic.List{ESolve.Entities.DTOs.WarningDetailsDTO},ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.BrokenRulesManager,System.Boolean,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method used for assign employees that broken rules
            </summary>
            <param name="warningDetails">Rules that the end user accepted.</param>
            <param name="jobAvailabilityManager">Manager for job's availability.</param>
            <param name="brokenRuleManager">Manager for broken rules.</param>
            <param name="isForTemplates">Indicator representing whether this method is being called from InsertTemplates or from CopyDataForward.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>True if assignments are successfully overridden, false if not</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.AddCustomDataOnCopyDataForward(ESolve.Entities.DTOs.JobCustomDataAddEditDTO[],System.Int64)">
            <summary>
            Iterate trough passed array and storing each item in JobCustomDatas table
            </summary>
            <param name="customDatas">Array with custom data. See <see cref="T:ESolve.Entities.DTOs.JobCustomDataAddEditDTO"/> for model details</param>
            <param name="jobID">Job's primary key</param>
            <returns>True if all items are stored</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetAllSchedulesWithPermissions(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ProfileManager)">
            <summary>
            Method that returns all Schedules along with User's Permissions
            </summary>
            <param name="loggedInUser">Current logged in User. See <see cref="T:ESolve.Contracts.ILoggedInUser"/> for more details</param>
            <param name="userManager">Manager which Will be used for accessing user permissions</param>
            <param name="profileManager">Manager for Accessing Profiles</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetAllScheduleToApplyConstraintFromIt(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ProfileManager)">
            <summary>
            Get schedule list to apply constraints to other schedule
            </summary>
            <param name="loggedInUser"></param>
            <param name="userManager"></param>
            <param name="profileManager"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetPermissionsForAccessingSubGroup(System.Int64,ESolve.Contracts.ILoggedInUser)">
            <summary>
            
            </summary>
            <param name="subGroupId"></param>
            <param name="loggedInUser"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetPermissionsForAccessingSchedule(ESolve.Contracts.ILoggedInUser,System.Boolean,System.Collections.Generic.List{ESolve.Entities.Models.UserSchedulePermission})">
            <summary>
            Method will return schedule permissions for passed UserID. 
            </summary>
            <param name="loggedInUser">LoggedIn User for which we will check permissions</param>
            <param name="isForSchedule">Indicator will we check Schedule Subgroup Permissions.</param>
            <param name="schedulePermissions">Schedule and ScheduelPermissions for current User.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.Update(ESolve.Entities.Models.Schedule)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.UpdateScheduleCustomData(System.Int64,System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobManager)">
            <summary>
            Update schedule's custom data
            </summary>
            <param name="scheduleID">Schedule's primary key</param>
            <param name="scheduleCustomData">Schedule's custom data</param>
            <param name="subGroupManager">Manager for subgroups</param>
            <param name="jobManager">Manager for subgroups</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.OnScheduleCustomDataChanged(System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobManager)">
            <summary>
            Raising event when schedule's custom data is changed
            </summary>
            <param name="customDatas">Custom data that is added or updated</param>
            <param name="subgroupManager">Manager for subgroups</param>
            <param name="jobManager">Manager for jobs</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetScheduleAsNoTracking(System.Int64)">
            <summary>
            Returns Schedule object from Database table tblSchedules where Id is equal with passed value.
            </summary>
            <param name="id">Schedule Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetSchedulesByIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed List of ScheduleIds method will return List of Schedule objects where Id is in passed list
            </summary>
            <param name="scheduleIds">List Of Primary keys</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetScheduleDetailsTableForUserInPassedRange(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.DateTimeDTO,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobManager)">
            <summary>
            For passed data method will return data for passed range
            </summary>
            <param name="loggedInUser">User currently logged in</param>
            <param name="range">Selected date range</param>
            <param name="userManager">Manager for accessing user details</param>
            <param name="subGroupManager">manager for accessing subgroup details</param>
            <param name="jobManager">manager for accessing job details</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetUserDashboardDetilsForUserInPassedRange(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.DateTimeDTO,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.SubGroupsApprovalManager,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            For passed data method will return user dashboard details
            </summary>
            <param name="loggedInUser">Currently logged in user</param>
            <param name="range">Selected date range</param>
            <param name="userManager">Manager for Users</param>
            <param name="subGroupManager">Manager for SubGroups</param>
            <param name="jobManager">Manager for Jobs</param>
            <param name="subGroupsApprovalManager">Manager for SubGroupApprovals</param>
            <param name="url">Url</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleManager.GetSchedulesWtihNamesInPassedRange(System.Collections.Generic.List{System.Int64},ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed list of ids and range, method will return IdName structure
            for schedules which overlaps with passed range
            </summary>
            <param name="scheduleIDs">Collection of Primary Keys</param>
            <param name="range">Selected range</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.SchedulePreferenceManager">
            <summary>
            SchedulePreference Manager class
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SchedulePreferenceManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            SchedulePreferenceManager constructor
            </summary>
            <param name="context">Repository context</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SchedulePreferenceManager.Get">
            <summary>
            Get existing SchedulePreference object
            </summary>
            <returns>SchedulePreference object. See <see cref="T:ESolve.Entities.Models.SchedulePreference"/></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SchedulePreferenceManager.Update(ESolve.Entities.Models.SchedulePreference,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.PushNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Update existing SchedulePreference object
            </summary>
            <param name="entity">SchedulePreference passed from user. See <see cref="T:ESolve.Entities.Models.SchedulePreference"/></param>
            <param name="tradesManager">Manageer for trades offers</param>
            <param name="pushNotificationManager">Manager for sending notifications</param>
            <param name="configuration"></param>
            <returns>Boolean value. True if saved, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SchedulePreferenceManager.Add(ESolve.Entities.Models.SchedulePreference)">
            <summary>
            Not implemented method. Implementation of IRepository interface.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SchedulePreferenceManager.Delete(ESolve.Entities.Models.SchedulePreference)">
            <summary>
            Not implemented method. Implementation of IRepository interface.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SchedulePreferenceManager.Get(System.Int64)">
            <summary>
            Not implemented method. Implementation of IRepository interface.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SchedulePreferenceManager.GetAll">
            <summary>
            Not implemented method. Implementation of IRepository interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SchedulePreferenceManager.Update(ESolve.Entities.Models.SchedulePreference)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ScheduleSyncRequestResultDataManager">
            <summary>
            Data manager for ScheduleSyncRequestResult
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleSyncRequestResultDataManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleSyncRequestResultDataManager.Add(ESolve.Entities.Models.ScheduleSyncRequestResult)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleSyncRequestResultDataManager.Delete(ESolve.Entities.Models.ScheduleSyncRequestResult)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleSyncRequestResultDataManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleSyncRequestResultDataManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleSyncRequestResultDataManager.Update(ESolve.Entities.Models.ScheduleSyncRequestResult)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ScheduleSyncRequestResultDataManager.Store(System.Int64,ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate)">
            <summary>
            Stroing assignments into tblScheduleAssigmentsResults and create ScheduleSyncRequestResult object
            </summary>
            <param name="scheduleSyncId">Sync's primary key</param>
            <param name="scheduleSyncRequestResultCreate">ScheduleSyncRequestResultCreate object with assignemtns to store</param>
        </member>
        <member name="T:ESolve.Entities.DataManager.SecurityManager">
            <summary>
            Managing password complexity data
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SecurityManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize Repository Context
            </summary>
            <param name="context">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SecurityManager.Get">
            <summary>
            Get password security
            </summary>
            <returns>Returns password security from table tblSecurity.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SecurityManager.Update(ESolve.Entities.Models.Security)">
            <summary>
            Update security in database
            </summary>
            <param name="entity"></param>
            <returns>True if security is successfully updated.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SecurityManager.Add(ESolve.Entities.Models.Security)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SecurityManager.Delete(ESolve.Entities.Models.Security)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SecurityManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SecurityManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities">
            <summary>
            Manager for same things that have TemplateJobAvailaiblityManager and JobAvailabilitiyManager
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.SetJobAvailabilityJobTypeValues(ESolve.Contracts.IJob,ESolve.Entities.DTOs.JobTypeCalculationsDTO,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.DTOs.JobCustomDataDTO[]},System.String,ESolve.Contracts.IJobAvailability,System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix})">
            <summary>
            This method is used for checking if employee satisfies job type
            </summary>
            <param name="job">Job's primary key</param>
            <param name="jobType">Job type's primary key</param>
            <param name="employee">Employee's primary key</param>
            <param name="jobsCustomDataDic">Job's custom datas</param>
            <param name="timeUnitName">Length of service's time unit name</param>
            <param name="jobAvailability">Job availability</param>
            <param name="currentEmployeeSkills">All skills that passed employee have</param>
            <returns>JobAvailability with true/false values for job type attributes.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, or conversion operation
            in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.SetJobAvailabilityBasedOnSkillCode(System.Collections.Generic.List{ESolve.Entities.Models.JobTypeSkill},System.Collections.Generic.List{ESolve.Entities.Models.JobTypeSkill},ESolve.Contracts.IJob,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Contracts.IJobAvailability,System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix})">
            <summary>
            set job availabilities validity based on skill code.
            </summary>
            <param name="essentialSkills"></param>
            <param name="nonEssentialSkills"></param>
            <param name="job"></param>
            <param name="employee"></param>
            <param name="jobAvailability"></param>
            <param name="currentEmployeeSkills"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.DoesEmployeeHaveEnoughExpirience(System.DateTime,System.DateTime,System.String,System.Int32)">
            <summary>
            Length Of Service Job type Rule
            </summary>
            <param name="jobStartDate">Desired Job Start Date</param>
            <param name="employeeStartDate">Desired Employee Start Date</param>
            <param name="timeUnit">Selected Time Unit in job Type Rule</param>
            <param name="timeUnitValue">Entered Value in Job type Rule</param>
            <returns>True if employee satisfies condition</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.DoesEmployeeSatisfyJobTypeComparisonRules(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,System.String,System.String,System.String)">
            <summary>
            Check if employee satisfies job type's comparison rule
            </summary>
            <param name="employee">Employee</param>
            <param name="comparisonRuleEmployeeField">Employee's field</param>
            <param name="comparisonRuleTextValue">Text value to compare</param>
            <param name="comparisonRuleOperator">Operator for comparation.</param>
            <returns>True if employee satisfies, false if not.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.GetBrokenRules(ESolve.Contracts.IJobAvailability,ESolve.Entities.DTOs.JobCustomDataAddEditDTO[],ESolve.Entities.Models.JobCustomData[],ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.DataManager.JobTypeManager,System.Boolean,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeConstraint},ESolve.Entities.Models.ScheduleDatePreference,ESolve.Entities.RepositoryContext,System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            This method is used for creating sentences for broken rules.
            </summary>
            <param name="assigment">Assigment for checking broken rules.</param>
            <param name="customDatas">Job's custom data of assigment.</param>
            <param name="plainCustomDatas">Plain (not AddEditDTO) Job's CustomData.</param>
            <param name="employee">Employee for which we create broken rule messages</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="checkMustNotWorkEspecialy">Indicator for must and musto not work</param>
            <param name="alreadyAssignedEmployees">Indicator for must and musto not work</param>
            <param name="employeeConstraints">Employee constraints</param>
            <param name="scheduleDatePreference">Schedule date preferences</param>
            <param name="repositoryContext">DbContext</param>
            <param name="user">First name and last name of the user who overided employee</param>
            <param name="employeesIDsUserHasAccessTo">employees list which user has access to</param>
            <returns>RulesBrokenDTO object with broken rules sentences.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.UpdateJobStatus(System.Collections.Generic.List{ESolve.Contracts.IJob},ESolve.Entities.RepositoryContext)">
            <summary>
            Method that recalculates passed Jobs' valid and invalid assignments (Job Status)
            </summary>
            <param name="jobs">Jobs whose status will be updated.</param>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.UnassignEmployees(System.Collections.Generic.List{ESolve.Contracts.IJobAvailability},System.Collections.Generic.List{ESolve.Contracts.IJobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.Constraint},System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.List{ESolve.Entities.Models.JobStatus},ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Method for unassigning employees logic
            </summary>
            <param name="unassigments">Employee assignemnts that are unassigned</param>
            <param name="jobAvailabilities">Job availaiblites that can be affected by unassign all action</param>
            <param name="constraints">Constraints to check</param>
            <param name="jobCustomDatas">Jobs' custom data</param>
            <param name="scheduleDatePreference">Schedule date preference from db</param>
            <param name="employees">Employees from db</param>
            <param name="jobStatuses">Job statuses from db</param>
            <param name="repositoryContext">Db context</param>
            <param name="isJobAvailabilityManager">is JobAvailabilityManager</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.CalculateRangeForJobs(System.DateTime,System.DateTime,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.Constraint},ESolve.Entities.Models.ScheduleDatePreference,System.Collections.Generic.List{ESolve.Entities.Models.ScheduleMaxAndMinJobDate})">
            <summary>
            This method is used for generate range for jobs
            </summary>
            <param name="minDate">Initial minimum date</param>
            <param name="maxDate">Initial maximum date</param>
            <param name="constraints">Constraints with date range</param>
            <param name="scheduleDatePreference">Schedule date prefernece</param>
            <param name="schedulesMinAndMax">Constraints' schedule min and max dates</param>
            <returns>Array of date times where the first element is start date of range for jobs, and the last element is end date of range for jobs</returns>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.SetUserWhoHasAssigned(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},ESolve.Contracts.ILoggedInUser,System.Boolean,System.Boolean,ESolve.Entities.RepositoryContext)">
            <summary>
            Updating 'UserWhoHasAssigned' value
            </summary>
            <param name="jobIDs">Jobs' primary keys where employees are assigned</param>
            <param name="employeeIDs">Employees' primary keys which are assigned to jobs</param>
            <param name="loggedInUser">Logged in user</param>
            <param name="assignOnTemplate">Indicator if assignment action is executed on template or schedule</param>
            <param name="repositoryContext">DB context</param>
            <param name="isAssignment">Indicator if this method is called by assign or unassign action</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.CheckIfEmployeeSatisfiesJobTypeComparsionRules(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.JobTypeComparisonRule[],ESolve.Entities.Models.JobTypeComparisonRule[],System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.DTOs.JobCustomDataDTO[]},System.Int64)">
            <summary>
            This method is used for checking if employee satisfies job type's essential and non-essential comparison rules
            </summary>
            <param name="employee">Employee to check</param>
            <param name="allComparisonRules">Job type's comparison rules</param>
            <param name="essentialComparsionRules">Job 's type essential comparison rules</param>
            <param name="jobsCustomData">JOb type's custom data</param>
            <param name="jobID">Job's primary key</param>
            <returns>String value that represents where employee will be in job: in available list, unavailbile list or not in list at all</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.AuditLogForJobAssignments(System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability},System.Boolean,ESolve.Entities.RepositoryContext,System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            Log audit for employee assignment
            </summary>
            <param name="assignments"></param>
            <param name="isAssignment"></param>
            <param name="repositoryContext"></param>
            <param name="userName"></param>
            <param name="jobIds"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.CreateAuditLogRecord(ESolve.Entities.RepositoryContext,System.String,ESolve.Entities.Models.Job,System.Boolean,System.String)">
            <summary>
            Create audit trail record in db
            </summary>
            <param name="repositoryContext"></param>
            <param name="userName"></param>
            <param name="jobRecord"></param>
            <param name="isAssignment"></param>
            <param name="employeeName"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForAvailabilities.GetFunctionDetails(ESolve.Entities.Models.Job,ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="repositoryContext"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.SharedManagers.SharedManagerForCustomDataLookups">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForCustomDataLookups.SaveCustomDataLookupValues(System.Collections.Generic.List{ESolve.Entities.Models.EmployeeDataType},System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            Save the employee data type values in customdatalookup table also.
            </summary>
            <param name="employeeDataType"></param>
            <param name="empDataType"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForCustomDataLookups.DeleteCustomDataLookupValues(ESolve.Entities.Models.EmployeeDataType,System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            delete the employee data type values from customdatalookup table also.
            </summary>
            <param name="employeeDataType"></param>
            <param name="empDataType"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SharedManagers.SharedManagerForCustomDataLookups.GetOldValue(System.Int64,System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            Get the old value for to find the record from the customdatalookup table for a given id.
            </summary>
            <param name="id"></param>
            <param name="empDataType"></param>
            <param name="repositoryContext"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.ShiftManager">
            <summary>
             Manager for shifts
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.ShiftManager._repositoryContext">
            <summary>
            Context which will be injected in RepositoryContext
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
             Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.GetAll(System.Int64)">
            <summary>
            Gets all shifts from database by user id.
            </summary>
            <param name="id">Id of user</param>
            <returns>IEnumberable list with all shifts from database</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.GetAllOnJobEdit(System.Int64,System.Int64,System.Int32)">
            <summary>
            Get shifts from database that user has access to on opening job's dialog.
            If user does not have permission to use shift or to select particular shift's group,
            this method return shift of job that is opened
            </summary>
            <param name="userID">Logged in user</param>
            <param name="jobID">Job's primary key</param>
            <param name="typeOfJob">Indicator which type of job is loaded</param>
            <returns>List of shifts</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.Get(System.Int64,System.Int64)">
            <summary>
            Gets shift with passed primary key.
            </summary>
            <param name="id">Shift's primary key.</param>
            <param name="userID">Logged in user</param>
            <returns>Shift with passed primary key.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.GetShiftForIntegrationsByID(System.Int64)">
            <summary>
            Get shift by id for integration 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.Add(ESolve.Entities.Models.Shift)">
            <summary>
            Adds new shift into database
            </summary>
            <param name="entity">Shift that will be added.</param>
            <returns>>True if shift is successfully added, false if is not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.Update(ESolve.Entities.Models.Shift,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.TemplateJobManager,ESolve.Entities.DataManager.TemplateManager,ESolve.Entities.DataManager.JobTypeManager,System.Int64)">
            <summary>
            Updates existing shift in database.
            </summary>
            <param name="entity">Shift that will be updated.</param>
            <param name="jobAvailabilityManager">Manager for job availabilities</param>
            <param name="templateJobManager">Manager for template jobs</param>
            <param name="templateManager">Manager for templates</param>
            <param name="jobTypeManager">Manager for templates</param>
            <param name="userID">User's primary key</param>
            jobAvailabilityManager
            <returns>True if shift is successfully updated, false if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.Delete(ESolve.Entities.Models.Shift,System.Int64)">
            <summary>
            Deletes shift from database.
            </summary>
            <param name="entity">Shift that will be removed.</param>
            <param name="userID">User's primary key</param>
            <returns>True if shift is successfully removed, false if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.IsCodeUnique(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Method to check if a shift group with such a code already exists
            </summary>
            <param name="code">The code we are checking for</param>
            <returns>If code is uniq we return true, but if code isn't unique we return false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.Update(ESolve.Entities.Models.Shift)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.ShiftManager.Delete(ESolve.Entities.Models.Shift)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.SkillCodeManager">
            <summary>
            SkillCodeManager class contains all methods for performing SkillCode data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new SkillCode object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing SkillCode object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing SkillCode object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one SkillCode object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all SkillCode objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all SkillCode objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Get Available SkillCodes</term>
            <description>Get all SkillCode objects from Database in DropDown Form which are not in tblSkillMatrices.</description>
            </item>
            <item>
            <term>Check Is SkillCode Name occupied</term>
            <description>Check Is SkillCode Name occupied in tblSkillCodes.</description>
            </item>
            <item>
            <term>Get SkillCode Name</term>
            <description>Return SkillCode Name based on passed ID</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.Add(ESolve.Entities.Models.SkillCode)">
            <summary>
            Method adds SkillCode in tblSkilCodes in db. Also for added entity wi will populate skillMatrix table with all employes, and SkillMatrix Value will be False
            </summary>
            <param name="entity">Represents SkillCode object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.Add(ESolve.Entities.Models.SkillCode,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Method insert SkillCode in tblSkilCodes in database. Also for added entity will populate skillMatrix table with all employees, and SkillMatrix Value will be False
            </summary>
            <param name="skillCode">Object of skill code</param>
            <param name="userId">Logged in user id</param>
            <param name="auditTrailManager">Audit trail manager class object</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.Update(ESolve.Entities.Models.SkillCode)">
            <summary>
            Method updates SkillCode in tblSkilCodes in database.Also, this methods
            updates skill matrix.
            </summary>
            <param name="entity">Represents SkillCode object which will be updated.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.Update(ESolve.Entities.Models.SkillCode,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Method to update skill code details
            </summary>
            <param name="newSkillCode">Updated skill code</param>
            <param name="userId">Logged in user id</param>
            <param name="auditTrailManager">Object of audit trail manager class</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.Delete(ESolve.Entities.Models.SkillCode)">
            <summary>
            Removes passed Skill code object from Database table tblSkillCodes. Also, this methods
            updates skill matrix.
            </summary>
            <param name="entity">Represents skill code object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.Get(System.Int64)">
            <summary>
            Not Implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.GetAll">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.GetAllSkilCodesIdNameList">
            <summary>
            This method return all SkillCode objects from Database table tblSkillCode in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.GetAllEmployeeIDs">
            <summary>
            Get All Employees
            </summary>
            <returns>List of all Employee IDs</returns>
            <exception cref="T:System.ArgumentNullException">
            It is thrown when a method is invoked and at least one of the passed arguments is null but should never be null.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.AuditLogForSkillCode(System.Int64,ESolve.Entities.DataManager.AuditTrailManager,AuditOperationTypes,ESolve.Entities.Models.SkillCode,System.String,System.String)">
            <summary>
            Add audit log entry while request schedule for approval
            </summary>
            <param name="userID">Logged in user id</param>
            <param name="auditTrailManager">Object of audit trail manager</param>
            <param name="operationType">Operation type</param>
            <param name="skillcode"></param>
            <param name="previousValue">PreviousValue value</param>
            <param name="currentValue">Current value</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check is SkillCode Name unique in Database tabler tblSkillCodes
            </summary>
            <param name="filter">Id and SkillCode name values</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.GetSkillCodeNameBasedOnSkillCodeID(System.Int64)">
            <summary>
            This method goes in Database and gets SkillCode Name for passed SkillCode Id
            </summary>
            <param name="id">Skill Code Primary Key</param>
            <returns>SkillCode Name</returns>
            <exception cref="T:System.ArgumentNullException">
            It is thrown when a method is invoked and at least one of the passed arguments is null but should never be null.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.GetSkill(System.String)">
            <summary>
            Get skill for data integrations
            </summary>
            <param name="id">Skill Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillCodeManager.DeleteSkill(System.String,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Deletes skill code if exists
            </summary>
            <param name="id">Primary key</param>
            <param name="userId">Logged in user id</param>
            <param name="auditTrailManager">Object of Audit trail manager</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.SkillMatrixManager">
            <summary>
            Class used for working with SkillMatrices data. 
            <remarks>
            <para>This class Can get All, insert new, update existing value in skill matrices database table.</para> 
            </remarks>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.Add(ESolve.Entities.Models.SkillMatrix)">
            <summary>
            Inserts passed SkillMatrix object in Database table tblSkillMatricess.
            </summary>
            <param name="entity">Represents SkillMatrix object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.Delete(ESolve.Entities.Models.SkillMatrix)">
            <summary>
            Removes passed SkillMatrix object from Database table tblSkillMatrices.
            </summary>
            <param name="entity">Represents Location object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.Get(System.Int64)">
            <summary>
            Not Implemented
            </summary>
            <param name="id">SkillMatrix Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.GetAll">
            <summary>
            Returns all SkillMatrix objects from Database table tblSkillMatrices.
            </summary>
            <returns>List of SkillMatrix objects. See <see cref="T:ESolve.Entities.Models.SkillMatrix"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.Update(ESolve.Entities.Models.SkillMatrix)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.GetSkillsByEmployee(System.Int64,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Filters all skills for the passed id from the employee
            </summary>
            <param name="id">Id of employee</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>A list of skills for a employee</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.FilterSkillMatrix(ESolve.Entities.Filters.SkillMatricesFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Filter all SkillMatrix objects
            </summary>
            <param name="filterModel">Filter values</param>
            <param name="url">URL from where is method Invoked</param>
            <param name="methodName">Caller Method Name</param>
            <param name="className">Caller Class Name</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>PagedCollectionResponse of SkillMatricesDTO objects </returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.GetSkillMatrixByEmployee(System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix},ESolve.Entities.Filters.SkillMatricesFilterModel)">
            <summary>
            Obtaining a skill matrix for each employee, with filtration
            </summary>
            <param name="skillMatrices">All skill matrices</param>
            <param name="filterModel">Filter model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.InsertNewSkillCodeInSkillMatrix(System.Int64)">
            <summary>
            Inserts passed SkillCode in Database table tblSkillMatrices. Also assigns all employees with False value on passed SkillCode
            </summary>
            <param name="id">Represents SkillCode Primary Key which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.UpdateSkillMatrix(ESolve.Entities.DTOs.SkillMatrixDTO)">
            <summary>
            This method Recives SkillMatrixDTO. Found SkillMatrix object in DB based on EmployeeID and SkillCodeID passed inside skliMatrixDTO object.
            If object is founded we set his value on passed value inside skliMatrixDTO object. If object is not founded we return false.
            </summary>
            <param name="skillMatrixDTO">SkillMatrixDTO object which posess new Values</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.UpdateSkill(System.Int64,System.Collections.Generic.List{ESolve.DataIntegrations.Models.Skills.EmployeeSkills_inner},System.Boolean,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Update Skill for employee using data integrations
            </summary>
            <param name="employeeId"></param>
            <param name="employeeSkills"></param>
            <param name="value"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="templateJobAvailabilityManager"></param>
            <param name="jobTypeManager"></param>
            <param name="assignmentNotificationManager"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.Delete(ESolve.Entities.Models.SkillCode)">
            <summary>
            Removes passed SkillCode object from Database table tblSkillCodes. Also removes all connected entities where SkilCodeID can't be NULL.
            </summary>
            <param name="skillCode">Represents SkillCode object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, 
            casting, or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.GetAllJobTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SkillMatrixManager.UpdateSkillMatrixSearch(ESolve.Entities.Filters.SkillMatricesFilterModel,System.Int64)">
            <summary>
            Updateing skill matrix search for logged in user
            </summary>
            <param name="filterModel">Filter model for skill matrix page</param>
            <param name="loggedInUserID">Logged in user's primary key</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.SpecialDatesManager">
            <summary>
            Managing Special Dates
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDatesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDatesManager.Add(ESolve.Entities.Models.SpecialDate)">
            <summary>
            Adding new special date into database
            </summary>
            <param name="entity">Special date entity which will be added.</param>
            <returns>True if entity is successfully added, false if it is not.</returns>
            <exception cref = "T:Microsoft.EntityFrameworkCore.DbUpdateException" > Exception thrown by DbContext when the saving of changes to the database fails.
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDatesManager.Update(ESolve.Entities.Models.SpecialDate)">
            <summary>
            Updating existing special date entity
            </summary>
            <param name="entity">Special date entity which will be updated.</param>
            <returns>True if entity is successfully updated, false if it is not.</returns>
            <exception cref = "T:System.ArgumentNullException" > The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDatesManager.Delete(ESolve.Entities.Models.SpecialDate)">
            <summary>
            Deleting existing special date from database
            </summary>
            <param name="entity">Special date entity which will be deleted.</param>
            <returns>True if special date entity is successfully deleted, false if it is not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDatesManager.Get(System.Int64)">
            <summary>
            Getting special date with passed primary key from database.
            </summary>
            <param name="id">Special date's primary key</param>
            <returns>Sepcial date object</returns>
            <exception cref = "T:System.ArgumentNullException" > The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDatesManager.GetAll">
            <summary>
            Getting all special dates from database
            </summary>
            <returns>IEnumerable list of special dates</returns>
            <exception cref = "T:System.ArgumentNullException" > The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.SpecialDateTypesManager">
            <summary>
            Managing Special Date Types
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDateTypesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDateTypesManager.GetAll">
            <summary>
            Get all special date types from database
            </summary>
            <returns>IEnumerable with special date types</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDateTypesManager.AddOrUpdate(System.Collections.Generic.List{ESolve.Entities.Models.SpecialDateType})">
            <summary>
            Inserts or updated passed entities to tblSpecialDateTypes
            </summary>
            <param name="entites">List of special date types that will be inserted or updated.</param>
            <returns>True if action is succcesfully, otherwise return false</returns>
            <exception cref = "T:System.ArgumentNullException" > The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDateTypesManager.Delete(ESolve.Entities.Models.SpecialDateType)">
            <summary>
            Deleting existing special date type from database
            </summary>
            <param name="entity">Special date type entity which will be deleted.</param>
            <returns>True if special date type entity is successfully deleted, false if it is not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDateTypesManager.Add(ESolve.Entities.Models.SpecialDateType)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDateTypesManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDateTypesManager.Update(ESolve.Entities.Models.SpecialDateType)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SpecialDateTypesManager.IsNameAlreadyExist(System.Int64,System.String)">
             <summary>
            Check if special date type name is already in use
             </summary>
             <return>True if name is alreday in use, false if it is not in use.</return>
             <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
             is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.SubGroupManager">
            <summary>
            SubGroupManager class contains all methods for performing SubGroup data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new SubGroup object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing SubGroup object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing SubGroup object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one SubGroup object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all SubGroup objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all SubGroup objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Hide SubGroup</term>
            <description>SubGroup will not be visible in future.</description>
            </item>
            <item>
            <term>Get SubGroup Custom Data</term>
            <description>Get all SubGroup CustomData objects from Database.</description>
            </item>
            <item>
            <term>Get SubGroup in ParentChild Structure</term>
            <description>SubGroups will be shown in ParentChild Structure.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="E:ESolve.Entities.DataManager.SubGroupManager.ScheduleOrSubGroupCustomDataChanged">
            <summary>
            Custom data event handler
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.Add(ESolve.Entities.Models.SubGroup)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.Get(System.Int64)">
            <summary>
            Get subgroup that has passed primary key
            </summary>
            <param name="id">Subgrup's primary key</param>
            <returns>Subgroup with passed primary key</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.Add(ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData,System.Int64)">
            <summary>
            Add new Subgroup entity and its custom data in Database. Also upgrades old entities whith same or grather SortOrder.
            </summary>
            <param name="entity">Represents SubGroup entity with custom data which will be stored in Database.</param>
            <param name="userID">Represents ID of current user.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>  
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.DeleteRelatedEntities(System.Collections.Generic.List{ESolve.Entities.Models.SubGroup})">
            <summary>
            Removes related entities on passed subgroup entity.
            </summary>
            <param name="entity">Represents SubGroup object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.Delete(ESolve.Entities.Models.SubGroup)">
            <summary>
            Removes passed subgroup. Also, method removes all related entites.
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetSubGroupWithCustomData(System.Int64)">
            <summary>
            Returns SubGroup object from Database table tblSubGroups where Id is equal with passed value.
            </summary>
            <param name="id">SubGroup Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetAll">
            <summary>
            Returns all SubGroup objects from Database table tblSubGroups.
            </summary>
            <returns>List of SubGroup objects. See <see cref="T:ESolve.Entities.Models.SubGroup"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.Update(ESolve.Entities.Models.SubGroup)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetIdNameList">
            <summary>
            This method return all SubGroup objects from Database table tblSubGroups in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetDropdownListOfScheduleSubGroups(System.Int64,System.String,System.Int64)">
            <summary>
            This method return all Schedule's SubGroup objects from Database table tblSubGroups in IdNameDropDownModel model form.
            </summary>
            <param name="id">Primary Key of Schedule whose SubGroups method will retrieve.</param>
            <param name="userID">Represents current user's ID used for permissions.</param>
            <param name="username">Represents current user's username used for permissions.</param>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetAllSubGroupsForSelectedScheduleAsNoTracking(System.Int64)">
            <summary>
            For passed ScheduleID method will return all SubGroups that belongs to the selected Schedule
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <returns>Collection of SubGroups</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.Add(ESolve.Entities.Models.SubGroup,System.Int64)">
            <summary>
            Add new Subgroup entity in Database. Also upgrades old entities whith same or grather SortOrder.
            </summary>
            <param name="entity">Represents SubGroup entity which will be stored in Database.</param>
            <param name="userID">Represents account's ID.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>  
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.Update(ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData,ESolve.Entities.DataManager.JobManager,System.Int64)">
            <summary>
            Updates SubGroup object values in Database table tblSubGroups with values passed inside Location object in function argument.
            </summary>
            <param name="entity">SubGroup object with new values.</param>
            <param name="jobManager">Manager for jobs</param>
            <param name="userID">Represents master account's ID.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetSubGroupOnlyAsNoTracking(System.Int64)">
            <summary>
            Returns SubGroup object from Database table tblSubGroups where Id is equal with passed value.
            </summary>
            <param name="id">SubGroup Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.HideSubGroup(ESolve.Entities.DTOs.IdDateDTO,System.Int64,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            This method hides SubGroup for exposing in Schedules which are after the Date when method has been Invoked.
            </summary>
            <param name="idDateDTO">DTO containing SubGroup's PrimaryKey and date starting from which
            the SubGroup will be hidden.</param>
            <param name="userID">Represents account's ID.</param>
            <param name="jobAvailabilityManager">Manager for job's availabilities</param>
            <returns>True if Action is sucessfull, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetSubGroupCustomData(System.Int64)">
            <summary>
            For SubgGroup Id get CustomData
            </summary>
            <param name="id">SubGroup Primary Key</param>
            <returns>List of SubGroup Custom Data</returns>
            <returns>True if Action is sucessfull, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.IsNameUnique(ESolve.Entities.Filters.SubGroupNameFilterModel)">
            <summary>
            Check is name unique.
            </summary>
            <param name="filter"></param>
            <returns>True if name is available otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.IsSubGroupDateRangeValid(ESolve.Entities.DTOs.IdDatesDTO)">
            <summary>
            Check will there bee jobs which are out of new SubGroup Range.
            </summary>
            <param name="idDatesDTO">See <see cref="T:ESolve.Entities.DTOs.IdDatesDTO"/> for model details</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.UnAssignEmployees(System.Int64,System.DateTime,System.DateTime,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="startDate">Start date of displayed period.</param>
            <param name="endDate">End date of displayed period.</param>
            <param name="jobAvailabilityManager"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.UpdateSubgroupsCustomData(System.Int64,System.Boolean,System.Boolean,System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},ESolve.Entities.DataManager.JobManager)">
            <summary>
            Update subgroup's custom data
            </summary>
            <param name="entityID">Parent's primary key, if it is not parent, it is subgroup's primary key which custom data is changed.</param>
            <param name="parentIsSchedule">Indicator if passed entitiyID is parent entitiy or subgroup</param>
            <param name="isSubGroup">Indicator if parent entity is subgroup</param>
            <param name="customDatas">List of custom data</param>
            <param name="jobManager">Manager for jobs</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetAllSubGroupsWithSameOrHigherSortNumber(ESolve.Entities.Models.SubGroup)">
            <summary>
            Method compares passed SubGroup SortOrder Number with SortOrdersNumbers in database
            </summary>
            <param name="subGroup">SubGroup Entity which will be used for comparing SortOders</param>
            <returns>List Of SubGroups with same or Grather SortOrder Number than SortOrder number in passed SubGroup.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetChildsForSubgroup(System.Int64,System.Int64)">
            <summary>
            This Method Sorts SubGroups in ParentChildStructure by SortOrder and than by Name
            </summary>
            <param name="id">SubGroup ID</param>
            <param name="scheduleID">Schedule ID</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.CallGetParentChildStructure(ESolve.Entities.Models.SubGroup,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup})">
            <summary>
            This metod calls private method GetChildsForSubGroup
            </summary>
            <param name="subGroup">Selected Subgroup</param>
            <param name="subGroups">All Subgroups from Schedule</param>
            <returns>Returns SubGroup Parent Child Structure</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.CallGetChildsForSubgroup(ESolve.Entities.Models.SubGroup,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup})">
            <summary>
            Method calls GetChildsForSubgroup method and returns parentChildStructure
            </summary>
            <param name="subGroup">Selected Subgroup</param>
            <param name="subGroups">All SubGroups in Schedule</param>
            <returns>All childs of selected SubGroup</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetChildsForSubgroup(ESolve.Entities.Models.SubGroup,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup},System.Collections.Generic.List{ESolve.Entities.Models.SubGroup})">
            <summary>
            This Method Sorts SubGroups in ParentChildStructure by SortOrder and than by Name
            </summary>
            <param name="subGroup">SubGroup</param>
            <param name="subGroups">Schedule SubGroups</param>
            <param name="subGroupsStructure">Parent Child SubGroups</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.AuditLogForSubGroup(ESolve.Entities.Models.SubGroup,System.Int64,ESolve.Entities.Models.SubGroup,System.String)">
            <summary>
            Create auditTrail object for Add/Delete
            </summary>
            <param name="entity"></param>
            <param name="loggedInUserId"></param>
            <param name="oldSubGroup"></param>
            <param name="action"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.AuditLogForSubGroup(ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData,System.Int64,ESolve.Entities.Models.SubGroup,System.String)">
            <summary>
            Create auditTrail object for Update
            </summary>
            <param name="entity"></param>
            <param name="loggedInUserId"></param>
            <param name="oldSubGroup"></param>
            <param name="action"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.AuditLogForSubGroup(ESolve.Entities.Models.SubGroup,System.Int64,System.DateTime,System.String)">
            <summary>
            Create auditTrail object for Partial Delete
            </summary>
            <param name="entity"></param>
            <param name="loggedInUserId"></param>
            <param name="hideFromDate"></param>
            <param name="action"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetScheduleSubGroupsFromPassedRange(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            For passed scheduleId and date range. Method will return all subgroups that belongs to passed schedule 
            and their start and end date is in range
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="endDate">Period End Date</param>
            <param name="startDate">Period Start Date</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetScheduleSubGroupIDs(System.Int64)">
            <summary>
            For passed scheduleId. Method will return all subgroups that belongs to passed schedule.
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <returns>Collection of SubGroup primary kies which belongs selected Schedule</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetListOfSubGroupsByIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed list of primary kies, method will return list of Subgroup objects
            </summary>
            <param name="subGroupIds">List of SubGroup Primary Kies</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetSubGroupScheduleID(System.Int64)">
            <summary>
            Returns SubGroups scheduleID
            </summary>
            <param name="id">SubGroup Primary Key</param>
            <returns>SubGroups ScheduleID</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetSubGroupsForPassedScheduleAsNoTracking(System.Int64)">
            <summary>
            For passed ScheduleID method will return all SubGroups which belongs to the passed Schedule
            AsNoTracking
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetSubGroupsForPassedScheduleAsNoTracking(System.Collections.Generic.List{System.Int64},ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed ScheduleID method will return all SubGroups which belongs to the passed Schedule
            AsNoTracking
            </summary>
            <param name="scheduleIDs">Schedule Primary Kies</param>
            <param name="range">Selected range</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetSubGroupsByUserPermissions(System.Collections.Generic.List{System.Int64},System.Int64,ESolve.Contracts.ILoggedInUser,ESolve.Entities.RepositoryContext,ESolve.Entities.DataManager.ScheduleManager)">
            <summary>
            Filter passed list of subgroups by current user's permissions
            </summary>
            <param name="selectedSubGroups">Initial list of subgorups</param>
            <param name="scheduleID">Schedule's primary key</param>
            <param name="loggedInUser">Current user</param>
            <param name="repositoryContext">Db Context</param>
            <param name="scheduleManager">Manager for schedules</param>
            <returns>List of subgroups' primary key for which current user has access to</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.OnScheduleOrSubGroupCustomDataChanged(System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},System.Collections.Generic.List{System.Int64},ESolve.Entities.DataManager.JobManager)">
            <summary>
            Raising event when schedule or subgroup custom data is changed in order to change childs and jobs where custom data is no manually updated
            </summary>
            <param name="customDatas">Custom data that will be changed</param>
            <param name="subGroupsIDs">Subgroups' primary keys</param>
            <param name="jobManager">Manager for jobs</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.GetTopParentIDForSubGroupID(System.Int64,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup},System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed SubGroupID method will populate collection with parent ids
            </summary>
            <param name="id">SubGroupID for which we want to get topParent ID</param>
            <param name="subGroups">Collection of SubGroups in schedule</param>
            <param name="parents">Collection of ids where parents will be added</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupManager.CallGetTopParentID(System.Int64,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup})">
            <summary>
            Call private method GetTopParentID
            </summary>
            <param name="id">SubGroup Primary key</param>
            <param name="subGroups">Collection of SubGroups which are in same schedule</param>
            <returns>Collection of ids which represents all parents for passed id</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.SubGroupsApprovalManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.SubGroupsApprovalManager._repositoryContext">
            <summary>
            Context which will be injected in RepositoryContext
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.Add(ESolve.Entities.Models.SubGroupsApproval)">
            <summary>
            Stores passed SubGroupApproval object in Database.
            </summary>
            <param name="entity">SubGroupApproval object which will be stored in database.</param>
            <returns>True if entity is added otherwise false </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.Delete(ESolve.Entities.Models.SubGroupsApproval)">
            <summary>
            Deletes from database passed SubGroupApproval object
            </summary>
            <param name="entity">SubGroupsApproval object which will be deleted from database.</param>
            <returns>True if entity is deleted otherwise false </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.Get(System.Int64)">
            <summary>
            For passed Id method will return object with that Primary Key from Database.
            </summary>
            <param name="id">SubGroupApproval Primary Key</param>
            <returns>SubGroupApproval object if exists, otherwise NULL</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetAll">
            <summary>
            Get All SubGroupApprovals From Database
            </summary>
            <returns>IEnumerable of SubGroupApproval objects</returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown when we call ToList() method on object which is NULL</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.Update(ESolve.Entities.Models.SubGroupsApproval)">
            <summary>
             Method sets new values for SubGroupsApproval object
            </summary>
            <param name="entity">SubGroupsApproval with new values.</param>
            <returns>True if action is sucessfull, or false if update fails.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetSubGroupsForSubmitDTO(ESolve.Entities.DTOs.IdBooleanCustomDTO)">
            <summary>
            Method returns SubGroupsForSubmitDTO object from database
            </summary>
            <param name="idsAndBoolDTO">Model where we have Primary Key</param>
            <returns>SubGroupsForSubmitDTO object from database</returns>
            <exception cref="T:System.ArgumentNullException">If some argument is null this excpetion will be raised.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetScheduleApprovalDetailsDTOs(ESolve.Entities.DTOs.SubmitedScheduleDetailsDTO,ESolve.Entities.DataManager.ScheduleManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            For passed Data method will return Schedule divided by periods where Schedule is approved, pending approval or it is not submitted
            </summary>
            <param name="submitedScheduleDetails">Submitted Schedule Details.</param>
            <param name="scheduleManager">Schedule manager</param>
            <param name="loggedInUser">Currently logged in user</param>
            <returns>Schedule divided by periods where Schedule is approved, pending approval or it is not submitted</returns>
            <exception cref="T:System.ArgumentNullException">If some argument is NULL, this exception will be raised.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetAll(ESolve.Entities.Filters.ScheduleApprovalFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Returns Collection of objects Schedule Approval for Table Preview
            </summary>
            <param name="filterModel">Filter for getting submited schedules/subgroups</param>
            <param name="url">URL from where is method Invoked</param>
            <param name="methodName">Caller Method Name</param>
            <param name="className">Caller Class Name</param>
            <param name="loggedInUser">Currently logged in user</param>
            <returns>List of ScheduleApprovalDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.ApproveOrRejectSubmitedItem(ESolve.Entities.DTOs.IdBooleanCustomDTO,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.SubGroupManager,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            If submited item is approved method will find all jobavailabilities 
            from schedule[or SubGroup=> if !subGroupsApproval.IsSchedule] from selcted range and approve all assigned availabilites
            Each assigned employee will get notification
            If is rejected we will delete item
            </summary>
            <param name="idBooleanCustom">Id of item and flag is it approved or rejected</param>
            <param name="scheduleManager">Manager for Accessing Schedules</param>
            <param name="subGroupManager">Manager for Accessing SubGroups</param>
            <param name="userId">Logged in user id</param>
            <param name="auditTrailManager">Manager class object for Audit trails</param>
            <returns>AssignmentNotificationListDTO object with Schedule name and collection of new assigments</returns>
            <exception cref="T:System.ArgumentNullException">If some argument is null, this exception will be raised</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.CheckIfAnyJobStartingInPast(ESolve.Entities.Filters.CalendarViewFilterModel)">
            <summary>
            Check if any job in the given schedule is starting before current date and time.
            </summary>
            <param name="calendarViewFilterModel"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.CheckIfThereAreChangesInUnlockedRange(ESolve.Entities.Filters.CalendarViewFilterModel,System.Int64)">
            <summary>
            Method used for cheking if there is change in passed date range
            </summary>
            <param name="calendarViewFilterModel">CalendarViewFilterModel object with information about unlocked date range</param>
            <param name="userID">Current logged in user</param>
            <returns>True if there are changes, false if there are no changes</returns>
            <exception cref="T:System.ArgumentNullException">This exception will be raised if some of Arguments is NULL.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.IsSubmittable(System.Boolean,System.Collections.Generic.List{ESolve.Entities.Models.SubGroupsApproval},ESolve.Entities.Models.SubGroup,System.DateTime,System.DateTime,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup},ESolve.Entities.DataManager.SubGroupManager)">
            <summary>
            Get indicator can SubGroup be submitted in passed range and is each date from view range submitted
            </summary>
            <param name="doesUserHavePermissionForSubmitting">Indicator does user have permission for submitting range</param>
            <param name="submittedSubGroup">Collection of all submitted SubGroups</param>
            <param name="subGroup">SubGroup which we will check</param>
            <param name="startDateTime">Beginning of the period being checked</param>
            <param name="endDateTime">End of period being checked</param>
            <param name="scheduleSubGroups">All Schedule SubGroups</param>
            <param name="subGroupManager">All Schedule SubGroups</param>
            <returns>BoolBoolDTO object which have indicators can subgroup be submitted, and are all days in subgroup submitted</returns>
            <exception cref="T:System.ArgumentNullException">This exception will be raised if some of Arguments is NULL.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.CheckIfDateRangeIsValid(System.DateTime,System.DateTime,System.Int64,System.Boolean)">
            <summary>
            Checks if given date range is eligible for submission of approval of schedule
            </summary>
            <param name="startDateTime"></param>
            <param name="endDateTime"></param>
            <param name="subGroupId"></param>
            <param name="retValue"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetSubmittedSubGroupsByIDs(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            For passed list of subgroupIds and schedule ID.
            Method will return all submitted subgroups where matching is achieved or where ScheduleID is equal with passed value
            </summary>
            <param name="subGroupIDs">List of SubGroup Primary Kies</param>
            <param name="scheduleID">Schedule Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.CanBeUnlocked(System.Boolean,System.Collections.Generic.List{ESolve.Entities.Models.SubGroupsApproval},ESolve.Entities.Models.SubGroup,System.DateTime,System.DateTime)">
            <summary>
            </summary>        /// Checking whether a subgroup can be unlocked for a period of time
            <param name="doesUserHavePermissionForSubmitting">Indicator does user have permission for submitting</param>
            <param name="submittedSubGroups">All Approved SubGroups</param>
            <param name="subGroup">Subgroup to be checked</param>
            <param name="startDateTime">Beginning of the period being checked</param>
            <param name="endDateTime">End of period being checked</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.SubmitSubGroups(ESolve.Entities.DTOs.SubGroupsForSubmitDTO,ESolve.Entities.DataManager.SubGroupManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Adding a subgroup to the list of submitted subgroups to be given status below whether they are accepted or not
            </summary>
            <param name="groupsForSubmitDTO">Subgroup id, start and end period for submission</param>
            <param name="subGroupManager">Manager for accesing subgroups</param>
            <param name="loggedInUser">Logged in user</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetSchedulesForUserComboValue(System.Int64)">
            <summary>
            Get All Schedules where User have Modify Permission
            </summary>
            <param name="userId">User Primary Key</param>
            <returns>List of Schedules with Modify Permission</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetAllApprovalsSubGroupsInPeriod(System.Int64)">
            <summary>
            For passed ScheduleId method will return all schedule approvals
            </summary>
            <param name="scheduleId">Schedule Primary Key</param>
            <returns>Collection of all Submitted periods for selected Schedule</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetApprovedSubGroupsForPassedScheduleAsNoTracking(System.Int64)">
            <summary>
            For passed scheduleID method will return all approved SubGroup approvals 
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <returns>Approved Ranges for passed Schedyle</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.AddUpdateEmployeeJobHistory(ESolve.Entities.Models.SubGroupsApproval,ESolve.Entities.DataManager.SubGroupManager)">
            <summary>
            Add or Update details of an approved job in tblJobsHistory table so that employee 
            can see approved job's information
            </summary>
            <param name="subGroupsApproval">SubGroupsApproval that will hold the information about the subgroup and date range</param>
            <param name="subGroupManager"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetItemForApprovalListPreview(System.Collections.Generic.List{ESolve.Entities.DTOs.ScheduleApprovalDTO},System.Collections.Generic.List{ESolve.Entities.Models.SubGroup},ESolve.Entities.Models.SubGroupsApproval)">
            <summary>
            For passed data method will generate response for DataTable of SubGroupApprovals
            </summary>
            <param name="response">Collection where object will be stored</param>
            <param name="subGroups">Selected SubGroups</param>
            <param name="approval">SubGroupApproval object</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting,
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetSubGroupsApprovalsForPassedSubGroups(System.Collections.Generic.List{System.Int64})">
            <summary>
            For passed collection of SubGroup Ids method will return approvals for passed SubGroups
            </summary>
            <param name="subGroupIDs">SubGroup Primary Kies</param>
            <returns>List Of SubGroupApprovals</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetSubGroupsApprovalsInPassedRange(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime)">
            <summary>
            Get List of submitted SubGroups where SubGroupID is in passed collection and there is overlapping with passed dates
            </summary>
            <param name="subGroupIDs">Collection of subgroups which will be selected</param>
            <param name="startDate">Period Start Date</param>
            <param name="endDate">Period End Date</param>
            <returns>Submitted SubGroups from passed range.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.SubGroupsWhereUserHaveModifyOrLimittedModifyPermissionsForSelectedSchedule(System.Int64,System.Int64)">
            <summary>
            For passed data method will return all subgroups that belongs passed schedule where passed user have Modify or Limited Modify permission
            </summary>
            <param name="scheduleID">Selected Schedule</param>
            <param name="userID">Selected user</param>
            <returns>Collection of SubGroups where current User have Modify or Limited Modify Permission</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.SubGroupsWhereUserHaveModifyOrLimittedModifyPermissionsForSelectedSchedules(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            For passed data method will return all subgroups that belongs passed schedules where passed user have Modify or Limited Modify permission
            </summary>
            <param name="scheduleIDs">Selected Schedules</param>
            <param name="userID">Selected user</param>
            <returns>Collection of SubGroups where current User have Modify or Limited Modify Permission</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.AuditLogForScheduleApprovalRequest(System.Int64,ESolve.Entities.DataManager.AuditTrailManager,AuditOperationTypes,ESolve.Entities.Models.Schedule,System.String,System.String)">
            <summary>
            Add audit log entry while request schedule for approval
            </summary>
            <param name="userID">Logged in user id</param>
            <param name="auditTrailManager">Object of audit trail manager</param>
            <param name="operationType">Operation type</param>
            <param name="schedule">Schedule object</param>
            <param name="auditFunction">Audit function type</param>
            <param name="currentValue">Current value</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.ValidateEntryForSubmmit(ESolve.Entities.DTOs.SubGroupsForSubmitDTO,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.JobManager)">
            <summary>
            Validate model for submitting.
            </summary>
            <param name="model">Model which should be submitted</param>
            <param name="scheduleManager">Manager for actions on Schedules</param>
            <param name="subGroupManager">Manager for actions on SubGroups</param>
            <param name="userManager">Manager for actions on Users</param>
            <param name="jobManager">Manager for actions on Jobs</param>
            <returns>Error if some property is not valid, or null if all properties are ok</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SubGroupsApprovalManager.GetUserDashboardScheduleApprovalsTableForPassedUser(ESolve.Contracts.ILoggedInUser)">
            <summary>
            For passed data method will return all subgroup approvals
            </summary>
            <param name="loggedInUser"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.SyncManager">
            <summary>
            Managing sync logic.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.Add(ESolve.Entities.DTOs.SyncDTO)">
            <summary>
            Inserts new row in tblSync
            </summary>
            <returns>Message from SyncSettings</returns>
            <param name="syncDTO">DTO containing data such as ScheduleID, StartDate and EndDate.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.Add(ESolve.Entities.Models.Sync)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.Delete(ESolve.Entities.Models.Sync)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.GetAll">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.Update(ESolve.Entities.Models.Sync)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.GetSyncRequests(ESolve.DataIntegrations.Models.CursorPaggination.ScheduleSync.ScheduleSyncSearchModel)">
            <summary>
            
            </summary>
            <param name="searchModel"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.GetSyncMessage">
            <summary>
            Get message for sucessfull sync
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncManager.GetSyncHistory(ESolve.Entities.Filters.SyncHistoryFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Getting sync history
            </summary>
            <param name="filter">Filter for sync history page.</param>
            <param name="url">Url of page</param>
            <param name="methodName">Controller's method name</param>
            <param name="className">Class's name</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>PagedCollectionResponse with SyncHystoryDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.SyncSettingsManager">
            <summary>
            Manager for SyncSettings logic.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncSettingsManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncSettingsManager.Update(ESolve.Entities.Models.SyncSettings)">
            <summary>
            Updates SyncSettings object values in Database table tblSyncSettings with values passed inside SyncSettings object.
            </summary>
            <param name="entity">SyncSettings object with new values</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncSettingsManager.Get">
            <summary>
            Get sync data from database.
            </summary>
            <returns>Returns sync object from database.</returns>
            /// <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncSettingsManager.Add(ESolve.Entities.Models.SyncSettings)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncSettingsManager.Delete(ESolve.Entities.Models.SyncSettings)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncSettingsManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.SyncSettingsManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.TargetRuleGroupManager">
            <summary>
            TargetRuleGroupManager class contains all methods for performing TargetRuleGroup data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new TargetRuleGroup object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing TargetRuleGroup object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing TargetRuleGroup object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one TargetRuleGroup object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all TargetRuleGroup objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all TargetRuleGroup objects from Database in DropDown Form.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TargetRuleGroupManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TargetRuleGroupManager.Add(ESolve.Entities.Models.TargetRuleGroup)">
            <summary>
            Inserts passed TargetRuleGroup object in Database table tblTargetRuleGroups.
            </summary>
            <param name="entity">Represents TargetRuleGroup object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TargetRuleGroupManager.Delete(ESolve.Entities.Models.TargetRuleGroup)">
            <summary>
            Removes passed TargetRuleGroup object from Database table tblTargetRuleGroups.
            </summary>
            <param name="entity">Represents CostCode object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TargetRuleGroupManager.Get(System.Int64)">
            <summary>
            Returns TargetRuleGroup object from Database table tblTargetRuleGroups where Id is equal with passed value.
            </summary>
            <param name="id">TargetRuleGroup Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TargetRuleGroupManager.GetAll">
            <summary>
            Returns all TargetRuleGroup objects from Database table tblTargetRuleGroups.
            </summary>
            <returns>List of TargetRuleGroup objects. See <see cref="T:ESolve.Entities.Models.TargetRuleGroup"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TargetRuleGroupManager.Update(ESolve.Entities.Models.TargetRuleGroup)">
            <summary>
            Updates TargetRuleGroup object values in Database table tblTargetRuleGroups with values passed inside TargetRuleGroup object in function argument.
            </summary>
            <param name="entity">TargetRuleGroup object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TargetRuleGroupManager.GetIdNameList">
            <summary>
            This method return all TargetRuleGroup objects from Database table tblTargetRuleGroups in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.TeamManager">
            <summary>
            TeamManager class contains all methods for performing Team data functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Inserting new Team object in Database.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Removing existing Team object from Database.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Updating existing Team object in Database.</description>
            </item>
            <item>
            <term>Get</term>
            <description>Get one Team object from Database.</description>
            </item>
            <item>
            <term>Get All</term>
            <description>Get all Team objects from Database.</description>
            </item>
            <item>
            <term>Combo Values</term>
            <description>Get all Team objects from Database in DropDown Form.</description>
            </item>
            <item>
            <term>Unique name</term>
            <description>Check if Team name in use.</description>
            </item>
            <item>
            <term>Add array of teams.</term>
            <description>Add passed array of teams.</description>
            </item>
            <item>
            <term>Update array of teams.</term>
            <description>Update passed array of teams. If in array is team which is not in database, it will be added.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.Add(ESolve.Entities.Models.Team)">
            <summary>
            Inserts passed Team object in Database table tblTeams.
            </summary>
            <param name="entity">Represents CostCode object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.Add(ESolve.Entities.Models.Team[])">
            <summary>
            Inserts passed array of Team objects in Database table tblTeams.
            </summary>
            <param name="teams">Represents array of Team object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.Update(ESolve.Entities.Models.Team[])">
            <summary>
            Updates Team objects in Database table tblTeams with values passed inside array of Team objects in function argument.
            If teamID does not exist, new row will be added.
            </summary>
            <param name="updatedTeams">Team objects with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.Delete(ESolve.Entities.Models.Team)">
            <summary>
            Removes passed Team object from Database table tblTeams.
            </summary>
            <param name="entity">Represents Team object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.Get(System.Int64)">
            <summary>
            Returns Team object from Database table tblTeams where Id is equal with passed value.
            </summary>
            <param name="id">Team Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.GetAll">
            <summary>
            Returns all Team objects from Database table tblTeams.
            </summary>
            <returns>List of Team objects. See <see cref="T:ESolve.Entities.Models.Team"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.Update(ESolve.Entities.Models.Team)">
            <summary>
            Updates Team object values in Database table tblTeams with values passed inside Team object in function argument.
            </summary>
            <param name="entity">Team object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.GetIdNameList">
            <summary>
            This method return all Team objects from Database table tblTeams in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TeamManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Check if Team Name is unique in Database table tblTeams.
            </summary>
            <param name="filter">Id and Team Name value</param>
            <returns>True if Name is available, False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateBrokenRulesManager">
            <summary>
            Manager for broken rules
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateBrokenRulesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateBrokenRulesManager.Add(ESolve.Entities.Models.TemplateBrokenRule)">
            <summary>
            Add new Template Broken rule in database
            </summary>
            <param name="entity">Template Broken rule object</param>
            <returns>True if adding was succesfully done, false if not.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateBrokenRulesManager.Add(System.Collections.Generic.List{ESolve.Entities.Models.BrokenRule})">
            <summary>
            Method that receives a list of BrokenRules, creates TemplateBrokenRule entities
            And saves them to the tblTemplateBrokenRules
            </summary>
            <param name="brokenRules"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateBrokenRulesManager.Delete(ESolve.Entities.Models.TemplateBrokenRule)">
            <summary>
            Delete exisit Template broken rule from tblTemplateBrokenRules
            </summary>
            <param name="entity">Template Broken rule object</param>
            <returns>True if deleting was succesffuly done, false if not</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateBrokenRulesManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateBrokenRulesManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateBrokenRulesManager.Update(ESolve.Entities.Models.TemplateBrokenRule)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateBrokenRulesManager.Add(System.Collections.Generic.List{ESolve.Entities.Models.TemplateBrokenRule})">
            <summary>
            This method is used for adding list of broken rules into database
            </summary>
            <param name="brokenRules"></param>
            <returns>True if adding is sucessfully added, otherwise return false.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateJobAvailabilityManager">
            <summary>
            TemplateJobAvailabilityManager class for managing TemplateJobAvailability
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor that initializes Repository Context.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.Add(ESolve.Entities.Models.TemplateJobAvailability)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.Delete(ESolve.Entities.Models.TemplateJobAvailability)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.Get(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.Update(ESolve.Entities.Models.TemplateJobAvailability)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.EmployeeAssignList(ESolve.Entities.DTOs.EmployeeJobAssigmentDTO[],System.Boolean,System.Boolean,System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="employeeJobAssigmentDTO"></param>
            <param name="isAssigment"></param>
            <param name="isCopyJob"></param>
            <param name="jobs"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.JobUpdate(System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.List{System.String},ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.RepositoryContext,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            Method for calculating job's availaiblity on update
            </summary>
            <param name="entityID">Job with new Values</param>
            <param name="oldEndDate">Old end date of updated job in order to update availaiblities after it if split shifts constraint i active</param>
            <param name="oldStartDate">Old start date of updated job in order to update availaiblities after it if split shifts constraint i active</param>
            <param name="updatedFields">Job with new Values</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="repositoryContext">Repository context</param>
            <param name="jobAvailabilityManager">Manager for Job Availabilities</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.JobAdd(ESolve.Entities.Models.TemplateJob,ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            Calculations on adding new job
            </summary>
            <param name="templateJob">TemplateJob's primary key</param>
            <param name="jobType">Job type's primary key</param>
            <param name="jobAvailabilityManager">Manager for JobAvailability.</param>
            /// <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.CopyJob(System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Boolean,ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO,System.Int64,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Calculates job availabilities on adding range of jobs.
            </summary>
            <param name="newJobs">List of added jobs without concurrent jobs.</param>
            <param name="originalJobs">Originial jobs if this method is called by copy job or copy data forward action.</param>
            <param name="copyAssignments">Indicatior if we need to copy assignments.</param>
            <param name="jobType">Original job's job type</param>
            <param name="scheduleID">Schedule where we are adding jobs.</param>
            <param name="loggedInUser">Current logged in user</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.JobTypeUpdate(System.Int64,ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO,ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO,System.Boolean,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            This method is used to calculate template job availabilites for updated job types.
            </summary>
            <param name="jobTypeID">Job type's primary key</param>
            <param name="jobTypeDB">Job type with old values.</param>
            <param name="jobTypeUpdated">Job type with updated values.</param>
            <param name="skillsUpdated">Flag for indicating if there is any changes on job type's skills.</param>
            <param name="jobAvailabilityManager">Manager for Job Availabilities</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.CopyTemplateDataForward(System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{System.Int64}},System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{ESolve.Entities.DTOs.JobTypeCalculationsDTO},System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix},ESolve.Entities.RepositoryContext,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Calculating template job's availabilities based on copy template's data forward action
            </summary>
            <param name="newTemplateJobs">New template jobs that are added.</param>
            <param name="jobTypesEmployees">Dictionary where key is job type's primary key and value is list of employees that satisfy job type.</param>
            <param name="employees">Employee from database</param>
            <param name="originalTemplateJobAvailabilities">Original template job's availabilities</param>
            <param name="availabilitiesForCalcs">Availabilities that need to be checked based on new range with new jobs.</param>
            <param name="originalTemplateJobs">Original template's jobs</param>
            <param name="jobTypes">Job type from original template's jobs</param>
            <param name="skillsWhichEmployeesHave">List of skills that employees have</param>
            <param name="repositoryContext">Db context</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>Returns CopyDataRetValueDTO object with availaiblites for which we will need to create broken rule messages.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.EmployeeAdd(System.Int64,ESolve.Entities.DataManager.JobTypeManager)">
            <summary>
            Calculations for adding new employees
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="jobTypeManager">Manager for job type.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.EmployeeUpdate(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            Calculations for employeee's update
            </summary>
            <param name="employeeToUpdate">Employee From Database with values before Update</param>
            <param name="employeeUpdated">Employee with updated values.</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="jobAvailabilityManager">Manager for Job Availabilities.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.EmployeeDelete(System.Int64)">
            <summary>
            Calculations for deleteing employee
            </summary>
            <param name="employeeID"></param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <returns>Sorted available employee list based on scheduled hours ranking.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.SkillMatrixUpdateValue(System.Int64,System.Int64,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            This method Finds all JobTypes from tblJobTypes where SkillCodeFormula contains passed SkillCode.
            After that from tblTemplateJobAvailabilities we find all Jobs whichs JobType is one from JobTypes founded in previous sentece.
            And calculating does employee satisfies JobTypeFormula.
            </summary>
            <param name="employeeID">Employee's primary key</param>
            <param name="skillCodeID">Skill code's primary key</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="jobAvailabilityManager">Manager for JobAvailability.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">The exception that is thrown when an attempt is made to store an element of the
            wrong type within an array.</exception>
            <exception cref="T:System.RankException">The exception that is thrown when an array with the wrong number of dimensions
            is passed to a method.</exception>
            <exception cref="T:System.InvalidCastException">The exception that is thrown for invalid casting or explicit conversion.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.ApplyConstraints(System.Collections.Generic.List{ESolve.Entities.Models.TemplateConstraint},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Nullable{System.Int64})">
            <summary>
            
            </summary>
            <param name="constraints"></param>
            <param name="employeeIDs"></param>
            <param name="scheduleIdsForLoading"></param>
            <param name="jobs"></param>
            <param name="jobIDsForDeleting"></param>
            <param name="jobIDsForAdding"></param>
            <param name="updatedJobID"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.GetEmployeesIdsThatSatisfyJobType(ESolve.Entities.Models.TemplateJob,ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix},ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            This method return all employee IDs that satisfy passed job type
            </summary>
            <param name="job">Job's primary key</param>
            <param name="jobType">Manager for job type.</param>
            <param name="employeeIds">List of employee IDs</param>
            <param name="skillsWhichEmployeesHave">Skill matrix of true values.</param>
            <param name="jobAvailabilityManager">Manager for Jobs.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.CheckIfEmployeeSatisfiesJobTypeComparsionRules(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.JobTypeComparisonRule[],ESolve.Entities.Models.JobTypeComparisonRule[],System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.DTOs.JobCustomDataDTO[]},System.Int64,ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            Method that checkes if Employee satisfies Job Type Comparison Rules
            </summary>
            <param name="employee"></param>
            <param name="allComparisonRules"></param>
            <param name="essentialComparsionRules"></param>
            <param name="jobsCustomData"></param>
            <param name="templateJobID"></param>
            <param name="jobAvailabilityManager"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.SetTemplateJobAvailabilityJobTypeValues(ESolve.Entities.Models.TemplateJob,ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.DTOs.JobCustomDataDTO[]},ESolve.Entities.Models.TemplateJobAvailability,System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix},ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            Method that sets TemplateJobAvailability for JobType values
            </summary>
            <param name="templateJob"></param>
            <param name="jobType"></param>
            <param name="employee"></param>
            <param name="jobsCustomDataDic"></param>
            <param name="templateJobAvailability"></param>
            <param name="currentEmployeeSkills"></param>
            <param name="jobAvailabilityManager"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.SetJobAvailabilityBasedOnSkillCode(System.Collections.Generic.List{ESolve.Entities.Models.JobTypeSkill},System.Collections.Generic.List{ESolve.Entities.Models.JobTypeSkill},ESolve.Entities.Models.TemplateJob,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.Models.TemplateJobAvailability,System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix})">
            <summary>
            set template job availabilities validity based on skill code.
            </summary>
            <param name="essentialSkills"></param>
            <param name="nonEssentialSkills"></param>
            <param name="job"></param>
            <param name="employee"></param>
            <param name="jobAvailability"></param>
            <param name="currentEmployeeSkills"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.JobsDelete(System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{System.Int64},ESolve.Entities.DataManager.TemplateManager)">
            <summary>
            Calculations for deleting template jobs.
            </summary>
            <param name="jobs"></param>
            <param name="employeesAssignedToPassedJobs"></param>
            <param name="templateManager">Manager for Templates used for updating Template's LastModified.</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.DuplicateTemplateJobAvailabilities(System.Collections.Generic.List{ESolve.Entities.Models.TemplateJobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method that duplicates TemplateJobAvailabilities.
            </summary>
            <param name="originalTemplateJobAvailabilities"></param>
            <param name="originalTemplateJobs"></param>
            <param name="newTemplateJobs"></param>
            <param name="loggedInUser">Current logged in user</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was exp</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.DuplicateAgencyTemplateJobAssignments(System.Collections.Generic.List{ESolve.Entities.Models.AgencyTemplateJobAssignment},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob})">
            <summary>
            Duplicating agency template job assignemnts
            </summary>
            <param name="originalAgencyTemplateJobAssignments">List or Original Agency Template Job Assignments</param>
            <param name="originalTemplateJobs">OriignalTemplate Jobs</param>
            <param name="newTemplateJobs">New Template Jobs</param>
            <returns>List of new agency template job assignments</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was exp</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.GetAllTemplateJobAvailabilityByTemplateJobIDs(System.Collections.Generic.List{System.Int64})">
            <summary>
            Method that retrieve TemplateJobAvailabilities by relevant TemplateJobIDs.
            </summary>
            <param name="relevantTemplateJobIDs">List of TemplateJobIDs used to retrieve TemplateJobAvailabilities.</param>
            <returns>List of retrieved TemplateJobAvailabilities.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.CheckForBrokenRules(ESolve.Entities.Models.TemplateJobAvailability,ESolve.Entities.Models.TemplateJobAvailability)">
            <summary>
             This methods check if there is need to delete broken rules messages from tblTemplateBrokenRules. For example: when we update or delete job's availaiblity
             </summary>
             <param name="oldJobAvailability">Old template job's availability</param>
             <param name="newJobAvailability">New template job's availaiblity</param>
             <returns>True if we need to delete broken rules messages, otherwise returns false.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.SetTemplateJobAvailabilityJobTypeValues(ESolve.Entities.Models.TemplateJob,ESolve.Entities.DTOs.JobTypeCalculationsDTO,ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.DTOs.JobCustomDataDTO[]},System.String,ESolve.Entities.RepositoryContext,ESolve.Entities.Models.TemplateJobAvailability,System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix},ESolve.Entities.DataManager.JobAvailabilityManager)">
            <summary>
            This method is used for checking if employee satisfies job type
            </summary>
            <param name="job">TemplateJob's primary key</param>
            <param name="jobType">Job type's primary key</param>
            <param name="employee">Employee's primary key</param>
            <param name="jobsCustomDataDic">Job's custom datas</param>
            <param name="timeUnitName">Length of service's time unit name</param>
            <param name="repositoryContext">Repository context</param>
            <param name="jobAvailability">Template Job availability</param>
            <param name="currentEmployeeSkills">All skills that passed employee have</param>
            <param name="jobAvailabilityManager">Manager for Job Availability</param>
            <returns>TemplateJobAvailability with true/false values for job type attributes.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.CalculateAssigmentsAfterActions(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJobAvailability},System.Collections.Generic.List{ESolve.Entities.Models.TemplateConstraint},System.Collections.Generic.List{ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO},ESolve.Entities.Models.ScheduleDatePreference,System.Collections.Generic.List{ESolve.Entities.Models.TemplateEmployeeConstraint},System.Collections.Generic.List{ESolve.Entities.Models.JobStatus})">
            <summary>
            This method is used for checking availabilities on Template Jobs that are affected by any change or if
            some availabilites are removed because of job type or custom data.
            </summary>
            <param name="employeesIDs">Employees' primary keys that will be checked.</param>
            <param name="availabilitiesToCheck">Availaiblities to be checked.</param>
            <param name="constraintOfAllSchedules">Constraints</param>
            <param name="jobCustomDataForConstraints">Jobs custom datas</param>
            <param name="scheduleDatePreference">Schedule date prefereneces</param>
            <param name="employeesConstraints">Employees' constraints</param>
            <param name="jobStatuses">Jobs' statuses</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.GetMinOrMaxDateOfAssignments(System.DateTime,System.DateTime,System.Collections.Generic.List{ESolve.Entities.Models.TemplateConstraint},System.String,ESolve.Entities.Models.ScheduleDatePreference,System.Boolean)">
            <summary>
            This method is used for calculatiing period for retrieveing only necessery job availabilities base on constraints' date ranges
            </summary>
            <param name="jobStartDate"></param>
            <param name="jobEndDate"></param>
            <param name="constraints"></param>
            <param name="nameOfFirstDayInWeek"></param>
            <param name="scheduleDatePreference"></param>
            <param name="getStart"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.EmployeeUnAssignList(System.Collections.Generic.List{ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO},System.Boolean)">
            <summary>
            
            </summary>
            <param name="employeeJobAssigmentDTO"></param>
            <param name="isAssigment"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobAvailabilityManager.EmployeeAssign(ESolve.Entities.DTOs.EmployeeJobAssigmentDTO,System.Boolean,ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="assigment"></param>
            <param name="isAssigment"></param>
            <param name="repositoryContext"></param>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateJobCustomDataManager">
            <summary>
            Manager for TemplateJobCustomData
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.Add(ESolve.Entities.Models.TemplateJobCustomData)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.Delete(ESolve.Entities.Models.TemplateJobCustomData)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.Get(System.Int64)">
            <summary>
            NotImplemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.GetAll">
            <summary>
            NotImplemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.Update(ESolve.Entities.Models.TemplateJobCustomData)">
            <summary>
            NotImplemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.GetAllByTemplateJobIDs(System.Collections.Generic.List{System.Int64})">
            <summary>
            Method that retrieves TemplateJobCustomDatas based on a list of TemplateJobIDs.
            </summary>
            <param name="listOfTemplateJobIDs">List of TemplateJobIDs which will be used for retrieving list of TemplateJobCustomDatas.</param>
            <returns>List of retrieved TemplateJobCustomDatas.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.DuplicateTemplateJobCustomDatas(System.Collections.Generic.List{ESolve.Entities.Models.TemplateJobCustomData},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob})">
            <summary>
            Method that duplicates TemplateJobCustomDatas.
            </summary>
            <param name="originalTemplateJobCustomDatas"></param>
            <param name="newTemplateJobs"></param>
            <param name="originalTemplateJobs"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.GetAllCustomDataForJob(System.Int64)">
            <summary>
            Return all Custom Data from database. 
            Those CustomDate which are assigned to the TemplateJob will have values, other will have default
            </summary>
            <param name="templateJobID">TemplateJob PrimaryKey</param>
            <returns>List of TemplateJobCustomDataAddEditDTO that belong to specific TemplateJob</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.Add(ESolve.Entities.DTOs.JobCustomDataAddEditDTO[],System.Int64,ESolve.Entities.DataManager.TemplateJobAvailabilityManager)">
            <summary>
            Iterate trough passed array and storing each item in TemplateJobCustomDatas table
            </summary>
            <param name="customDatas">Array with custom datas. See <see cref="T:ESolve.Entities.DTOs.JobCustomDataAddEditDTO"/> for model details</param>
            <param name="templateJobAvailabilityManager">Manager for TemplateJobAvailability</param>
            <param name="templateJobID">TemplateJob's primary key</param>
            <returns>True if all items are stored</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobCustomDataManager.UpdateCustomDataArray(ESolve.Entities.DTOs.JobCustomDataAddEditDTO[],System.Boolean)">
            <summary>
            Iterate trough array and update each item where indicator is false. If appropitate value is null, we delete that customdata.
            </summary>
            <param name="customDatas">Array with custom datas. See <see cref="T:ESolve.Entities.DTOs.JobCustomDataAddEditDTO"/> for model details</param>
            <param name="isCalledFromJobCustomDataController">If this param is true we call this from JobCustomDataController,
            if it is false we call it from SubGroupController.</param>
            <returns>True if all items are stored</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateJobManager">
            <summary>
            TemplateJobManager class for managing Template SubGroups.
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.TemplateJobManager._scheduleSubGroupsSortedInParentChildStructure">
            <summary>
            Here Will be stored SubGroupIDs sorted by SortOrder where exists and than by Name where SortOrder is null in ParentChild Structure.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.Add(ESolve.Entities.Models.TemplateJob)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.Delete(ESolve.Entities.Models.TemplateJob)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetOnlyTemplateJob(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.Get(System.Int64)">
            <summary>
            Returns TemplateJobWithCustomDataDTO object from Database table tblJobs where Id is equal with passed value.
            </summary>
            <param name="id">TemplateJob Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.Update(ESolve.Entities.Models.TemplateJob)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.CopyJob(ESolve.Entities.DTOs.CopyJobDTO,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.TemplateManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Copies job with passed Id and inserts it into database.
            </summary>
            <param name="copyJobDTO">DTO for job coppying.</param>
            <param name="templateJobAvailabilityManager">Manager for calculating employee's availability on templates.</param>
            <param name="jobAvailabilityManager">Manager whose methods will be used for the purpose of this method.</param>
            <param name="jobTypeManager">Manager for checking if employee satisfy job type rules.</param>
            <param name="templateManager">Manager for updating Template's LastModified property.</param>
            <param name="loggedInUser">Current logged in user</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <returns>List of new jobs which are copied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.UpdateTemplateDays(ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            This method update TemplateJob's assigned day based on FistDayOfWeek in ScheduleDatePreference.
            </summary>
            <param name="schedDatePerf">ScheduleDatePreference</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.ValidateSortOrderOnAddingNewJob(ESolve.Entities.Models.TemplateJob)">
            <summary>
            This method set TemplateJob's sort order on adding it.
            </summary>
            <param name="job">TemplateJob which sort order will be calculated.</param>
            <returns>Job with new value of sort order.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
             is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.Add(ESolve.Entities.Models.TemplateJob,System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},System.Boolean)">
            <summary>
            Method that adds passed TemplateJob to the Database, as well as its CustomDatas.
            </summary>
            <param name="templateJob">TemplateJob object to be added to the Database.</param>
            <param name="customDatas">List of TemplateJobCustomDatas that will be added to the Database.</param>
            <param name="isCopyJobAction">Indicates whether the method was called upon Adding a Job or upon Copying a Job.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetMessagesFromBrokenRules(ESolve.Entities.DTOs.EmployeeJobAssigmentDTO[],ESolve.Entities.DataManager.TemplateScheduleManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            This method is used for generating message based on broken rules when we are trying to assign employees.
            This method can be used for multiple assigments also.
            </summary>
            <param name="employeeJobAssigmentDTOs">EmployeeJobAssigmentDTO with job's primary key and employee's primary key</param>
            <param name="scheduleManager">Manager for schedule.</param>
            <param name="jobTypeManager">Manager for job type values.</param>
            <param name="jobAvailabilityManager">Manager for job's availability</param>
            <param name="templateJobAvailabilityManager">Manager for template job's availability</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>Key value pair where key is list of broken rules and value is number of broken rules.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.RemoveEmployeeAssigments(System.Collections.Generic.List{ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO},ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.TemplateManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method iterate troguh passed collection and create List of JobAssigment object's based on EmployeeID JobID in each element in list. When is done, method removes range[created list] from DB.
            </summary>
            <param name="removeEmployeeAssigmentDTOs"></param>
            <param name="jobAvailabilityManager">Manager for JobAvailabilities.</param>
            <param name="templateManager">Manager for Templates used for updating Template's LastModified.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>True if no of removed items in dabatabse is equal with created list Count, in all other cases return value will be false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.RemoveEmployeeAssigments(ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.TemplateManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method removes Item from tblTemplateJobAvailabilities in DataBase. From passed RemoveEmployeeAssigmentDTO, method generates JobAssigment entity based on EmployeeId and JobID in Function argument. 
            </summary>
            <param name="removeEmployeeAssigmentDTO"></param>
            <param name="jobAvailabilityManager">Manager for JobAvailabilities.</param>
            <param name="templateManager">Manager for Templates, used for updating Template's LastModified.</param>
            <param name="loggedInUser">Current logged in User</param>
            <returns>True if method removes only one entity, in all other cases return value will be false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.AssignEmployees(ESolve.Entities.DTOs.AssigmentDTO,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.TemplateBrokenRulesManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.TemplateManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Assign Employees on Jobs
            </summary>
            <param name="assigments">DTO with job's priamry key and employee's priamry key.</param>
            <param name="jobAvailabilityManager">Manager for job's availability.</param>
            <param name="brokenRulesManager">Manager for broken rules.</param>
            <param name="profileManager">Manager for profiles.</param>
            <param name="scheduleManager">Manager for schedules, used in order to access method for retrieving permissions.</param>
            <param name="templateManager">Manager for Templates, used for updating Template's LastModified.</param>
            <param name="loggedInUser">Represents currently LoggedIn User.</param>
            <returns>Message about action</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.AssignEmployee(ESolve.Entities.DTOs.AssigmentDTO,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.TemplateBrokenRulesManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.TemplateManager)">
            <summary>
            This method assigns employee to the passed template job. Also, checks if assgiments is valid or invalid and based on that creates broken rules
            </summary>
            <param name="assigment">Employee template job assgiments dto object with employee and template job info.</param>
            <param name="templateJobAvailabilityManager">Manager for template job availability.</param>
            <param name="brokenRulesManager">Manager for template job broken rules.</param>
            <param name="profileManager">Manager for profiles.</param>
            <param name="loggedInUser">Logged in user</param>
            <param name="userManager">Manager for users</param>
            <param name="scheduleManager">Manager for schedules.</param>
            <param name="templateManager">Manager for templates.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.Delete(System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},ESolve.Entities.DataManager.TemplateManager)">
            <summary>
            Method recieves list of job ids, finds connected entities with selected entity and removes them, and after that removes selected job
            </summary>
            <param name="jobs">List of Jobs which will be deleted.</param>
            <param name="templateManager">Manager for Templates, used for updating LastModified.</param>
            <returns>True if all connected entities and same job are deleted.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.DeleteJobsFromSelectedSubgroups(System.Int64,System.DateTime,System.DateTime,ESolve.Entities.DataManager.TemplateManager,ESolve.Entities.DataManager.TemplateJobManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Deleting jobs from selected template's subgroups
            </summary>
            <param name="templateSubgroupID">Template subgroup's primary key</param>
            <param name="startDate">Start date of displayed date range</param>
            <param name="endDate">End date of displayed date range</param>
            <param name="templateManager">Manager for template</param>
            <param name="templateJobManager">Manager for template's job</param>
            <param name="templateJobAvailabilityManager">Manager for template job's availabilities</param>
            <param name="loggedInUser">Logged in user</param>
            <returns>True if jobs are succesfully removed, otherwise return false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetEmployeeAssignedOnPassedJobs(System.Collections.Generic.List{System.Int64})">
            <summary>
            for passed job ids method will return ids from all employees assigned on some of jobs
            </summary>
            <param name="ids">List of job primari kies</param>
            <returns>Job with passed id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetTemplateJobs(System.Collections.Generic.List{System.Int64})">
            <summary>
            Method will found all jobs where Primary key matches with some value form list of paramteres
            </summary>
            <param name="ids"></param>
            <returns>Job with passed id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.Update(ESolve.Entities.DTOs.JobWithCustomDataDTO,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,System.Boolean,ESolve.Entities.DataManager.TemplateJobCustomDataManager,ESolve.Entities.DataManager.TemplateScheduleManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.TemplateManager,System.String,System.String,System.Int64)">
            <summary>
            Updates TemplateJob object values in Database table tblTemplateJobs with values passed inside TemplateJob object in function argument.
            </summary>
            <param name="jobWithCustomDataDTO">Object with job's attributes and custom data.</param>
            <param name="jobAvailabilityManager">Job object with new values.</param>
            <param name="jobTypeManager">JobTypeValueManager.</param>
            <param name="isDragAndDropChanged">Indidcator is job drag and dropped.</param>
            <param name="templateJobCustomDataManager">TemplateJob's custom data manager for managing custom data.</param>
            <param name="templateScheduleManager">Manager for template schedules, used in order to access method for retrieving permissions for templates.</param>
            <param name="templateManager">Manager for Templates, used for updating Template's LastModified.</param>
            <param name="username">Represents current account's username.</param>
            <param name="role">Represents current account's role.</param>
            <param name="userID">Represents current account's UserID.</param>
            <param name="templateJobAvailabilityManager">Manager for TemplateJobAvailabilities.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.CalculateJobAvailabilitites(ESolve.Entities.Models.TemplateJob,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.TemplateManager)">
            <summary>
            For passed TemplateJob calculate availabilities
            </summary>
            <param name="job">TemplateJob for which we will calculate availabilitites</param>
            <param name="jobTypeManager">Job Type Manager</param>
            <param name="templateJobAvailabilityManager">Template Job Availability Manager</param>
            <param name="jobAvailabilityManager">Job Availability Manager</param>
            <param name="templateManager">Template Manager.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetEmploeeViewByJobType(ESolve.Entities.Filters.CalendarViewFilterModel,ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Generates response for Calendar EmployeeView preview including Job Type for Jobs
            </summary>
            <param name="filter">Filter Arguments. See <see cref="T:ESolve.Entities.Filters.CalendarViewFilterModel"/> for model details.</param>
            <param name="templateSubGroupManager">Filter Arguments. See <see cref="T:ESolve.Entities.DataManager.TemplateSubGroupManager"/> for model details.</param>
            <param name="jobTypeManager">Manger for getting job type info</param>
            <param name="templateJobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
            <param name="JobAvailabilityManager">Manager for JobAvailabilities.</param>
            <param name="loggedInUser">Manager for JobAvailabilities.</param>
            <returns>Dictionary with key value pairs. 
            First pair Jobs with collection of CalendarTimeLineViewDTOs. See <see cref="T:ESolve.Entities.DTOs.CalendarTimeLineViewDTO"/> for response model details. 
            Second pair JobTypes with collection of CalendarElementsGroupedByJobTypeDTOs. See <see cref="T:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO"/> for response model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetTimeLineViewByJobType(ESolve.Entities.Filters.CalendarViewFilterModel,ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Generates response for Calendar Timeline preview filtred by Job Type
            </summary>
            <param name="filter">Filter Arguments. See <see cref="T:ESolve.Entities.Filters.CalendarViewFilterModel"/> for model details.</param>
            <param name="templateSubGroupManager">SubGroupManager. See <see cref="T:ESolve.Entities.DataManager.SubGroupManager"/> for model details.</param>
            <param name="jobTypeManager">Manger for getting job type info</param>
            <param name="templateJobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
            <param name="jobAvailabilityManager">Manager for Jobs.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>Dictionary with key value pairs. 
            First pair Jobs with collection of CalendarTimeLineViewDTOs. See <see cref="T:ESolve.Entities.DTOs.CalendarTimeLineViewDTO"/> for response model details. 
            Second pair JobTypes with collection of CalendarElementsGroupedByJobTypeDTOs. See <see cref="T:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO"/> for response model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetJobsBySubGroupIDs(System.Collections.Generic.List{System.Int64})">
            <summary>
            Method that retrieves TemplateJobs that are related to a list of TemplateSubGroupIDs.
            </summary>
            <param name="listOfRelevantSubGroupIDs">List of TemplateSubGroupIDs whose TemplateJobs we'll retrieve.</param>
            <returns>List of retrieved TemplateJobs.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.DuplicateTemplateJobs(System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{ESolve.Entities.Models.TemplateSubGroup},System.Collections.Generic.List{ESolve.Entities.Models.TemplateSubGroup})">
            <summary>
            Method that duplicates TemplateJobs. Passed originalSubGroups and newSubGroups are used for retrieving the
            right SubGroupID for new Job.
            </summary>
            <param name="originalJobs"></param>
            <param name="originalSubGroups"></param>
            <param name="newSubGroups"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetJobsBySubGroupID(System.Int64)">
            <summary>
            Method that retrieves TemplateJobs based on the passed TemplateSubGroupID.
            </summary>
            <param name="subGroupID">TemplateSubGroupID used for retrieving TemplateJobs.</param>
            <returns>List of retrieved TemplateJobs.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.AddJobWithCustomDataAndCalculateAvailabilities(ESolve.Entities.Models.TemplateJob,System.Boolean)">
            <summary>
            Method that adds TemplateJob, TemplateCustomData and calculates TemplateJobAvailability
            </summary>
            <param name="templateJob"></param>
            <param name="includeCustomData"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.CalculateTemplateJobAvailabilitites(ESolve.Entities.Models.TemplateJob,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager)">
            <summary>
            For passed TemplateJob calculate availabilities
            </summary>
            <param name="templateJob">TemplateJob for which we will calculate availabilitites</param>
            <param name="jobTypeManager">Job Type Manager</param>
            <param name="templateJobAvailabilityManager">Template Job Availability Manager</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GenerateTemplateBrokenRulesFromDatabase(System.Int64,System.Int64)">
            <summary>
            Method used for generating messages for override assigments from tblBrokenRules
            This method we call when we get employees' lists
            </summary>
            <param name="jobId">Job primary key</param>
            <param name="employeeId">Employee primary key</param>
            <returns>RulesBrokenDTO with broken rules for passed employee</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.ConvertTimeSpanToSpecificFormat(System.TimeSpan)">
            <summary>
            Convert Time span to, for example, 1600
            </summary>
            <param name="time">Time to convert</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.ValidateJobSortOrderDelete(ESolve.Entities.Models.TemplateJob)">
            <summary>
            This method sets sort orders when template jobs are deleted.
            </summary>
            <param name="job">Job which will be deleted.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.ValidateSortOrderOnJobSubgroupChange(ESolve.Entities.Models.TemplateJob,ESolve.Entities.Models.TemplateJob)">
            <summary>
            This method change sort order of TemplateJob's subroup changed
            </summary>
            <param name="jobDB">Job from database which will be updated</param>
            <param name="job">Job with new values.</param>
            <returns>Job with set sort order</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.ValidateSortOrderOnUpdatingExistingJob(ESolve.Entities.Models.TemplateJob,ESolve.Entities.Models.TemplateJob)">
            <summary>
            This method updates job's sort order.
            </summary>
            <param name="jobDB">Job from database which will be updated.</param>
            <param name="job">Job with new values.</param>
            <returns>Job with new value for sort order.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetTemplateScheduleIDbyTemplateSubGroupID(System.Int64)">
            <summary>
            Method which returns TemplateScheduleID based on TemplateSubGroupID.
            </summary>
            <param name="id">ID of TemplateSubGroup.</param>
            <returns>TemplateScheduleID if found, null otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetTemplateIDbyTemplateSubGroupID(System.Int64)">
            <summary>
            Method which returns TemplateID based on TemplateSubGroupID.
            </summary>
            <param name="id">ID of TemplateSubGroup.</param>
            <returns>TemplateID if found, null otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetTotalCountOfAssigned(ESolve.Entities.Filters.EmployeeListsFilterModel,System.Boolean)">
            <summary>
            Get total count of valid or invalid assinged
            </summary>
            <param name="filter">Filter</param>
            <param name="getValid">Indicator if we are counting valid or invalid assigments</param>
            <returns>Number of valid or invalid assimgnets.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetTotalCountOfAvailable(ESolve.Entities.Filters.EmployeeListsFilterModel,System.Boolean)">
            <summary>
            Get total acount of available/unavailable employees
            </summary>
            <param name="filter">Filter</param>
            <param name="getAvailable">Indicator if we are counting availalbe or unavailable employees</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GenerateEmployeeTileInfo(ESolve.Entities.Models.EmployeeTile,System.Int64,System.Int64,System.Boolean,System.Boolean,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Retreiving additonal Employee's info form database.
            </summary>
            <param name="employeeTile">Employee tile info from database</param>
            <param name="jobId">Job's primary key</param>
            <param name="employeeId">Employee's primaray key</param>
            <param name="assigments">If we are looking for assigment/availability. True if assigment</param>
            <param name="status">Valid/available or Invalid/unavailable status</param>
            <param name="profileManager">Represents a manager for profiles.</param>
            <param name="userManager">Represents a manager for users.</param>
            <param name="loggedInUser">Represents current account.</param>
            <returns>Employee info for employee with passed id.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">The exception that is thrown when binding to a member results in more than one
            member matching the binding criteria. This class cannot be inherited.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception  cref="T:System.Reflection.TargetException">Represents the exception that is thrown when an attempt is made to invoke an
            invalid target.</exception>
            <exception  cref="T:System.Reflection.TargetParameterCountException">The exception that is thrown when the number of parameters for an invocation
            does not match the number expected. This class cannot be inherited.</exception>
            <exception  cref="T:System.MethodAccessException">The exception that is thrown when there is an invalid attempt to access a method,
            such as accessing a private method from partially trusted code.</exception>
            <exception  cref="T:System.Reflection.TargetInvocationException">The exception that is thrown by methods invoked through reflection. This class
            cannot be inherited.</exception>
            <exception  cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the value of an argument is outside the allowable
            range of values as defined by the invoked method.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetJobAssigmentsForReferenceArea(ESolve.Entities.Models.TemplateJob,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
             Get job assignments that overlaps concurrent job
             </summary>
             <param name="concurrentJob">Concurrent job</param>
             <param name="jobTypeManager">Manger for getting job type info</param>
             <param name="templateJobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
             <param name="jobAvailabilityManager">Manager for Jobs.</param>
             <param name="loggedInUser">Current logged in user.</param>
             <returns>Job assignments on overlapping jobs.</returns>
             /// <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
             is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.CalculateCoveragePercetnageForConcurrentJob(System.Int64,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method used for calculating percentage of job assgiments coverage for passed concurrent job.
            </summary>
            <param name="jobId">Concurrent job object</param>
            <param name="jobTypeManager">Manger for getting job type info</param>
            <param name="templateJobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
            <param name="jobAvailabilityManager">Manager for Jobs.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>Precentace of coverage for concurrent job</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.ReorderSelectedSubGroups(ESolve.Entities.Filters.CalendarViewFilterModel)">
            <summary>
            Method that sorts Template SubGroups along with its children.
            </summary>
            <param name="filter"></param>
            <returns>Sorted list of TemplateSubGroups</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetChildsForSubgroup(System.Int64,System.Collections.Generic.List{ESolve.Entities.Models.TemplateSubGroup})">
            <summary>
            This Method Sorts TemplateSubGroups in ParentChildStructure by SortOrder and than by Name
            </summary>
            <param name="id">TemplateSubGroup ID</param>
            <param name="subGroups">TemplateSubGroups which will be filtered</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetTemplateJobsWhichUsesPassedShift(System.Int64)">
            <summary>
            Method returns collection of template jobs where ShifID is equal with passed value
            </summary>
            <param name="shiftID">Shift Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.UpdateJobCustomData(System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},System.Collections.Generic.List{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Update templateJobs' custom data
            </summary>
            <param name="customDatas">Added or updated custom data</param>
            <param name="subgroups">Subgrups where are the jobs whose custom data will be added or updated</param>
            <param name="jobID">Job's primary key if custom data's is manually updated on job</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.CalculateScheduleHoursForEmployeeTile(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Method used for calculate employee's scheduled hours for passed date range.
            </summary>
            <param name="employeeId">Employee's primary key</param>
            <param name="startDate">Start time of date range.</param>
            <param name="endDate">End time of date range.</param>
            <returns>Total hours of employee assigments for passed date range.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.AreEmployeesAnonymous(System.Int64,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method receives templateScheduleID and account's details and returns whether Employees are Anonymous or not.
            </summary>
            <param name="templateScheduleID">TemplateScheduleID for which method returns User's permissions.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetEmployeeLists(ESolve.Entities.Filters.EmployeeListsFilterModel,ESolve.Entities.DataManager.RankingManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.BrokenRulesManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Get employees from database and filter them by values in passed filter model
            </summary>
            <param name="filter">EmployeeListsFilterModel represtns filter model for filtering employees.</param>
            <param name="rankingManager">Represents manager for rankings.</param>
            <param name="jobManager">Represents manager for Jobs.</param>
            <param name="templateJobAvailabilityManager">Represents manager for template job availabilites.</param>
            <param name="brokenRulesManager">Represents manager for broken rules.</param>
            <param name="profileManager">Represents manager for profiles.</param>
            <param name="userManager">Represents manager for users.</param>
            <param name="loggedInUser">LoggedInUser</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetAvailableEmployees(ESolve.Entities.Filters.EmployeeListsFilterModel,ESolve.Entities.Models.TemplateJob,System.Boolean,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.RankingManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Contracts.ILoggedInUser,System.Boolean,System.Collections.Generic.List{System.Int64},ESolve.Entities.Models.User)">
            <summary>
            Get employees that are avaialble or unavailable for template job.
            </summary>
            <param name="filter">EmployeeListsFilterModel represtns filter model for filtering employees.</param>
            <param name="job">TemplateJob for getting employees.</param>
            <param name="getAvailable">Indicator if we are looking for available or unavailable employees.</param>
            <param name="jobManager">Manager for Jobs.</param>
            <param name="rankingManager">Represents manager for rankings.</param>
            <param name="profileManager">Represents manager for profiles.</param>
            <param name="userManager">Represents manager for users.</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="areEmployeesAnonymous">Represents whether all Employees will show up as Anonymous.</param>
            <param name="employeesIDsUserHasAccessTo">List of employees' primary keys that current logged in user has access to.</param>
            <param name="user">Logged in user's object</param>
            <returns>List of available or unavailable list of employees.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetAssignedEmployees(ESolve.Entities.Filters.EmployeeListsFilterModel,System.Boolean,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.BrokenRulesManager,ESolve.Entities.DataManager.ProfileManager,ESolve.Entities.DataManager.UserManager,ESolve.Contracts.ILoggedInUser,System.Boolean,System.Collections.Generic.List{System.Int64},ESolve.Entities.Models.User)">
            <summary>
            Get employees that are valid or invalid assigned on job.
            </summary>
            <param name="filter">EmployeeListsFilterModel represtns filter model for filtering employees.</param>
            <param name="isValid">Indicatior if we are looking for valid or invalid assigments.</param>
            <param name="jobManager">Manager for Jobs.</param>
            <param name="templateJobAvailabilityManager">Manager for templateJob's availability</param>
            <param name="brokenRulesManager">Manager for job's broken rules</param>
            <param name="profileManager">Repository for profiles.</param>
            <param name="userManager">Repository for users.</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="areEmployeesAnonymous">Represents whether all Employees will show up as Anonymous.</param>
            <param name="employeesIDsUserHasAccessTo">List of employees' primary keys that current user has access to.</param>
            <param name="user">Logged in user's object</param>
            <returns>List of valid or invalid assigments.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetAllAssociatedEmployees(System.Int64,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Get associated employees for template concurrent job with passed primary key.
            </summary>
            <param name="jobId">Concurrent job's primary key</param>
            <param name="templateJobAvilabilityManager">Manager for template's job availabilities</param>
            <param name="jobAvailabilityManager">Manager for job avaialiblities</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>List of AssociatedEmployeesDTO object which are present possible employees for the concurrent job</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetAssociatedEmployeesForDateRange(System.Int64,System.String,ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,System.DateTime,System.DateTime,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Get associated employee for passed date range
            </summary>
            <param name="id">Concurrent job's primary key</param>
            <param name="imageSize">Employee's image size</param>
            <param name="templateSubGroupManager">Manager used for getting  template subgroups and childs</param>
            <param name="templateJobAvailabilityManager">Manager for template job availaiblity</param>
            <param name="startTime">Start time of date range</param>
            <param name="endTime">End time of date range</param>
            <param name="jobTypeManager">Manger for getting job type info</param>
            <param name="jobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
            <param name="jobManager">Manager for job. In this method it is parametar becuase we need to get employees' images</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>Returns list of employeeJobAssigments</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateJobManager.GetEmployeeAssigmentsForDateRange(System.Int64,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.List{ESolve.Entities.Models.TemplateJobAvailability})">
            <summary>
            Get Template Job Assigment for employee with passed ID and create key value pairs of timespan for time ranges that employee is assigned.
            </summary>
            <param name="employeeId">Employee's primary key</param>
            <param name="startDate">Start date of date range.</param>
            <param name="endDate">End date of date range.</param>
            <param name="employeesRequired">Number of required employees for concurrent job</param>
            <param name="jobAvailabilities">List of job's assigments for calculating associated employees to concurrent job.</param>
            <returns>List of key value pair withing start time and end time ov employee assigment</returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateManager">
            <summary>
            TemplateManager class for managing Templates.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.Add(ESolve.Entities.Models.Template)">
            <summary>
            Adds the template into the database.
            </summary>
            <param name="entity">Template object that should be added to the database.</param>
            <returns>True if the template is successfully added. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.Add(ESolve.Entities.DTOs.CreateTemplateDTO,ESolve.Entities.DataManager.TemplateScheduleManager,ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobManager,ESolve.Entities.DataManager.TemplateJobCustomDataManager,ESolve.Entities.DataManager.TemplateScheduleCustomDataManager,ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Adds the template into the database
            </summary>
            <param name="createTemplateDTO">Template DTO that should be added to the database.</param>
            <param name="templateJobManager">Manager for TemplateJobs.</param>
            <param name="templateScheduleManager">Manager for TemplateSchedules.</param>
            <param name="templateSubGroupManager">Manager for TemplateSubGroups.</param>
            <param name="templateJobCustomDataManager">Manager for TemplateJobCustomDatas.</param>
            <param name="templateScheduleCustomDataManager">Manager for TemplateScheduleCustomDatas.</param>
            <param name="templateSubGroupCustomDataManager">Manager for TemplateSubGroupCustomDatas.</param>
            <param name="templateJobAvailabilityManager">Manager for TemplateJobAvailabilities.</param>
            <param name="jobTypeManager">Manager for JobTypes.</param>
            <param name="jobAvailabilityManager">Manager for JobAvailability.</param>
            <param name="loggedInUser">Logged in user</param>
            <returns>True if the template is successfully added. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.Duplicate(ESolve.Entities.DTOs.IdNameDTO,ESolve.Entities.DataManager.TemplateScheduleManager,ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobManager,ESolve.Entities.DataManager.TemplateJobCustomDataManager,ESolve.Entities.DataManager.TemplateScheduleCustomDataManager,ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method that duplicates a template which also includes duplicating Template Schedule,
            Template SubGroups, Template Jobs, assignments, custom data and permissions.
            </summary>
            <param name="idNameDTO">Template DTO that should be added to the database.</param>
            <param name="templateJobManager">Manager for TemplateJobs.</param>
            <param name="templateScheduleManager">Manager for TemplateSchedules.</param>
            <param name="templateSubGroupManager">Manager for TemplateSubGroups.</param>
            <param name="templateJobCustomDataManager">Manager for TemplateJobCustomDatas.</param>
            <param name="templateScheduleCustomDataManager">Manager for TemplateScheduleCustomDatas.</param>
            <param name="templateSubGroupCustomDataManager">Manager for TemplateSubGroupCustomDatas.</param>
            <param name="templateJobAvailabilityManager">Manager for TemplateJobAvailabilities.</param>
            <param name="jobTypeManager">Manager for JobTypes.</param>
            <param name="jobAvailabilityManager">Manager for JobAvailability.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>True if the template is successfully added. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.Delete(ESolve.Entities.Models.Template)">
            <summary>
            Deletes the template from the database.
            </summary>
            <param name="entity">Template object that should be deleted from the database.</param>
            <returns>True if the template is successfully deleted. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.Get(System.Int64)">
            <summary>
            Method that retrieves a Template by ID.
            </summary>
            <param name="id">Primary Key of Template</param>
            <returns>Template from the DB.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetAll">
            <summary>
            Returns all templates from the database
            </summary>
            <returns>List of existing templates.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.Update(ESolve.Entities.Models.Template)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.ValidateLockedRangeForInsertedTemplate(ESolve.Entities.Models.InsertedTemplate,System.Int32,System.Int64,System.String)">
            <summary>
            Method that checks if inserting/updating/deleting Template data would affect locked periods.
            </summary>
            <param name="insertedTemplate">InsertedTemplate DB object, whose data will be checked against locked periods</param>
            <param name="daysPerRotation">Represents how many days does one template rotation last.</param>
            <param name="userID">Represents current account's ID.</param>
            <param name="actionName">Represents whether action is insert, update or delete inserted template</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.CalculateBorderDateRange(ESolve.Entities.Models.Schedule,ESolve.Entities.Models.SubGroup)">
            <summary>
            If SubGroup is null, method will return schedule's start and end date.
            Otherwise, it will return SubGroup's start and end date.
            </summary>
            <param name="schedule"></param>
            <param name="subGroup"></param>
            <returns>DatetimeDTO</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GenerateNewSubGroupNameForInsert(System.String,System.Nullable{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.SubGroup})">
            <summary>
            Method that checks if the new SubGroup can be named as it should be, or if it will contain suffix "_".
            </summary>
            <param name="desiredName">Initial name for the SubGroup.</param>
            <param name="parentID">SubGroup's Parent, used for checking if name is available.</param>
            <param name="allSubGroups">List of SubGroups used for checking if name is available.</param>
            <returns>New subGroup name with potential suffix.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.InsertTemplateSubGroups(System.Collections.Generic.List{ESolve.Extensions.HierarchyNode{ESolve.Entities.Models.TemplateSubGroup}},System.Int64,System.Nullable{System.Int64},System.Int64,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup},ESolve.Entities.DTOs.InsertTemplateDTO,ESolve.Entities.Models.Template,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup},System.Collections.Generic.List{ESolve.Entities.Models.InsertedSubGroup},ESolve.Entities.DataManager.UserManager)">
            <summary>
            Recursive method that inserts SubGroups from list of TemplateSubGroups.
            </summary>
            <param name="templateSubGroups">List of TemplateSubGroups that will be inserted into Schedule/SubGroup</param>
            <param name="scheduleID">Primary Key of Schedule into which the data is being inserted.</param>
            <param name="parentID">Primary Key of SubGroup's Parent SubGroup.</param>
            <param name="insertedTemplateID">Primary Key of Inserted Template to which the SubGroup belongs..</param>
            <param name="allSubGroups">List of all SubGroups used for name-checking.</param>
            <param name="insertTemplateDTO">InsertTemplateDTO used for calculating new SubGroup's Start and End Date.</param>
            <param name="relevantTemplate">Template used for calculating new SubGroup's Start and End Date.</param>
            <param name="subGroups">Subgroups to insert.</param>
            <param name="insertedSubGroups">Already inserted subgroups</param>
            <param name="userManager">Manager for getting users with attendance or lone worker permissions</param>
            <returns>SubgroupsInsertedSubGroupsDTO object</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.CalculateInsertedTemplateEndDate(System.DateTime,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Method that calculates EndDate based on startDate, endDate and number of rotations.
            </summary>
            <param name="startDateForFinalCalculation">StartDate used for calculating the final EndDate.</param>
            <param name="startDate">StartDate used for calculating the number of days.</param>
            <param name="endDate">EndDate used for calculating the number of days.</param>
            <param name="rotations">Number used for multiplying number of days.</param>
            <returns>EndTime as total number of days to be added, added to StartDate.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetHigherStartDateEndLowerEndDate(ESolve.Entities.DTOs.DateTimeDTO,ESolve.Entities.DTOs.DateTimeDTO,System.Boolean)">
            <summary>
            Method that calculates Start/End Date for new Template
            and returns either a Higher Start Date or a Lower End Date.
            </summary>
            <param name="firstDTO">First DateTimeDTO being calculated.</param>
            <param name="secondDTO">Second DateTimeDTO being calculated.</param>
            <param name="isStartDate">Indicator whether method should calculate the Start or the End Date.</param>
            <returns>Higher Start/Lower End DateTime.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetStartEndDateForTemplateSubGroup(ESolve.Entities.Models.Template,ESolve.Entities.Models.SubGroup,System.Boolean)">
            <summary>
            Method that calculates start/end date for Template SubGroup based on
            the original SubGroup and the corresponding Template
            </summary>
            <param name="template">Corresponding Template.</param>
            <param name="subGroup">New Template SubGroup's Original SubGroup.</param>
            <param name="isStartDate">Indicator whether the method calculates Start or End Date.</param>
            <returns>Start/End Date.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.CreateTemplateObjects(ESolve.Entities.Models.Template,ESolve.Entities.DTOs.CreateTemplateDTO,ESolve.Entities.DataManager.TemplateScheduleManager,ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobManager,ESolve.Entities.DataManager.TemplateJobCustomDataManager,ESolve.Entities.DataManager.TemplateScheduleCustomDataManager,ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method that creates TemplateSchedule, TemplateSubGroups and TemplateJobs
            </summary>
            <param name="template">Template that has just been stored in the database.</param>
            <param name="createTemplateDTO">Template DTO that helps create TemplateSchedule, TemplateSubGroups and TemplateJobs.</param>
            <param name="templateSubGroupManager">Manager for TemplateSubGroups.</param>
            <param name="templateScheduleManager">Manager for TemplateSchedules.</param>
            <param name="templateJobManager">Manager for TemplateJobs.</param>
            <param name="templateJobCustomDataManager">Manager for TemplateJobCustomDatas.</param>
            <param name="templateScheduleCustomDataManager">Manager for TemplateScheduleCustomDatas.</param>
            <param name="templateSubGroupCustomDataManager">Manager for TemplateSubGroupCustomDatas.</param>
            <param name="templateJobAvailabilityManager">Manager for TemplateJobAvailabilities.</param>
            <param name="jobTypeManager">Manager for JobTypes.</param>
            <param name="jobAvailabilityManager">Manager for JobAvailabilities.</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.DuplicateTemplateObjects(ESolve.Entities.Models.Template,ESolve.Entities.Models.Template,ESolve.Entities.DataManager.TemplateScheduleManager,ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobManager,ESolve.Entities.DataManager.TemplateJobCustomDataManager,ESolve.Entities.DataManager.TemplateScheduleCustomDataManager,ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method that duplicates TemplateSchedule, TemplateSubGroups, TemplateJobs, assignments, custom data and permissions.
            </summary>
            <param name="originalTemplate">Template whose data we're duplicating.</param>
            <param name="newTemplate">Template which will be connected with duplicated data.</param>
            <param name="templateSubGroupManager">Manager for TemplateSubGroups.</param>
            <param name="templateScheduleManager">Manager for TemplateSchedules.</param>
            <param name="templateJobManager">Manager for TemplateJobs.</param>
            <param name="templateJobCustomDataManager">Manager for TemplateJobCustomDatas.</param>
            <param name="templateScheduleCustomDataManager">Manager for TemplateScheduleCustomDatas.</param>
            <param name="templateSubGroupCustomDataManager">Manager for TemplateSubGroupCustomDatas.</param>
            <param name="templateJobAvailabilityManager">Manager for TemplateJobAvailabilities.</param>
            <param name="loggedInUser">Logged-in user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.PopulateTemplatePermissionsBasedOnRelevantSchedule(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Int64)">
            <summary>
            Method that automatically generates Template Permission for all users, based on the Schedule
            On top of which the Template is being created OR based on the existing Template in the case
            of Duplication.
            </summary>
            <param name="relevantScheduleID">ID of a Schedule on top of which the Template is being created.</param>
            <param name="oldTemplateID">ID of the template which is being duplicated.</param>
            <param name="newTemplateID">ID of the created template.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetParentGroupID(System.Nullable{System.Int64},ESolve.Entities.DataManager.TemplateSubGroupManager,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Method that retreives parent Template SubGroup's ID based on the original parent SubGroup's name
            </summary>
            <param name="parentGroupID">ID of original parent SubGroup whose name will be searched for in Template SubGroups.</param>
            <param name="templateSubGroupManager">Manager for Template SubGroups.</param>
            <param name="templateScheduleID">ID of the corresponding Template Schedule.</param>
            <param name="relevantSubGroupsIDs">List of relevant subGroups' IDs.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.PublishTemplate(ESolve.Entities.Models.Template,System.DateTime,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.JobStatusManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.DataManager.LoneWorkerAlertsManager,ESolve.Entities.DataManager.UnlockedRangesManager,ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager,ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.TemplateJobManager,Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.PushNotifications.AssignmentNotificationManager)">
            <summary>
            Method that publishes a Template.
            </summary>
            <param name="template">Template that will be published.</param>
            <param name="dateForPublishing">Date from which data will be updated.</param>
            <param name="loggedInUser">Represents currently loggedin user.</param>
            <param name="_jobAvailabilityManager">Manager for JobAvailabilities.</param>
            <param name="_jobTypeManager">Manager for JobTypes.</param>
            <param name="_scheduleManager">Manager for Schedules.</param>
            <param name="_jobManager">Manager for Jobs.</param>
            <param name="_jobStatusManager">Manager for Job Statuses.</param>
            <param name="_loneWorkerAlertsManager">Manager for LoneWorkeralerts.</param>
            <param name="_subGroupManager">Manager for SubGroups.</param>
            <param name="_tradeManager">Manager for Trades.</param>
            <param name="_unlockedSubGroupsManager">Manager for SubGroupApprovals.</param>
            <param name="_submitApprovalNotificationManager">Manager for PushNotifications.</param>
            <param name="_attendanceConfirmationAlertsManager">Manager for PushNotifications.</param>
            <param name="_userManager">Manager for users</param>
            <param name="templateJobAvailabilityManager">Manager for template job availabilities</param>
            <param name="templateJobManager">Manager for template job</param>
            <param name="configuration"></param>
            <param name="assignmentNotificationManager"></param>
            <returns>True if template is successfully published, false otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.InsertTemplateIntoSchedule(ESolve.Entities.DTOs.InsertTemplateDTO,ESolve.Entities.DataManager.TemplateManager,ESolve.Entities.DataManager.TemplateScheduleManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.BrokenRulesManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.JobStatusManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.DataManager.LoneWorkerAlertsManager,ESolve.Entities.DataManager.UnlockedRangesManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager,ESolve.Entities.DataManager.UserManager)">
            <summary>
            Method that inserts an existing Template into an existing Schedule/SubGroup. 
            </summary>
            <param name="insertTemplateDTO">DTO containing data used for inserting Template into Schedule/SubGroup.</param>
            <param name="_scheduleManager">Manager for Schedules.</param>
            <param name="_templateManager">Manager for Templates.</param>
            <param name="_templateScheduleManager">Manager for TemplateSchedules.</param>
            <param name="_jobAvailabilityManager">Manager for JobAvailabilities.</param>
            <param name="_jobTypeManager">Manager for JobTypes.</param>
            <param name="_brokenRuleManager">Manager for BrokenRules.</param>
            <param name="_subGroupManager">Manager for SubGroups.</param>
            <param name="_jobManager">Manager for jobs.</param>
            <param name="_jobStatusManager">Manager for job statuses.</param>
            <param name="_loneWorkerAlertsManager">Manager for LoneWorkerAlerts.</param>
            <param name="_tradeManager">Manager for trades.</param>
            <param name="_unlockedSubGroupsManager">Manager for unlocked subgroups.</param>
            <param name="loggedInUser">Represents current user.</param>
            <param name="_attendanceConfirmationAlertsManager">Manager for attendance confirmations</param>
            <param name="_userManager">Manager for users</param>
            <returns>True if the method added data successfully. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.CopyData(ESolve.Entities.DTOs.CopyDataForwardDTO,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Copy template's or template subgroup's data forwared
            </summary>
            <param name="dataForwardDTO">Object with necessary info about copying.</param>
            <param name="jobTypeManager">Manager for job type</param>
            <param name="templateJobAvailabilityManager">Manager for template job's availabilities</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>SummaryDTO object with broken rules message if they are exist, otherwise return empty object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.OverrideAssigments(System.Collections.Generic.List{ESolve.Entities.DTOs.WarningDetailsDTO},ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.TemplateBrokenRulesManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method used for assign employees that broken rules
            </summary>
            <param name="warningDetails">Rules that the end user accepted.</param>
            <param name="jobAvailabilityManager">Manager for job's availability.</param>
            <param name="brokenRuleManager">Manager for broken rules.</param>
            <param name="loggedInUser">Manager for broken rules.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.UpdateInsertedTemplate(ESolve.Entities.DTOs.InsertTemplateDTO,System.Int64,ESolve.Entities.DataManager.TemplateScheduleManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.JobTypeManager,System.Int64)">
            <summary>
            Method that updates particular InsertedTemplate in the database.
            </summary>
            <param name="updatedInsertedTemplateDTO">DTO of InsertedTemplate which exists in the DB but will be overriden with new values.</param>
            <param name="id">Primary key of Inserted Template which will be updated.</param>
            <param name="_templateScheduleManager">Manager for TemplateSchedule.</param>
            <param name="_jobAvailabilityManager">Manager for JobAvailability.</param>
            <param name="_jobManager">Manager for Job.</param>
            <param name="_jobTypeManager">Manager for JobType.</param>
            <param name="_scheduleManager">Manager for Schedule.</param>
            <param name="userID">Represents current account's ID.</param>
            <returns>JSONErrorDTO object containing message which indicates whether the action was successful or not, and if not, indicates what the issue is.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.DeleteInsertedTemplate(ESolve.Entities.DTOs.IdDateDTO,ESolve.Entities.DataManager.JobAvailabilityManager,System.Int64)">
            <summary>
            Method for deleting an inserted template.
            </summary>
            <param name="idDateDTO">DTO containing data about which InsertedTemplate is being deleted and from which date.</param>
            <param name="_jobAvailabilityManager">Manager for JobAvailabilities.</param>
            <param name="userID">Represents current account's ID.</param>
            <returns>True if inserted template was successfulyl deleted. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetAllTemplates(System.String,System.Int64)">
            <summary>
            Method that returns TemplateDTOs (excluding template's start and end date)
            </summary>
            <param name="userID">Represents current account's ID.</param>
            <param name="username">Represents current account's username.</param>
            <returns>List of TemplateDTOs</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetAllTemplatesWithFiltersAndPagination(ESolve.Entities.Filters.TemplatesFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.String,System.Int64)">
            <summary>
            Method that returns TemplateDTOs (excluding template's start and end date)
            </summary>
            <param name="filter">Filter</param>
            <param name="url"></param>
            <param name="className"></param>
            <param name="methodName"></param>
            <param name="userID">Represents current account's ID.</param>
            <param name="username">Represents current account's username.</param>
            <returns>List of TemplateDTOs</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetInsertedTemplatesWithFiltersAndPagination(System.Int64,ESolve.Entities.Filters.TemplatesFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.String,System.Int64)">
            <summary>
            Method that returns InsertedTemplateDTOs
            </summary>
            <param name="id">Primary Key of Schedule whose Inserted Templates method will retrieve.</param>
            <param name="filter">Filter</param>
            <param name="url"></param>
            <param name="className"></param>
            <param name="methodName"></param>
            <param name="userID">Represents current account's ID.</param>
            <param name="username">Represents current account's username.</param>
            <returns>List of TemplateDTOs</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetDropdownListOfTemplatesForComboSearch(ESolve.Entities.Filters.TemplatesFilterModel,System.String,System.Int64)">
            <summary>
            Method that returns dropdown list of Templates for filters.
            </summary>
            <param name="filter"></param>
            <param name="username"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetDropdownListOfInsertedTemplatesForComboSearch(System.Int64,ESolve.Entities.Filters.TemplatesFilterModel,System.String,System.Int64)">
            <summary>
            Method that returns dropdown list of Templates for filters.
            </summary>
            <param name="id">Primary key of Schedule whose InsertedTemplates method will return</param>
            <param name="filter"></param>
            <param name="username"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetDropdownListOfTemplates(System.String,System.Int64)">
            <summary>
            Method that returns dropdown list of Templates.
            </summary>
            <param name="username"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.HideTemplate(ESolve.Entities.DTOs.IdDateDTO,ESolve.Entities.DataManager.JobAvailabilityManager,Microsoft.Extensions.Configuration.IConfiguration,ESolve.Entities.PushNotifications.AssignmentNotificationManager)">
            <summary>
            This method hides Template for exposing in Templates which are after the Date when method has been Invoked.
            </summary>
            <param name="idDateDTO">DTO containing data necessary for hiding template.</param>
            <param name="_jobAvailabilityManager">Manager for JobAvailability.</param>
            <param name="configuration"></param>
            <param name="assignmentNotificationManager"></param>
            <returns>True if Action is sucessfull, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.PopulateInsertedSubGroupsByTemplateSubGroupID(System.Int64)">
            <summary>
            Method that populates InsertedSubGroups table based on new templateSubGroupID
            </summary>
            <param name="templateSubGroupID">TemplateSubGroup's Primary Key</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.PopulateInsertedJobsByTemplateJobID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Method that populates InsertedJobs table based on new TemplateJobID
            </summary>
            <param name="templateJobID">TemplateJob's Primary Key</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.UpdateInUse(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Method that finds Template based on the passed ID and
            sets its InUse to true/false based on the passed shouldSetInUse.
            </summary>
            <param name="ids">Represents Templates' Primary Key.</param>
            <param name="shouldSetInUse">Represents whether Template's InUse should go to True or False.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.UpdateLastModified(ESolve.Contracts.IEntity)">
            <summary>
            Method that receives an entity, finds the TemplateID and updates
            Template's LastModified.
            </summary>
            <param name="templateEntity">Entity which will be casted either into TemplateSubGroup or into TemplateJob object.</param>
            <returns>True if the corresponding Template is found and updated. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.GetMaxNumberOfRotations(ESolve.Entities.DTOs.InsertTemplateDTO,ESolve.Entities.DataManager.TemplateScheduleManager)">
            <summary>
            Method that calculates max number of rotations that can be inserted
            into a Schedule/SubGroup
            </summary>
            <param name="maxRotationsDTO">DTO used for calculating the max number of rotations.</param>
            <param name="_templateScheduleManager">Manager for TemplateSchedule.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.IsNameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            Method that checkes whether the requested Template name is already in use
            </summary>
            <param name="filter"></param>
            <returns>True </returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.AddCustomDataOnCopyTemplateDataForward(ESolve.Entities.DTOs.JobCustomDataAddEditDTO[],System.Int64)">
            <summary>
            Iterate trough passed array and storing each item in TemplateJobCustomDatas table
            </summary>
            <param name="customDatas">Array with custom datas. See <see cref="T:ESolve.Entities.DTOs.JobCustomDataAddEditDTO"/> for model details</param>
            <param name="jobID">Job's primary key</param>
            <returns>True if all items are stored</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.UnAssignEmployees(System.Int64,System.Boolean,System.DateTime,System.DateTime,ESolve.Entities.DataManager.TemplateJobAvailabilityManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Unassign all employees from selected template's schedule and passed date range
            </summary>
            <param name="id">Template schedule's primary key</param>
            <param name="isScheduleUnassign">Flag indicates if unass all is on the schedule or subgroup level</param>
            <param name="templateJobAvailabilityManager">Managar for template job's availabilities</param>
            <param name="startDate">Start date of current displayed period.</param>
            <param name="endDate">End date of current displayed period.</param>
            <param name="employeeManager">Manager for employees</param>
            <param name="loggedInUser">Current user</param>
            <returns>True if action is succesfully done</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.AuditLogForInsertTemplate(ESolve.Entities.DataManager.JobManager,System.Int64,System.Collections.Generic.List{ESolve.Entities.Models.Job})">
            <summary>
            Log audit of added jobs when template is inserted into schedule
            </summary>
            <param name="jobManager"></param>
            <param name="loggedInUserId"></param>
            <param name="jobs"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.CreateDict(System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Int32)">
            <summary>
            Create dict with updated job dates for when already template is inserted into schedule and there is change in start date
            </summary>
            <param name="jobs"></param>
            <param name="daysToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.AuditLogForInsertedTemplateDateChange(System.Collections.Generic.Dictionary{System.Int64,System.Tuple{System.Object,System.Object,System.Object}},System.Int64,ESolve.Entities.DataManager.JobManager,System.Collections.Generic.List{ESolve.Entities.Models.Job})">
            <summary>
            Log audit when already template is inserted into schedule and there is change in start date
            </summary>
            <param name="dict"></param>
            <param name="loggedInUserId"></param>
            <param name="jobManager"></param>
            <param name="jobsList"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.CreateDictForJobUpdate(System.Collections.Generic.List{ESolve.Entities.Models.Job},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob},System.Collections.Generic.List{ESolve.Entities.Models.InsertedJob})">
            <summary>
            Create dict with the updated parameters for all the jobs that are updated 
            </summary>
            <param name="oldJobsList"></param>
            <param name="updatedJobsList"></param>
            <param name="insertedJobsList"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateManager.AuditLogForUpdatingTemplateJob(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{System.Tuple{System.Object,System.Object,System.Object}}},System.Int64,ESolve.Entities.DataManager.JobManager,System.Collections.Generic.List{ESolve.Entities.Models.Job})">
            <summary>
            Log audit for jobs that are updated when publishing template 
            </summary>
            <param name="dict"></param>
            <param name="loggedInUserId"></param>
            <param name="jobManager"></param>
            <param name="jobsList"></param>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager">
            <summary>
            Manager for TemplateScheduleCustomData
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.Add(ESolve.Entities.Models.TemplateScheduleCustomData)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.Delete(ESolve.Entities.Models.TemplateScheduleCustomData)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.Update(ESolve.Entities.Models.TemplateScheduleCustomData)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.GetAllCustomDataForTemplateSchedule(System.Int64)">
            <summary>
            Return all TemplateSchedule Custom Data with values and other which are not assigned witout values
            </summary>
            <param name="scheduleID">Template Schedule ID</param>
            <returns>Collection of the ScheduleCustomDataAddEditDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.DuplicateTemplateScheduleCustomData(System.Collections.Generic.List{ESolve.Entities.Models.TemplateScheduleCustomData},System.Int64)">
            <summary>
            
            </summary>
            <param name="originalTemplateScheduleCustomDatas"></param>
            <param name="newTemplateScheduleID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.GetAllByTemplateScheduleID(System.Int64)">
            <summary>
            Method that retrieves all TemplateScheduleCustomDatas by passed templateScheduleID.
            </summary>
            <param name="templateScheduleID">TemplateScheduleID used for retrieving TemplateScheduleCustomDatas.</param>
            <returns>List of retrieved TemplateScheduleCustomDatas.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleCustomDataManager.AddTemplateScheduleCustomDatas(System.Collections.Generic.List{ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO})">
            <summary>
            Method that receives TemplateScheduleCustomDataAddEditDTOs and addes them into the database.
            </summary>
            <param name="listOfTemplateScheduleCustomDataDTOsToAdd">List of TemplateScheduleCustomDatas that should be inserted into the database.</param>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateScheduleManager">
            <summary>
            TemplateScheduleManager class for managing Template Schedules.
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.TemplateScheduleManager._repositoryContext">
            <summary>
            Database context
            </summary>
        </member>
        <member name="E:ESolve.Entities.DataManager.TemplateScheduleManager.TemplateScheduleCustomDataChanged">
            <summary>
            Custom data event handler
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.Add(ESolve.Entities.Models.TemplateSchedule)">
            <summary>
            Inserts template schedule into the database.
            </summary>
            <param name="entity">TemplateSchedule object that should be inserted in the database.</param>
            <returns>True if template schedule is inserted successfully, false otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.Delete(ESolve.Entities.Models.TemplateSchedule)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.Get(System.Int64)">
            <summary>
            Method for retrieving TemplateSchedule along with its custom data.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetAll">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.Update(ESolve.Entities.Models.TemplateSchedule)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.UpdateScheduleCustomData(System.Int64,System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobManager)">
            <summary>
            Update template schedule's custom data
            </summary>
            <param name="scheduleID">TemplateSchedule's primary key</param>
            <param name="scheduleCustomData">TemplateSchedule's custom data</param>
            <param name="templateJobManager">Manager for TemplateJobs.</param>
            <param name="templateSubGroupManager">Manager for TemplateSubGroups</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.OnScheduleCustomDataChanged(System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},ESolve.Entities.DataManager.TemplateSubGroupManager,ESolve.Entities.DataManager.TemplateJobManager)">
            <summary>
            Raising event when TemplateSchedule's custom data is changed
            </summary>
            <param name="customDatas">Custom datas that is added or updated.</param>
            <param name="subgroupManager">Manager for TemplateSubgroups.</param>
            <param name="jobManager">Manager for TemplateJobs.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetListOfTemplateScheduleSubGroups(System.Int64)">
            <summary>
            Returns list of Template Schedule's Template SubGroups INCLUDING hidden ones
            </summary>
            <param name="id">Template Schedule's Primary Key.</param>
            <returns>List of TemplateSchedule's Template SubGroups.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetListOfActiveTemplateScheduleSubGroups(System.Int64)">
            <summary>
            Returns list of Template Schedule's Template SubGroups without hidden ones
            </summary>
            <param name="id">Template Schedule's Primary Key.</param>
            <returns>List of TemplateSchedule's Template SubGroups.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetTemplateScheduleSubGroups(System.Int64)">
            <summary>
            Returns All Template Schedule's SubGroups in Hierarchy structure.
            </summary>
            <param name="id">Schedule Primary Key</param>
            <returns>All Suchedule SubGroups in Hierarchy structure.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetTemplateScheduleSubGroupsForSelectedPeriod(ESolve.Entities.Filters.SubGroupCalendarFilterModel,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Returns All Suchedule SubGroups in Hierarchy structure which satisfies conditions from filter.
            </summary>
            <param name="subGroupCalendarFilterModel">SubGroup Filter model. See <see cref="T:ESolve.Entities.Filters.SubGroupCalendarFilterModel"/> for model details.</param>\
            <param name="loggedInUser">Currently loggedin User.</param>
            <returns>All Suchedule SubGroups in Hierarchy structure which satisfies conditions from filter.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetTemplateScheduleDataByTemplateID(System.Int64,System.String,System.String,System.Int64)">
            <summary>
            Method that returns TemplateSchedule by TemplateID.
            </summary>
            <param name="id">TemplateID which will be used for retrieving the relevant TemplateSchedule.</param>
            <param name="role">Represents current account's role.</param>
            <param name="userID">Represents current account's ID.</param>
            <param name="username">Represents current account's username.</param>
            <returns>TemplateSchedule if found, null otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetTemplateScheduleByTemplateID(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetPermissionsForAccessingTemplateSubGroup(System.Int64,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method which returns PermissionsStruct based on User's TemplatePermission.
            </summary>
            <param name="templateID">ID of the Template for which the method will return permissions.</param>
            <param name="loggedInUser">ID of the User for which the method will return permissions.</param>
            <returns>PermissionsStruct for the passed Template and User.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetBrokenRules(ESolve.Entities.Models.TemplateJobAvailability,ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO[],ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobAvailabilityManager,System.Boolean,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.TemplateEmployeeConstraint},ESolve.Entities.Models.ScheduleDatePreference,System.String)">
            <summary>
            This method is used for creating sentences for broken rules.
            </summary>
            <param name="assigment"></param>
            <param name="customDatas"></param>
            <param name="employee"></param>
            <param name="jobTypeManager"></param>
            <param name="jobAvailabilityManager"></param>
            <param name="checkMustNotWorkEspecialy"></param>
            <param name="alreadyAssignedEmployees"></param>
            <param name="employeeConstraints"></param>
            <param name="scheduleDatePreference"></param>
            <param name="user">User's firstname and lastname</param>
            <returns>Broken rules</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetPermissionsForAccessingTemplateSchedule(System.Int64,System.String,System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="templateID"></param>
            <param name="username"></param>
            <param name="role"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateScheduleManager.GetPermissionsForAccessingSchedule(System.Int64,System.String,System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="scheduleId"></param>
            <param name="username"></param>
            <param name="role"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager">
            <summary>
            Manager for TemplateSubGroupCustomData
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.Add(ESolve.Entities.Models.TemplateSubGroupCustomData)">
            <summary>
            This method add new SubGroupCustom data if not exists in SugroupCustomData. Also Update existing if not manualy edited. Same situtation is with JobCustomData
            Adds if not exists or update if exists and it is not manualy edited.
            </summary>
            <param name="entity"></param>
            <returns>Boolean value. If everything is ok - true, if not - false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.Delete(ESolve.Entities.Models.TemplateSubGroupCustomData)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity">Nikola</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.GetAll">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.Update(ESolve.Entities.Models.TemplateSubGroupCustomData)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.UpdateArray(ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO[])">
            <summary>
            This method updates Array of CustomData
            </summary>
            <param name="entities">SubGroupCustomDataAddEditDTO</param>
            <returns>True if all items are updated otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.Add(ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO[],ESolve.Entities.DataManager.TemplateJobCustomDataManager)">
            <summary>
            Method stores list of SubGroupCustomDataAddEditDTO for Templates. She calls Add method. See <see cref="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.Add(ESolve.Entities.Models.TemplateSubGroupCustomData)"/> for method details.
            </summary>
            <param name="entities">Array of SubGroupCustomDataAddEditDTO with values which will be stored</param>
            <param name="_templateJobCustomDataManager">Array of SubGroupCustomDataAddEditDTO with values which will be stored</param>
            <returns>Boolean value. True if success. False if fail.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.Add(ESolve.Entities.Models.TemplateSubGroupCustomData,ESolve.Entities.DataManager.TemplateJobCustomDataManager)">
            <summary>
            This method add new TemplateSubGroupCustom data if not exists in TemplateSugroupCustomData.
            Also Update existing if not manualy edited. Same situtation is with TemplateJobCustomData
            Adds if not exists or update if exists and it is not manualy edited.
            </summary>
            <param name="entity"></param>
            <param name="_templateJobCustomDataManager">Instance of TemplateJobCustomDataManager</param>
            <returns>Boolean value. If everything is ok - true, if not - false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.GetAllTemplateCustomDataForTemplateSubGroup(System.Int64)">
            <summary>
            Return all SubGroupCustomData with values and other which are not assigned without values
            </summary>
            <param name="subGroupID"></param>
            <returns>List of SubGroupCustomDataAddEditDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.GetTemplateSubGroupCustomDataByTemplateSubGroupID(System.Int64)">
            <summary>
            Method that retrieves TemplateSubGroupCustomDatas by passed TemplateSubGroupID.
            </summary>
            <param name="templateSubGroupID">TemplateSubGroupID which will be used for retrieving TemplateSubGroupCustomDatas.</param>
            <returns>List of retrieved TemplateSubGroupCustomDatas.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.DuplicateTemplateSubGroupCustomDatas(System.Collections.Generic.List{ESolve.Entities.Models.TemplateSubGroup},System.Collections.Generic.List{ESolve.Entities.Models.TemplateSubGroup})">
            <summary>
            Method that gets original and new templateSubGroups and duplicates newSubGroups' custom data.
            </summary>
            <param name="originalSubGroups"></param>
            <param name="newSubGroups"></param>
            <returns>List of duplicated templateSubGroupCustomDatas.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.AddTemplateSubGroupCustomDatas(System.Collections.Generic.List{ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO})">
            <summary>
            Method that takes a list of TemplateSubGroupCustomDataDTOs and inserts data into tblTemplateSubGroupCustomData.
            </summary>
            <param name="listOfTemplateSubGroupCustomDataDTOsToAdd">List of DTOs whose data will be inserted into the database.</param>
            <returns>True if data is successfully inserted, false otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupCustomDataManager.GetTemplateSubgroupAllChilds(System.Collections.Generic.List{ESolve.Entities.Models.TemplateSubGroup},System.Int64,System.Int32)">
            <summary>
            
            </summary>
            <param name="subGroups"></param>
            <param name="subGroupID"></param>
            <param name="counter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.DataManager.TemplateSubGroupManager">
            <summary>
            TemplateSubGroupManager class for managing Template SubGroups.
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.TemplateSubGroupManager._repositoryContext">
            <summary>
            DB Context
            </summary>
        </member>
        <member name="F:ESolve.Entities.DataManager.TemplateSubGroupManager._scheduleSubGroupsSortedInParentChildStructure">
            <summary>
            List of Template SubGroups sorted in parent-child structure
            </summary>
        </member>
        <member name="E:ESolve.Entities.DataManager.TemplateSubGroupManager.TemplateScheduleOrSubGroupCustomDataChanged">
            <summary>
            Custom data event handler
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor that initializes Repository Context.
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.GetTemplateSubGroupWithCustomData(System.Int64)">
            <summary>
            Method that gets a TemplateSubGroup along with its CustomDatas.
            </summary>
            <param name="id">Primary Key of the requested TemplateSubGroup.</param>
            <returns>SubgroupWithCustomData object containing TemplateSubGroup and its CustomDatas.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.Add(ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData,ESolve.Entities.DataManager.TemplateManager)">
            <summary>
            Add new TemplateSubgroup entity in Database. Also upgrades old entities whith same or grather SortOrder.
            </summary>
            <param name="entity">Represents SubgroupWithCustomData entity which will be stored in Database.</param>
            <param name="_templateManager">Manager for templates.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>  
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.Update(ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData,ESolve.Entities.DataManager.TemplateManager,ESolve.Entities.DataManager.TemplateJobManager)">
            <summary>
            Method that updates TemplateSubGroup and updates
            its Template's LastModified.
            </summary>
            <param name="entity">TemplateSubGroup object to be updated.</param>
            <param name="templateManager">TemplateManager used for managing Templates.</param>
            <param name="templateJobManager">JobManager used for managing TemplateJobs.</param>
            <returns>True if TemplateSubGroup and Template were successfully updated. False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.HideSubGroup(ESolve.Entities.DTOs.IdDateDTO,ESolve.Entities.DataManager.TemplateManager)">
            <summary>
            This method hides SubGroup for exposing in Schedules which are after the Date when method has been Invoked.
            </summary>
            <param name="idDateDTO">IdDateDTO object used for finding and updating TemplateSubGroup.</param>
            <param name="_templateManager">TemplateManager used for managing Templates.</param>
            <returns>True if Action is sucessfull, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.CreateTemplateSubGroup(ESolve.Entities.Models.TemplateSubGroup)">
            <summary>
            Method that inserts the passed templateSubGroup into the database.
            </summary>
            <param name="templateSubGroup">Entity to be inserted into the database.</param>
            <returns>True if entity is successfully added, false otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.GetAllByTemplateScheduleID(System.Int64)">
            <summary>
            Method that retrieves all TemplateSubGroups based on the passed TemplateScheduleID.
            </summary>
            <param name="templateScheduleID">TemplateScheduleID used for retrieving TemplateSubGroups.</param>
            <returns>List of relevant TemplateSubGroups.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.DuplicateTemplateSubGroups(System.Collections.Generic.List{ESolve.Entities.Models.TemplateSubGroup},System.Int64)">
            <summary>
            Method that takes list of templateSubGroups and duplicates them.
            </summary>
            <param name="originalSubGroups">List of original templateSubGroups that should be duplicated.</param>
            <param name="newScheduleID"></param>
            <returns>List of new (duplicated) SubGroups.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.IsNameUnique(ESolve.Entities.Filters.SubGroupNameFilterModel)">
            <summary>
            Check is name unique.
            </summary>
            <param name="filter"></param>
            <returns>True if name is available otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.GetTemplateSubGroupByNameAndByScheduleId(System.String,System.Int64)">
            <summary>
            Method that searches for and returns TemplateSubGroup by its name.
            </summary>
            <param name="templateSubGroupName">TemplateSubGroup name which will be used to retrieve Template SubGroup</param>
            <param name="templateScheduleID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.UpdateSubgroupsCustomData(System.Int64,System.Boolean,System.Boolean,System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},ESolve.Entities.DataManager.TemplateJobManager)">
            <summary>
            Update subgroup's custom data
            </summary>
            <param name="entityID">Parent's primary key, if it is not parent, it is subgroup's primary key which custom data is changed.</param>
            <param name="parentIsSchedule">Indicator if passed entitiyID is parent entitiy or subgroup</param>
            <param name="isSubGroup">Indicator if parent entity is subgroup</param>
            <param name="customDatas">List of custom data</param>
            <param name="templateJobManager">Manager for jobs</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.GetChildsForSubgroup(System.Int64,System.Int64)">
            <summary>
            This Method Sorts TemplateSubGroups in ParentChildStructure by SortOrder and than by Name
            </summary>
            <param name="id">SubGroup ID</param>
            <param name="scheduleID">Schedule ID</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.GetOccupiedNamesInParentChildArchitecture(System.Collections.Generic.List{System.String},System.Int64,System.Int32)">
            <summary>
            
            </summary>
            <param name="retValue"></param>
            <param name="ParentID"></param>
            <param name="counter"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.GetAllSubGroupsWithSameOrHigherSortNumber(ESolve.Entities.Models.TemplateSubGroup)">
            <summary>
            Method compares passed TemplateSubGroup SortOrder Number with SortOrdersNumbers in database
            </summary>
            <param name="subGroup">TemplateSubGroup Entity which will be used for comparing SortOders</param>
            <returns>List Of SubGroups with same or Grather SortOrder Number than SortOrder number in passed SubGroup.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.OnTemplateScheduleOrSubGroupCustomDataChanged(System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO},System.Collections.Generic.List{System.Int64},ESolve.Entities.DataManager.TemplateJobManager)">
            <summary>
            Raising event when TemplateSchedule or TemplateSubgroup custom data is changed in order to change childs and TemplateJobs where custom data is not manually updated
            </summary>
            <param name="customDatas">Custom data that will be changed</param>
            <param name="subGroupsIDs">Subgroups' primary keys</param>
            <param name="jobManager">Manager for jobs</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.Get(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.Add(ESolve.Entities.Models.TemplateSubGroup)">
            <summary>
            Not implemented.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.Delete(ESolve.Entities.Models.TemplateSubGroup)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TemplateSubGroupManager.Update(ESolve.Entities.Models.TemplateSubGroup)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.TradesManager">
            <summary>
            Manager for trading process
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetTradeWarning">
            <summary>
            Generating trade warning.
            </summary>
            <returns>Trade warning's content</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetWarningForAcceptingTradeOffer">
            <summary>
            Genereting warning for accepting trade offer
            </summary>
            <returns>Warning's content</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetTradeBoard(ESolve.Entities.Filters.TradeBoardFilterModel,System.Int64)">
            <summary>
            Gettin data for trade board
            </summary>
            <param name="filter">Filter for trade board's tables</param>
            <param name="employeeID">Logged in employee's primary key</param>
            /// <returns>Pagged collection of TradeBoardDTO.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.Add(ESolve.Entities.AbstractModels.TradeOffer,ESolve.Entities.PushNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adding new trade offer when employee is trading job
            </summary>
            <param name="entity">Trade offer for adding</param>
            <param name="pushNotificationManager">Manager for sending notifications.</param>
            <param name="configuration"></param>
            <returns>True if adding trade offers are successfully done, false if something went wrong</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.AcceptTradeOffer(System.Int64,System.Int64,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.PushNotificationManager,Microsoft.Extensions.Configuration.IConfiguration,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Accepting trade offers
            </summary>
            <param name="employeeOwnTradeOfferID">Trade offer that is accepted</param>
            <param name="employeeID">Employee's primary key who accepts trade offer.</param>
            <param name="jobAvailabilityManager">Manager used for assigning and unassign employees</param>
            <param name="pushNotificationManager">Manager for sending notifications</param>
            <param name="configuration">Settings</param>
            <param name="loggedInUser">Current logged in user</param>
            <returns>True if trade is successfully accepted, otherwise return false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.DeclineTradeOffer(System.Int64)">
            <summary>
            Rejecting trade offer by employee who received trade offer
            </summary>
            <param name="employeeTradeOfferID">Trade offer primary key</param>
            <returns>True if trade offer is successfully removed, otherwise returns false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.RemoveTradeOffer(System.Int64)">
            <summary>
            Removing trade offer by employee who offered job
            </summary>
            <param name="tradeOfferID">Trade offer's primary key</param>
            <returns>True if trade offer successfully removed, otherwise return false</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.DeleteTradeOffers(System.Collections.Generic.List{ESolve.Entities.Models.EmployeeOwnTradeOffer},System.Collections.Generic.List{ESolve.Entities.Models.EmployeeTradeOffer},ESolve.Entities.PushNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Deleting trade offers
            </summary>
            <param name="employeeOwnTradeOffers">Employee's own trade offers for deleting</param>
            <param name="employeeTradeOffers">Employee's tradee offers for deleting</param>
            <param name="pushNotificationManager">Manager for sending notifications</param>
            <param name="configuration"></param>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetEmployeeOwnTradeOffersForPassedJobs(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            Getting employee's own trade offers
            </summary>
            <param name="jobHistoryIDs">Pointer to the Offered jobs primary keys</param>
            <param name="employeeID">Logged in employeeID</param>
            <returns>List of employees own trade offers</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetEmployeeTradeOffersForPassedJobs(System.Collections.Generic.List{System.Int64},System.Int64,ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            Getting employee's own trade offers from passed range
            </summary>
            <param name="jobIDs">Offered jobs primary keys</param>
            <param name="employeeID">Logged in employeeID</param>
            <param name="range">Selected range</param>
            <returns>List of employees own trade offers</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.IsJobTradeableByEmployee(System.Int64,System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Get Indicator if job is available for trading or not for passed 
            Employee ID depending on the runtime information of a job
            </summary>
            <param name="jobId">Job Primary Key</param>
            <param name="jobStartDateTime">Job start date and time</param>
            <param name="jobEndDateTime">Job end date and time</param>
            <param name="employeeID">Employee ID</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetTradeOfferCount(System.Int64)">
            <summary>
            Get trade offer count
            </summary>
            <param name="employeeID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetEmployeeOwnTradeOfferIdFromJobId(System.Int64)">
            <summary>
            Get employee own trade offer id
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.Add(ESolve.Entities.AbstractModels.TradeOffer)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.Delete(ESolve.Entities.AbstractModels.TradeOffer)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.Update(ESolve.Entities.AbstractModels.TradeOffer)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.TradesManager.GetEmployeeTradesForCalendar(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            For passed range and employee method will return all job trades from passed range.
            </summary>
            <param name="loggedInUser">Currently logged in user</param>
            <param name="range">Selected date range</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.UnlockedRangesManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.Add(ESolve.Entities.Models.UnlockedRange)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.Delete(ESolve.Entities.Models.UnlockedRange)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.Get(System.Int64)">
            <summary>
            Not Implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.GetAll">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.Update(ESolve.Entities.Models.UnlockedRange)">
            <summary>
            Not Implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.ClearCacheForUser(ESolve.Entities.DTOs.SubmitedCachedDataDTO,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Remove Unlocked SubGroups for passed user
            </summary>
            <param name="submitedData">Data which will be filtered</param>
            <param name="loggedInUser">User who is logged in</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.PopulateCacheForUser(ESolve.Entities.Filters.CalendarViewFilterModel,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Create Unlocked SubGroups for passed user
            </summary>
            <param name="calendarViewFilterModel">Data which will be filtered</param>
            <param name="loggedInUser">User who is logged in</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UnlockedRangesManager.GetUnlockedSubGroupsFromRangeForUser(System.Int64)">
            <summary>
            Method will return all UnlocedSubGroups where Id is in passed collection
            where Start and End Period are in passed range
            for logged in user
            </summary>
            <param name="id">Collection of Subgroup Primary Kies</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.UserAbsenceManager">
            <summary>
            Manager for user absences
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.#ctor(ESolve.Entities.RepositoryContext,System.Func{ESolve.Enums.NotificationManagerTypes,ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.PushNotification}})">
            <summary>
            UserAbsenceManager constructor which initialize Repository context.
            </summary>
            <param name="context">Represents repository with which UserAbsenceManager will communicate.</param>
            <param name="serviceProvider">Service provider which provide us manager for absence notification</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.Add(ESolve.Entities.Models.UserAbsence)">
            <summary>
            Inserts passed UserAbsence object in Database table tblAbsences.
            </summary>
            <param name="entity">Represents UserAbsence object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.Delete(ESolve.Entities.Models.UserAbsence)">
            <summary>
            This method removes passed UserAbsence From database
            </summary>
            <param name="entity">UserAbsence which will be deleted</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.Get(System.Int64)">
            <summary>
            For passed Id method finds UserAbsence with that primary key
            </summary>
            <param name="id">UserAbsence primary key</param>
            <returns>Returns founded object or null if don't exists</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.GetAll">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.Update(ESolve.Entities.Models.UserAbsence)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.GetAbsenceDTO(System.Int64)">
            <summary>
            Get AbsenceAddEdit Dto
            </summary>
            <param name="Id">Absence Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.GetAbsenceFromRangeForUser(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get EmployeeAbsence from passed parameteres
            </summary>
            <param name="userID">User Primary Key</param>
            <param name="sDate">Absence StartDate</param>
            <param name="eDate">Absence EndDate</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.Approve(System.Collections.Generic.List{System.Int64},ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Contracts.ILoggedInUser,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.AbsenceCodeManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Approving requests
            </summary>
            <param name="requestIDs">Requests that will be approved</param>
            <param name="absenceRequestManager">Manager for absence requests</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="url">Url of method</param>
            <param name="className">Class name</param>
            <param name="employeesManager">Manager for employees</param>
            <param name="absenceCodeManager">Manager for absence's codees</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.Reject(System.Collections.Generic.List{System.Int64},ESolve.Entities.DataManager.AbsenceRequestManager,Microsoft.AspNetCore.Mvc.IUrlHelper,System.Reflection.MethodBase,System.String,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.AbsenceCodeManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Rejecting absence requests
            </summary>
            <param name="requestIDs">Requests that will be rejected</param>
            <param name="absenceRequestManager">Manager for absence requests</param>
            <param name="url">Url of method</param>
            <param name="method">Current method name</param>
            <param name="className">Class name</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="employeeManager">Manager for employees</param>
            <param name="absenceCodeManager">Manager for absence codes</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.GenerateEmployeeNotification(System.Boolean,System.String,System.String,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.AbsenceCodeManager,ESolve.Entities.Models.EmployeeAbsence,ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Method for creating notification for employee
            </summary>
            <param name="isApproved">An indicator of whether it is request approved or rejected</param>
            <param name="link">A link that leads to absence</param>
            <param name="title">Title of notification</param>
            <param name="employeeAbsence">Information about employee absence</param>
            <param name="absenceRequest">Information about absence request</param>
            <param name="employeeManager">Manager for employees</param>
            <param name="absenceCodeManager">Manager for absence's codes</param>
            <returns>Created push notification</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.Approve(System.Collections.Generic.List{System.Int64},ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Contracts.ILoggedInUser,Microsoft.AspNetCore.Mvc.IUrlHelper,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.AbsenceCodeManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Approving requests
            </summary>
            <param name="requestIDs">Requests that will be approved</param>
            <param name="absenceRequestManager">Manager for absence requests</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="url">Url of method</param>
            <param name="employeesManager">Manager for employees</param>
            <param name="absenceCodeManager">Manager for absence's codees</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserAbsenceManager.Reject(System.Collections.Generic.List{System.Int64},ESolve.Entities.DataManager.AbsenceRequestManager,Microsoft.AspNetCore.Mvc.IUrlHelper,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.AbsenceCodeManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Rejecting absence requests
            </summary>
            <param name="requestIDs">Requests that will be rejected</param>
            <param name="absenceRequestManager">Manager for absence requests</param>
            <param name="url">Url of method</param>
            <param name="loggedInUser">Current logged in user</param>
            <param name="employeeManager">Manager for employees</param>
            <param name="absenceCodeManager">Manager for absence codes</param>
            <param name="configuration">Configuration</param>
        </member>
        <member name="T:ESolve.Entities.DataManager.UserManager">
            <summary>
            UserManager class for managing users
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initializes Repository Context.
            </summary>
            <param name="repositoryContext">Context which will be injected into RepositoryContext variable.</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUser(System.Int64,System.String)">
            <summary>
            This method is used for getting user from tblUsers with all his permissions
            </summary>
            <param name="id">User's primary key</param>
            <param name="imageSize">Image size string</param>
            <returns>UserDTO with user's info and user's permissions</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetAllUsers(ESolve.Entities.Filters.UsersFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)">
            <summary>
            This method is used for getting all users, filtering and searching
            </summary>
            <param name="filter">Filter for users.</param>
            <param name="url">Url for the next page</param>
            <param name="methodName">Mthod's name</param>
            <param name="className">Class's name</param>
            <returns>PagedCollectionResponse of UserItemInListDTO with items to display with information about next page.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserFilters(ESolve.Entities.Pagination.SampleFilterModel,Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.String)">
            <summary>
            This method is used for getting all user filtering and searching parameters
            </summary>
            <param name="filter">Filter for users.</param>
            <param name="url">Url for the next page</param>
            <param name="methodName">Mthod's name</param>
            <param name="className">Class's name</param>
            <param name="field">Filter fields</param>
            <returns>PagedCollectionResponse of UserFilterDTO with items to display with information about next page.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetComboValues">
            <summary>
            Getting lists from database fro drop-down list when we want to create new user.
            </summary>
            <returns>UserComboValuesDTO with all lists that are necessary. See <see cref="T:ESolve.Entities.DTOs.UserComboValuesDTO"></see></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUsersOfProfilesDropDown(ESolve.Entities.Filters.UserOrProfileFilterModel)">
            <summary>
            Get users or profiles for dropdown lists used for filtering users' list
            </summary>
            <param name="filterModel">Model for filtering</param>
            <returns>List of objects with id and name</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetSubGroups(System.Int64)">
            <summary>
            Get all schedule's subgroups
            </summary>
            <param name="scheduleId">Subgroup's schedule primary key</param>
            <returns>List of subgroups of schedule with passed primary key</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUsersWithLoneWorkerPermission(System.Boolean,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Get users that have lone worker alerts permisison and can be lone worker admins
            </summary>
            <param name="isAdmin">Indicator if user is looking for lone worker admins</param>
            <param name="parentID">Primary key of parent entity</param>
            <param name="isTemplate">Indicator if user is looking for users with template permission</param>
            <returns>List of IdNameDropDownModel objects that preset a users that can mi lone worker manager or admin</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUsersWithAttendanceConfirmationPermission(System.Int64,System.Boolean)">
            <summary>
            Get users that have attendance confirmation permission 
            </summary>
            <param name="parentID">Parent's primary key</param>
            <param name="isTemplate">Indicator if parent is template</param>
            <returns>List of IdNameDropDownModel object that represent employees in attencance confirmaiton trancaction log</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.IsEmaiOccupied(ESolve.Entities.Filters.IdStringContentFilterModel,System.Boolean)">
            <summary>
            From passed filter we get Id and email. If Id is grather from 0, then we check email value for all users where Id != passed Id. 
            If passed Id is equal with 0. Then we check email value for all users, becouse the end user want's to check email for unsaved user.
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.IdStringContentFilterModel"/> for details.</param>
            <param name="fromManageAccount">Whether the control is received from Manage account workflow</param>
            <returns>True if email is not occupied or False if that email is occupied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.IsEmployeeUsernameUnique(ESolve.Entities.Filters.IdStringContentFilterModel)">
            <summary>
            From passed filter we get Id and username. If Id is grather from 0, then we check username value for all employees where Id != passed Id. 
            If passed Id is equal with 0. Then we check username value for all employees, becouse user want's to check username for unsaved employee.
            </summary>
            <param name="filter">See <see cref="T:ESolve.Entities.Filters.IdStringContentFilterModel"/> for details.</param>
            <returns>False if username is not occupied or True if that username is occupied.</returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.Add(ESolve.Entities.DTOs.UserDTO,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Adds new user into database table tblUsers
            </summary>
            <param name="userDTO">Object with user, schedule permissions, template permissions and employee permisssions.</param>
            <param name="loggedInUserId">Logged in user's user id</param>
            <param name="auditTrailManager">Manager for Audit Trail</param>
            <returns>True if action is succesfully done, false if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.AssignUserProfileBulkUpdate(ESolve.Entities.DTOs.UserProfileDTO)">
            <summary>
            Method is assign User Profile to selected users.
            </summary>
            <param name="userProfileDTO"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.Update(ESolve.Entities.DTOs.UserDTO,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Updates existing user into database table tblUsers
            </summary>
            <param name="userDTO">Object with user, schedule permissions, template permissions and employee permisssions.</param>
            <param name="loggedInUserId">Logged in user's user id</param>
            <param name="auditTrailManager">Manager for Audit Trail</param>
            <returns>True if action is succesfully done, false if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.UpdateAdvancedId(System.Collections.Generic.List{ESolve.Entities.Models.User})">
            <summary>
            Update advanced id of all users in one go
            </summary>
            <param name="users"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.ValidateApiKey(System.String,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Method which takes API Key, decodes it and validates it against
            passed role, username, and profile ID.
            </summary>
            <param name="apiKey">API Key (JWT) which method will validate.</param>
            <param name="role">Role against which the passed API Key will be validated.</param>
            <param name="username">Username against which the passed API Key will be validated.</param>
            <param name="profileID">ProfileID against which the passed API Key will be validated.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetFieldValues(System.Int64)">
            <summary>
            Get values for passed organisational field.
            </summary>
            <param name="organisationalFieldId">Field from who we want values.</param>
            <returns>List of values for passed field.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserEmployeePermissonsFieldValues(System.String,System.Int64,System.Collections.Generic.List{ESolve.Entities.Models.UserEmployeePermission})">
            <summary>
            Get field values from user employee perismissons
            </summary>
            <param name="field">User employee permission's field value</param>
            <param name="userId">User's primary key</param>
            <param name="userEmployeePermissions">Passed user's employee permissions</param>
            <returns>List of drop down models of field values in user employees' permissions</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserEmployeePermissions(System.Int64)">
            <summary>
            Get permission for manager
            </summary>
            <param name="managerId">id of manager</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetEmployeesToBeLinkedToUser(System.Collections.Generic.List{ESolve.Entities.Models.Employee})">
            <summary>
            update Linked Employee Id based on the flag(isEmployeeLinked) set 
            </summary>
            <param name="employeesList"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.Delete(ESolve.Entities.Models.User,System.Int64,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Deletes user from database and all his permissions.
            </summary>
            <param name="entity">User entity that will be deleted</param>
            <param name="loggedInUserId">Logged in user's user id</param>
            <param name="auditTrailManager">Manager for Audit Trail</param>
            <returns>True if user is successfully deletes, otherwise returns false</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.Get(System.Int64)">
            <summary>
            Get user with passed primary key
            </summary>
            <param name="id">User's primary key</param>
            <returns>User with passed parimary key.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetByUsername(System.String)">
            <summary>
            Get user by passed username
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetSuperUserByUsername(System.String)">
            <summary>
            Get super user by passed username
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.Update(ESolve.Entities.Models.User)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
            
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.Add(ESolve.Entities.Models.User)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.Delete(ESolve.Entities.Models.User)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserAsNoTracking(System.Int64)">
            <summary>
            Finds User in database where Primary Key is equal with passed value
            </summary>
            <param name="userID">User Primary Key</param>
            <returns>User object if exists</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserSchedulePermissions(System.Int64)">
            <summary>
            Method return UserSchedulePermission for passed user
            </summary>
            <param name="userID">Currently logged in user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserSchedulePermissions(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Method return UserSchedulePermission for passed user, and schedules
            </summary>
            <param name="userID">Currently logged in user</param>
            <param name="scheduleIds">Schedule for which we want Permissions</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetSchedulesWhereUserHavePermissions(System.Int64)">
            <summary>
            For passed User Primary key, method will return all schedules where User have some permission
            </summary>
            <param name="userID">Currently logged in user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.DoesPassedUserHaveAccessSchedulePermission(System.Int64)">
            <summary>
            For passed primary key, method will check does user have permissions to access existing schedule.
            </summary>
            <param name="userID">USer Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserEmployeePermissionsAsNoTracking(System.Int64)">
            <summary>
            For passed UserID method will return UserEmployeePermissions
            </summary>
            <param name="userId">UserID</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetAbsenceRequestPendingForSelectedUser(System.Int64)">
            <summary>
            For passed userId method will return absence requests where user
            have permission to authorise that absence
            </summary>
            <param name="userID">User Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserEmployeePermissionDTO(System.Int64)">
            <summary>
            For passed User Id  method will return UserEmployeePermissionDTO
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserDTOWithUserAllPermissionAsNoTracking(System.Int64)">
            <summary>
            For passed user Id method will return UserDTO with user's all permission as Notracking
            </summary>
            <param name="userId"></param>
            <returns></returns>        
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.CheckIfStringEmpty(System.String)">
            <summary>
            This method check if passed string is Null or Empty.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.AuditLogForUserCreateOrDelete(ESolve.Entities.Models.User,System.Int64,AuditOperationTypes,ESolve.Entities.DataManager.AuditTrailManager)">
            <summary>
            Create Audit Trail record for Create/Delete operation
            </summary>
            <param name="user"></param>
            <param name="loggedInUserId"></param>
            <param name="operationType"></param>
            <param name="auditTrailManager"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.AuditLogForUserUpdate(ESolve.Entities.DTOs.UserDTO,System.Int64,AuditOperationTypes,ESolve.Entities.DataManager.AuditTrailManager,ESolve.Entities.DTOs.UserDTO)">
            <summary>
            Create Audit Trail record for User Update
            </summary>
            <param name="newUserDTO"></param>
            <param name="loggedInUserId"></param>
            <param name="operationType"></param>
            <param name="auditTrailManager"></param>
            <param name="oldUserDTO"></param>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetUserByEmailAndAdvancedId(System.String)">
            <summary>
            Get user by email address and advanced id 
            </summary>
            <param name="advancedId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DataManager.UserManager.GetSuperAdminUserByEmailAndAdvancedId(System.String)">
            <summary>
            
            </summary>
            <param name="advancedId"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DataManager.WorkRulesManager">
            <summary>
            Manager for WorkRules
            </summary>
        </member>
        <member name="M:ESolve.Entities.DataManager.WorkRulesManager.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
        </member>
        <member name="M:ESolve.Entities.DataManager.WorkRulesManager.Add(ESolve.Entities.Models.WorkRules)">
            <summary>
            Inserts passed WorkRules object in Database table tblWorkRules.
            </summary>
            <param name="entity">Represents WorkRules object which will be inserted.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.WorkRulesManager.Delete(ESolve.Entities.Models.WorkRules)">
            <summary>
            Removes passed WorkRules object from Database table tblWorkRules.
            </summary>
            <param name="entity">Represents WorkRules object which will be removed.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.WorkRulesManager.Get(System.Int64)">
            <summary>
            Returns WorkRules object from Database table tblWorkRules where Id is equal with passed value.
            </summary>
            <param name="id">WorkRules Primary Key</param>
            <returns>Null if object doesn't exists or object if method find object with passed PrimaryKey</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.WorkRulesManager.GetAll">
            <summary>
            Returns all WorkRules objects from Database table tblWorkRules.
            </summary>
            <returns>List of WorkRules objects. See <see cref="T:ESolve.Entities.Models.WorkRules"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.WorkRulesManager.Update(ESolve.Entities.Models.WorkRules)">
            <summary>
            Updates WorkRules object values in Database table tblWorkRules with values passed inside WorkRules object in function argument.
            </summary>
            <param name="entity">WorkRules object with new values.</param>
            <returns>True if action is sucessfull, otherwise will return False</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.DataManager.WorkRulesManager.GetIdNameList">
            <summary>
            This method return all WorkRules objects from Database table tblWorkRules in IdNameDropDownModel model form.
            </summary>
            <returns>List of IdNameDropDownModel. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for model details.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO">
            <summary>
            Represents Data Transfer Object of entity Absence. See <see cref="T:ESolve.Entities.Models.AbsenceAbstract"/> for more details.
            Main purpose of object is usage for creating new and update existing Absence entity.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.AbsenceID">
            <summary>
            Represents Absence Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.AbsenceRequestID">
            <summary>
            Represents Absence Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.AbsenceStatusID">
            <summary>
            Represents Absence Status Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.EmployeeID">
            <summary>
            Represents Employee Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.AbsenceCodeID">
            <summary>
            Represents Absence Code Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.StartDate">
            <summary>
            Absence Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.EndDate">
            <summary>
            Absence End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.NumberOfHours">
            <summary>
            Number of hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.ManuallyEdited">
            <summary>
            Indicator are hours edited manually
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.EmployeeComment">
            <summary>
            Employee comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.ManagerComment">
            <summary>
            Manager absence comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.AddForOther">
            <summary>
            Property is used if User Works with other employees absences or requests
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.DeletePending">
            <summary>
            Delete pending request
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AbsenceCreateUpdateDTO.MapAbsenceDtoToAbsenceRequestModel">
            <summary>
            Current object maps to new AbsenceRequest entity
            </summary>
            <returns>New AbsenceRequest object with properties initialized on values which current object posses.</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO">
            <summary>
            Filter for absence authorisation list
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO.Limit">
            <summary>
            Number of items we will get from Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO.SortOrder">
            <summary>
            Represent sort order. [Asc or Desc]
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO.Column">
            <summary>
            Represents Column which will be sorted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO.Page">
            <summary>
            Represents page for Datatable.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO.SearchConnectedEmployees">
            <summary>
            Search box is populated, search employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO.Id">
            <summary>
            Employee or User ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO.AbsenceStatusIDs">
            <summary>
            Property for searching absences based on status id
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthirastionListFilterModelDTO.Clone">
            <summary>
            Clone object
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthorisationListModelDTO">
            <summary>
            Absence AuthorisationList Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthorisationListModelDTO.NameAndSurname">
            <summary>
            Name and surname
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthorisationListModelDTO.Ticks">
            <summary>
            Hours in ticks
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthorisationListModelDTO.Time">
            <summary>
            Absence Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthorisationListModelDTO.AbsenceCode">
            <summary>
            Name of absence code
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceAuthorisationListModelDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO">
            <summary>
            Model used Fo
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO.Id">
            <summary>
            User or employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO.IsYear">
            <summary>
            Indicator is Year View
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO.StartDate">
            <summary>
            Period Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO.EndDate">
            <summary>
            Period End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO.SearchConnectedEmployee">
            <summary>
            Indicator does User wants to see his or absences from connected employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO.SortOrder">
            <summary>
            Represents SortOrder [asc,desc]
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceManagmentFilterDTO.Column">
            <summary>
            Column number used for sorting data.
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceStatusesDTO">
            <summary>
            MOCK For Absence Statuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceStatusesDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceStatusesDTO.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.AbsenceStatusesDTO.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.PreviewAbsenceDTO">
            <summary>
            Model Used for get one absence
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.PreviewAbsenceDTO.AbsenceCodes">
            <summary>
            List Of Absence Codes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.PreviewAbsenceDTO.AbsenceStatuses">
            <summary>
            List Of Absence Statuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.PreviewAbsenceDTO.Item">
            <summary>
            Absence or AbsenceRequest
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AbsenceRequestsAndAbsencesDTOs.PreviewAbsenceDTO.DeletePending">
            <summary>
            Delete pending request
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AddingNewSkillCodeDTO">
            <summary>
            Class is used for creating new SkillCode inside adding job type rule to the job type.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AddingNewSkillCodeDTO.Name">
            <summary>
            SkillCode Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AddingNewSkillCodeDTO.DropDown">
            <summary>
            Name of DropDwon inside which is added current SkillCode
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AddingNewSkillCodeDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AddingNewSkillCodeDTO.#ctor(System.String,System.String)">
            <summary>
            Constructor which initialize all properties.
            </summary>
            <param name="name">Represent name of skill code</param>
            <param name="dropDown">Represent name of dropdown where new skill code is added</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.AssigmentDTO">
            <summary>
            DTO for assign employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssigmentDTO.employeeAssignment">
            <summary>
            Employee assigment with employee and job where employee will be assigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssigmentDTO.CanBeAssignedOrUnassigned">
            <summary>
            Indicator showing whether an Employee can be assigned/unassigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssigmentDTO.BrokenRules">
            <summary>
            Broken rules for current assignemts
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssigmentDTO.Cached">
            <summary>
            Is item for cach
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AssignAgencyDTOs.AgencyComboValueDTO">
            <summary>
            DTO for retreiving list of agencies and agency reasons for cover
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignAgencyDTOs.AgencyComboValueDTO.Agencies">
            <summary>
            List of agencies
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignAgencyDTOs.AgencyComboValueDTO.AgencyReasonsForCover">
            <summary>
            List of agency reasons for cover
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AgencySearchDTO">
            <summary>
            DTO used for agency search
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AgencySearchDTO.IsAgency">
            <summary>
            Flag if user is looking for items from tblAgencis or tblAgencyReasonsForCover
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AgencySearchDTO.SearchTerm">
            <summary>
            Searchg Term
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AssignAgencyDTO">
            <summary>
            DTO for assigning agency
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignAgencyDTO.JobID">
            <summary>
            Job's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignAgencyDTO.TemplateJobID">
            <summary>
            Template job's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignAgencyDTO.AgencyID">
            <summary>
            Agency's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignAgencyDTO.AgencyReasonForCoverID">
            <summary>
            Agency reason for cover's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignAgencyDTO.AgencyWorker">
            <summary>
            Agency Worker Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AssignmentNotificationDTO">
            <summary>
            A model that carries information about assignment
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignmentNotificationDTO.EmployeeId">
            <summary>
            Id of employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignmentNotificationDTO.IsAssign">
            <summary>
            Is employee assigned or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignmentNotificationDTO.StartDateTimeJob">
            <summary>
            Start time of job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignmentNotificationDTO.EndDateTimeJob">
            <summary>
            End time of job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignmentNotificationDTO.JobId">
            <summary>
            Job id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AssignmentNotificationListDTO">
            <summary>
            A model that carries information about the name of the schedule, as well as a list of assignments, for which employees will receive notifications
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignmentNotificationListDTO.ScheduleName">
            <summary>
            Name of schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignmentNotificationListDTO.NewAssignments">
            <summary>
            List of id's of new assignments
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssignmentNotificationListDTO.ModifiedAssignments">
            <summary>
            List of id's of modified assignments
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AssociatedEmployeesDTO">
            <summary>
            Model for concurrent job's associated employees
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.AssociatedEmployeesDTO.JobId">
            <summary>
            Primary key of that overlaps concurrent Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssociatedEmployeesDTO.StartDate">
            <summary>
            Start date and time of the part of job's time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssociatedEmployeesDTO.EndDate">
            <summary>
            End date and time of the part of job's time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AssociatedEmployeesDTO.Date">
            <summary>
            Date when employee is assigned
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AssociatedEmployeesDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AssociatedEmployeesDTO.#ctor(System.Int64,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="jobId">Primary key of that overlaps concurrent Job</param>
            <param name="startDate">Start date of the part of job's time</param>
            <param name="endDate">End date of the part of job's time</param>
            <param name="date">Date when employee is assigned</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ASSOToken">
            <summary>
            Class contains properties of ASSO token information
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSOToken.AccessToken">
            <summary>
            Access token
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSOToken.RefreshToken">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSOToken.ExpiresIn">
            <summary>
            Access token expiry time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSOToken.OrganizationReference">
            <summary>
            Organization reference
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ASSO.ASSOAdminTypeRequest">
            <summary>
            AdminTypeRequest
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOAdminTypeRequest.assoUserAdmin">
            <summary>
            User admin
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOAdminTypeRequest.assoCustomerAdmin">
            <summary>
            Customer admin
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ASSO.ASSOUserApiResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserApiResponse.data">
            <summary>
            Get list of users 
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ASSO.ASSOUserRequest">
            <summary>
            Request model for user creation in SSO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.organizationRef">
            <summary>
            organizationRef
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.username">
            <summary>
            username
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.firstName">
            <summary>
            firstName
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.lastName">
            <summary>
            lastName
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.email">
            <summary>
            email
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.emailVerified">
            <summary>
            emailVerified
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.enabled">
            <summary>
            enabled
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.isFederatedOnly">
            <summary>
            isFederatedOnly
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequest.requiredActions">
            <summary>
            User required actions
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ASSO.ASSOUserRequiredActions">
            <summary>
            User required actions
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequiredActions.updatePassword">
            <summary>
            updatePassword
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequiredActions.configureOTP">
            <summary>
            configureOTP
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequiredActions.verifyEmail">
            <summary>
            verifyEmail
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserRequiredActions.updateProfile">
            <summary>
            updateProfile
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ASSO.ASSOUserResponse">
            <summary>
            Response from SSO on user creation
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.advancedId">
            <summary>
            advancedId
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.username">
            <summary>
            username
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.organizationRef">
            <summary>
            organizationRef
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.organizationName">
            <summary>
            organizationName
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.firstName">
            <summary>
            firstName
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.lastName">
            <summary>
            lastName
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.email">
            <summary>
            email
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.emailVerified">
            <summary>
            emailVerified
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.mfaEnabled">
            <summary>
            mfaEnabled
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.enabled">
            <summary>
            enabled
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.isFederatedOnly">
            <summary>
            isFederatedOnly
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ASSO.ASSOUserResponse.requiredActions">
            <summary>
            User required actions
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AttendanceConfirmationDTO">
            <summary>
            DTO for AttendanceConfirmation object from tblAttendanceConfirmations
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.Id">
            <summary>
            Attendance confirmation's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.Schedule">
            <summary>
            Schedule's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.Date">
            <summary>
            Job's start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.Job">
            <summary>
            Job's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.Employee">
            <summary>
            Employee's first name and last name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.Notification">
            <summary>
            Employee's notification date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.Response">
            <summary>
            Employee's answer to attendance
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.ResponseTime">
            <summary>
            Employee's response time to attendance
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.ManagerNotification">
            <summary>
            Manager notification's date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AttendanceConfirmationDTO.ManagerName">
            <summary>
            Manager's first name and last name
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AuditTrailDTO">
            <summary>
            DTO used for sending Audit Trail data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuditTrailDTO.OperationDateTime">
            <summary>
            Operation date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuditTrailDTO.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuditTrailDTO.FunctionName">
            <summary>
            Function name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuditTrailDTO.FunctionDetails">
            <summary>
            Function details
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuditTrailDTO.Operation">
            <summary>
            Operation
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuditTrailDTO.PreviousValue">
            <summary>
            Previous value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuditTrailDTO.CurrentValue">
            <summary>
            Current value
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.AuthorisationListDTO">
            <summary>
            Model used for authorisation list
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuthorisationListDTO.EmployeeName">
            <summary>
            Employee Name and Surname
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AuthorisationListDTO.AbsenceHours">
            <summary>
            Absence Hours
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AuthorisationListDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.AuthorisationListDTO.#ctor(System.String,System.TimeSpan,System.Nullable{System.Int64},System.Nullable{System.Int64},System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Constructor which initalize all parameters in parent and child class
            </summary>
            <param name="employeeName">Employee Name and Surname</param>
            <param name="absenceHours">Absence Hours</param>
            <param name="requestID">Absence RequestID</param>
            <param name="absenceID">Absence Primary Key </param>
            <param name="startDate">Absence Start Date</param>
            <param name="endDate">Absence End Date</param>
            <param name="statusName">Absence Status Name</param>
            <param name="statusColor">Absence Status Color</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.AvailableJobsDTO">
            <summary>
            Class contains properties of available jobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobId">
            <summary>
            Represents JobId
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobOfferID">
            <summary>
            Represents JobOfferID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobOfferStatusName">
            <summary>
            Represents Job offer status name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.ScheduleName">
            <summary>
            Represents Schedule name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.SubGroupName">
            <summary>
            Represents SubGroup name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobTypeName">
            <summary>
            Jobs JobType name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobStartDateTime">
            <summary>
            Job StartDateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobEndDateTime">
            <summary>
            Job EndDateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobsForUptake">
            <summary>
            Flag for Employee's trades offers
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.TradeOfferID">
            <summary>
            Trade offer's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.EmployeeOwnTradeOfferID">
            <summary>
            EmployeeOwnTradeOffer which present foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.EmployeeName">
            <summary>
            represents employee name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobDescription">
            <summary>
            Represents job description
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.AvailableJobsDTO.JobName">
            <summary>
            Represents job name
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.BoolBoolDTO">
            <summary>
            DTO with two bool properties
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.BoolBoolDTO.KeyOne">
            <summary>
            Value One
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.BoolBoolDTO.KeyTwo">
            <summary>
            Value Two
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CalendarDTO">
            <summary>
            CalendarDTO represent object that is passed to schedule page. Contains SubGroups of Schedule, JobTypes of Schedule and All employees for filter.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.SubGroups">
            <summary>
            SubGroups from Schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.EmployeeFilter">
            <summary>
            List of Employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.JobTypeFilter">
            <summary>
            JobTypes from Schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.ApprovedDateTimes">
            <summary>
            Represents a list of all approvals for that schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.IsCompletelySubmitted">
            <summary>
            Indicator is View Range Completeley Submitted
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.CanSubmitForApproval">
            <summary>
            Indicator does User have Permissions for submitting range for approval
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.IsSubmitForApprovalDisabled">
            <summary>
            Indicator whould SubmittForApproval bee disabled
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.SubmitedButNotApproved">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarDTO.IsScheduleUnlocked">
            <summary>
            Indicates whether the schedule is unlocked or not
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO">
            <summary>
            Class used for providing data grouped by job type to schedule calendar page
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.Id">
            <summary>
            Represent Primary key of Job Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.Title">
            <summary>
            Represent Job Type Name as Title of Calendar Element
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.StartDate">
            <summary>
            Represent Sub-group Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.EndDate">
            <summary>
            Represent Sub-group End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.SubGroupName">
            <summary>
            Represent Name of sub-group
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.SubGroupID">
            <summary>
            Represents SubGroupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.SubGroupSortOrder">
            <summary>
            Represent SubGroup SortOrder Property
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.JobName">
            <summary>
            Name of job
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int64,System.Nullable{System.Int32},System.String)">
            <summary>
            Constructor of CalendarElementGroupByJobTypeDTO object
            </summary>
            <param name="Id">Job Type primary key</param>
            <param name="Title">Job Type Name</param>
            <param name="StartDate">Sub-group Start Date</param>
            <param name="EndDate">Sub-group End Date</param>
            <param name="SubGroupName">Sug-group Name</param>
            <param name="SubGroupID">Sug-group ID</param>
            <param name="SubGroupSortOrder">SubGroup SortOrder Property</param>
            <param name="JobName">Name of job</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarElementsGroupedByJobTypeDTO.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.CalendarEmployeeViewDTO">
            <summary>
            Calendar view with list of employees 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarEmployeeViewDTO.Employees">
            <summary>
            Array of employees
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarEmployeeViewDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarEmployeeViewDTO.#ctor(ESolve.Entities.DTOs.EmployeeSearchDTO[],System.Int64,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Int64,System.Int64,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Constructor wich initialize all properties
            </summary>
            <param name="employees">Array of employees</param>
            <param name="id">Job ID</param>
            <param name="status">Job Status Name</param>
            <param name="primaryColor">Job Status Primary Color</param>
            <param name="secondaryColor">Job Status Secondary Color</param>
            <param name="noOfRequiredEmployees">Job Number Of Required Employees</param>
            <param name="noOfValidAssignedEmployees">Job Number Of Valid Assigned Employees</param>
            <param name="noOfInvalidAssignedEmployees">Job Number Of InValid Assigned Employees</param>
            <param name="JobStartDateTime">Job's start date and time</param>
            <param name="JobEndDateTime">Job's end date and time</param>
            <param name="sortOrder">Job Date</param>
            <param name="subGroupID">Job SubGroupID</param>
            <param name="jobStatusID">Job SubGroupID</param>
            <param name="jobName">Job Name</param>
            <param name="jobTypeID">JobTypeID</param>
            <param name="subgroupName">Represents SubGroupName</param>
            <param name="isCriticalTask">isCriticalTask</param>
            <param name="isConcurrent">isCriticalTask</param>
            <param name="referenceArea">isCriticalTask</param>
            <param name="comment"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarEmployeeViewDTO.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.CalendarTimeLineViewDTO">
            <summary>
            Model for Calendar view
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.Id">
            <summary>
            Represent Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.Status">
            <summary>
            Job status name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.PrimaryStatusColor">
            <summary>
            Job Status primary color
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.SecondaryStatusColor">
            <summary>
            Job Status secondary color
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.NoOfRequiredEmployees">
            <summary>
            Number of Job required employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.NoOfValidAssignedEmployees">
            <summary>
            Number of valid assigned employees 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.NoOfInvalidAssignedEmployees">
            <summary>
            Number of inValid assigned employees 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.SortOrder">
            <summary>
            SortOrder
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.SubGroupID">
            <summary>
            Job Subgroup foreign kie
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.JobStatusID">
            <summary>
            JobStatus foreign kie
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.JobName">
            <summary>
            Represent Name of Selected Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.JobTypeID">
            <summary>
            Represnts JobTypeID Foreign Key in Job Entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.SubGroupName">
            <summary>
            Represent Sub-group name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.IsCriticalTask">
            <summary>
            Flag to indicate if Job is Critical Task
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.OfferedForTrade">
            <summary>
            Flag to indicate if job is offered for trade
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.CanBeTraded">
            <summary>
            Indicator that presents if job allows trade
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.HasLoneWorker">
            <summary>
            Indicator that presents if employee need to do lone worker check in on job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.HasAttendanceConfirmation">
            <summary>
            Inidcator that presents if employee need to answer on attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.CoveragePercentageForConcurrentJob">
            <summary>
            Percentage of green area in concurrent job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.IsConcurrent">
            <summary>
            Flag to indicate if Job is Concurrent Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.ReferenceArea">
            <summary>
            Reference area of concurrent job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.JobStartDateTime">
            <summary>
            Job's start date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.JobEndDateTime">
            <summary>
            Job's end date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.Comment">
            <summary>
            Job's Comment
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.#ctor(System.Int64,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Int64,System.Int64,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Constructor which initialize all properties.
            </summary>
            <param name="id">Job ID</param>
            <param name="status">Job Status Name</param>
            <param name="primaryColor">Job Status Primary Color</param>
            <param name="secondaryColor">Job Status Secondary Color</param>
            <param name="noOfRequiredEmployees">Job Number Of Required Employees</param>
            <param name="noOfValidAssignedEmployees">Job Number Of Valid Assigned Employees</param>
            <param name="noOfInvalidAssignedEmployees">Job Number Of InValid Assigned Employees</param>
            <param name="jobStartDateTime">Job start date</param>
            <param name="jobEndDateTime">Job end date</param>
            <param name="sortOrder">Sort order</param>
            <param name="subGroupID">Job SubGroupID</param>
            <param name="jobStatusID">Job SubGroupID</param>
            <param name="jobName">Job Name</param>
            <param name="jobTypeID">JobTypeID </param>
            <param name="subgroupName">JobTypeID </param>
            <param name="isCriticalTask">isCriticalTask </param>
            <param name="isConcurrent">isConcurrent </param>
            <param name="referenceArea">referenceArea of concurrent job </param>
            <param name="comment"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.CalendarTimeLineViewDTO.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.ComparisonModeDTO">
            <summary>
            Model Used For Adding or updating Comparison rules
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.Id">
            <summary>
            Represents Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.JobTypeID">
            <summary>
            Represents JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.CustomDataID">
            <summary>
            Represents CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.ComparisonMode">
            <summary>
            Represents Comparison Mode Selected
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.ComparisonValues">
            <summary>
            List of comparison values
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.Operator">
            <summary>
            Represents Operator Selected
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.EmployeeField">
            <summary>
            Represents Employee Field Selected
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.TextValue">
            <summary>
            Represents entered TextValue
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ComparisonModeDTO.NumberValue">
            <summary>
            Represents entered NumberValue
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ComparisonModeDTO.#ctor">
            <summary>
            Default Constructors
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ComparisonModeDTO.#ctor(System.Int64,System.Int64,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Int64})">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id"></param>
            <param name="jobTypeID"></param>
            <param name="comparisonMode"></param>
            <param name="operator"></param>
            <param name="employeeField"></param>
            <param name="textValue"></param>
            <param name="numberValue"></param>
            <param name="customDataID"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConcurrentJobDTO">
            <summary>
            Model which is used for getting associated employees for date range in concurrent job.
            </summary>
            
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintListDTO">
            <summary>
            Class is used to preview Constraints in Schedule Constraint list
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintListDTO.Id">
            <summary>
            Represnets Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintListDTO.ConstraintName">
            <summary>
            Represents Constraint Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintListDTO.ConstraintRuleName">
            <summary>
            Represents Constraint Rule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintListDTO.IsActive">
            <summary>
            Represents is Constraint applied on selected Schedule
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintListDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintListDTO.#ctor(System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="id">Constraint Primary Key</param>
            <param name="constraintName">Constraint Name</param>
            <param name="constraintRuleName">Constraint Rule Name</param>
            <param name="isActive">Is Constraint applied on selected Schedule</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.CopyDataForwardDTO">
            <summary>
            DTO for copying data forward
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataForwardDTO.Id">
            <summary>
            Schedule, subgroup, template or template's subgroup primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataForwardDTO.StartDate">
            <summary>
            Copy schedule/subgroup/template/templateSubgroup from this start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataForwardDTO.EndDate">
            <summary>
            Copy schedule/subgroup/template/templatesubgroup to this end date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataForwardDTO.IsSubgroup">
            <summary>
            If we copy subgroup's/template subgroup's data, IsSubgroup will be true
            If we copy schedule's/template's data, IsSubgroup will be false
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataForwardDTO.IsTemplate">
            <summary>
            Indicator if data is from template
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataForwardDTO.SubgroupIDs">
            <summary>
            Subgroups that are checked on calendar
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CopyDataRetValueDTO">
            <summary>
            Ret value for calculations on copy data forward action
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataRetValueDTO.AvailabilitiesForBrokenRules">
            <summary>
            Availabilities that are not completely valid 
            Broken messages will be created for these
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataRetValueDTO.NewValidAssignments">
            <summary>
            New assignemnts that are valid
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyDataRetValueDTO.EmployeesForBrokenRules">
            <summary>
            Employees for generating broken rules messages
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CopyJobDTO">
            <summary>
            Model which is used for jobs copying.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyJobDTO.OriginalJobId">
            <summary>
            Primary key of original job.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyJobDTO.CopyToDate">
            <summary>
            Date where we want to copy the job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyJobDTO.NumberOfDays">
            <summary>
            Number of days if consecutive days is choosen.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyJobDTO.ExcludeWeekends">
            <summary>
            Include weekend in calculations
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CopyJobDTO.CopyAssignedEmployees">
            <summary>
            Copy assgined employees from original job
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CreateTemplateDTO">
            <summary>
            DTO for creating templates.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CreateTemplateDTO.Id">
            <summary>
            Represents Schedule's/SubGroup's ID.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CreateTemplateDTO.Name">
            <summary>
            Template's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CreateTemplateDTO.IncludeAssignments">
            <summary>
            Whether or not include assignments.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CreateTemplateDTO.IncludeCustomData">
            <summary>
            Whether or not include custom data.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CreateTemplateDTO.StartDate">
            <summary>
            Make template with data starting from StartDate.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CreateTemplateDTO.EndDate">
            <summary>
            Make template with data ending with EndDate.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CreateTemplateDTO.IsSubgroup">
            <summary>
            Whether template is made from a schedule or from a subgroup.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CreateTemplateDTO.SelectedSubgroupList">
            <summary>
            List of SubGroup IDs whose data we should store against a template.
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CustomDataAddEditDTO">
            <summary>
            Represents object which will be mapped on CustomData and stored in Database
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataAddEditDTO.CustomDataID">
            <summary>
            CustomDataID. Represents Primary Key in tblCustomDatas.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataAddEditDTO.CustomDataTypeID">
            <summary>
            CustomDataTypeId. Represents Primary Key in tblCustomDataTypes.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataAddEditDTO.Name">
            <summary>
            Represent's CustomData name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataAddEditDTO.CustomDataLookups">
            <summary>
            CustomData Lookup Array
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CustomDataAddEditDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CustomDataAddEditDTO.#ctor(System.Int64,System.String,ESolve.Entities.Models.CustomDataLookup[])">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="customDataTypeID">CustomDataTypeID</param>
            <param name="name">CustomData Name</param>
            <param name="customDataLookups">CustomData Lookup Array</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataComboValuesDTO">
            <summary>
            DTO for custom data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataComboValuesDTO.Id">
            <summary>
            Custom data's primary key from tblCustomDatas
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataComboValuesDTO.Name">
            <summary>
            Custom data's name from tblCustomDatas
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataComboValuesDTO.CustomDataTypeID">
            <summary>
            Custom data's type primary key from tblCustomDatas
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataComboValuesDTO.OrganisationFieldId">
            <summary>
            Custom data's employee data type name from tblOrganisationFields
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataComboValuesDTO.CustomDataType">
            <summary>
            CustomDataType from tblCustomDataTypes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataComboValuesDTO.LookUpValues">
            <summary>
            List of lookup valus from tblCustomDataLookups
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO">
            <summary>
            DTO for custom data values
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO.Id">
            <summary>
            Primary key of schedule, subgroup or job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO.CustomDataID">
            <summary>
            Custom data's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO.CustomDataLookupID">
            <summary>
            CustomDataLookup's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO.NumberValue">
            <summary>
            Number value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO.TextValue">
            <summary>
            Text value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO.ManuallyUpdated">
            <summary>
            Flag if custom data is manually updated or not
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData">
            <summary>
            Model for schedule with his custom data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData.Id">
            <summary>
            Schedule's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData.Name">
            <summary>
            Schedule's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData.StartDate">
            <summary>
            Schedule's start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData.EndDate">
            <summary>
            Schedule's end date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData.Days">
            <summary>
            Represents how many days the Schedule lasts
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData.CustomData">
            <summary>
            Schedule's custom datas
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData.ApplyConstraintFromScheduleId">
            <summary>
            Schedule Id to copy constraints from it
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.ScheduleWithCustomData.isScheduleHavingAnyConstraint">
            <summary>
            Check if schedule having any constraint
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData">
            <summary>
            Model for subgroup with custom data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.Id">
            <summary>
            Subgroup's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.Name">
            <summary>
            SubGroup Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.StartDate">
            <summary>
            SubGroup Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.EndDate">
            <summary>
            SubGroup End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.SortOrder">
            <summary>
            SubGroup SortOrder
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.HideFrom">
            <summary>
            Represents Date from which we will not show SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.ScheduleID">
            <summary>
            Subgroup schedule's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.ParentGroupID">
            <summary>
            Parent subgroup's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.Schedule">
            <summary>
            Schedule object connected via ScheduleID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.ParentGroup">
            <summary>
            SubGroup object connected via ParentGroupID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.LoneWorkerManager1">
            <summary>
            User object connected via LoneWorkerManager1ID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.LoneWorkerManager2">
            <summary>
            User object connected via LoneWorkerManager2ID foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.AttendanceManager1">
            <summary>
            User object connected via AttendanceConfirmationManager1 foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.AttendanceManager2">
            <summary>
            User object connected via AttendanceConfirmationManager2 foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.LoneWorkerManager1ID">
            <summary>
            Lone worker manager's (user) primary key (the first one)
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.LoneWorkerManager2ID">
            Lone worker manager's (user) primary key (the second one)
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.AttendanceManager1ID">
            <summary>
            Attendance Confirmation manager's (user) primary key (the first one)
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.AttendanceManager2ID">
            <summary>
            Attendance Confirmation manager's (user) primary key (the second one)
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataDTOs.SubgroupWithCustomData.CustomData">
            <summary>
            Subgroup's custom data
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.CustomDataListDTO">
            <summary>
            Model used for list preview of CustomData
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataListDTO.Id">
            <summary>
            Represents CustomData PrimaryKey
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataListDTO.Name">
            <summary>
            Represents CustomData Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataListDTO.TypeName">
            <summary>
            Represents CustomDataType Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.CustomDataListDTO.CustomDataLookupItems">
            <summary>
            Lookup Array for LookupType
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CustomDataListDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.CustomDataListDTO.#ctor(System.Int64,System.String,System.String,ESolve.Entities.Models.IdNameDropDownModel[])">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="id">CustomData Primary Key</param>
            <param name="name">CustomData Name</param>
            <param name="typeName">CustomDataType Name</param>
            <param name="items">CustomDataLookup Items</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.CustomDataListDTO.Equals(System.Object)">
            <summary>
            Method which compares two CustomDataListDTO object's
            </summary>
            <param name="obj">CustomDataListDTO which will be compared with caller</param>
            <returns>True if objects are equal, false if they not.</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.CustomDataListDTO.GetHashCode">
            <summary>
            Method which generate HashCode
            </summary>
            <returns>Unique HashCode</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.DataForReport">
            <summary>
            Model which is used for print reports.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.Heading">
            <summary>
            Represent header of each level in report
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.Assigned">
            <summary>
            Represents the number of assigned employees for the current level
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.Unassigned">
            <summary>
            Represents the number of unassigned employees for the current level
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.TimeSpan">
            <summary>
            Represents the number of hours spent on a job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.isSubGroup">
            <summary>
            Represents whether the current level is a subgroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.shouldHideLines">
            <summary>
            Represents should in report draw lines on trird level
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.ListOfJobs">
            <summary>
            Represents a job list for the current level
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.Items">
            <summary>
            Represents data for the level below
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReport.ItemLevel">
            <summary>
            Represents level of data
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.DataForReportFiltering">
            <summary>
            Model used to filter reports
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReportFiltering.EmployeeId">
            <summary>
            Represents the employee id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReportFiltering.SubGroupId">
            <summary>
            Represents an id from a subgroup which is part of a schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReportFiltering.JobId">
            <summary>
            Represents the job id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReportFiltering.JobTypeIds">
            <summary>
            Represents the job type id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReportFiltering.StartTime">
            <summary>
            Represents the starting time of the job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReportFiltering.EndTime">
            <summary>
            It represents the end of working time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DataForReportFiltering.IsAssigned">
            <summary>
            Represents whether an employee is assigned to a job
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.DateTimeDTO">
            <summary>
            Date Time Dto
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DateTimeDTO.StartDate">
            <summary>
            First DateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DateTimeDTO.EndDate">
            <summary>
            Second DateTime
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.DateTimeDTO.Equals(System.Object)">
            <summary>
            Override of the method Equals for DateTimeDTO objects
            </summary>
            <param name="obj">DateTimeDTO object</param>
            <returns>True if StartDate and EndDate are the same, False otherwise.</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.DateTimeDTO.GetHashCode">
            <summary>
            Override of the method GetHashCode for DateTimeDTO objects
            </summary>
            <returns>Hash value.</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.DescriptorPageDTO">
            <summary>
            DTO used in Tests for setting up initial context.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DescriptorPageDTO.UrlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.DescriptorPageDTO.ActionContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.DescriptorPageDTO.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmailSettingsDTO">
            <summary>
            DTO for emailSettings
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmailSettingsDTO.emailSettings">
            <summary>
            Email settings
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmailSettingsDTO.IsPasswordSet">
            <summary>
            Flag if password is set
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeAbsencesDTO">
            <summary>
            Model used for Employee Absences View
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAbsencesDTO.DisplayStartDate">
            <summary>
            Start date that will be displayed if absence starts in the previous month
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAbsencesDTO.DisplayEndDate">
            <summary>
            End date that will be displayed if absence ends in the next month
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAbsencesDTO.AbsenceCodeName">
            <summary>
            Absence Code Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAbsencesDTO.AbsenceCodeColor">
            <summary>
            Absence Code Color
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeAbsencesDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeAbsencesDTO.#ctor(ESolve.Entities.DTOs.EmployeeAbsencesDTO)">
            <summary>
            Copy constructor
            </summary>
            <param name="employeeAbsencesDTO"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeAvailabilityDTO">
            <summary>
            DTO for employee availability entity
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeAvailabilityDTO.#ctor(System.Int64,System.String,System.String,System.String)">
            <summary>
            Constructor for employee availability
            </summary>
            <param name="employeeId">Employee id</param>
            <param name="dayOfWeek">Day of week</param>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAvailabilityDTO.Id">
            <summary>
            Database Primary Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAvailabilityDTO.DayOfWeek">
            <summary>
            Day of week
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAvailabilityDTO.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAvailabilityDTO.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeAvailabilityDTO.EmployeeID">
            <summary>
            Represents Primary Key From tblEmployee
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeComboDTO">
            <summary>
            Model for all Comboboxes on Add/Update Employee Page.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.Managers">
            <summary>
            Represent All Managers
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.Genders">
            <summary>
            Represent All Genders
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.EmployeeProfiles">
            <summary>
            Represent All EmployeeProfiles
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.Locations">
            <summary>
            Represent All Locations
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.Departments">
            <summary>
            Represent All Departments
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.CostCodes">
            <summary>
            Represent All CostCodes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.Divisions">
            <summary>
            Represent All Divisions
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.JobTitles">
            <summary>
            Represent All JobTitles
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.Teams">
            <summary>
            Represent All Teams
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.Classes">
            <summary>
            Represent All Classes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.JobTypes">
            <summary>
            Represent All JobTypes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.TargetRuleGroups">
            <summary>
            Represent All TargetRuleGroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.WorkRules">
            <summary>
            Represents All WorkRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeComboDTO.Notifications">
            <summary>
            Represent All Notifications
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO">
            <summary>
            Model which describes object in Employee Dashboard Calendar
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.StartDateTime">
            <summary>
            Start Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.EndDateTime">
            <summary>
            End Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.EmployeeRequired">
            <summary>
            Number of Employees Required
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.EmployeesAssigned">
            <summary>
            Number of Employees Assigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.PrimaryColor">
            <summary>
            Object Primary color
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.SecondaryColor">
            <summary>
            Object Secondary color
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.OfferedForTrade">
            <summary>
            Flag to indicate if job is offered for trade
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.LeftArrow">
            <summary>
            Flag is job start date left of the start range
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardCalendarDTO.RightArrow">
            <summary>
            Flag is job end date right of the end range
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO">
            <summary>
            Dto for Employee Dashboard
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO.ScheduledJobs">
            <summary>
            Number of Jobs where Employee is assigned and jobs are approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO.ScheduledHours">
            <summary>
            Sum of Job hours where Employee is assigned and jobs are approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO.ApprovedAbsenceHours">
            <summary>
            Sum employee of Absence hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO.NumberOfJobOffers">
            <summary>
            All employee job offers
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO.NumberOfJobTrades">
            <summary>
            All employee job trades
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO.UpcomingLeave">
            <summary>
            Employee upcoming Leave
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.EmployeeDashboardDetailsDTO.NextJob">
            <summary>
            Next job
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeDashboard.NextJobDTO">
            <summary>
            NextJob object for Employee Dashboard
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.NextJobDTO.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.NextJobDTO.JobStartDate">
            <summary>
            Job start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.NextJobDTO.JobEndDate">
            <summary>
            Job end date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.NextJobDTO.JobName">
            <summary>
            Job name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.NextJobDTO.SubGroupName">
            <summary>
            Jobs subgroup name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.NextJobDTO.CanTradeJob">
            <summary>
            Indicator can job be traded
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.NextJobDTO.OfferedForTrade">
            <summary>
            Indicator is job already offered for trade
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeDashboard.UpcomingLeaveDTO">
            <summary>
            UpcomingLeave object for Employee Dashboard
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.UpcomingLeaveDTO.AbsenceID">
            <summary>
            Absence primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.UpcomingLeaveDTO.AbsenceStartDate">
            <summary>
            Absence Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.UpcomingLeaveDTO.AbsenceEndDate">
            <summary>
            Absence End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.UpcomingLeaveDTO.AbsenceCodeName">
            <summary>
            Absence Code Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDashboard.UpcomingLeaveDTO.AbsenceCodeColor">
            <summary>
            Absnece Code Color
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeData">
            <summary>
            Class Represent custom data for employee data.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeData.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeData.Name">
            <summary>
            Represent list with id and names.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeData.Value">
            <summary>
            Represents a list of id and names, for an organizational group
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeDTO">
            <summary>
            DTO for employee entity
            All attributes in this class are nullable because this DTO is used for getting employee details because there is case where employee cannot see some values, they should be null
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Id">
            <summary>
            Database Primary Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Firstname">
            <summary>
            User's first name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Surname">
            <summary>
            User's last name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Username">
            <summary>
            User's username
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Email">
            <summary>
            User's email
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Image">
            <summary>
            Base64 String which represent user's image
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.TelephoneNumber">
            <summary>
            User's telephone number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.MobileNumber">
            <summary>
            User's mobile number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.IsTemporaryPassword">
            <summary>
            Indicator if user's password is temporary
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.DatePasswordModified">
            <summary>
            Date when user's password is last modified.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.IsAccessEmailSent">
            <summary>
            Indicator if access email sent to the user
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.IsSystemAccessEmailSent">
            <summary>
            Indicator if system access email sent to the user
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.OldPassword">
            <summary>
            Old password because user cannot change current password to old password
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Role">
            <summary>
            Role representing account's authorization level.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.ConnectionId">
            <summary>
            Storage field for user connection id, for signalR notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.EmployeeNumber">
            <summary>
            System unique identifier.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.StartDate">
            <summary>
            Date when Employee is started working in company.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.LeaveDate">
            <summary>
            Date when employee leave company.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Address2">
            <summary>
            Address2 where Employee lives.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Address1">
            <summary>
            Address1 where Employee lives.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Address3">
            <summary>
            Address3 where Employee lives.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Address4">
            <summary>
            Address4 where Employee lives.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.DateOfBirth">
            <summary>
            Employee Date of birth.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.PayRate">
            <summary>
            PayRate
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.MaxHours1">
            <summary>
            MaxHours1
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.MaxHours2">
            <summary>
            MaxHours2
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.MaxHours3">
            <summary>
            MaxHours3
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.MaxHours4">
            <summary>
            MaxHours4
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.MaxHours5">
            <summary>
            MaxHours5
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.AllowedTrade">
            <summary>
            Does Employee allows to be seted up in trades.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.Availability">
            <summary>
            Indicator can we call Employee if he is not on work.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.EmployeeLocations">
            <summary>
            Employee's locations.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.WeeklyHours">
            <summary>
            WeeklyHours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.EmployeeAvailabilityList">
            <summary>
            Employee availability list
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.ProfileID">
            <summary>
            Represents Primary Key From tblProfiles
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.GenderID">
            <summary>
            Represents Primary Key From tblGenders
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.DepartmentID">
            <summary>
            Represents Primary Key From tblDepartments
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.CostCodeID">
            <summary>
            Represents Primary Key From tblCostCodes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.DivisionID">
            <summary>
            Represents Primary Key From tblDivisions
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.JobTitleID">
            <summary>
            Represents Primary Key From tblJobTitles
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.TeamID">
            <summary>
            Represents Primary Key From tblTeams
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.ClassID">
            <summary>
            Represents Primary Key From tblClasses
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.JobTypeID">
            <summary>
            Represents Primary Key From tblJobTypes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.TargetRuleGroupID">
            <summary>
            Represents Primary Key From tblTargetRuleGroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.WorkRulesID">
            <summary>
            Represents primary key from tblWorkRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.NotificationTypeID">
            <summary>
            Represents Primary Key From tblNotifications
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeDTO.ManagerID">
            <summary>
            Represents Primary Key From tblManagers
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeDTO.TrimValues">
            <summary>
            Trim string values
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeFilterDTO">
            <summary>
            DTO used for retreiving all Employee filter values
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeFilterDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeFilterDTO.Value">
            <summary>
            Employee Filter Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeFilterDTO.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param value="id">Filter's primary key.</param>
            <param value="value">Filter's value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeFilterValueDTO">
            <summary>
            EmployeeFilterValueDTO object for filtering data in calendar page
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeFilterValueDTO.Id">
            <summary>
            Id of Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeFilterValueDTO.EmployeeName">
            <summary>
            Full Name of Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeFilterValueDTO.EmployeeNumber">
            <summary>
            Employee Number
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO">
            <summary>
            Class is used as model for assigment one employee on job.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO.CanBeAssignedOrUnassigned">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO.Cached">
            <summary>
            Is cached
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeJobAssigmentDTO.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="jobID">Job Primary Key</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO">
            <summary>
            DTO for displaying employees in template job assigment lists
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.Id">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.NameAndSurname">
            <summary>
            Employee Display Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.Image">
            <summary>
            Employee Image
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.Status">
            <summary>
            Employee Job Assigment Status
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.EmployeeInfo">
            <summary>
            Employee info
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.ScheduledHours">
            <summary>
            ScheduledHours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.AbsenceHours">
            <summary>
            Employee's absence hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.Assigments">
            <summary>
            Employee's assigments
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.BrokenRules">
            <summary>
            Broken rules messages 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.CanBeAssignedOrUnassigned">
            <summary>
            Indicator for whether an Employee can be assigned or unassigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.JobOfferDate">
            <summary>
            JobOffer Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.JobOfferStatus">
            <summary>
            JobOffer status 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.AgencyJobAssignmentID">
            <summary>
            Agency Job Assigment Primary Key (if assigment is from )
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.AgencyAssignmentInfo">
            <summary>
            Agency Assignment Info
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.EmployeeNumber">
            <summary>
            Employee Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.IsAnonymous">
            <summary>
            Is employee anonymous to user
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.#ctor(System.Int64,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Constructor which initalize all properties.
            </summary>
            <param name="Id">Employee ID</param>
            <param name="NameAndSurname">Employee Display Name</param>
            <param name="Image">Employee Image</param>
            <param name="Status">Employee Job Assigment Status</param>
            <param name="CanBeAssignedOrUnassigned">Indicator for whether an Employee can be assigned or unassigned</param>
            <param name="AgencyJobAssignmentID">AgencyJobAssigment Primary Key if assigment is from agency</param>
            <param name="AgencyAssignmentInfo">Agency Assignment Info</param>
            <param name="EmployeeNumber">Employee Number</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.#ctor(System.Int64,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.DateTime,System.DateTime}},System.Boolean,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Constructor which initalize all properties.
            </summary>
            <param name="Id">Employee ID</param>
            <param name="NameAndSurname">Employee Display Name</param>
            <param name="Image">Employee Image</param>
            <param name="Status">Employee Job Assigment Status</param>
            <param name="Assigments">Employee's assigments</param>
            <param name="CanBeAssignedOrUnassigned">Indicator for whether an Employee can be assigned or unassigned</param>
            <param name="AgencyJobAssignmentID">AgencyJobAssigment Primary Key if assigment is from agency</param>
            <param name="AgencyAssignmentInfo">Agency Assignment Info</param>
            <param name="EmployeeNumber">Employee Number</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.Equals(ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeJobAssigmentListDTO.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeListDTO">
            <summary>
            Model used for employee list view
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.Id">
            <summary>
            <c>Required</c>. Represents Id in Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.NameAndSurname">
            <summary>
            Name and Surname whit white space as delimiter.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.JobTitle">
            <summary>
            Employees predefined JobType
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.EmployeeNumber">
            <summary>
            Employee Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.EmployeePhoneNumber">
            <summary>
            Employee Phone Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.Email">
            <summary>
            Employee Email
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.StartDate">
            <summary>
            Employee Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.Image">
            <summary>
            Employee Image
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListDTO.Profile">
            <summary>
            Employee Profile
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeListDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeListDTO.#ctor(System.Int64,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Constructor which initalize all parameters
            </summary>
            <param name="id">Id in Database</param>
            <param name="nameAndSurname">Name and Surname</param>
            <param name="jobTitle">Employees predefined JobType</param>
            <param name="employeeNumber">Employee Number</param>
            <param name="employeePhoneNumber">Employee Phone Number</param>
            <param name="email">Employee Email</param>
            <param name="startDate">Start Date</param>
            <param name="image">Employee Image</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeListDTO.#ctor(System.Int64,System.String,System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="nameAndSurname"></param>
            <param name="employeeNumber"></param>
            <param name="startDate"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeListsDTO">
            <summary>
            Model for JobAssigment lists
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.ValidAssigned">
            <summary>
            Valid Assigned employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.InvalidAssigned">
            <summary>
            Invalid Assigned employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.Available">
            <summary>
            Available employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.Unavailable">
            <summary>
            Unavailable employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.TotalCountOfAvailable">
            <summary>
            Total count of available employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.TotalCountOfUnavailable">
            <summary>
            Total count of unavailable employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.TotalCountOfValid">
            <summary>
            Total count of valid employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.TotalCountOfInvalid">
            <summary>
            Total count of invalid employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.Status">
            <summary>
            Job Status
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeListsDTO.IsEPFConstraintActive">
            <summary>
            Is EPF constraint present and active on given schedule
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO">
            <summary>
            DTO containint User Panel Permissions.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO.CanSeePersonalPanel">
            <summary>
            Indicates whether Person can see Personal Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO.CanSeeOrganisationalPanel">
            <summary>
            Indicates whether Person can see Organisational Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO.CanSeePayPanel">
            <summary>
            Indicates whether Person can see Pay Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO.CanSeeSchedulePanel">
            <summary>
            Indicates whether Person can see Schedule Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO.CanSeeSkillsPanel">
            <summary>
            Indicates whether Person can see Skills Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO.CanSeeSystemPanel">
            <summary>
            Indicates whether Person can see System Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO.CanSeeAvailabilityPanel">
            <summary>
            Indicates whether Person can  see Employee Availability Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeePanelPermissionsDTO.CanSeeMobileAppPanel">
            <summary>
            Indicates whether Person can  see Mobile App Panel.
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeProfileDTO">
            <summary>
             DTO for assign employee profile to employees.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeProfileDTO.EmployeeId">
            <summary>
            Array of Employee Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeProfileDTO.ProfileId">
            <summary>
            Employee profile Id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeSearchDTO">
            <summary>
            Entity which is used for displaying Employees in Calendar
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSearchDTO.Id">
            <summary>
            <c>Required</c>. Represents Id in Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSearchDTO.NameAndSurname">
            <summary>
            Name and Surname whit white space as delimiter.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSearchDTO.Image">
            <summary>
            Employee Image
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeSearchDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeSearchDTO.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="Id">Id from Database</param>
            <param name="NameAndSurname">Name and Surname from Database with white space between.</param>
            <param name="Image">Image from tblEmployeeImages</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeSearchDTO.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeSearchDTO.Equals(System.Object)">
            <summary>
            Equals Method
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeSearchDTO.GetHashCode">
            <summary>
            Get HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeSkill">
            <summary>
            Model for displaying skills in skill tab on employee details page
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSkill.Id">
            <summary>
            Id of skill code
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSkill.Name">
            <summary>
            Name of skill
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSkill.Value">
            <summary>
            Represents whether the skill is active or not
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeSkill.#ctor(ESolve.Entities.Models.SkillMatrix)">
            <summary>
            Constructor that sets properties from the skill matrix to the EmployeeSkill model
            </summary>
            <param name="skillMatrix">Skill Matrix model</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeesMessagesDTO">
            <summary>
            Validation messages for one employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesMessagesDTO.EmployeeFirstNameAndLastname">
            <summary>
            Employee's firstname and lastname
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesMessagesDTO.EmployeeID">
            <summary>
            Employee's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesMessagesDTO.Messages">
            <summary>
            Validation messages
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesMessagesDTO.BrokenRules">
            <summary>
            Employee's broken rules (for adding into database)
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesMessagesDTO.OverlappingJobs">
            <summary>
            List of overlapping jobs
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeesTemplateMessagesDTO">
            <summary>
            Validation messages for one employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesTemplateMessagesDTO.EmployeeFirstNameAndLastname">
            <summary>
            Employee's firstname and lastname
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesTemplateMessagesDTO.EmployeeID">
            <summary>
            Employee's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesTemplateMessagesDTO.Messages">
            <summary>
            Validation messages
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesTemplateMessagesDTO.BrokenRules">
            <summary>
            Employee's template broken rules (for adding into database)
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeesTemplateMessagesDTO.OverlappingJobs">
            <summary>
            List of overlapping jobs
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeTileDTO">
            <summary>
            DTO for employee tile to display employee's data in job details
            </summary>
            
        </member>
        <member name="T:ESolve.Entities.DTOs.EmployeeSkillCodes">
            <summary>
            Model used for employees fields and their skill codes.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSkillCodes.EmployeeSkills">
            <summary>
            Represents employee skill codes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSkillCodes.Employee">
            <summary>
            Represents employee object
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.EmployeeSkillCodes.EmployeeAvailabilities">
            <summary>
            Represents employee availability object
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeSkillCodes.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.EmployeeSkillCodes.#ctor(ESolve.Entities.DTOs.EmployeeDTO,System.Collections.Generic.List{ESolve.Entities.Models.SkillCode},System.Collections.Generic.List{ESolve.Entities.DTOs.EmployeeAvailabilityDTO})">
            <summary>
            Constructor which initalize all parameters
            </summary>
            <param name="employee">EmployeeDTO object.</param>
            <param name="skills">Skills which employee has.</param>
            <param name="employeeAvailability">Employee availability object</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ExpandedPermissionsDTO">
            <summary>
            DTO containing permissions based on profile and schedule permissions.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessExistingSchedules">
            <summary>
            Indicates whether User has access to existing Schedules.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserCreateNewSchedules">
            <summary>
            Indicates whether User can create new Schedules.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserDeleteExistingSchedules">
            <summary>
            Indicates whether User can delete existing Schedules.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessEmployeeDetails">
            <summary>
            Indicates whether User can access Employee Details.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessSkillsMatrix">
            <summary>
            Indicates whether User can access Skills Matrix.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessSystemPreferences">
            <summary>
            Indicates whether User can access System Preferences.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessUserManagement">
            <summary>
            Indicates whether User can access User Management.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessAbsenceManager">
            <summary>
            Indicates whether User can access Absence Manager.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserCreateSkillCodes">
            <summary>
            Indicates whether User can create Skill Codes.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserConfigureConstraints">
            <summary>
            Indicates whether User can configure Constraints.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserConfigureRankings">
            <summary>
            Indicates whether User can configure Rankings.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserDisableConstraintsTemporarily">
            <summary>
            Indicates whether User can temporarily disable Constraints.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserViewBudgets">
            <summary>
            Indicates whether User can view Budgets.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAssignFromUnavailable">
            <summary>
            Indicates whether User can assign from Unavailable.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserOverrideOverlappingAssignments">
            <summary>
            /// <summary>
            Indicates whether User has Allows overlapping assignments permission
            </summary>
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAssignAgency">
            <summary>
            Indicates whether User can access Assign Agency.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserApproveSchedules">
            <summary>
            Indicates whether User can Approve Schedules.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserChangeApprovedSchedules">
            <summary>
            Indicates whether User can change approved Schedules.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserManageTemplates">
            <summary>
            Indicates whether User can access and manage Templates.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAuthoriseEmployeeAbsence">
            <summary>
            Indicates whether User can authorise and modify Employee absence.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessAndAmendEmployeeAvailability">
            <summary>
            Indicates whether User can access and amend Employee availability.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserMaintenanceEmployeeDetails">
            <summary>
            Indicates whether User can create additional fields and panels.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessAgencyAssignmentsReport">
            <summary>
            Indicates whether User can access and run Agency Assignments Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessAuditTrailReport">
            <summary>
            Indicates whether User can access and run Audit Trail Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessConstraintsAndRankingsReport">
            <summary>
            Indicates whether User can access and run Constraints and Rankings Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessEmployeeDetailsReport">
            <summary>
            Indicates whether User can access and run Employee Details Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessGDPRDataDelete">
            <summary>
            Indicates whether User can access to settings GDPR data delete
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessGDPRAuditReport">
            <summary>
            Indicates whether User can access and run GDPR-Audit Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessGDPRPRReport">
            <summary>
            Indicates whether User can access and run GDPR-PR Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessGDPRSARReport">
            <summary>
            Indicates whether User can access and run GDPR-SAR Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessPointInTimeScheduleComparisonReport">
            <summary>
            Indicates whether User can access and run Point-in-time Schedule Comparison Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserScheduleReports">
            <summary>
            Indicates whether User can schedule reports.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessReports">
            <summary>
            Indicates whether User can access reports.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessScheduleEmployeeBreakdownReport">
            <summary>
            Indicates whether User can access and run Schedule Employee Breakdown Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessScheduleGapsReport">
            <summary>
            Indicates whether User can access and run Schedule Gaps Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessSchedulePostApprovedChangesReport">
            <summary>
            Indicates whether User can access and run Schedule Post Approved Changes Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessScheduleReport">
            <summary>
            Indicates whether User can access and run Schedule Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessScheduleSummaryReport">
            <summary>
            Indicates whether User can access and run Schedule Summary Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessTargetRulesReport">
            <summary>
            Indicates whether User can access and run Target Rules Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessUserListReport">
            <summary>
            Indicates whether User can access and run User List Report.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessBudgetMaintenance">
            <summary>
            Indicates whether User can access and modify the budgets.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessDataIntegrations">
            <summary>
            Indicates whether User can build, schedule, maintain and run system integrations.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessEmployeeRosters">
            <summary>
            Indicates whether User can maintain rosters.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessScheduleFormulas">
            <summary>
            Indicates whether User can access and modify the formulas.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessSystemLicence">
            <summary>
            Indicates whether User can access and maintain the system licence
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessTargetRules">
            <summary>
            Indicates whether User can maintain target.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessWorkRules">
            <summary>
            Indicates whether User can maintain work rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeAccessTradeBoard">
            <summary>
            Indicates whether Employee can access the tradeboard and trade jobs.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeAccessJobOffers">
            <summary>
            Indicates whether Employee can receive and accept job offers.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeAccessEmployeeAvailability">
            <summary>
            Indicates whether Employee can access and amend their employee availability.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeViewSchedule">
            <summary>
            Indicates whether Employee can view their Personal Schedule.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeAccessAbsenceCalendar">
            <summary>
            Indicates whether Employee can access and view their absence calendar.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeGenerateRequests">
            <summary>
            Indicates whether Employee can generate absence requests.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeChangePassword">
            <summary>
            Indicates whether Employee can Change Password.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeAccessEmployeeDetails">
            <summary>
            Indicates whether Employee can access Employee Details.
            </summary> 
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessShifts">
            <summary>
             Gets or sets a value that indicates whether the user can use shifts
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessLoneWorkerAlerts">
            <summary>
            Gets or sets a value that indicates whether the user can receive lone worker alerts
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserMaintainJobTypes">
            <summary>
            Permission for Job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessAttendanceConfirmationTransactionLog">
            <summary>
            Gets or sets a value that indicates whether the user can receive lone worker alerts
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanSeeLicenseTab">
            <summary>
            Gets or sets a value that indicates whether the loggedin  user has access to license
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.ApplicationHasLicense">
            <summary>
            Gets or sets a value that indicates whether application's instance has license or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.ApiKeyVisible">
            <summary>
            Gets or sets a value that indicates whether admin's api key is visible or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.EmployeePanelPermissions">
            <summary>
            User Panel Permissions.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.UserPanelPermissions">
            <summary>
            User Panel Permissions.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.UserHaveAnyPanelPermission">
            <summary>
            Gets or sets a value that indicates wheather user have any panel permission or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanEmployeeAccessAvailability">
            <summary>
            Indicates whether Employee can access and amend their employee availability.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ExpandedPermissionsDTO.CanUserAccessManagement">
            <summary>
            Indicates whether User can access user management
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.FieldSpecificationDTO">
            <summary>
            This class is used for rendering Fileds when we creating Schedule constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.Type">
            <summary>
            Represents Field Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.TypePlaceHolder">
            <summary>
            Represents Field Placeholder
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.LabelName">
            <summary>
            Represents Label Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.BackendKey">
            <summary>
            Key for Backend
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.Choices">
            <summary>
            DropDown Items
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.Min">
            <summary>
            Property Minimal Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.Max">
            <summary>
            Property Maximal Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.Required">
            <summary>
            Is Field Required
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.DefaultValue">
            <summary>
            Default values
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FieldSpecificationDTO.ComparsionValue">
            <summary>
            Comparsion Values
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.FieldSpecificationDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.FieldSpecificationDTO.#ctor(System.String,System.String,System.String,System.String,ESolve.Entities.Models.IdNameDropDownModel[],System.Double,System.Double,System.Boolean,System.String)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="type">Field Type</param>
            <param name="typePlaceHolder">Field Placeholder</param>
            <param name="labelName">Label Name</param>
            <param name="backendKey">Key for Backend</param>
            <param name="choices">DropDown Items</param>
            <param name="min">Minimal Value</param>
            <param name="max">Maximal Value</param>
            <param name="required">Is Field Required</param>
            <param name="defaultValue">Default values</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.FieldSpecificationDTO.#ctor(System.String,System.String,System.String,System.String,ESolve.Entities.Models.IdNameDropDownModel[],System.Double,System.Double,System.Boolean,System.String,ESolve.Entities.Models.IdNameDropDownModel[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="typePlaceHolder"></param>
            <param name="labelName"></param>
            <param name="backendKey"></param>
            <param name="choices"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="required"></param>
            <param name="defaultValue"></param>
            <param name="comparsionValue"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.FormSpecificationDTO">
            <summary>
            Constraint Form Model
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.FormSpecificationDTO.ConstraintID">
            <summary>
            Represents Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FormSpecificationDTO.ConstraintName">
            <summary>
            Represnets Constraint Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FormSpecificationDTO.ScheduleID">
            <summary>
            Represents Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FormSpecificationDTO.ConstraintRuleID">
            <summary>
            Represents Constraint Rule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.FormSpecificationDTO.ConstraintFields">
            <summary>
            Form Fileds for selected Schedule Constraint
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.FormSpecificationDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.FormSpecificationDTO.#ctor(System.Int64,System.String,System.Int64,System.Int64,ESolve.Entities.DTOs.FieldSpecificationDTO[])">
            <summary>
            Construcotr which initalize all parameters
            </summary>
            <param name="constraintID">Constraint Primary Key</param>
            <param name="constraintName">Constraint Name</param>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="constraintRuleID">Constraint Rule Primary Key</param>
            <param name="constraintFields">Form Fileds for selected Schedule Constraint</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.IdBooleanCustomDTO">
            <summary>
            Used for submiting schedules and subGroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdBooleanCustomDTO.Id">
            <summary>
            Schedule approval id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdBooleanCustomDTO.IsApproved">
            <summary>
            Represent are schedule approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdBooleanCustomDTO.Comment">
            <summary>
            Comment for approved or rejected item
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.IdByteArrayDTO">
            <summary>
            Class which posses long and byte[] properties
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdByteArrayDTO.ID">
            <summary>
            Property of Type long
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdByteArrayDTO.ByteArray">
            <summary>
            Property of Type byte[]
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.IdDateDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdDateDTO.Id">
            <summary>
            Represents PrimaryKey in Database
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdDateDTO.Date">
            <summary>
            DateTime object
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdDateDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdDateDTO.#ctor(System.Int64,System.DateTime)">
            <summary>
            Constructor which initalize all Properties
            </summary>
            <param name="Id">Long value which will be placed in Id property</param>
            <param name="Date">DateTime value which will be placed in Date property</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.IdDatesDTO">
            <summary>
            Class with Id and two Date's
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdDatesDTO.Id">
            <summary>
            Represent PrimaryKey in Database
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdDatesDTO.StartDate">
            <summary>
            DateTime one
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdDatesDTO.EndDate">
            <summary>
            DateTime two
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdDatesDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdDatesDTO.#ctor(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="id">Primary Key</param>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.IdLongLongDTO">
            <summary>
            Id Long Long DTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdLongLongDTO.Id">
            <summary>
            Object Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdLongLongDTO.PrimaryKeyOne">
            <summary>
            First Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdLongLongDTO.PrimaryKeyTwo">
            <summary>
            Second Database Primary Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdLongLongDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdLongLongDTO.Equals(System.Object)">
            <summary>
            Equals Method for comparing two Employees.
            </summary>
            <param name="obj">Employee Object which we want to compare.</param>
            <returns>True if passed object is same as caller.</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdLongLongDTO.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.IdNameBooleanImageValues">
            <summary>
            Used for skill matrices. Image is Employee Image
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.IdNameBooleanImageValues.Image">
            <summary>
            Employee Image
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdNameBooleanImageValues.#ctor(System.Int64,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="description"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdNameBooleanImageValues.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.IdNameBooleanValues">
            <summary>
            Used For Skill Matrices. Value is bool, name is employee or skill code name, and Id is employee or skillCode ID.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.IdNameBooleanValues.Id">
            <summary>
            SkillCode OR Employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdNameBooleanValues.Name">
            <summary>
            SkillCode OR Employee Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdNameBooleanValues.Value">
            <summary>
            Value in SkillMatrix
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdNameBooleanValues.Description">
            <summary>
            skill code description
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdNameBooleanValues.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdNameBooleanValues.#ctor(System.Int64,System.String,System.Boolean,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">Represent Primary Key</param>
            <param name="name">Represent Display name</param>
            <param name="value">Bool value</param>
            <param name="description">Skill code description</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.IdNameDTO">
            <summary>
            Used For Skill Matrices. Value is bool, name is employee or skill code name, and Id is employee or skillCode ID.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.IdNameDTO.Id">
            <summary>
            Entity's Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.IdNameDTO.Name">
            <summary>
            Entity's unique name
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdNameDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.IdNameDTO.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">Represent Primary Key</param>
            <param name="name">Represent Display name</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ImagesDTO">
            <summary>
            Model For Employees Images which can bee disposed
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ImagesDTO.EmployeeImages">
            <summary>
            Employee Images
            </summary>
        </member>
        <member name="F:ESolve.Entities.DTOs.ImagesDTO.handle">
            <summary>
            Pointer to an external unmanaged resource.
            </summary>
        </member>
        <member name="F:ESolve.Entities.DTOs.ImagesDTO.component">
            <summary>
            Other managed resource this class uses.
            </summary>
        </member>
        <member name="F:ESolve.Entities.DTOs.ImagesDTO.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ImagesDTO.#ctor(System.Collections.Generic.List{System.Int64},System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initalize employee images
            </summary>
            <param name="employeeIDs">Collection of employee Ids for which we will load images</param>
            <param name="imageSize">Name of image size</param>
            <param name="repositoryContext">Repository context for accessing database layer</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.ImagesDTO.Dispose">
            <summary>
            Disposing IdNameDropDownModel
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ImagesDTO.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. If disposing equals true, 
            the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed. 
            If disposing equals false, the method has been called by the runtime from inside the finalizer and you 
            should not reference other objects.Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.ImagesDTO.CloseHandle(System.IntPtr)">
            <summary>
            Use interop to call the method necessary to clean up the unmanaged resource.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.ImagesDTO.Finalize">
            <summary>
            Use C# destructor syntax for finalization code. This destructor will run only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize. Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ImagesDTO.GetImageList(System.Collections.Generic.List{System.Int64},System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            For passed List of employee ids and image size name slect all employees images from database for passed image size name
            </summary>
            <param name="employeeIDs">List of selected Employees</param>
            <param name="imageSize">Name of image size</param>
            <param name="repositoryContext">Repository context for accessing database layer</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.InsertedTemplateDTO">
            <summary>
            DTO used for showing inserted templates.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertedTemplateDTO.Id">
            <summary>
            Primary key of InsertedTemplate
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertedTemplateDTO.Template">
            <summary>
            Name of the Template whose data is inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertedTemplateDTO.TemplateID">
            <summary>
            Primary Key of the Template into which the data is inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertedTemplateDTO.ScheduleLocationName">
            <summary>
            Name of the Schedule/SubGroup into which the data is inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertedTemplateDTO.ScheduleLocationID">
            <summary>
            If not null -> ID of SubGroup into which the data is inserted
            Otherwise indicates that data is inserted into the Schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertedTemplateDTO.StartDate">
            <summary>
            Date from which the data was inserted into the Schedule/SubGroup.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertedTemplateDTO.EndDate">
            <summary>
            Date to which the data was inserted into the Schedule/SubGroup.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertedTemplateDTO.Rotations">
            <summary>
            Number of times the Tmeplate data has been inserted
            into the Schedule/SubGroup, one after another.
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.InsertTemplateDTO">
            <summary>
            DTO used for inserting template into the schedule.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertTemplateDTO.TemplateID">
            <summary>
            ID of Template whose data will be inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertTemplateDTO.ScheduleID">
            <summary>
            ID of Schedule into which the data will be inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertTemplateDTO.SubGroupID">
            <summary>
            If null -> Data will be inserted into Schedule only
            Otherwise -> ID of SubGroup into which the data will be inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertTemplateDTO.StartDate">
            <summary>
            Date starting from which the data will be inserted.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.InsertTemplateDTO.Rotations">
            <summary>
            Number of times the data will be inserted
            into the schedule, one after another (date-wise)
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobCustomDataAddEditDTO">
            <summary>
            Model for adding new and updating existing JobCustomData
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.Id">
            <summary>
            JobCustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.CustomDataID">
            <summary>
            CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.CustomDataLookupID">
            <summary>
            CustomDataLookupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.NumberValue">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.TextValue">
            <summary>
            Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.CustomDataLookupValues">
            <summary>
            Values of CustomDataLookup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.CustomDataName">
            <summary>
            CustomDataName Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.CustomDataTypeName">
            <summary>
            CustomDataTypeName Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.ManuallyUpdated">
            <summary>
            Flag if custom data on job is manually updated
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.#ctor(ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO)">
            <summary>
            Constructor that initializes JobCustomDataAddEditDTO with TJobCustomDataAddEditDTO
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataAddEditDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Collections.Generic.List{ESolve.Entities.Models.CustomDataLookup},System.String,System.String,System.Boolean)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="id">JobCustomData Primary Key</param>
            <param name="jobID">Job Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="numberValue">Number Value</param>
            <param name="textValue">Text Value</param>
            <param name="customDataLookupValues">List of CustomDataLookup values</param>
            <param name="customDataName">CustomDataName Value</param>
            <param name="customDataTypeName">CustomDataTypeName Value</param>
            <param name="manuallyUpdated">Flag if custom data is manually updated or not</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobCustomDataDTO">
            <summary>
            Model used for Jobs custom data in calcualtions
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataDTO.CustomDataID">
            <summary>
            CustomDataID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataDTO.JobTypeID">
            <summary>
            JobTypeID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataDTO.NumberValue">
            <summary>
            NumberValue
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataDTO.TextValue">
            <summary>
            TextValue
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataDTO.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataDTO.EmployeeField">
            <summary>
            EmployeeField
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataDTO.CustomDataType">
            <summary>
            Custom data type
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataDTO.#ctor(System.Int64,System.Int64,System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="customDataID"></param>
            <param name="jobTypeID"></param>
            <param name="numberValue"></param>
            <param name="textValue"></param>
            <param name="operator"></param>
            <param name="employeeField"></param>
            <param name="customDataType"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataDTO.#ctor(System.Int64,System.Int64,System.String,System.Double,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="customDataID"></param>
            <param name="jobTypeID"></param>
            <param name="customDataLookUpItem"></param>
            <param name="numberValue"></param>
            <param name="textValue"></param>
            <param name="operator"></param>
            <param name="employeeField"></param>
            <param name="checkCustomDataLookUpItem"></param>
            <param name="customDataType"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataDTO.GetJobsCustomData(ESolve.Entities.RepositoryContext,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Getting job's custom data
            </summary>
            <param name="repositoryContext">DbContext</param>
            <param name="jobTypeIDs">Job types' primary keys</param>
            <param name="jobIDs">Job's primary key</param>
            <returns>dictionary where key is jobID and value is array of custom data of job</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataDTO.GetTemplateJobsCustomData(ESolve.Entities.RepositoryContext,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Get template job's custom data
            </summary>
            <param name="repositoryContext">DbContext</param>
            <param name="jobTypeIDs">Job types' primary keys</param>
            <param name="jobIDs">Job's primary key</param>
            <returns>dictionary where key is jobID and value is array of custom data of job</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataDTO.ConvertToJobCustomDatasForConstraints(ESolve.Entities.RepositoryContext,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Mapping job custom data into constraints custom data
            </summary>
            <param name="repositoryContext">DbContext</param>
            <param name="jobIDs">Jobs' primary keys</param>
            <param name="customDatasIds">Custom data primary keys</param>
            <param name="isTemplate">Flag that indicates that we need to get templates custom data</param>
            <returns>List of JobCustomDataForConstraintsDTO objects for calculations</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.InvalidOperationException">The excpetion that is thrown when a method call is invalid for the object's current state.</exception>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDataDTO.GetJobCustomDataForConstraintsCalc(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.Constraint},ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Get custom data of jobs in order to check constrints that have custom data
            </summary>
            <param name="jobIDs">Jobs' primary key</param>
            <param name="constraints">Constraints</param>
            <param name="repositoryContext">DbContest</param>
            <param name="isTemplate">Flag if this is called from template</param>
            <returns>List of JobCustomDataForConstraintsDTO objects</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO.JobID">
            <summary>
            Job's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO.CustomDataID">
            <summary>
            Custom data's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO.Number">
            <summary>
            Number value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO.Text">
            <summary>
            Text value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO.LookupItem">
            <summary>
            LookupItem
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDataForConstraintsDTO.CustomDataType">
            <summary>
            Custom data's type
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobCustomDatasDTO">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDatasDTO.JobID">
            <summary>
            JobID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDatasDTO.CustomDataID">
            <summary>
            CustomDataID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDatasDTO.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobCustomDatasDTO.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDatasDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobCustomDatasDTO.#ctor(System.Int64,System.Int64,System.Double,System.String,System.String)">
            <summary>
            Constructor with params
            </summary>
            <param name="jobID"></param>
            <param name="customDataID"></param>
            <param name="number"></param>
            <param name="text"></param>
            <param name="lookupItem"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobDetailsDTO">
            <summary>
            JobDetailsDTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDetailsDTO.JobId">
            <summary>
            JobId
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDetailsDTO.EmployeeId">
            <summary>
            EmployeeId
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDetailsDTO.StartDateTime">
            <summary>
            StartDateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDetailsDTO.EndDateTime">
            <summary>
            EndDateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDetailsDTO.JobTypeName">
            <summary>
            JobTypeName
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDetailsDTO.EmployeeName">
            <summary>
            EmployeeName
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDetailsDTO.EmployeeNote">
            <summary>
            EmployeeNote
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobDTO">
            <summary>
            Model Used For Schedule Details on UserDashboard
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.SubGroupID">
            <summary>
            SubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.JobStartDate">
            <summary>
            Job Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.JobEndDate">
            <summary>
            Job End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.Hours">
            <summary>
            Sum Of Job Working Hours 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.Hours1">
            <summary>
            Sum Of Job Working Hours For Day 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.Hours2">
            <summary>
            Sum Of Job Working Hours For Day 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.Hours3">
            <summary>
            Sum Of Job Working Hours For Day 3
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.Hours4">
            <summary>
            Sum Of Job Working Hours For Day 4
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.Hours5">
            <summary>
            Sum Of Job Working Hours For Day 5
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.Hours6">
            <summary>
            Sum Of Job Working Hours For Day 6
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.NumberOfAssigned">
            <summary>
            Number of Assigned Employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.NumberOfInvalidAssigned">
            <summary>
            Number of Invalid Assigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobDTO.NumberOfRequiredEmployees">
            <summary>
            Number of required Employees
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobOfferMobileActionDTO">
            <summary>
            Used For Job offer mobile action response.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOfferMobileActionDTO.Message">
            <summary>
            job offer action message
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobOfferMobileActionDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobOffer.AcceptOrRejectJobOfferDTO">
            <summary>
            DTO used for employee acceptance or reject JobOffer
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.AcceptOrRejectJobOfferDTO.JobOfferID">
            <summary>
            JobOffer Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.AcceptOrRejectJobOfferDTO.IsAccepted">
            <summary>
            Indicator is offer accepted or rejected
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO">
            <summary>
            Model represents one item in reponse for Lst Of JobOffers
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.JobOfferID">
            <summary>
            Represents JobOfferID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.ScheduleName">
            <summary>
            Represents Schedule name where JobOffer created
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.SubGroupName">
            <summary>
            Represents SubGroup name where job is
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.JobTypeName">
            <summary>
            Jobs JobType name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.JobStartDateTime">
            <summary>
            Job StartDateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.JobEndDateTime">
            <summary>
            Job EndDateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.StatusName">
            <summary>
            JobOffer Current Status
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.JobId">
            <summary>
            Represents JobId
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.EmployeeGetsJobOffersDTO.IsActive">
            <summary>
            JobOffer Acive/Inactive Status
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobOffer.JobOfferDTO">
            <summary>
            This class represents job offer model on Job offering 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferDTO.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferDTO.EmployeeIDs">
            <summary>
            Employees which will be offered
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO">
            <summary>
            JobOffer model for loading Jobs and generating Notifications
            for offering Jobs on SubGroup or Schedule Level
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO.SubGroupID">
            <summary>
            SubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO.JobName">
            <summary>
            Job name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO.JobStartDateTime">
            <summary>
            Job Start DateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO.JobEndDateTime">
            <summary>
            Job End DateTime
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationForUserDTO">
            <summary>
            Model used for fireing notifications for users
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationForUserDTO.EmployeeName">
            <summary>
            Employee who accept JobOffer
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationForUserDTO.JobName">
            <summary>
            Job name From JobOffer
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationForUserDTO.JobStartDateTime">
            <summary>
            JobStartDateTime from Job in JobOffer
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationForUserDTO.JobEndDateTime">
            <summary>
            JobEndDateTime from Job in JobOffer
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationForUserDTO.ScheduleName">
            <summary>
            Schedule Name from Job in JobOffer
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationForUserDTO.SubGroupName">
            <summary>
            SubGroup Name from Job in JobOffer
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobOfferNotificationForUserDTO.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobOffer.JobsOfferDTO">
            <summary>
            Model used for JobOffers on Schedule or SubGroup Level
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobsOfferDTO.StartDate">
            <summary>
            Interval StartDate
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobsOfferDTO.EndDate">
            <summary>
            Interval EndDate
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobsOfferDTO.ScheduleID">
            <summary>
            Selected ScheduleID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobOffer.JobsOfferDTO.SubGroupID">
            <summary>
            Selected SubGroupID
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobStatusUpdateDTO">
            <summary>
            Object which holds all properties needed for updating jobStatuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobStatusUpdateDTO.RegularJobIDs">
            <summary>
            Regular Job Ids which should be updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobStatusUpdateDTO.CachedJobIDs">
            <summary>
            Cached Job Ids which should be updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobStatusUpdateDTO.TemplateJobIDs">
            <summary>
            Template Job Ids which should be updated
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobStatusUpdateDTO.#ctor">
            <summary>
            Constructor which initalize all properties to default values
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobStatusUpdateDTO.UpdateJobStatuses(ESolve.Entities.RepositoryContext)">
            <summary>
            All jobs which are in collections for updating statuses will be updated
            </summary>
            <param name="repositoryContext">Context which is connection to the database</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypeSkillCodeDTO">
            <summary>
            Represent model for assigned skill codes for selected jobtype[dropdowns in assigning jobtyperules to certain jobtype]
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeSkillCodeDTO.Name">
            <summary>
            Name of Dropdown
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeSkillCodeDTO.NameID">
            <summary>
            Selected SkillCodes in this Dropdown
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeSkillCodeDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeSkillCodeDTO.#ctor(System.String,ESolve.Entities.Models.IdNameDropDownModel[])">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="name">Dropdown Name</param>
            <param name="nameID">List of selected SkillCodes</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeSkillCodeDTO.Equals(System.Object)">
            <summary>
            Equal method
            </summary>
            <param name="obj">Object which will be compared with caller.</param>
            <returns>True if they are same, or false.</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeSkillCodeDTO.GetHashCode">
            <summary>
            Generate HashCode for object
            </summary>
            <returns>HashCode of object</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypeCalculationsDTO">
            <summary>
            Model used for calculations does Employee satisfies JobType Criteria
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.JobTypeID">
            <summary>
            Selected JobtypeID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.TimeUnitName">
            <summary>
            JobType Length Of Service TimeUnit Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.LengthOfService">
            <summary>
            TimeUnit name and value selected in property LengthOfService
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.IsLengthOfServiceNonEssential">
            <summary>
            Indicator if length of service is non-essential or not
            True if it is non-essential, false if it is essential
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.EssentialComparisonRules">
            <summary>
            Job type's essential comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.NonEssentialComparisonRules">
            <summary>
            Job type's non-essential comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.EssentialSkills">
            <summary>
            Job type's essential skills
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.EssentialAndNonEssentialSkills">
            <summary>
            Essential and non-essential skills
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.AllComparisonRules">
            <summary>
            All job's type comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCalculationsDTO.NonEssentialSkills">
            <summary>
            Non essential skills
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeCalculationsDTO.GetEmployeesWhichSatisfiesEssentialSkillCodes(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix})">
            <summary>
            For passed list of employeeIDs, method will check who of them have essential skills for current JobType.
            If list of employeeIDs is empty then we will get all employees from database who have essential skills.
            </summary>
            <param name="employeesIDs">List employees which will be checked does they have essential skills</param>
            <param name="repositoryContext">Repository context</param>
            <param name="skillMatrix">skill matrix context</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeCalculationsDTO.GetEmployeesWhichSatisfiesSkill(ESolve.Entities.RepositoryContext,ESolve.Entities.Models.JobTypeSkill[])">
            <summary>
            Get employees who satisfies essential skills
            </summary>        
            <param name="repositoryContext"></param>
            <param name="essentialSkills"></param>       
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO">
            <summary>
            Model for adding new or updating existing JobTypeCustomData
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.Id">
            <summary>
            JobCustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.JobTypeID">
            <summary>
            JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.CustomDataID">
            <summary>
            CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.CustomDataLookupID">
            <summary>
            CustomDataLookupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.NumberValue">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.TextValue">
            <summary>
            Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.CustomDataName">
            <summary>
            CustomData Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.CustomDataLookupValues">
            <summary>
            Values of CustomDataLookup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.CustomDataTypeName">
            <summary>
            CustomDataTypeName Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.String,System.Collections.Generic.List{ESolve.Entities.Models.CustomDataLookup},System.String)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="id">JobCustomData Primary Key</param>
            <param name="jobTypeID">JobType Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="numberValue">Number Value</param>
            <param name="textValue">Text Value</param>
            <param name="customDataName">Custom Data Name</param>
            <param name="customDataLookupValues">List of CustomDataLookup values</param>
            <param name="customDataTypeName">CustomDataTypeName Value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypeDTO">
            <summary>
            Job Type model which is used for showing data in DataTable
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeDTO.Id">
            <summary>
            Primary Key in Database
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeDTO.JobTypeName">
            <summary>
            Name of Job Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeDTO.EmployeeCount">
            <summary>
            Count of Employees which satisfie Job Type Rule of this Job Type
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeDTO.#ctor(System.Int64,System.String,System.Int64)">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="id">Primary Key in database</param>
            <param name="jobTypeName">Job Type Name</param>
            <param name="employeeCount">Count of employees which are suitable for this Job Type</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeDTO.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initialize Id and Name
            </summary>
            <param name="id">Primary Key in database</param>
            <param name="jobTypeName">Job type name</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeDTO.Equals(System.Object)">
            <summary>
            Method which check are two object same
            </summary>
            <param name="obj">Object with which we will compare caller.</param>
            <returns>True if are values are same, otherwise false</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeDTO.GetHashCode">
            <summary>
            Generates HashCode
            </summary>
            <returns>Class unique hash code</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypeFilterValueDTO">
            <summary>
            JobTypeFilterValueDTO object for filtering data in calendar page
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeFilterValueDTO.Id">
            <summary>
            JobType Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeFilterValueDTO.Name">
            <summary>
            JobType Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypesAndSubGroupDetailsDTO">
            <summary>
            Class contains properties of job type and sub group
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypesAndSubGroupDetailsDTO.JobTypeId">
            <summary>
            Represent Primary key of Job Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypesAndSubGroupDetailsDTO.Title">
            <summary>
            Represent Job Type Name as Title of Calendar Element
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypesAndSubGroupDetailsDTO.StartDate">
            <summary>
            Represent Sub-group Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypesAndSubGroupDetailsDTO.EndDate">
            <summary>
            Represent Sub-group End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypesAndSubGroupDetailsDTO.SubGroupName">
            <summary>
            Represent Name of sub-group
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypesAndSubGroupDetailsDTO.SubGroupID">
            <summary>
            Represents SubGroupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypesAndSubGroupDetailsDTO.JobName">
            <summary>
            Name of job
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO">
            <summary>
            Model used for calculating whether an Employee satisfies JobType Criteria, but within Template Jobs
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.#ctor(ESolve.Entities.DTOs.JobTypeCalculationsDTO)">
            <summary>
            Constructor that creates this model based on the non-template model.
            </summary>
            <param name="jobTypeCalculationsDTO"></param>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.JobTypeID">
            <summary>
            Selected JobtypeID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.EssentialComparisonRules">
            <summary>
            Job type's essential comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.NonEssentialComparisonRules">
            <summary>
            Job type's non-essential comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.EssentialSkills">
            <summary>
            Job type's essential skills
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.EssentialAndNonEssentialSkills">
            <summary>
            Essential and non-essential skills
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.AllComparisonRules">
            <summary>
            All job's type comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.NonEssesntialSkill">
            <summary>
            Job type's non essential skills
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.GetEmployeesWhichSatisfiesEssentialSkillCodes(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.Models.SkillMatrix})">
            <summary>
            For passed list of employeeIDs, method will check who of them have essential skills for current JobType.
            If list of employeeIDs is empty then we will get all employees from database who have essential skills.
            </summary>
            <param name="employeesIDs">List employees which will be checked does they have essential skills</param>
            <param name="repositoryContext">Repository context</param>
            <param name="skillMatrix">Skills Matrix</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeTemplateCalculationsDTO.GetEmployeesWhichSatisfiesSkill(ESolve.Entities.RepositoryContext,ESolve.Entities.Models.JobTypeSkill[])">
            <summary>
            Get employees who satisfies essential skills
            </summary>        
            <param name="repositoryContext"></param>
            <param name="essentialSkills"></param>        
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypeValueDTO">
            <summary>
            JobType value model
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.Id">
            <summary>
            Job type's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.JobTypeName">
            <summary>
            Job Type Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.SkillCodes">
            <summary>
            All Skill codes  for combobox
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.EssentialSkillsSelected">
            <summary>
            Selected SkillCodes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.NonEssentialSkillsSelected">
            <summary>
            Selected SkillCodes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.AllowedTrade">
            <summary>
            Allowed Trades
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.TimeUnit">
            <summary>
            Time Units for combobox
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.TimeUnitValue">
            <summary>
            Time unit value for selected Time Unit
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.IsTimeUnitNonEssential">
            <summary>
            Indicator if lenght of service is essential or non-essential
            True if it is non essential, false if it is not.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.TimeUnitSelectedID">
            <summary>
            Selected Time Unit from combobox
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.ComparisonMode">
            <summary>
            Comparison mode
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.EmployeeFields">
            <summary>
            Employee fields
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.CustomDataFields">
            <summary>
            Custom Data Fields
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.EssentialComparisonRules">
            <summary>
            Essential comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.NonEssentialComparisonRules">
            <summary>
            Non-essential comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.AreSkillsUpdated">
            <summary>
            Indicatior if there is changes on skills
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.LoneWorkerJob">
            <summary>
            Indicator if job type support lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.AttendanceConfirmation">
            <summary>
            Indicator if job type support attendace confirmat
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.AttendanceTimeBeforeStart">
            <summary>
             Time Before Job Start for attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValueDTO.AttendanceResponseWindow">
            <summary>
            AttendanceConfirmation response window
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeValueDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeValueDTO.#ctor(System.Int64,System.String,ESolve.Entities.Models.SkillCode[],ESolve.Entities.DTOs.JobTypeSkillCodeDTO[],ESolve.Entities.DTOs.JobTypeSkillCodeDTO[],System.Boolean,ESolve.Entities.Models.IdNameDropDownModel[],System.Nullable{System.Int32},System.Nullable{System.Int64},System.Boolean,ESolve.Entities.Models.IdNameDropDownModel[],ESolve.Entities.Models.IdNameDropDownModel[],ESolve.Entities.DTOs.TypeNameDTO[],ESolve.Entities.Models.IdNameDropDownModel[],System.Collections.Generic.List{ESolve.Entities.DTOs.ComparisonModeDTO},System.Collections.Generic.List{ESolve.Entities.DTOs.ComparisonModeDTO},System.Boolean,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">Job type's primary key</param>
            <param name="jobTypeName">Job type's name</param>
            <param name="skillCodes">All skills</param>
            <param name="essentialSkillsSelected">Selected essential skills</param>
            <param name="nonEssentialSkillsSelected">Selected non-essential skills</param>
            <param name="allowedTrades">Indicator if job type allows trades</param>
            <param name="timeUnit">Time unit</param>
            <param name="timeUnitValue">time unit's value</param>
            <param name="timeUnitSelectedID">Select time unit primary key</param>
            <param name="isTimeUnitNonEssential">Select time unit primary key</param>
            <param name="comprasionMode">Comparsion mode: Set value / Custom data</param>
            <param name="operator">Comparsion rules' operators</param>
            <param name="employeeFields">Comparsion rules' employee fields</param>
            <param name="customDataFields">Custom data fields for comparison rules</param>
            <param name="essentialComparisonRules">Job type's essential comparison rules</param>
            <param name="nonEssentialComparisonRules">Job type's non - essential comparison rules</param>
            <param name="loneWorkerJob">Job type's lone worker job boolean field</param>
            <param name="loneWorkerRecurringIntervals">Job type's lone worker's recurring intervals</param>
            <param name="loneWorkerResponseWindow">Job type's lone worker's response window</param>
            <param name="attendanceConfirmation">Indicator if job type support attendace confirmat</param>
            <param name="timeBeforeJobStart">Time Before Job Start for attendance confirmation</param>
            <param name="attendanceConfirmationResponseWindow">AttendanceConfirmation response window</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobTypeValuesV2DTO">
            <summary>
            JobTypeValue new DTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.Id">
            <summary>
            Primary Key in Database
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.JobTypeName">
            <summary>
            Job Type Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.SkillCodes">
            <summary>
            All Skill codes  for combobox
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.SkillCodesSelected">
            <summary>
            Selected SkillCodes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.AllowedTrades">
            <summary>
            Allowed Trades
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.TimeUnits">
            <summary>
            Time Units for combobox
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.TimeUnitValue">
            <summary>
            Time unit value for selected Time Unit
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.TimeUnitSelectedID">
            <summary>
            Selected Time Unit from combobox
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.ComparisonModes">
            <summary>
            Comparison mode
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.Operators">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.EmployeeFields">
            <summary>
            Employee fields
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.CustomDataFields">
            <summary>
            Custom Data Fields
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.ComparisonValues">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobTypeValuesV2DTO.JobTypeCustomDatas">
            <summary>
            JobTypeCustomDatas
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeValuesV2DTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobTypeValuesV2DTO.#ctor(System.Int64,System.String,ESolve.Entities.Models.IdNameDropDownModel[],ESolve.Entities.DTOs.JobTypeSkillCodeDTO[],System.Boolean,ESolve.Entities.Models.IdNameDropDownModel[],System.Nullable{System.Int32},System.Nullable{System.Int64},ESolve.Entities.Models.IdNameDropDownModel[],ESolve.Entities.Models.IdNameDropDownModel[],System.String[],System.Collections.Generic.List{ESolve.Entities.DTOs.JobTypeCustomDataAddEditDTO},System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id"></param>
            <param name="jobTypeName"></param>
            <param name="skillCodes"></param>
            <param name="skillCodesSelected"></param>
            <param name="allowedTrades"></param>
            <param name="timeUnit"></param>
            <param name="timeUnitValue"></param>
            <param name="timeUnitSelectedID"></param>
            <param name="comprasionMode"></param>
            <param name="operator"></param>
            <param name="employeeFields"></param>
            <param name="customDataFields"></param>
            <param name="value"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.JobWithCustomDataDTO">
            <summary>
            Model used for adding job with custom data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Id">
            <summary>
            Job primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Name">
            <summary>
            Job Name [Unique on subgroup level]
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.JobStartDateTime">
            <summary>
            Job Start Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.JobEndDateTime">
            <summary>
            Job End Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Day">
            <summary>
            Property used for Template Jobs. Indicates which ordered day
            within the viewed Template Schedule's week, this Template Job 
            belongs to.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Hours">
            <summary>
            Job hours. [No of effective hours for that job]
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManualEditedHours">
            <summary>
            Property which indicates would App calculate Hours.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Hours1">
            <summary>
            Hours of day 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManualEditedHours1">
            <summary>
            Indicator if hours field for day 1 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Hours2">
            <summary>
            Hours of day 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManualEditedHours2">
            <summary>
            Indicator if hours field for day 2 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Notes">
            <summary>
            Job Notes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.NoOfEmployeesRequired">
            <summary>
            Number of required Employees for Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.AllowedTrade">
            <summary>
            Trade block
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManualEditedAllowedTrade">
            <summary>
            Flag that indicates if allowed trade field is manual edited or not.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.IsConcurrent">
            <summary>
            Is Job concurent
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ReferenceArea">
            <summary>
            Concurrent job's reference area for calculation associated emplployees.
            Possible values are: Schedule / Subgroup / Subgroup Lower Subgroupss
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.SortOrder">
            <summary>
            Sort order.s
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.IsCriticalTask">
            <summary>
            Is Job Critical
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Approved">
            <summary>
            Is job approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.NumberOfValidAssigned">
            <summary>
            Number of valid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.NumberOfInvalidAssigned">
            <summary>
            Number of invalid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.CustomData">
            <summary>
            Job Custom Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.SubGroupID">
            <summary>
            SubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.JobTypeID">
            <summary>
            JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.JobStatusID">
            <summary>
            JobStatus Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.CanOfferJob">
            <summary>
            Indicator can user offer jobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ShiftID">
            <summary>
            Shift Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.LoneWorkerJob">
            <summary>
            Indicator if job is lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManuallyEditedLoneWorkerJob">
            <summary>
            Indicator if lone worker job is manullay updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManuallyEditedReccuringIntervals">
            <summary>
            Indicator if reccuring intervals is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManuallyEditedResponseWindow">
            <summary>
            Indicator if response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.AttendanceConfirmation">
            <summary>
            Indicator if job need attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManuallyEditedAttendanceConfirmation">
            <summary>
            Indicator if attendance confirmation is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.AttendanceTimeBeforeStart">
            <summary>
            Time Before Job Start for the attendance confirmation
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManuallyEditedAttendanceTimeBeforeStart">
            <summary>
            Indicator if Time Before Job Start is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.AttendanceResponseWindow">
            <summary>
            Attendance Confirmation Response Window
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.ManuallyEditedAttendanceResponseWindow">
            <summary>
            Indicator if attendance confirmation response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JobWithCustomDataDTO.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobWithCustomDataDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobWithCustomDataDTO.#ctor(ESolve.Entities.Models.Job,System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO})">
            <summary>
            Create JobWithCustomDataDTO based on passed job and job's custom data
            </summary>
            <param name="job"></param>
            <param name="jobCustomDatas"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobWithCustomDataDTO.#ctor(ESolve.Entities.Models.TemplateJob,System.Collections.Generic.List{ESolve.Entities.DTOs.CustomDataDTOs.CustomDataDTO})">
            <summary>
            Create JobWithCustomDataDTO based on passed job and job's custom data
            </summary>
            <param name="job"></param>
            <param name="jobCustomDatas"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobWithCustomDataDTO.MapCurrentObjectToJobentity">
            <summary>
            Object caller will be mapped on new Job Entity
            </summary>
            <returns>New Job object</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.JobWithCustomDataDTO.MapCurrentObjectToTemplateJobEntity">
            <summary>
            Object caller will be mapped on new TemplateJob Entity
            </summary>
            <returns>New Job object</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.JSONErrorDTO">
            <summary>
            Represent model which is used for returnig Errors 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JSONErrorDTO.Key">
            <summary>
            JSON Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.JSONErrorDTO.Value">
            <summary>
            Error Description
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JSONErrorDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.JSONErrorDTO.#ctor(System.String,System.String)">
            <summary>
            Constructor which initialzie all properties.
            </summary>
            <param name="key">Key</param>
            <param name="value">Message Value</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.JSONErrorDTO.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">Object which will be compared</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.JSONErrorDTO.GetHashCode">
            <summary>
            Generating HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.LicenseDTO">
            <summary>
            License DTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.InstallationID">
            <summary>
            Installation ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.BusinessID">
            <summary>
            Customer Business ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.BusinessName">
            <summary>
            Customer Business Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.RosteringVersion">
            <summary>
            Rostering Version
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.MaxNumberOfAutoRosteringLicense">
            <summary>
            Maximum number of the auto rostering license
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.StartDate">
            <summary>
            Start Date of license
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.ExpiryDate">
            <summary>
            Expiry Date of license
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.ApiKey">
            <summary>
            Super admin's api key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LicenseDTO.IsLicensed">
            <summary>
            Is Licensed
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.LoadCalendarDTO">
            <summary>
            Model for Calendar Preview
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoadCalendarDTO.RepositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoadCalendarDTO.CalendarViewFilterModel">
            <summary>
            Calendar Filter Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoadCalendarDTO.SubGroupManager">
            <summary>
            SubGroup Manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoadCalendarDTO.JobAvailabilityManager">
            <summary>
            JobAvailability Manager
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.LoggedInUser">
            <summary>
            DTO object which represents LoggedIn User
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoggedInUser.Role">
            <summary>
            Current User Role
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoggedInUser.Username">
            <summary>
            Current User Username
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoggedInUser.UserID">
            <summary>
            Current User UserID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoggedInUser.ProfileID">
            <summary>
            Current User ProfileID
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.LoginDTO">
            <summary>
            DTO for user login
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.Username">
            <summary>
            Employee's username or email for login
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.OldPassword">
            <summary>
            Password for user login.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.NewPassword">
            <summary>
            New Password if user changes password
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.IsSuccessfullyLoggedIn">
            <summary>
            User is successfully logged in
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.Message">
            <summary>
            Login message
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.IsFirstLogin">
            <summary>
            Indicates that user is logging in for the first time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.IsForgottenPassword">
            <summary>
            Indicates that user want to reset forgotten password.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.SendSystemAccessMail">
            <summary>
            Indicates that manager want to send Advanced People access email to employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.NameAndSurname">
            <summary>
            Name and surname
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.Image">
            <summary>
            User's image
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.AccessToken">
            <summary>
            Upon successful login, it will represent the corresponding JWT.
            Otherwise should remain empty.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.IsChangePasswordPage">
            <summary>
            Flag indicates if reseting password is call from account page where user can change password
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.CustomerName">
            <summary>
            CustomerName for appsettings
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.Id">
            <summary>
            Repsesents user's hashed email
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.RosteringAppVersion">
            <summary>
            Rostering App Version
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.EmailAddress">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.IsSuperAdmin">
            <summary>
            Whether the logged in user is super admin or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.HasLinkedEmployeeAccess">
            <summary>
            Whether the logged in user has Linked Employee Access
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.IsLicensed">
            <summary>
            Is Licensed
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.ASSOAccessToken">
            <summary>
            ASSO Access token
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.MobileDeviceId">
            <summary>
            mobile device Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.SendAccessDetailMail">
            <summary>
            Send access details mail
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoginDTO.IsSSOUserAdmin">
            <summary>
            Whether the logged in user has SSO user admin right
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.LoginDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.LoginDTO.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor which initalize parameters needed for reset employee's password
            </summary>
            <param name="isSuccessfullyLoggedIn"></param>
            <param name="message"></param>
            <param name="isFirstLogin"></param>
            <param name="nameAndSurname"></param>
            <param name="image"></param>
            <param name="customerName"></param>
            <param name="id"></param>
            <param name="rosteringAppVersion"></param>
        </member>
        <member name="M:ESolve.Entities.DTOs.LoginDTO.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,ESolve.Entities.DTOs.TokenResponseDTO,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Constructor used for successful login.
            </summary>
            <param name="isSuccessfullyLoggedIn">Indicates that the login is successful.</param>
            <param name="isFirstLogin">Indicates whether or not this is the first login.</param>
            <param name="message">Message for the user.</param>
            <param name="nameAndSurname">User's name and surname.</param>
            <param name="image">User's image.</param>
            <param name="accessToken">User's JWT.</param>
            <param name="customerName">User's Customer name.</param>
            <param name="id">User's hashed email</param>
            <param name="rosteringAppVersion">App's version</param>
            <param name="isSuperAdmin">Whether logged in user is super admin or not</param>
            <param name="hasLinkedEmployeeAccess"></param>
            <param name="isLicensed">license is valid or not</param>
            <param name="isSSOUserAdmin">Is SSO user admin</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.LoginDTO.#ctor(System.String,System.String)">
            <summary>
            Constructor which initalize parameters needed for user login
            </summary>
            <param name="username"></param>
            <param name="oldPassword"></param>>
        </member>
        <member name="T:ESolve.Entities.DTOs.LoneWorkerAlertDTO">
            <summary>
            DTO for lone worker alert
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.Id">
            <summary>
            Lone Worker Alert primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.AlertDateTime">
            <summary>
            DateTime when alert is sent to lone worker manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.JobStartDateTime">
            <summary>
            Job's start date for which alert is sent
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.JobType">
            <summary>
            Job Type's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.Employee">
            <summary>
            Firstname and Surname of Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.IsOpened">
            <summary>
            Lone Worker Check In status
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.Notes">
            <summary>
            Notes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.JobID">
            <summary>
            Job's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerAlertDTO.EmployeeID">
            <summary>
            Employee's primary key
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.LoneWorkerCheckInDTO">
            <summary>
            DTO for lone worker check in
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerCheckInDTO.EmployeeID">
            <summary>
            Employee's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerCheckInDTO.JobID">
            <summary>
            Job's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerCheckInDTO.DateNotificationCreated">
            <summary>
            Date when notification for lone worker check in is created
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.Id">
            <summary>
            Lone worker transaction log Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.Schedule">
            <summary>
            Schedule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.Date">
            <summary>
            Lone Worker Alerts Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.Job">
            <summary>
            Job Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.Employee">
            <summary>
            Employee Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.FirstNotificationDateTime">
            <summary>
            First Notification Date Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.SecondNotificationDateTime">
            <summary>
            Second Notification Date Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.EmployeeResponse">
            <summary>
            Employee Response
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.ManagerNotification">
            <summary>
            Manager Notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.ManagerName">
            <summary>
            Manager's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.AdminNotification">
            <summary>
            Admin Notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LoneWorkerTransactionLogDTO.AdminName">
            <summary>
            Admin's name
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.LongLongDTO">
            <summary>
            DTO used for two primary kies.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LongLongDTO.PrimaryKeyOne">
            <summary>
            First Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.LongLongDTO.PrimaryKeyTwo">
            <summary>
            Second Database Primary Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.LongLongDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.LongLongDTO.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="primaryKeyOne">First Database Primary Key</param>
            <param name="primaryKeyTwo">Second Database Primary Key</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileAPI.LinkInfoDTO">
            <summary>
            LinkInfoDTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LinkInfoDTO.Id">
            <summary>
            Represent LinkInfo Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LinkInfoDTO.SubGroupId">
            <summary>
            Represent SubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LinkInfoDTO.ScheduleId">
            <summary>
            Represent Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LinkInfoDTO.JobId">
            <summary>
            Represent Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LoginDetailDTO.NameAndSurname">
            <summary>
            Name and surname
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LoginDetailDTO.Image">
            <summary>
            User's image
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LoginDetailDTO.AccessToken">
            <summary>
            Upon successful login, it will represent the corresponding JWT.
            Otherwise should remain empty.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LoginDetailDTO.Id">
            <summary>
            Repsesents user's hashed email
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LoginDetailDTO.RosteringAppVersion">
            <summary>
            Rostering App Version
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LoginDetailDTO.EmailAddress">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LoginDetailDTO.IsSuperAdmin">
            <summary>
            Whether the logged in user is super admin or not
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.LoginDetailDTO.IsFirstLogin">
            <summary>
            Indicates that user is logging in for the first time
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileAPI.MobileApiSearchParameters">
            <summary>
            MobileApiSearchParameters
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MobileApiSearchParameters.connectionMappingId">
            <summary>
            6-digit unique code
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MobileApiSearchParameters.customerReferenceId">
            <summary>
            customer reference name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MobileApiSearchParameters.mobileApiUrl">
            <summary>
            Web app url
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileAPI.MobileLoginRequestDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MobileLoginRequestDTO.Username">
            <summary>
            Employee's username or email for login
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MobileLoginRequestDTO.Password">
            <summary>
            Password for Employee login.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MobileLoginRequestDTO.NewPassword">
            <summary>
            New Password if Employee changes password
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MobileLoginRequestDTO.MobileDeviceId">
            <summary>
            Mobile Device Id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileAPI.MobileResetPasswordDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MobileResetPasswordDTO.Email">
            <summary>
            Employee's email for Reset Password
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.AllRecords.data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.MobileAppMapping.customerName">
            <summary>
            Customer Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.MobileAppMapping.customerUrl">
            <summary>
            Url of the UI
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.MobileAppMapping.code">
            <summary>
            Unique code
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.MobileConnectionRecord._id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.MobileConnectionRecord.customerName">
            <summary>
            Customer name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.MobileConnectionRecord.customerUrl">
            <summary>
            Customer Url
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.MobileConnectionRecord.code">
            <summary>
            Unique code
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.MosaicData.MobileConnectionRecord.lastUpdated">
            <summary>
            Last updated datetime
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO">
            <summary>
            Notification detail DTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.Id">
            <summary>
            PushNotification Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.NotificationTitle">
            <summary>
            Represent title of notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.NotificationContent">
            <summary>
            Represent content of notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.ActionRequired">
            <summary>
            Represents whether any action is required on the notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.IsReaded">
            <summary>
            Represents whether the notification has been reviewed
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.DateCreated">
            <summary>
            Represents when the notification was created
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.LinkTo">
            <summary>
            Represents the topic of the link
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.LinkInfo">
            <summary>
            Represents the LinkInfo
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.NotificationDetailDTO.Category">
            <summary>
            Category of notification
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileAPI.OfferJobForTradeDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.OfferJobForTradeDTO.EmployeeId">
            <summary>
            Employee Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.OfferJobForTradeDTO.JobId">
            <summary>
            Job Id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileAPI.SubGroupIdNameDTO">
            <summary>
            SubGroupIdName
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.SubGroupIdNameDTO.subGroupLists">
            <summary>
            List of subgroup Id and Name
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileAPI.SubGroupsRequestDTO">
            <summary>
            Sub group request 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.SubGroupsRequestDTO.startDate">
            <summary>
            Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.SubGroupsRequestDTO.endDate">
            <summary>
            End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileAPI.SubGroupsRequestDTO.employeeId">
            <summary>
            Employee Id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MobileCalendarTimeLineViewDTO">
            <summary>
            Model which will be returned when employee uses Mobile
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileCalendarTimeLineViewDTO.ScheduleName">
            <summary>
            Jobs Schedule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileCalendarTimeLineViewDTO.Hours">
            <summary>
            Jobs Hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileConnectionMapping.customerName">
            <summary>
            Customer Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MobileConnectionMapping.customerUrl">
            <summary>
            Url of the application
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.MyAssignedJobs">
            <summary>
            Class contains properties of all jobs assigned and all jobs traded by logged in employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.Id">
            <summary>
            Represent Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.Status">
            <summary>
            Job status name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.PrimaryStatusColor">
            <summary>
            Job Status primary colour
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.SecondaryStatusColor">
            <summary>
            Job Status secondary colour
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.JobName">
            <summary>
            Represent Name of Selected Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.JobTypeID">
            <summary>
            Represents JobTypeID Foreign Key in Job Entity
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.SubGroupName">
            <summary>
            Represent Sub-group name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.OfferedForTrade">
            <summary>
            Flag to indicate if job is offered for trade
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.CanBeTraded">
            <summary>
            Indicator that presents if job allows trade
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.JobStartDateTime">
            <summary>
            Job's start date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.JobEndDateTime">
            <summary>
            Job's end date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.JobDescription">
            <summary>
            Job description - display notes added in job comments
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.MyAssignedJobs.EmployeeOwnTradeOfferId">
            <summary>
            Employee own trade offer id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.OrganisationalGroupDTO">
            <summary>
            Class Represent custom data for organisational group.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OrganisationalGroupDTO.EmployeeDataID">
            <summary>
            Respresent employee id.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OrganisationalGroupDTO.FieldID">
            <summary>
            Represent organisational group id.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OrganisationalGroupDTO.FieldName">
            <summary>
            Represent oranisational group name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OrganisationalGroupDTO.FieldValues">
            <summary>
            Represent list of id and name of one group from the list
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OrganisationalGroupDTO.IsSelectedAll">
            <summary>
            Represents whether all lists have been selected
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.OverlappingJobDTO">
            <summary>
            DTO for information about overlapping job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OverlappingJobDTO.JobSchedule">
            <summary>
            Job schedule's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OverlappingJobDTO.JobType">
            <summary>
            Job type's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OverlappingJobDTO.JobStartDate">
            <summary>
            Job's start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OverlappingJobDTO.JobStartTime">
            <summary>
            Job's start time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OverlappingJobDTO.JobEndTime">
            <summary>
            Job's end time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.OverlappingJobDTO.User">
            <summary>
            User's first name and last name who overrides employees
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.PermissionDTO">
            <summary>
            Model used for permissions
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.PermissionDTO.Profile">
            <summary>
            Profile
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.PermissionDTO.PanelPermissions">
            <summary>
            PanelPermisions
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.PermissionDTO.#ctor(ESolve.Entities.Models.Profile,System.Collections.Generic.List{ESolve.Entities.Models.PanelPermission})">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="Profile">Profile</param>
            <param name="PanelPermisions">Profile's panel permission</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ProfileDTO">
            <summary>
            DTO used for retreiving all profiles from database
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.ProfileDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ProfileDTO.Name">
            <summary>
            Employee Profile Name
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ProfileDTO.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">Profile's primary key.</param>
            <param name="name">Profile's name</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.RankingDTO">
            <summary>
            DTO for creating/updating new Ranking
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.Id">
            <summary>
            ranking Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.Name">
            <summary>
            Ranking Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.Active">
            <summary>
            is ranking active on selected schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.Order">
            <summary>
            Ranking Order
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.RankingTypeID">
            <summary>
            Ranking type Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.ScheduleID">
            <summary>
            Scheduler Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.RankingRuleID">
            <summary>
            RankingRule Primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.ReverseOrder">
            <summary>
            Is Reverse Order of rankings
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.DateRange">
            <summary>
            Date Range
            dropdown list
            values - Day / Week / Month / Pay period / Custom
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.Offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.BaseDate">
            <summary>
            Base Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.BaseDateRange">
            <summary>
            Base Date Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.DayOfWeek">
            <summary>
            Day Of Week
            dropdown list
            values - Monday / Tuesday / Wednesday / Thursday / Friday / Saturday / Sunday
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.CountOvernights">
            <summary>
            Count Overnights
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.JobStartFrom">
            <summary>
            Job Start From
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.JobStartTo">
            <summary>
            Job Start To
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.JobEndFrom">
            <summary>
            Job End From
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.JobEndTo">
            <summary>
            Job End To
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.ComparisonMode">
            <summary>
            Comparasion Mode
            dropdown list
            values - Set Value / Custom Data / No Comparison
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.ComparisonValue">
            <summary>
            Comparasion Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.ComparisonValues">
            <summary>
            List of comparison values
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.EmployeeField">
            <summary>
            Employee field for comaprison
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.RestrictedToJobTypeID">
            <summary>
            Selected JobType ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTO.CustomDataID">
            <summary>
            Selected CustomData ID
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.RankingDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.RankingDTO.#ctor(System.Int64,System.String,System.Int32,System.Boolean,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">Ranking ID.</param>
            <param name="name">Ranking name.</param>
            <param name="order">Ranking order.</param>
            <param name="active">Ranking can be active or inactive.</param>
            <param name="rankingTypeID">Selected ranking type.</param>
            <param name="scheduleID">Selected schedule.</param>
            <param name="employeeID">Employee who creates ranking.</param>
            <param name="rankingRuleID">Ranking rule.</param>
            <param name="reverseOrder">Value of reverse order.</param>
            <param name="dateRange">Value of date range.</param>
            <param name="offset">Value of offset.</param>
            <param name="amount">Value of amount.</param>
            <param name="baseDate">Value of base date.</param>
            <param name="baseDateRange">Value of base date range.</param>
            <param name="dayOfWeek">Value of dayOfWeek</param>
            <param name="countOvernights">Value of count overnights.</param>
            <param name="jobStartFrom">value of job start from.</param>
            <param name="jobStartTo">Value of job start to.</param>
            <param name="jobEndFrom">Value of job end from.</param>
            <param name="jobEndTo">Value of job end to.</param>
            <param name="comparasionMode">Value of comparasion mode.</param>
            <param name="comparasionValue">Value of comparasion.</param>
            <param name="operator">Indicator if operator is = or !=</param>
            <param name="employeeField">Employee field for comparison</param>
            <param name="customDataID">Selected custom data</param>
            <param name="restrictedToJobTypeID">Selected job type.</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.RankingListViewDTO">
            <summary>
            DTO for rankings view for selected schedule.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingListViewDTO.Id">
            <summary>
            Ranking ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingListViewDTO.Name">
            <summary>
            Ranking Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingListViewDTO.Active">
            <summary>
            is ranking active on selected schedule
            </summary>
        </member>
        <member name="F:ESolve.Entities.DTOs.RankingListViewDTO.RankingTypeName">
            <summary>
            Name of selected ranking type.
            </summary>
        </member>
        <member name="F:ESolve.Entities.DTOs.RankingListViewDTO.Order">
            <summary>
            Ranking order
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.RankingListViewDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.RankingListViewDTO.#ctor(System.Int64,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">Ranking ID.</param>
            <param name="name">Ranking name.</param>
            <param name="active">Ranking can be active or inactive.</param>
            <param name="rankingTypeName">Name of selected type. </param>
            <param name="order">Value for ranking order.</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO">
            <summary>
            DTO used to send ranking rule to autosolve part
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.ReverseOrder">
            <summary>
            Is Reverse Order of rankings
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.DateRange">
            <summary>
            Date Range
            dropdown list
            values - Day / Week / Month / Pay period / Custom
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.Offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.BaseDate">
            <summary>
            Base Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.BaseDateRange">
            <summary>
            Base Date Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.DayOfWeek">
            <summary>
            Day Of Week
            dropdown list
            values - Monday / Tuesday / Wednesday / Thursday / Friday / Saturday / Sunday
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.CountOvernights">
            <summary>
            Count Overnights
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.JobStartFrom">
            <summary>
            Job Start From
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.JobStartTo">
            <summary>
            Job Start To
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.JobEndFrom">
            <summary>
            Job End From
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.JobEndTo">
            <summary>
            Job End To
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.ComparisonMode">
            <summary>
            Comparasion Mode
            dropdown list
            values - Set Value / Custom Data / No Comparison
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.ComparisonValue">
            <summary>
            Comparasion Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.ComparisonValues">
            <summary>
            Comparison Values form tblRankingComparisonValues
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.Operator">
            <summary>
            Comparison rule's operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.EmployeeField">
            <summary>
            Comaprison rule's operator, true if operator is =
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.RestrictedToJobTypeID">
            <summary>
            Restricted Job Type Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingDTOs.RankingRuleDTO.CustomDataID">
            <summary>
            Custom data's primary key
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.RankingTypeDTO">
            <summary>
            DTO for getting fields based on ranking type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingTypeDTO.JobType">
            <summary>
            All job types
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RankingTypeDTO.RankingType">
            <summary>
            Ranking type
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.RankingTypeDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.RankingTypeDTO.#ctor(System.Collections.Generic.IEnumerable{ESolve.Entities.Models.JobType},ESolve.Entities.Models.RankingType)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="jobTypes">jobTypes for dropdown</param>
            <param name="rankingType">Selected ranking type</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO">
            <summary>
            DTO for register or deregister mobile device token
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO.EmployeeId">
            <summary>
            Employee id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO.IsUser">
            <summary>
            IsUser - 1 for User, 0 for Employee
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO.DeviceToken">
            <summary>
            Mobile device token
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO.RegisterDevice">
            <summary>
            Register - 1 or de-register device - 0
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO.Platform">
            <summary>
            Specifies the device is android or iOS
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO.DeviceIdentifier">
            <summary>
            Specifies device Id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO">
            <summary>
            Model for unassigning Employees from Job
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO.Id">
            <summary>
            IEntity Implementation
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO.EmployeeID">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO.JobID">
            <summary>
            JobID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO.CanBeUnassigned">
            <summary>
            Indicator for whether an Employee can be unassigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO.Cached">
            <summary>
            Is item in cach
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.RemoveEmployeeAssigmentDTO.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">Assigment ID</param>
            <param name="employeeID">Employee ID</param>
            <param name="jobID">Job Id</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ReportDataDTOs">
            <summary>
            Class used for providing data grouped by job type to schedule calendar page
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.Id">
            <summary>
            Represent id of report data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.ReportType">
            <summary>
            Represent id and name of report type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.SelectedSchedules">
            <summary>
            Represent id and name of selected schedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.StartDate">
            <summary>
            Represents the beginning of the report period
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.EndDate">
            <summary>
            Represents the end of the report period
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.SelectedDateAll">
            <summary>
            Represents whether all dates have been selected
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.Employees">
            <summary>
            List of selected employees, id and names
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.EmployeesSelectedAll">
            <summary>
            Represents whether all employees have been selected
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.ReportGroups">
            <summary>
            Represent id and name of report groups
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.EmployeeData">
            <summary>
            Represent organisational groups
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ReportDataDTOs.AdditionalOption">
            <summary>
            Represents the format in which the time will be printed
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.RulesBrokenDTO">
            <summary>
            Model with information about rules that employee broke
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RulesBrokenDTO.JobName">
            <summary>
            Job's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RulesBrokenDTO.JobStartTime">
            <summary>
            Job's start time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RulesBrokenDTO.JobEndTime">
            <summary>
            Job's end time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RulesBrokenDTO.Day">
            <summary>
            Day from template
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RulesBrokenDTO.JobStartDate">
            <summary>
            Job's start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RulesBrokenDTO.Employees">
            <summary>
            Employees that are break rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.RulesBrokenDTO.JobID">
            <summary>
            New job's primary key
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ScheduleApprovalDetailsDTO">
            <summary>
            ScheduleApprovalDetailsDTO the model used to display submitted schedules details
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDetailsDTO.Header">
            <summary>
            Represents a heading for the details of the submitted topic
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDetailsDTO.IsSchedule">
            <summary>
            Represents whether the item is a schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDetailsDTO.StartDateTime">
            <summary>
            Represents the beginning of the item
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDetailsDTO.EndDateTime">
            <summary>
            Represents the ending for an item
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDetailsDTO.Status">
            <summary>
            Represent status of the item
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ScheduleApprovalDTO">
            <summary>
            DTO used for retreiving all schedule from database
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.Id">
            <summary>
            Represent id of ScheduleApprovalDTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.ScheduleId">
            <summary>
            Represent id of schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.SubGroupId">
            <summary>
            Represent id of subGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.ScheduleName">
            <summary>
            Represents the name of the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.StartDateTime">
            <summary>
            Represents the date from which the schedule begins
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.EndDateTime">
            <summary>
            Represents the date from which the schedule ends
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.JobSlots">
            <summary>
            Represents the number of slots for jobs within the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.Assigned">
            <summary>
            Represents the number of assigned within the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.UnAssigned">
            <summary>
            Represents the number of unassigned within the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.Invalid">
            <summary>
            Represents the number of invalid assigned within the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.TargetsNotMet">
            <summary>
            Represents the number of unemployed employees [Not Implemented -> It Will be implemented in Later Stages]
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.Budget">
            <summary>
            Represents the budget from the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.IsSchedule">
            <summary>
            Represent are item schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.ScheduleSubGroupName">
            <summary>
            Pure name of the schedule or subGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.IsSubmited">
            <summary>
            Represents whether the subgroup has been submitted
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.IsApproved">
            <summary>
            Represents whether the subgroup is approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.IsReject">
            <summary>
            Represents whether the subgroup was rejected
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleApprovalDTO.currentView">
            <summary>
            Represents the current view of approval schedule
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO">
            <summary>
            Model which is used for adding new and updating Existing Schedule CustomData
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.Id">
            <summary>
            ScheduleCustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.ScheduleID">
            <summary>
            Schedule PrimaryKey
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.CustomDataID">
            <summary>
            CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.Number">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.Text">
            <summary>
            Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.LookupID">
            <summary>
            Represents selected CustomDataLookupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.CustomDataLookupValues">
            <summary>
            Values of CustomDataLookup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.CustomDataName">
            <summary>
            CustomDataName Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.CustomDataTypeName">
            <summary>
            CustomDataTypeName Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ScheduleCustomDataAddEditDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Double},System.String,System.Nullable{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.CustomDataLookup},System.String,System.String)">
            <summary>
            Constructor which is used to initialize all properties
            </summary>
            <param name="id">ScheduleCustomData Primary Key</param>
            <param name="scheduleID">Schedule PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="lookupID">CustomDataLookup Primary Key</param>
            <param name="customDataLookupValues">List of CustomDataLookup values</param>
            <param name="customDataName">CustomDataName Value</param>
            <param name="customDataTypeName">CustomDataTypeName Value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO">
            <summary>
            DTO with permission for schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.Id">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.Name">
            <summary>
            Schedule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.StartDate">
            <summary>
            Schedule Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.EndDate">
            <summary>
            Schedule End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.CanAccessSchedule">
            <summary>
            Permission indicating whether a User can access the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.CanChangeScheduleStructure">
            <summary>
            Permission indicating whether a User can change structure within the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.CanAssignSchedule">
            <summary>
            Permission indicating whether a User can Assign/Unassign Employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.CanSeeScheduleEmployeesNames">
            <summary>
            Permission indicating whether a User can see Employees' names
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ScheduleWithPermissionsDTO.CanOfferJob">
            <summary>
            Can User Offer Jobs on ScheduleLevel
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ShiftsListDTO">
            <summary>
            DTO for List of shifts wih logged in  user permission
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ShiftsListDTO.Shifts">
            <summary>
            List of shifts that logged in user has acess to
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ShiftsListDTO.CanAccess">
            <summary>
            Flag if logged in user has access to selected shift in job
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SkillCodeDTO">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillCodeDTO.Id">
            <summary>
            Primary Key in Database
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillCodeDTO.SkillCodeName">
            <summary>
            Name of Skill Code
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SkillCodeDTO.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="id">Skill Code Primary Key in database</param>
            <param name="name">Skill Code name</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SkillMatricesDTO">
            <summary>
            Model for displaying row in skill matrices table
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillMatricesDTO.ParentID">
            <summary>
            Employee or SkillCode ID. Depends which of them is column or row.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillMatricesDTO.ParentName">
            <summary>
            Employee or SkillCode Name. Depends which of them is column or row.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillMatricesDTO.Values">
            <summary>
            List of bool values
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillMatricesDTO.Image">
            <summary>
            Employee Image
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SkillMatricesDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SkillMatricesDTO.#ctor(System.Int64,System.String,System.Collections.Generic.List{ESolve.Entities.DTOs.IdNameBooleanImageValues})">
            <summary>
            Constructor which initialize all params exept image
            </summary>
            <param name="ParentID">Id</param>
            <param name="ParentName">Dispaly Name</param>
            <param name="Values">List of values</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.SkillMatricesDTO.#ctor(System.Int64,System.String,System.String,System.Collections.Generic.List{ESolve.Entities.DTOs.IdNameBooleanImageValues})">
            <summary>
            Constructor which initialize all params
            </summary>
            <param name="ParentID">Id</param>
            <param name="ParentName">Display Name</param>
            <param name="image">Image</param>
            <param name="Values">List of values</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SkillMatrixDTO">
            <summary>
            SkillMatrix Model
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillMatrixDTO.EmployeeID">
            <summary>
            EmployeeID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillMatrixDTO.SkillCodeID">
            <summary>
            SkillCodeID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SkillMatrixDTO.SkillMatrixValue">
            <summary>
            Bool Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SkillMatrixDTO.#ctor(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Constructor which initalize all parameters
            </summary>
            <param name="EmployeeID">Employee ID</param>
            <param name="SkillCodeID">Skill Code ID</param>
            <param name="SkillMatrixValue">Value for slected employee and selected skill code</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.MaxNumOfJobsAtSameTime">
            <summary>
            Uvek 1, radnik moze da radi samo na jednom poslu
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.MaxTime">
            <summary>
             Maximalo vreme trajanja
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.StartDayOfTheWeek">
            <summary>
            Day of the week from sys preferences
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.Maximize">
            <summary>
            maximaze da pokusa da ubaci sto vise radnika (ako je flase onda ubacuje exkstremno sporo 1 za drugim)
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.FinalConsoleOutput">
            <summary>
            za printovanje u konzoli. siuzilo je za debagovanje
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.PrintSolutions">
            <summary>
            za printovanje u konzoli. siuzilo je za debagovanje
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.Employees">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.JobOutsides">
            <summary>
            All jobs.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.ScheduleRankings">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.RankingRules">
            <summary>
            Ranking rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.AllConstraintRules">
            <summary>
            Represents all constraint rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.RankingTypes">
            <summary>
            All defined Ranking Types
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.Schedule">
            <summary>
            Schedule DTO object for auto solve
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.PayPeriodDTO">
            <summary>
            Pay Period DTO object for auto solve
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.canChangeEmployeeOnTemplateJobs">
            <summary>
            If autosolve can change the already assigned employee on the template jobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.NonEssentialSkills">
            <summary>
            NonEssentialSkills
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.AutoSolveDTO.SkillMatrixList">
            <summary>
            SkillMatrixList
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO">
            <summary>
            Model which is in use for calculating list of available employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.SkillMatrices">
            <summary>
            All SkillMatrices values
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.Schedules">
            <summary>
            Represents All Schedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.AllConstraintRules">
            <summary>
            Represents all constraint rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.Employees">
            <summary>
            Employee which is updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.EmployeeAssigments">
            <summary>
            Employees Assigments
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.DesiredJob">
            <summary>
            Represents Jobs for which we are calculating List of employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.RankingTypes">
            <summary>
            All defined Ranking Types
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.ScheduleRankings">
            <summary>
            All Active Schedule Rankings
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.RankingRules">
            <summary>
            Ranking Rules
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.CalculateListOfAvailableSolverDTO.#ctor(ESolve.Entities.DTOs.ConstraintDTOs.SkillMatrixSolverDTO[],System.Collections.Generic.List{ESolve.Entities.DTOs.ConstraintDTOs.ScheduleSolverDTO},ESolve.Entities.Models.IdNameDropDownModel[],ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO[])">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="skillMatrices"></param>
            <param name="schedules"></param>
            <param name="allConstraintRules"></param>
            <param name="updatedEmployee"></param>
            <param name="employeeAssigments"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO">
            <summary>
            Constrint DTO for autosolve
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.Id">
            <summary>
            Database Primary Key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintName">
            <summary>
            Constraint Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.IsConstraintActive">
            <summary>
            Indicator is Constraint applied on schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ComparisonValues">
            <summary>
            List of comparison values based on constraint Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintRuleID">
            <summary>
            Constraint Rule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.Schedule">
            <summary>
            Schedule Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintRule">
            <summary>
            Constraint Rule Entity connected with foreign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintEMWWAEs">
            <summary>
            Collection of ConstraintEMWWAE Cosntraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintEMNWWAEs">
            <summary>
            Collection of ConstraintEMNWWAE Cosntraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintSetValues">
            <summary>
            Collection of ConstraintSetValue
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintMNODOTW">
            <summary>
            Collection of ConstraintMaximum Number Of Days Of The Week
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintMNOH">
            <summary>
            Collection of Constraint Maximum Number Of Hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintMNOJTC">
            <summary>
            Collection of Constraint Maximum Number Of Job Types Consecutively
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintDOWP">
            <summary>
            Days Of Within A Period Constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintSS">
            <summary>
            Split shifts constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintMNOJT">
            <summary>
            Maximum number of job type constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.ConstraintMNOJTIME">
            <summary>
            Maximum number of job times constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO.BrokenRules">
            <summary>
            Collection of Broken Rules connected over foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isNotAlreadyAssigned">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isEmployeeLeaverStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isEmployeePlannedAbsence">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isEmployeeAvailability">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isMaximumNumberOfHours">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isEmployeeMustWorkWithEmployee">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isEmployeeMustNotWorkWithEmployee">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isMaximumDaysOfWeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isMaximumJobTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isMaximumJobTimes">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isMaximumJobTypesConsecutivly">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isMustNotWorkForTimePeriodAfterJobType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isMaximumNumberOfAverageHoursInPeriod">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isDaysOffWithinnPeriod">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isSplitShift">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isEmployeeFieldValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.ConstraintRuleAutoSolveDTO.isEmployeeRoster">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.CustomDataAutoSolveDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CustomDataAutoSolveDTO.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CustomDataAutoSolveDTO.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CustomDataAutoSolveDTO.value">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CustomDataAutoSolveDTO.description">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CustomDataAutoSolveDTO.custoDataType">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.CustomDataTypeAutoSolveDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CustomDataTypeAutoSolveDTO.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CustomDataTypeAutoSolveDTO.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.CustomDataTypeAutoSolveDTO.description">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO">
            <summary>
            Model for employee job assigment
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO.JobID">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO.JobStartDate">
            <summary>
            Job Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO.JobEndDate">
            <summary>
            Job End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO.JobStartTime">
            <summary>
            Job Start Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO.JobEndTime">
            <summary>
            Job End Time
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO.#ctor(System.Int64,System.Int64,System.DateTime,System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor which initalize all parameteres
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="jobID">Job Primary Key</param>
            <param name="jobStartDate">Job Start Date</param>
            <param name="jobEndDate">Job End Date</param>
            <param name="jobStartTime">Job Start Time</param>
            <param name="jobEndTime">Job End Time</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO">
            <summary>
            Employee Model used for Solver
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Id">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.JobTypeID">
            <summary>
            Job Type Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.StartDate">
            <summary>
            Employee Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.LeaveDate">
            <summary>
            Employee Leave Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.DateOfBirth">
            <summary>
            Employee Date Of Birth
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.EmployeeNumber">
            <summary>
            Employee Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Firstname">
            <summary>
            Firstname
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Surname">
            <summary>
            Surname
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Address2">
            <summary>
            Address2
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Address1">
            <summary>
            Address2 Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Address3">
            <summary>
            Address3
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.CostCode">
            <summary>
            Address3
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Address4">
            <summary>
            Address4
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.TelephoneNumber">
            <summary>
            Telephone Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.MobileNumber">
            <summary>
            Mobile Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.TargetRuleGroup">
            <summary>
            Target Rule Group
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.WorkRules">
            <summary>
            WorkRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Email">
            <summary>
            Employee Email
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Username">
            <summary>
            Employee Username
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.EmployeeProfile">
            <summary>
            Employee Profile
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Gender">
            <summary>
            Employee Gender
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Department">
            <summary>
            Employee Department
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Division">
            <summary>
            Employee Division
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.JobTitle">
            <summary>
            Employee Job Title
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Team">
            <summary>
            Employee Team
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Class">
            <summary>
            Employee Class
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Notification">
            <summary>
            Employee Notification
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Manager">
            <summary>
            Employee Manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.JobType">
            <summary>
            Employees Job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Locations">
            <summary>
            Employee Locations
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.PayRate">
            <summary>
            Pay Rate
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.MaxHours1">
            <summary>
            Max Huors 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.MaxHours2">
            <summary>
            Max Huors 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.MaxHours3">
            <summary>
            Max Huors 3
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.MaxHours4">
            <summary>
            Max Huors 4
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.MaxHours5">
            <summary>
            Max Huors 5
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.WeeklyHours">
            <summary>
            Weekly hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.AllowedTrades">
            <summary>
            Is Employee Tradeable
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.Availability">
            <summary>
            Is Employee Available
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.EmployeeAvailabilities">
            <summary>
            List of availabilities of specific employee 
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.#ctor(System.Int64,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int64},System.Nullable{System.Double})">
            <summary>
            Constructor of EmployeeSolverDTO for auto solve engine (all fields included)
            </summary>
            <param name="id">Employee ID</param>
            <param name="startDate">Start Date</param>
            <param name="leaveDate">Leave Date</param>
            <param name="dateOfBirth">Date of Birth</param>
            <param name="employeeNumber">Employee Number</param>
            <param name="firstname">First name</param>
            <param name="surname">Surname</param>
            <param name="address2">Address2</param>
            <param name="address1">Address2 Number</param>
            <param name="address3">Address3</param>
            <param name="costCode">Cost code</param>
            <param name="address4">Address4</param>
            <param name="telephoneNumber">Telephone Number</param>
            <param name="mobileNumber">Mobile Number</param>
            <param name="targetRuleGroup">Target Rule Group</param>
            <param name="workRules">Work Rules</param>
            <param name="email">email</param>
            <param name="username">Username</param>
            <param name="employeeProfile">Employee Profile</param>
            <param name="gender">Gender</param>
            <param name="locations">Locations</param>
            <param name="department">Department</param>
            <param name="division">Division</param>
            <param name="jobTitle">Job Title</param>
            <param name="team">Team</param>
            <param name="class">Class</param>
            <param name="notification">Notification</param>
            <param name="manager">Manager</param>
            <param name="payRate">Pay Rate</param>
            <param name="maxHours1">Max Hours 1</param>
            <param name="maxHours2">Max Hours 2</param>
            <param name="maxHours3">Max Hours 3</param>
            <param name="maxHours4">Max Hours 4</param>
            <param name="maxHours5">Max Hours 5</param>
            <param name="allowedTrades">Allowed Trades</param>
            <param name="availability">Availability</param>
            <param name="jobType">Job Type</param>
            <param name="jobTypeId">Job Type Id</param>
            <param name="weeklyHours">Weekly Hours</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.#ctor(System.Int64,System.DateTime)">
            <summary>
            Constructor with employee's primary and start date
            </summary>
            <param name="id">Employee's primary key</param>
            <param name="startDate">Employee's start date</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.#ctor(System.Int64,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Double})">
            <summary>
            Constructor of EmployeeSolverDTO
            </summary>
            <param name="id">Employee ID</param>
            <param name="startDate">Start Date</param>
            <param name="leaveDate">Leave Date</param>
            <param name="dateOfBirth">Date of Birth</param>
            <param name="employeeNumber">Employee Number</param>
            <param name="firstname">First name</param>
            <param name="surname">Surname</param>
            <param name="address2">Address2</param>
            <param name="address1">Address2 Number</param>
            <param name="address3">Address3</param>
            <param name="costCode">Cost Code</param>
            <param name="address4">Address4</param>
            <param name="telephoneNumber">Telephone Number</param>
            <param name="mobileNumber">Mobile Number</param>
            <param name="targetRuleGroup">Target Rule Group</param>
            <param name="workRules">workRules</param>
            <param name="email">email</param>
            <param name="username">Username</param>
            <param name="employeeProfile">Employee Profile</param>
            <param name="gender">Gender</param>
            <param name="locations">Locations</param>
            <param name="department">Department</param>
            <param name="division">Division</param>
            <param name="jobTitle">Job Title</param>
            <param name="jobType">Job Type</param>
            <param name="team">Team</param>
            <param name="class">Class</param>
            <param name="notification">Notification</param>
            <param name="manager">Manager</param>
            <param name="payRate">Pay Rate</param>
            <param name="maxHours1">Max Hours 1</param>
            <param name="maxHours2">Max Hours 2</param>
            <param name="maxHours3">Max Hours 3</param>
            <param name="maxHours4">Max Hours 4</param>
            <param name="maxHours5">Max Hours 5</param>
            <param name="allowedTrades">Allowed Trades</param>
            <param name="availability">Availability</param>
            <param name="weeklyHours">Weekly Hours</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.GetListOfDifferentProperties(ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO)">
            <summary>
            Get All updated proeprties which are important for calculations
            </summary>
            <param name="employee"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.GetEmployees(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Getting employees from database with passed ids
            </summary>
            <param name="employeeIDs">Employees primary keys</param>
            <param name="repositoryContext">Db context</param>
            <returns>List of employees</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO.MapListOfEmployees(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.RepositoryContext)">
            <summary>
            Map list of Employees to list of EmployeeSolverDTO
            </summary>
            <param name="employees">Employees to map</param>
            <param name="repositoryContext">RepositoryContext</param>
            <returns>List of employees</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.JobAutoSolveDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobAutoSolveDTO.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobAutoSolveDTO.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobAutoSolveDTO.JobStartDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobAutoSolveDTO.startTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobAutoSolveDTO.endTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobAutoSolveDTO.noOfEmployeesRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobAutoSolveDTO.jobTypeID">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.JobForSolver">
            <summary>
            Model for autosolver
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.Id">
            <summary>
            Job primary key.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.JobStartDateTime">
            <summary>
            Job's start date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.JobEndDateTime">
            <summary>
            Job's end date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.Hours">
            <summary>
            Total hours of job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.Hours1">
            <summary>
            Hours of day 1 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.Hours2">
            <summary>
            Hours of day 2 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.Hours3">
            <summary>
            Hours of day 3 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.Hours4">
            <summary>
            Hours of day 4 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.Hours5">
            <summary>
            Hours of day 5 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.Hours6">
            <summary>
            Hours of day 6 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.JobTypeID">
            <summary>
            Job type's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.ScheduleID">
            <summary>
            Schedule's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.SubGroupID">
            <summary>
            SubGroup's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.EmployeeAssigments">
            <summary>
            Employees that are assigned to this job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.JobCustomData">
            <summary>
            Job's custom datas
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.JobForSolver.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.OperatorAutoSolveDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.OperatorAutoSolveDTO.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.OperatorAutoSolveDTO.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.OperatorAutoSolveDTO.value">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.PayPeriodDTO">
            <summary>
            Pay Period DTO for Auto Solve
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.PayPeriodDTO.PayPeriodStartDate">
            <summary>
            Pay Period Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.PayPeriodDTO.PayPeriodNumberOfDays">
            <summary>
            Pay Period Number of Days
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.PayPeriodDTO.IsMonthlyPayPeriod">
            <summary>
            Field that indicate is Pay Period on Monhly basis
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver.PrepareDataForSolverAndCallAutoSolve(ESolve.Entities.RepositoryContext,ESolve.Entities.Filters.SubGroupCalendarFilterModel,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.RankingManager,ESolve.Entities.DataManager.SubGroupManager)">
            <summary>
            Preparing data for autsolve and calling autosolve
            </summary>
            <param name="repositoryContext">Repository Context</param>
            <param name="model">Model for getting data from database for autosolve</param>
            <param name="loggedInUser">Logged in user</param>
            <param name="scheduleManager">Schedule Manager for schedule's permissons</param>
            <param name="employeeManager">Employee manager for getting employees</param>
            <param name="rankingManager">Ranking manager for getting rankings</param>
            <param name="subgroupManager">Manager for subgroups</param>
            <returns>Model with filled jobs with assignments</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver.GetDataForAutoSolve(ESolve.Entities.RepositoryContext,ESolve.Entities.Filters.SubGroupCalendarFilterModel,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO},ESolve.Entities.Models.ScheduleDatePreference,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.EmployeesManager,ESolve.Entities.DataManager.RankingManager,ESolve.Entities.DataManager.SubGroupManager)">
            <summary>
            Getting data for autosolve
            </summary>
            <param name="repositoryContext">Repository context</param>
            <param name="model">Model for data for autosolve</param>
            <param name="constraintsForCalculations">List of active constraints</param>
            <param name="scheduleDatePreference">Schedule data preference</param>
            <param name="loggedInUser">Logged in user</param>
            <param name="scheduleManager">ScheduleManager for schedule's permissions</param>
            <param name="employeeManager">EmployeeManager for getting employees</param>
            <param name="rankingManager">RankingManager for getting rankings</param>
            <param name="subGroupManager">SubGroupManager for getting subgroups for which current user has access.</param>
            <returns>Store Assigment Model with data</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver.GetJobsFromPassedDateRange(System.DateTime,System.DateTime,ESolve.Entities.RepositoryContext)">
            <summary>
            Get jobs from passed date range
            </summary>
            <param name="startDate">Date range's start date</param>
            <param name="endDate">Date range's end date</param>
            <param name="repositoryContext">Repository Context</param>
            <returns>List of jobs from passed date range.</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver.GetJobsCustomData(System.Collections.Generic.List{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Get jobs0 custom datas
            </summary>
            <param name="jobIDs">Jobs' primary keys</param>
            <param name="repositoryContext">Repository context.</param>
            <returns>Array of custom datas.</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver.GetRangeForJobs(ESolve.Entities.Filters.SubGroupCalendarFilterModel,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO},System.Collections.Generic.List{ESolve.Entities.Models.Ranking},ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Generating range for getting job availabilities for autosolve
            </summary>
            <param name="model"></param>
            <param name="constraints"></param>
            <param name="rankings"></param>
            <param name="scheduleDatePreference"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver.GetRankingRules(System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO},ESolve.Entities.RepositoryContext)">
            <summary>
            Getting ranking rules for passed rankings
            </summary>
            <param name="rankings">List of rankings</param>
            <param name="repositoryContext">Db context</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver.GetSchedule(ESolve.Entities.RepositoryContext,ESolve.Entities.Filters.SubGroupCalendarFilterModel)">
            <summary>
            
            </summary>
            <param name="repositoryContext"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.PrepareDataForSolver.GetSubGroupsFromPassedDateRange(System.DateTime,System.DateTime,ESolve.Entities.RepositoryContext)">
            <summary>
            Getting subgroups from passed date range
            </summary>
            <param name="startDate">Date range's start date</param>
            <param name="endDate">Date range's end date</param>
            <param name="repositoryContext">Repository context</param>
            <returns>List of subgroups from passed date range</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO.SortOrder">
            <summary>
            Ranking Sort Order 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO.RankingRuleID">
            <summary>
            Rankiong Rule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO.RankingTypeID">
            <summary>
            Ranking rule type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO.ScheduleID">
            <summary>
            Schedule ID
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SolverDTOs.RankingSolverDTO.#ctor(System.Int64,System.Int32,System.Nullable{System.Int64},System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="sortOrder"></param>
            <param name="rankingRuleID"></param>
            <param name="rankingTypeID"></param>
            <param name="scheduleID"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.startDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.endDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.constraintRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.dayOfWeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.maximalCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.countOvernights">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.comparationMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.comparationValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.employeeField">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.CustomData">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.Operatoion">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.hoursType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.setValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.SolverConstraintDTO.maxHoursField">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel">
            <summary>
            Model which will be used for Google Or Tool and as a reposnse from it.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.OldAssignments">
            <summary>
            Assignments on jobs that will be solved
            This collecton is used for reverting data if autosolve is crashed from some reason
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.JobsAndUnAvailableEmployees">
            <summary>
            List Of Jobs And Available Employees For Solver
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.JobAvailabilities">
            <summary>
            Job Availabilities from range
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.AllJobs">
            <summary>
            All Jobs From Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.EmployeeIDs">
            <summary>
            All employees which will be AutoSolved
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.JobsOutSides">
            <summary>
            Jobs For Solver
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.JobsForSolver">
            <summary>
            Jobs for solver
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.FilledJob">
            <summary>
            Populated Jobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.AllEmployeesConstraints">
            <summary>
            All Employee Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.JobsOutsideAutoSolveIDs">
            <summary>
            Jobs outside of range
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.ConstraintsForCalculations">
            <summary>
            Constraints for Schedule Calculations
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.DeactivatedConstraints">
            <summary>
            Constraints that are inactive
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.SubGroups">
            <summary>
            List of SubGroups 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.JobAvailabilitiesDifference">
            <summary>
            JobAvailabilities of Connected employees 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.AllEmployees">
            <summary>
            All Employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.NameOfFirstDayInWeek">
            <summary>
            First Day of week for constraint range
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.ScheduleDatePreference">
            <summary>
            Schedule Date Preference
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.JobCustomDataForConstraintsDTOs">
            <summary>
            JobsCustom data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.PayPeriodDTO">
            <summary>
            Pay Period 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.Rankings">
            <summary>
            Rankings
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.NonEssentialSkills">
            <summary>
            NonEssentialSkills
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SolverDTOs.StoreAssigmentsModel.SkillMatrixList">
            <summary>
            SkillMatrixList
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO">
            <summary>
            Represents Job Custom Data Solver Model.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.JobID">
            <summary>
            Job's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.CustomDataID">
            <summary>
            Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.CustomDataLookupID">
            <summary>
            Custom Data Lookup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.CustomDataLookupContent">
            <summary>
            Custom Data Lookup Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.NumberValue">
            <summary>
            Custom Data Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.TextValue">
            <summary>
            Custom Data Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.CustomDataType">
            <summary>
            Custom Data Type Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Constructor whihc initalize all properties
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="jobID">Job Primary Key</param>
            <param name="customDataID">Custom Data Primary Key</param>
            <param name="customDataLookupID">Custom Data Lookup Primary Key</param>
            <param name="customDataLookupContent">Custom Data Lookup Value</param>
            <param name="numberValue">Custom Data Number Value</param>
            <param name="textValue">Custom Data Text Value</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobCustomDataSolverDTO.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO">
            <summary>
            Job DTO For Solver
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.Id">
            <summary>
            Job Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.JobStartDateTime">
            <summary>
            Job's start date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.JobEndDateTime">
            <summary>
            Job's end date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.Hours">
            <summary>
            Total hours of job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.Hours1">
            <summary>
            Hours of day 1 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.Hours2">
            <summary>
            Hours of day 2 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.Hours3">
            <summary>
            Hours of day 3 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.Hours4">
            <summary>
            Hours of day 4 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.Hours5">
            <summary>
            Hours of day 5 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.Hours6">
            <summary>
            Hours of day 6 if job is multi-day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.NoOfEmployeesRequired">
            <summary>
            Number of required employees on this Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.SubgroupID">
            <summary>
            Subgroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.JobtypeID">
            <summary>
            Job type Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.JobCustomData">
            <summary>
            Represents All custom Data Assigned To this Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.UnavailableEmployeesForJob">
            <summary>
            Collection of employees which should not be assigned on current job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.AlreadyAssignedEmployeeOnJob">
            <summary>
            Collection of employees that are already assigned to the job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.isTemplateJob">
            <summary>
            Specifies if it is template job
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO">
            <summary>
            JobType Comparison Rule Solver Model
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.JobTypeID">
            <summary>
            JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.CustomDataID">
            <summary>
            Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.ComparisonMode">
            <summary>
            Comparison Mode
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.EmployeeField">
            <summary>
            Selected Employee Field
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.EmployeeFieldType">
            <summary>
            Employee Field Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.TextValue">
            <summary>
            Selected Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.NumberValue">
            <summary>
            Selected Number Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.#ctor(System.Int64,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="jobTypeID">JobType Primary Key</param>
            <param name="customDataID">Custom Data Primary Key</param>
            <param name="comparisonMode">Comparison Mode</param>
            <param name="operator">Operator</param>
            <param name="employeeField">Selected Employee Field</param>
            <param name="employeeFieldType">Employee Field Type</param>
            <param name="textValue">Selected Text Value</param>
            <param name="numberValue">Selected Number Value</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO">
            <summary>
            JobType DTO used for Solver
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO.JobtypeID">
            <summary>
            Job Type Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO.TimeUnitName">
            <summary>
            Time Unit Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO.TimeUnitValue">
            <summary>
            Time Unit Entered Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO.SkillCodeFormula">
            <summary>
            Skill Code Formula
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO.ComparisonRules">
            <summary>
            JobType Comparison Rules
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO.#ctor(System.Int64,System.String,System.Int32,System.String,ESolve.Entities.DTOs.ConstraintDTOs.JobTypeComparisonRulesSolverDTO[])">
            <summary>
            Constructor whihc initalize all properties
            </summary>
            <param name="jobtypeID">Job Type Primary Key</param>
            <param name="timeUnitName">Time Unit Name</param>
            <param name="timeUnitValue">Time Unit Entered Value</param>
            <param name="skillCodeFormula">Skill Code Formula</param>
            <param name="comparisonRules">JobType Comparison Rules</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.JobTypeSolverDTO.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO.CustomDataID">
            <summary>
            Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO.CustomDataLookupID">
            <summary>
            Custom Data Lookup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO.CustomDataLookupContent">
            <summary>
            Custom Data Lookup Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO.NumberValue">
            <summary>
            Custom Data Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO.TextValue">
            <summary>
            Custom Data Text Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleCustomDataSolverDTO.#ctor(System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Constructor whihc initalize all properties
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="customDataID">Custom Data Primary Key</param>
            <param name="customDataLookupID">Custom Data Lookup Primary Key</param>
            <param name="customDataLookupContent">Custom Data Lookup Value</param>
            <param name="numberValue">Custom Data Number Value</param>
            <param name="textValue">Custom Data Text Value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleSolverDTO">
            <summary>
            Represents Schedule Solver Model.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleSolverDTO.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleSolverDTO.ScheduleActiveConstraints">
            <summary>
            All Schedule Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleSolverDTO.ScheduleJobs">
            <summary>
            Represents Jobs thaht exists in Schedule
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleSolverDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.ScheduleSolverDTO.#ctor(System.Int64,System.Collections.Generic.List{ESolve.Entities.DTOs.SolverDTOs.ConstraintDTO},System.Collections.Generic.List{ESolve.Entities.DTOs.ConstraintDTOs.JobConstraintDTO})">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="scheduleActiveConstraints">Schedule Constraints</param>
            <param name="scheduleJobs">Jobs thaht exists in Schedule</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.SkillMatrixSolverDTO">
            <summary>
            Skill Matrix Representation for Solver
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SkillMatrixSolverDTO.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SkillMatrixSolverDTO.SkillCodeID">
            <summary>
            Skill Code Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SkillMatrixSolverDTO.Value">
            <summary>
            Value for Employee Skill Code
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.SkillMatrixSolverDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.SkillMatrixSolverDTO.#ctor(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Constructor whihc initalize all parameters
            </summary>
            <param name="employeeID">Employee Primary Key</param>
            <param name="skillCodeID">Skill Code Primary Key</param>
            <param name="value">Value for Employee Skill Code</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.SubGroupID">
            <summary>
            Sub Group Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.CustomDataID">
            <summary>
            Custom Data Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.CustomDataLookupID">
            <summary>
            Custom Data Lookup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.CustomDataLookupContent">
            <summary>
            Custom Data Lookup Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.NumberValue">
            <summary>
            Custom Data Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.TextValue">
            <summary>
            Custom Data Text Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.SubGroupCustomDataSolverDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.Double,System.String)">
            <summary>
            Constructor whihc initalize all properties
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="subGroupID">SubGroup Primary Key</param>
            <param name="customDataID">Custom Data Primary Key</param>
            <param name="customDataLookupID">Custom Data Lookup Primary Key</param>
            <param name="customDataLookupContent">Custom Data Lookup Value</param>
            <param name="numberValue">Custom Data Number Value</param>
            <param name="textValue">Custom Data Text Value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.ConstraintDTOs.UpdateEmployeesAssigmentsDTO">
            <summary>
            Represents Model for update Schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.UpdateEmployeesAssigmentsDTO.SkillMatrices">
            <summary>
            All SkillMatrices values
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.UpdateEmployeesAssigmentsDTO.Schedules">
            <summary>
            Represents All Schedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.UpdateEmployeesAssigmentsDTO.AllConstraintRules">
            <summary>
            Represents all constraint rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.UpdateEmployeesAssigmentsDTO.UpdatedEmployee">
            <summary>
            Employee which is updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.ConstraintDTOs.UpdateEmployeesAssigmentsDTO.EmployeeAssigments">
            <summary>
            Employees Assigments
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.UpdateEmployeesAssigmentsDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.ConstraintDTOs.UpdateEmployeesAssigmentsDTO.#ctor(ESolve.Entities.DTOs.ConstraintDTOs.SkillMatrixSolverDTO[],System.Collections.Generic.List{ESolve.Entities.DTOs.ConstraintDTOs.ScheduleSolverDTO},ESolve.Entities.Models.IdNameDropDownModel[],ESolve.Entities.DTOs.SolverDTOs.EmployeeSolverDTO,ESolve.Entities.DTOs.SolverDTOs.EmployeeAssigmentSolverDTO[])">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="skillMatrices">Employees skill matrices</param>
            <param name="schedules">All Schedules</param>
            <param name="allConstraintRules">All Constraint rules</param>
            <param name="updatedEmployee">One employee</param>
            <param name="employeeAssigments">All employee assigments</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO">
            <summary>
            Model for Add or Edit SubGroupCustomData
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.Id">
            <summary>
            SubGroupCustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.SubGroupID">
            <summary>
            SubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.CustomDataID">
            <summary>
            CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.CustomDataLookupID">
            <summary>
            CustomDataLookupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.NumberValue">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.TextValue">
            <summary>
            Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.CustomDataLookupValues">
            <summary>
            Values of CustomDataLookup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.CustomDataName">
            <summary>
            CustomDataName Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.CustomDataTypeName">
            <summary>
            CustomDataTypeName Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SubGroupCustomDataAddEditDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Collections.Generic.List{ESolve.Entities.Models.CustomDataLookup},System.String,System.String)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="id">SubGroupCustomData Primary Key</param>
            <param name="subGroupID">SubGroup Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="numberValue">Number Value</param>
            <param name="textValue">Text Value</param>
            <param name="customDataLookupValues">List of CustomDataLookup values</param>
            <param name="customDataName">CustomDataName Value</param>
            <param name="customDataTypeName">CustomDataTypeName Value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubGroupForScheduleDTO">
            <summary>
            Class used for updating subgroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupForScheduleDTO.ParentSubGroup">
            <summary>
            Parent SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupForScheduleDTO.ChildSubGroups">
            <summary>
            Childs
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SubGroupForScheduleDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SubGroupForScheduleDTO.#ctor(ESolve.Entities.Models.SubGroup,System.Collections.Generic.IEnumerable{ESolve.Entities.DTOs.SubGroupForScheduleDTO})">
            <summary>
            Constructor which initialize all params
            </summary>
            <param name="ParentSubGroup">Parent SubGroup</param>
            <param name="ChildSubGroups">Childs of current subgroup.</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubGroupsDateTimeDTO">
            <summary>
            SubGroupsDateTimeDTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsDateTimeDTO.StartDate">
            <summary>
            First DateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsDateTimeDTO.EndDate">
            <summary>
            Second DateTime
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsDateTimeDTO.SubGroupID">
            <summary>
            Id of subgroup
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubGroupsForSubmitDTO">
            <summary>
            Used to submit subgroups.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsForSubmitDTO.IsSchedule">
            <summary>
            Represents is submited whole schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsForSubmitDTO.ScheduleId">
            <summary>
            Represents a id of schedule, which should be submitted
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsForSubmitDTO.SubGroupId">
            <summary>
            Represents a id of subgroup, which should be submitted
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsForSubmitDTO.StartDateTime">
            <summary>
            Represents the beginning of the period for which the subgroups were submitted
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsForSubmitDTO.EndDateTime">
            <summary>
            Represents the end of the period for which the subgroups were submitted
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsForSubmitDTO.CurrentView">
            <summary>
            Represent the current view of approval schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupsForSubmitDTO.UserId">
            <summary>
            Represent the USers Id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubgroupsInsertedSubGroupsDTO">
            <summary>
            DTO object containing a list of SubGroups and a list of InsertedSubGroups
            </summary>
        </member>
        <member name="F:ESolve.Entities.DTOs.SubgroupsInsertedSubGroupsDTO.SubGroups">
            <summary>
            List of SubGroups
            </summary>
        </member>
        <member name="F:ESolve.Entities.DTOs.SubgroupsInsertedSubGroupsDTO.InsertedSubGroups">
            <summary>
            List of InsertedSubGroups
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO">
            <summary>
            Nikola
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.Name">
            <summary>
            SubGroup Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.StartDate">
            <summary>
            SubGroup Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.EndDate">
            <summary>
            SubGroup End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.SortOrder">
            <summary>
            SubGroup SortOrder
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.HideFrom">
            <summary>
            Represents Date from which we will not show SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.IsFromTemplate">
            <summary>
            Indicator representing whether this SubGroup was created
            from inserting a Template or from scratch
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.CanBeSubmited">
            <summary>
            Represents whether a subgroup can be submitted (default value is true)
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.CanBeUnlocked">
            <summary>
            Represents whether a subgroup can be unlocked
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.CanOfferJob">
            <summary>
            Can user offer jobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.CanAccessSubGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.CanChangeSubGroupStructure">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.CanAssignSubGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.CanSeeSubGroupEmployeesNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.SubmitedButNotApproved">
            <summary>
            Indicaor if approval is submited but not approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.ScheduleID">
            <summary>
            Schedule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.ParentGroupID">
            <summary>
            SubGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.Schedule">
            <summary>
            Schedule object connected via ScheduleID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTO.ParentGroup">
            <summary>
            SubGroup object connected via ParentGroupID Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubGroupWithPermissionsDTOHierarchy">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTOHierarchy.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubGroupWithPermissionsDTOHierarchy.Childrens">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubmitedCachedDataDTO">
            <summary>
            Class with Id and two Date's
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubmitedCachedDataDTO.Id">
            <summary>
            Represent PrimaryKey in Database
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubmitedCachedDataDTO.StartDate">
            <summary>
            DateTime one
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubmitedCachedDataDTO.EndDate">
            <summary>
            DateTime two
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubmitedCachedDataDTO.SelectedCheckboxes">
            <summary>
            List of selected subGroups
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.SubmitedCachedDataDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SubmitedScheduleDetailsDTO">
            <summary>
            SubmitedScheduleDetailsDTO model which is used for submit schedule details which will show
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubmitedScheduleDetailsDTO.UserId">
            <summary>
            Represent id of logged user
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubmitedScheduleDetailsDTO.ScheduleId">
            <summary>
            Represent id of displayed schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubmitedScheduleDetailsDTO.StartDateTime">
            <summary>
            Represents the period from which the schedule review begins
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SubmitedScheduleDetailsDTO.EndDateTime">
            <summary>
            Represents the period from which the schedule review ends
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SummaryDTO">
            <summary>
            Broken rules Summary DTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.WarningDetails">
            <summary>
            Warning details with broken rules messages
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.EmployeesThatCannotBeAssigned">
            <summary>
            Employee that break not already assigned constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfNotAlreadyAssigned">
            <summary>
            Number of not already assigned broken rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfSkillCodes">
            <summary>
            Number of broken rules based on skill codes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfLengthOfService">
            <summary>
            Number of broken rules based on length of services
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfComparisonRules">
            <summary>
            Number of broken rules based on comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfEMWWAE">
            <summary>
            Number of broken employee must work with another employee constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfEMNWWAE">
            <summary>
            Number of broken employee must not work with another employee constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfMaxNumberOfHours">
            <summary>
            Number of broken maximum number of hours constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfMaxNoOfDaysOfTheWeek">
            <summary>
            Number of broken maximum nuber of days of the week constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfContraintTime">
            <summary>
            Number of broken constraint time constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfMNOJT">
            <summary>
            Number of broken maximum number of job types constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfMNOJTC">
            <summary>
            Number of broken maximum number of job types consecutive constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfMaxAverageHours">
            <summary>
            Number of broken maximum number of average hours constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfMaxSpecialDates">
            <summary>
            Number of broken maximum  special dates constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfSplitShifts">
            <summary>
            Number of broken rules based on split shifts
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfDaysOff">
            <summary>
            Number of broken ruls based on days off
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfMNWFPAJT">
            <summary>
            Number of broken max not work for period constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfAvailabilities">
            <summary>
            Number of broken rules based on employee's availability
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfAbsences">
            <summary>
            Number of broken rules based on employee's absences
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.CountOfRosters">
            <summary>
            Number of broken rules based on rosters
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.TotalJobTypeBrokenRules">
            <summary>
            Total count of broken rules based on job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.TotalOfConstraintsBrokenRules">
            <summary>
            Total count of broken rules based on constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SummaryDTO.RetValueMessage">
            <summary>
            This message is used to turn back message if data is copied or if data is copied but not completely
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SyncDTO">
            <summary>
            SyncDTO represents object being passed to the controller which will be used to store
            data upon pressing the Sync button.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncDTO.ScheduleId">
            <summary>
            Represents ID of the Schedule on top of which the Sync was pressed
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncDTO.StartDate">
            <summary>
            Represents Start Date of the range seen on the calendar.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncDTO.EndDate">
            <summary>
            Represents End Date of the range seen on the calendar.
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.SyncHistoryDTO">
            <summary>
            DTO used for sending sync data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncHistoryDTO.DateOfSync">
            <summary>
            Date and time of sync action
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncHistoryDTO.ScheduleName">
            <summary>
            Schedule's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncHistoryDTO.EmployeeName">
            <summary>
            Employee's firstname and last name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncHistoryDTO.EmployeeNumber">
            <summary>
            Employe's Number
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncHistoryDTO.JobStartDateTime">
            <summary>
            Job's start date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncHistoryDTO.JobEndDateTime">
            <summary>
            Job's end date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncHistoryDTO.StatusOfSync">
            <summary>
            Status of sync
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.SyncHistoryDTO.StatusMessage">
            <summary>
            Sync's status message
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateCalendarDTO">
            <summary>
            CalendarDTO represent object that is passed to schedule page. Contains SubGroups of Schedule, JobTypes of Schedule and All employees for filter.
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateCalendarDTO.SubGroups">
            <summary>
            SubGroups from Schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateCalendarDTO.EmployeeFilter">
            <summary>
            List of Employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateCalendarDTO.JobTypeFilter">
            <summary>
            JobTypes from Schedule
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateDTO">
            <summary>
            TemplateDTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.Name">
            <summary>
            Template's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.Created">
            <summary>
            Template's creation date.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.LastModified">
            <summary>
            Date representing when the Template was last modified.
            If it's null, it means that it has never been modified.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.LastPublished">
            <summary>
            Date representing when the Template was last published.
            If it's null, it means that it has never been published.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.CanBePublished">
            <summary>
            Represents whether the Template can be published or not.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.CanBeManaged">
            <summary>
            Represents whether the User can Duplicate/Delete the Template.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.InUse">
            <summary>
            Whether or not the template is in use.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.StartDate">
            <summary>
            Represents Template's StartDate for Calendar view.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateDTO.EndDate">
            <summary>
            Represents Template's EndDate for Calendar view.
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO">
            <summary>
            DTO for displaying employees in job assigment lists
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.Id">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.NameAndSurname">
            <summary>
            Employee Display Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.Image">
            <summary>
            Employee Image
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.Status">
            <summary>
            Employee Job Assigment Status
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.EmployeeInfo">
            <summary>
            Employee info
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.ScheduledHours">
            <summary>
            ScheduledHours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.Assigments">
            <summary>
            Employee's assigments
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.BrokenRules">
            <summary>
            Broken rules messages 
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.CanBeAssignedOrUnassigned">
            <summary>
            Indicator for whether an Employee can be assigned or unassigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.AgencyJobAssignmentID">
            <summary>
            AgencyJobAssignment Primary key if assigment is from agency
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.AgencyAssignmentInfo">
            <summary>
            AgencyAssignmentInfo
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.#ctor(System.Int64,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.String)">
            <summary>
            Constructor which initalize all properties.
            </summary>
            <param name="Id">Employee ID</param>
            <param name="NameAndSurname">Employee Display Name</param>
            <param name="Image">Employee Image</param>
            <param name="Status">Employee Job Assigment Status</param>
            <param name="CanBeAssignedOrUnassigned">Indicator for whether an Employee can be assigned or unassigned</param>
            <param name="AgencyJobAssignmentID">AgencyJobAssignment Primary key if assigment is from agency</param>
            <param name="AgencyAssignmentInfo">AgencyJobAssignment Primary key if assigment is from agency</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.#ctor(System.Int64,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.DateTime,System.DateTime}},System.Boolean,System.Nullable{System.Int64},System.String)">
            <summary>
            Constructor which initalize all properties.
            </summary>
            <param name="Id">Employee ID</param>
            <param name="NameAndSurname">Employee Display Name</param>
            <param name="Image">Employee Image</param>
            <param name="Status">Employee Job Assigment Status</param>
            <param name="Assigments">Employee's assigments</param>
            <param name="CanBeAssignedOrUnassigned">Indicator for whether an Employee can be assigned or unassigned</param>
            <param name="AgencyJobAssignmentID">AgencyJobAssignment Primary key if assigment is from agency</param>
            <param name="AgencyAssignmentInfo">AgencyJobAssignment Primary key if assigment is from agency</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.Equals(ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateEmployeeJobAssignmentListDTO.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateEmployeeListsDTO">
            <summary>
            Model for JobAssigment lists
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.ValidAssigned">
            <summary>
            Valid Assigned employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.InvalidAssigned">
            <summary>
            Invalid Assigned employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.Available">
            <summary>
            Available employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.Unavailable">
            <summary>
            Unavailable employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.TotalCountOfAvailable">
            <summary>
            Total count of availble employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.TotalCountOfUnavailable">
            <summary>
            Total count of unavailable employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.TotalCountOfValid">
            <summary>
            Total count of valid employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.TotalCountOfInvalid">
            <summary>
            Total count of invvalid employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateEmployeeListsDTO.Status">
            <summary>
            Job Status
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO">
            <summary>
            Model for adding new and updating existing JobCustomData
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.Id">
            <summary>
            JobCustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.TemplateJobID">
            <summary>
            TemplateJob Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.CustomDataID">
            <summary>
            CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.CustomDataLookupID">
            <summary>
            CustomDataLookupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.NumberValue">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.TextValue">
            <summary>
            Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.CustomDataLookupValues">
            <summary>
            Values of CustomDataLookup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.CustomDataName">
            <summary>
            CustomDataName Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.CustomDataTypeName">
            <summary>
            CustomDataTypeName Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.ManuallyUpdated">
            <summary>
            Flag if custom data is manually updated or not
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Collections.Generic.List{ESolve.Entities.Models.CustomDataLookup},System.String,System.String,System.Boolean)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="id">JobCustomData Primary Key</param>
            <param name="templateJobID">Template Job Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="numberValue">Number Value</param>
            <param name="textValue">Text Value</param>
            <param name="customDataLookupValues">List of CustomDataLookup values</param>
            <param name="customDataName">CustomDataName Value</param>
            <param name="customDataTypeName">CustomDataTypeName Value</param>
            <param name="manuallyUpdated">CustomDataTypeName Value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateJobCustomDataDTO">
            <summary>
            Model used for Template Jobs Custom Data in Template calculations
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO">
            <summary>
            Model used for adding job with custom data
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Id">
            <summary>
            Job primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Name">
            <summary>
            Job Name [Unique on subgroup level]
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.JobStartDateTime">
            <summary>
            Job Start Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.JobEndDateTime">
            <summary>
            Job End Date and Time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Day">
            <summary>
            Template Job Day of the week
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Hours">
            <summary>
            Job hours. [No of effective hours for that job]
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManualEditedHours">
            <summary>
            Property which indicates would App calculate Hours.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Hours1">
            <summary>
            Hours of day 1
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManualEditedHours1">
            <summary>
            Indicator if hours field for day 1 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Hours2">
            <summary>
            Hours of day 2
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManualEditedHours2">
            <summary>
            Indicator if hours field for day 2 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Hours3">
            <summary>
            Hours of day 3
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManualEditedHours3">
            <summary>
            Indicator if hours field for day 3 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Hours4">
            <summary>
            Hours of day 4
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManualEditedHours4">
            <summary>
            Indicator if hours field for day 4 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Hours5">
            <summary>
            Hours of day 5
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManualEditedHours5">
            <summary>
            Indicator if hours field for day 5 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Hours6">
            <summary>
            Hours of day 6
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManualEditedHours6">
            <summary>
            Indicator if hours field for day 6 manually updated.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Notes">
            <summary>
            Job Notes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.NoOfEmployeesRequired">
            <summary>
            Number of required Employees for Job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.AllowedTrade">
            <summary>
            Trade block
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.IsConcurrent">
            <summary>
            Is Job concurent
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ReferenceArea">
            <summary>
            Concurrent job's reference area for calculation associated emplployees.
            Possible values are: Schedule / Subgroup / Subgroup Lower Subgroupss
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.SortOrder">
            <summary>
            Sort order.s
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.IsCriticalTask">
            <summary>
            Is Job Critical
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.Approved">
            <summary>
            Is job approved
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.NumberOfValidAssigned">
            <summary>
            Number of valid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.NumberOfInvalidAssigned">
            <summary>
            Number of invalid assigend employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.LoneWorkerJob">
            <summary>
            Indicator if job is lone worker job
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManuallyEditedLoneWorkerJob">
            <summary>
            Indicator if lone worker job is manullay updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.LoneWorkerRecurringIntervals">
            <summary>
            Lone worker recurring interval
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManuallyEditedReccuringIntervals">
            <summary>
            Indicator if reccuring intervals is manually edited
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.LoneWorkerResponseWindow">
            <summary>
            Lone worker response window
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.ManuallyEditedResponseWindow">
            <summary>
            Indicator if response window is manually updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.JobCustomDataAddEdit">
            <summary>
            TemplateJob Custom Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.SubGroupID">
            <summary>
            TemplateSubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.JobTypeID">
            <summary>
            JobType Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.JobStatusID">
            <summary>
            JobStatus Primary Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateJobWithCustomDataDTO.#ctor(ESolve.Entities.Models.TemplateJob,ESolve.Entities.DTOs.TemplateJobCustomDataAddEditDTO[])">
            <summary>
            Create JobWithCustomDataDTO based on passed job and job's custom data
            </summary>
            <param name="job"></param>
            <param name="jobCustomDatas"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateRulesBrokenDTO">
            <summary>
            Model with information about rules that employee broke
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateRulesBrokenDTO.JobName">
            <summary>
            Job's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateRulesBrokenDTO.JobStartTime">
            <summary>
            Job's start time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateRulesBrokenDTO.JobEndTime">
            <summary>
            Job's end time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateRulesBrokenDTO.JobStartDate">
            <summary>
            Job's start date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateRulesBrokenDTO.Employees">
            <summary>
            Employees that are break rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateRulesBrokenDTO.JobID">
            <summary>
            New job's primary key
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateRulesBrokenDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateRulesBrokenDTO.#ctor(System.Int64,System.String,System.String,System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="jobID">Job's primary key</param>
            <param name="jobName">Job's name</param>
            <param name="jobStartTime">Job's start time</param>
            <param name="jobEndTime">Job's end time</param>
            <param name="jobStartDate">Job's start date</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO">
            <summary>
            Model which is used for adding new and updating existing Template Schedule Custom Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.Id">
            <summary>
            TemplateScheduleCustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.TemplateScheduleID">
            <summary>
            TemplateSchedule PrimaryKey
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.CustomDataID">
            <summary>
            CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.Number">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.Text">
            <summary>
            Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.LookupID">
            <summary>
            Represents selected CustomDataLookupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.CustomDataLookupValues">
            <summary>
            Values of CustomDataLookup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.CustomDataName">
            <summary>
            CustomDataName Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.CustomDataTypeName">
            <summary>
            CustomDataTypeName Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateScheduleCustomDataAddEditDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Double},System.String,System.Nullable{System.Int64},System.Collections.Generic.List{ESolve.Entities.Models.CustomDataLookup},System.String,System.String)">
            <summary>
            Constructor which is used to initialize all properties
            </summary>
            <param name="id">TemplateScheduleCustomData Primary Key</param>
            <param name="templateScheduleID">TemplateSchedule PrimaryKey</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="number">Number Value</param>
            <param name="text">Text Value</param>
            <param name="lookupID">CustomDataLookup Primary Key</param>
            <param name="customDataLookupValues">List of CustomDataLookup values</param>
            <param name="customDataName">CustomDataName Value</param>
            <param name="customDataTypeName">CustomDataTypeName Value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.Name">
            <summary>
            Schedule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.StartDate">
            <summary>
            Schedule Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.EndDate">
            <summary>
            Schedule End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.Days">
            <summary>
            Represents how many days does Template Schedule last
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.CanAccessSchedule">
            <summary>
            Permission indicating whether a User can access the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.CanChangeScheduleStructure">
            <summary>
            Permission indicating whether a User can change structure within the schedule
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.CanAssignSchedule">
            <summary>
            Permission indicating whether a User can Assign/Unassign Employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.CanSeeScheduleEmployeesNames">
            <summary>
            Permission indicating whether a User can see Employees' names
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateScheduleWithPermissionsDTO.CustomData">
            <summary>
            TemplateSchedule CustomData
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO">
            <summary>
            Model which is used for adding new or updating existing Template SubGroup Custom Data
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.Id">
            <summary>
            TemplateSubGroupCustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.TemplateSubGroupID">
            <summary>
            TemplateSubGroup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.CustomDataID">
            <summary>
            CustomData Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.CustomDataLookupID">
            <summary>
            CustomDataLookupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.NumberValue">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.TextValue">
            <summary>
            Text Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.CustomDataLookupValues">
            <summary>
            Values of CustomDataLookup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.CustomDataName">
            <summary>
            CustomDataName Value
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.CustomDataTypeName">
            <summary>
            CustomDataTypeName Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TemplateSubGroupCustomDataAddEditDTO.#ctor(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Collections.Generic.List{ESolve.Entities.Models.CustomDataLookup},System.String,System.String)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="id">TemplateSubGroupCustomData Primary Key</param>
            <param name="templateSubGroupID">TemplateSubGroup Primary Key</param>
            <param name="customDataID">CustomData Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Primary Key</param>
            <param name="numberValue">Number Value</param>
            <param name="textValue">Text Value</param>
            <param name="customDataLookupValues">List of CustomDataLookup values</param>
            <param name="customDataName">CustomDataName Value</param>
            <param name="customDataTypeName">CustomDataTypeName Value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.Name">
            <summary>
            SubGroup Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.StartDate">
            <summary>
            SubGroup Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.EndDate">
            <summary>
            SubGroup End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.SortOrder">
            <summary>
            SubGroup SortOrder
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.HideFrom">
            <summary>
            Represents Date from which we will not show SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.CanAccessSubGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.CanChangeSubGroupStructure">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.CanAssignSubGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.CanSeeSubGroupEmployeesNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.ScheduleID">
            <summary>
            TemplateSchedule Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.ParentGroupID">
            <summary>
            TemplateSubGroup Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.TemplateSchedule">
            <summary>
            Schedule object connected via ScheduleID Foreign Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTO.TemplateParentGroup">
            <summary>
            SubGroup object connected via ParentGroupID Foreign Key
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTOHierarchy">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTOHierarchy.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSubGroupWithPermissionsDTOHierarchy.Childrens">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateSummaryDTO">
            <summary>
            Broken rules Summary DTO
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.WarningDetails">
            <summary>
            Warning details with broken rules messages
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.EmployeesThatCannotBeAssigned">
            <summary>
            Employee that break not already assigned constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfNotAlreadyAssigned">
            <summary>
            Number of not already assigned broken rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfSkillCodes">
            <summary>
            Number of broken rules based on skill codes
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfComparisonRules">
            <summary>
            Number of broken rules based on comparison rules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfEMWWAE">
            <summary>
            Number of broken employee must work with another employee constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfEMNWWAE">
            <summary>
            Number of broken employee must not work with another employee constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfContraintTime">
            <summary>
            Number of broken constraint time constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfMNOJT">
            <summary>
            Number of broken maximum number of job types constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfMNOJTC">
            <summary>
            Number of broken maximum number of job types consecutive constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfMaxAverageHours">
            <summary>
            Number of broken maximum number of average hours constraint
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfMaxSpecialDates">
            <summary>
            Number of broken maximum  special dates constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfSplitShifts">
            <summary>
            Number of broken rules based on split shifts
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfDaysOff">
            <summary>
            Number of broken ruls based on days off
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfMNWFPAJT">
            <summary>
            Number of broken max not work for period constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfAvailabilities">
            <summary>
            Number of broken rules based on employee's availability
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfAbsences">
            <summary>
            Number of broken rules based on employee's absences
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfNightWorkerMinAge">
            <summary>
            Number of broken rules based on night worker min age
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.CountOfRosters">
            <summary>
            Number of broken rules based on rosters
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.TotalJobTypeBrokenRules">
            <summary>
            Total count of broken rules based on job type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateSummaryDTO.TotalOfConstraintsBrokenRules">
            <summary>
            Total count of broken rules based on constraints
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TemplateWarningDetailsDTO">
            <summary>
            Warning messages on copying data and invalid assigning
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateWarningDetailsDTO.Date">
            <summary>
            Date where data will be copied.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TemplateWarningDetailsDTO.BrokenRules">
            <summary>
            Broken rules caused by copying or assigning
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TokenRequestDTO">
            <summary>
            DTO for sending a request for Token
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.TokenRequestDTO.GrantType">
            <summary>
            Token's grant type. Should be either "password" or "refresh_token"
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TokenRequestDTO.Username">
            <summary>
            Token owner's username
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TokenRequestDTO.IsSecurityTimeoutUpdated">
            <summary>
            flag that show the security timeout minutes updated
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TokenRequestDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TokenRequestDTO.#ctor(ESolve.Enums.GrantTypes,System.String)">
            <summary>
            Constructor that initializes all parameters.
            </summary>
            <param name="grantType"></param>
            <param name="username"></param>
        </member>
        <member name="T:ESolve.Entities.DTOs.TokenResponseDTO">
            <summary>
            DTO for sending a response for Token
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.TokenResponseDTO.Token">
            <summary>
            JWT token
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TokenResponseDTO.Username">
            <summary>
            Token owner's username
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TokenResponseDTO.HasLinkedAccount">
            <summary>
            Indicator for whether or not the User has a Linked Account
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TokenResponseDTO.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TokenResponseDTO.#ctor(System.String,System.String)">
            <summary>
            Constructor that initializes all parameters but the HasLinkedAccount parameter
            </summary>
            <param name="token">User's Token.</param>
            <param name="username">User's Username.</param>
        </member>
        <member name="M:ESolve.Entities.DTOs.TokenResponseDTO.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor that initializes all parameters
            </summary>
            <param name="token">User's Token.</param>
            <param name="username">User's Username.</param>
            <param name="hasLinkedAccount">Indicator for whether or not the User has a Linked Account</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.TradeBoardDTO">
            <summary>
            DTO for presenting trade offers
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.Schedule">
            <summary>
            Schedule's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.Subgroup">
            <summary>
            Subgroup's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.JobType">
            <summary>
            Job type's name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.JobStartDateTime">
            <summary>
            Job's start date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.JobEndDateTime">
            <summary>
            Job's end date and time
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.JobsForUptake">
            <summary>
            Flag that presentss if trade is employee own trade
            True: Employee's trades offers
            Fale: Employee Own trades offers
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.TradeOfferID">
            <summary>
            Trade offer's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.EmployeeOwnTradeOfferID">
            <summary>
            EmployeeOwnTradeOffer which present forign key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TradeBoardDTO.JobId">
            <summary>
            Job id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.TypeNameDTO">
            <summary>
            Class is used for EmployeeFields representation in dropdown
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.TypeNameDTO.Type">
            <summary>
            Represents Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.TypeNameDTO.Name">
            <summary>
            Represents Property Name
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TypeNameDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.TypeNameDTO.#ctor(System.String,System.String)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="type">Type name</param>
            <param name="name">Property name</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserComboValuesDTO">
            <summary>
            Lists for dropdown lists in user managment
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.NotificationTypes">
            <summary>
            List of NotificationTypes for drop-down list
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.Profiles">
            <summary>
            List of profiles for drop-down list
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.LinkedEmployees">
            <summary>
            List of  employees for drop-down list
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.LinkedEmployeeRights">
            <summary>
            List of linked employee's rights
            Values: Full Access / Read-Only Access / No Access
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.Schedules">
            <summary>
            List of schedules for drop-down list with subgroups as values
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.ScheduleRights">
            <summary>
            List of schedule's rights for drop-down list
            Values: modify / limited modify / read-only / anonymous
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.Templates">
            <summary>
            List of templates for drop-down list
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.OrganisationFields">
            <summary>
            List of organisational fields for drop-down list with specific field values
            Values: Location / Department / Job Title / Costcode / Division / Class / Team
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserComboValuesDTO.ShiftGroups">
            <summary>
            List of shift groups for drop-down list
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO">
            <summary>
            DTO used for User Dashboard
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.AbsenceRequestID">
            <summary>
            Absence Request ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.AbsenceID">
            <summary>
            Absence ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.Image">
            <summary>
            Employee Image
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.EmployeeName">
            <summary>
            Employee Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.AbsenceType">
            <summary>
            Absence Type
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.StartDate">
            <summary>
            Absence Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.EndDate">
            <summary>
            Absence End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.Time">
            <summary>
            Absence duration
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.Ticks">
            <summary>
            Hours in ticks
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.EmployeeComment">
            <summary>
            Employee Comment
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.StatusName">
            <summary>
            Absence Status name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.DeletePending">
            <summary>
            Indicator is delete pending active
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.GetEmployeeID">
            <summary>
            Getter for Employee ID
            </summary>
            <returns>Employee Primary Key</returns>
        </member>
        <member name="M:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardBaseDTO.SetEmployeeID(System.Int64)">
            <summary>
            Setter for Employee ID
            </summary>
            <returns>Employee Primary Key</returns>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserDashboard.EmployeeAbsencesUserDashboardDTO">
            <summary>
            Model used for Employee Absence DAshboard
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO">
            <summary>
            Model which represents one 
            object in Schedule Details section
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO.Id">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO.Name">
            <summary>
            Schedule Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO.Hours">
            <summary>
            Scheduled Job Hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO.Jobs">
            <summary>
            Number of scheduled jobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO.JobSlots">
            <summary>
            Number of Job slots
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO.Assigned">
            <summary>
            Number of valid assigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO.Unassigned">
            <summary>
            Number of unassigned job slots
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.ScheduleDetailsDTO.Invalid">
            <summary>
            Number of invalid assigned employees
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO">
            <summary>
            Model used for User Dashboard widgets
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.ActiveSchedules">
            <summary>
            Number Of All Schedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.ScheduleHours">
            <summary>
            All Schedule Hours
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.ScheduleJobSlots">
            <summary>
            Number Of All Schedule Job Slots
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.AssignedJobs">
            <summary>
            Number Of All Assigned Job Slots
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.RequiredVsScheduledHours">
            <summary>
            Sum of required and scheduled hours per day
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.UnassignedJobs">
            <summary>
            Number of unassigned job slots in passed ranges
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.InvalidAssignments">
            <summary>
            Number of invalid assigned job slots in passed ranges
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.IsScheduleManager">
            <summary>
            Indicator does user have permission for schedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.IsAbsenceManager">
            <summary>
            Indicator does user have permission for absences
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.CanSeeScheduleDetails">
            <summary>
            Indicator does user have permission for accessScheduleDetails
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.AbsenceRequestPending">
            <summary>
            Number of pending requests
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDashboard.UserDashboardInfoDTO.ScheduleApprovalsPending">
            <summary>
            Number of pending requests
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserDTO">
            <summary>
            DTO for user
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDTO.User">
            <summary>
            User
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDTO.UserSchedulePermissions">
            <summary>
            User's schedule permissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDTO.UserTemplatePermissions">
            <summary>
            User's template permissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDTO.UserEmployeePermissions">
            <summary>
            User's employee permissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDTO.UserShiftPermissions">
            <summary>
            User's shifts permissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserDTO.LinkedEmployees">
            <summary>
            Linked employee to user
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserEmployeePermissionDTO">
            <summary>
            DTO for user's employee permissions
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.UserEmployeePermissionDTO.UserEmployeePermissionID">
            <summary>
            User's employee permissions's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserEmployeePermissionDTO.FieldID">
            <summary>
            Filed primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserEmployeePermissionDTO.FieldValues">
            <summary>
            List of values
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserFilterDTO">
            <summary>
            DTO used for retreiving all User filter values
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.UserFilterDTO.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserFilterDTO.Value">
            <summary>
            User Filter Value
            </summary>
        </member>
        <member name="M:ESolve.Entities.DTOs.UserFilterDTO.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param value="id">Filter's primary key.</param>
            <param value="value">Filter's value</param>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserItemInListDTO">
            <summary>
            This DTO is used for displaye user's info in list of all users
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.DTOs.UserItemInListDTO.Id">
            <summary>
            User's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserItemInListDTO.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserItemInListDTO.ProfileName">
            <summary>
            User's profile name
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserItemInListDTO.EmployeeNumber">
            <summary>
            Employee number if exists
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserItemInListDTO.Image">
            <summary>
            User's image
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserPanelPermissionsDTO">
            <summary>
            DTO containint User Panel Permissions.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserPanelPermissionsDTO.CanSeePersonalPanel">
            <summary>
            Indicates whether Person can see Personal Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserPanelPermissionsDTO.CanSeeSchedulesPanel">
            <summary>
            Indicates whether Person can see Schedules Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserPanelPermissionsDTO.CanSeeTemplatesPanel">
            <summary>
            Indicates whether Person can see Templates Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserPanelPermissionsDTO.CanSeeEmployeeAccessPanel">
            <summary>
            Indicates whether Person can see EmployeeAccess Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserPanelPermissionsDTO.CanSeeShiftsPanel">
            <summary>
            Indicates whether Person can see Shifts Panel.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserPanelPermissionsDTO.CanSeeAPIPanel">
            <summary>
            Indicates whether Person can see API Panel.
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.UserProfileDTO">
            <summary>
            DTO for assign Profile to User.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserProfileDTO.UserId">
            <summary>
            Array of User Id
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.UserProfileDTO.ProfileId">
            <summary>
            User profile Id
            </summary>
        </member>
        <member name="T:ESolve.Entities.DTOs.WarningDetailsDTO">
            <summary>
            Warning messages on copying data and invalid assigning
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.WarningDetailsDTO.Date">
            <summary>
            Date where data will be copied.
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.WarningDetailsDTO.Day">
            <summary>
            Day if data is from template
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.WarningDetailsDTO.BrokenRules">
            <summary>
            Broken rules caused by copying or assigning
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.WarningDetailsDTO.Cached">
            <summary>
            Is cached
            </summary>
        </member>
        <member name="P:ESolve.Entities.DTOs.WarningDetailsDTO.IsTemplate">
            <summary>
            Flag if user overrides assignemnt in template
            </summary>
        </member>
        <member name="T:ESolve.Entities.ListAbsencesBaseDTO">
            <summary>
            Base Class for preview Absences
            </summary>
        </member>
        <member name="P:ESolve.Entities.ListAbsencesBaseDTO.AbsenceRequestID">
            <summary>
            Absence Request ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.ListAbsencesBaseDTO.AbsenceID">
            <summary>
            Absence ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.ListAbsencesBaseDTO.StartDate">
            <summary>
            Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.ListAbsencesBaseDTO.EndDate">
            <summary>
            End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.ListAbsencesBaseDTO.StatusName">
            <summary>
            Absence Status Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.ListAbsencesBaseDTO.StatusColor">
            <summary>
            Absence Status Color
            </summary>
        </member>
        <member name="P:ESolve.Entities.ListAbsencesBaseDTO.DeletePending">
            <summary>
            Delete pending request
            </summary>
        </member>
        <member name="M:ESolve.Entities.ListAbsencesBaseDTO.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.ListAbsencesBaseDTO.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64},System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="requestID">Absence RequestID</param>
            <param name="absenceID">Absence Primary Key </param>
            <param name="startDate">Absence Start Date</param>
            <param name="endDate">Absence End Date</param>
            <param name="statusName">Absence Status Name</param>
            <param name="statusColor">Absence Status Color</param>
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.AssignUnAssignEmployees.#ctor(ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.EmployeeJobAssigmentDTO},System.Collections.Generic.List{ESolve.Entities.Models.Job})">
            <summary>
            
            </summary>
            <param name="repositoryContext"></param>
            <param name="assigments"></param>
            <param name="jobs"></param>
            
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.AssignUnAssignEmployees.AssignUnassignEmployees(System.Boolean,ESolve.Entities.Models.Job)">
            <summary>
            Method that is used for assignning/unassigning employees
            </summary>
            <param name="isAssigment">Flag if this is assign or unassign action</param>
            <param name="originalJob">Original job for copying</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.RepositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.JobStatuses">
            <summary>
            Collection of all JobStatuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.JobsForUpdateStatuses">
            <summary>
            Collection of Jobs for Update statuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.NameOfFirstDayInWeek">
            <summary>
            Name of First day in week specified in ScheduleDatePreference
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.ScheduleDatePreferences">
            <summary>
            Schedule Date Preferences
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.Constraints">
            <summary>
            All specified Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.JobAvailabilites">
            <summary>
            Job Availabilities
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.EmployeeConstraints">
            <summary>
            Employee Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.EmployeeAssigments">
            <summary>
            Employee Assigments inside range
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.Employees">
            <summary>
            Employees which will be assigned or unassigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.Assigments">
            <summary>
            Assigments
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.ScheduleIDs">
            <summary>
            List Of Schedule Ids which constraints will be applied
            </summary>
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.AssignUnassignEmployees(System.Boolean,ESolve.Entities.Models.Job)">
            <summary>
            Assign/Unassign action
            </summary>
            <param name="isAssigment">Flag that indicates if this is assigment or unassigment</param>
            <param name="originalJob">Oriingal job of copying</param>
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.UpdateJobStatuses">
            <summary>
            Iterate trough Collection Of Jobs where Status should be updated. Update it and SaveChanges in Database.
            </summary>
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.InitializeData(System.Collections.Generic.List{ESolve.Entities.Models.Job})">
            <summary>
            Preparing data for calculations on assign/unassign action
            </summary>
            <param name="jobs">Jobs where assign or unassigned happened</param>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments
            provided into a method is not valid.</exception> 
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.EmployeeAssigmentBase.CalculateRangeForJobs(System.DateTime,System.DateTime)">
            <summary>
            Calculating range of jobs
            </summary>
            <param name="minDate">Initial min date</param>
            <param name="maxDate">Inital max date</param>
            <returns></returns>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.RepositoryContext">
            <summary>
            Repository Context
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.JobStatuses">
            <summary>
            Collection of all JobStatuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.JobsForUpdateStatuses">
            <summary>
            Collection of Template Jobs for Update statuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.NameOfFirstDayInWeek">
            <summary>
            Name of First day in week specified in ScheduleDatePreference
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.ScheduleDatePreferences">
            <summary>
            Schedule Date Preferences
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.Constraints">
            <summary>
            All specified Template Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.JobAvailabilites">
            <summary>
            Template Job Availabilities
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.EmployeeConstraints">
            <summary>
            Template Employee Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.EmployeeAssigments">
            <summary>
            Employee Template Assigments inside range
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.Employees">
            <summary>
            Employees which will be assigned or unassigned
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.Assigments">
            <summary>
            Assigments
            </summary>
        </member>
        <member name="P:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.ScheduleIDs">
            <summary>
            List Of Template Schedule Ids which constraints will be applied
            </summary>
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.AssignUnassignEmployees(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="isAssigment"></param>
            <param name="isCopyJob"></param>
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.UpdateJobStatuses">
            <summary>
            Iterate trough Collection Of Jobs where Status should be updated. Update it and SaveChanges in Database.
            </summary>
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.EmployeeTemplateAssignmentBase.GetJobStatus(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Based on passed parameters method return JobStatus ID
            </summary>
            <param name="numberOfRequiredEmployees">Number of Required Employees</param>
            <param name="numberOfAvailableEmployees">Number Available Employees</param>
            <param name="numberOfValidAssignment">Number of Valid Assigned Employees</param>
            <param name="isConcurrent">Indicator Is passed Job Concurent</param>
            <returns>Job Status ID</returns>
            <exception cref="T:System.ArgumentNullException">If some Collection of parameter is NULL</exception>
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.TemplateAssignUnassignEmployees.#ctor(ESolve.Entities.RepositoryContext,System.Collections.Generic.List{ESolve.Entities.DTOs.EmployeeJobAssigmentDTO},System.Collections.Generic.List{ESolve.Entities.Models.TemplateJob})">
            <summary>
            
            </summary>
            <param name="repositoryContext"></param>
            <param name="assigments"></param>
            <param name="jobs"></param>
            
        </member>
        <member name="M:ESolve.Entities.EmployeeAssigments.TemplateAssignUnassignEmployees.AssignUnassignEmployees(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="isAssigment"></param>
            <param name="isCopyJob"></param>
        </member>
        <member name="T:ESolve.Entities.EventArgsToSendData.CustomDataEventArgs">
            <summary>
            Model for seding data for custom data's event
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.CustomDataEventArgs.CustomDatas">
            <summary>
            Custom datas that iis added or updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.CustomDataEventArgs.SubGroupsIDs">
            <summary>
            List of subgroups where custom data is added or updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.CustomDataEventArgs.SubGroupManager">
            <summary>
            Subgroup's manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.CustomDataEventArgs.JobManager">
            <summary>
            Job's manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.CustomDataEventArgs.RepositoryContext">
            <summary>
            DB context
            </summary>
        </member>
        <member name="T:ESolve.Entities.EventArgsToSendData.TemplateCustomDataEventArgs">
            <summary>
            Model for seding data for Template custom data's event
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.TemplateCustomDataEventArgs.CustomDatas">
            <summary>
            Custom datas that iis added or updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.TemplateCustomDataEventArgs.SubGroupsIDs">
            <summary>
            List of templateSubgroups where custom data is added or updated
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.TemplateCustomDataEventArgs.TemplateSubGroupManager">
            <summary>
            TemplateSubgroup's manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.TemplateCustomDataEventArgs.TemplateJobManager">
            <summary>
            TemplateJob's manager
            </summary>
        </member>
        <member name="P:ESolve.Entities.EventArgsToSendData.TemplateCustomDataEventArgs.RepositoryContext">
            <summary>
            DB context
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.AgencyFilterModel">
            <summary>
            Model for filtering agency
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.AgencyFilterModel.IsAgency">
            <summary>
            Flag if user is looking for agency names or reasons to cover
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.AgencyFilterModel.Id">
            <summary>
            List of agencies for search
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.AgencyFilterModel.Clone">
            <summary>
            Clone object
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.AttendanceConfirmationFilterModel">
            <summary>
            Class used for filtering and searching data from database
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.AttendanceConfirmationFilterModel.EmployeeIDs">
            <summary>
            Employees IDs for filter.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.AttendanceConfirmationFilterModel.Clone">
            <summary>
            IClone implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.AuditTrailFilterModel">
            <summary>
            Model for filtering audit trail
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.AuditTrailFilterModel.FunctionNames">
            <summary>
            filter by Function Names
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ESolve.Entities.Filters.AuditTrailFilterModel.StartDateTime" -->
        <!-- Badly formed XML comment ignored for member "P:ESolve.Entities.Filters.AuditTrailFilterModel.EndDateTime" -->
        <member name="M:ESolve.Entities.Filters.AuditTrailFilterModel.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Deserialized cloned object</returns>
        </member>
        <member name="T:ESolve.Entities.Filters.AvailableJobsFilterModel">
            <summary>
            Class Used For Filtering Available Jobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.AvailableJobsFilterModel.Page">
            <summary>
            Represents page for Data table.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.AvailableJobsFilterModel.Limit">
            <summary>
            Number of items we will get from Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.AvailableJobsFilterModel.SortOrder">
            <summary>
            Represent sort order. [Asc or Desc]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.AvailableJobsFilterModel.Column">
            <summary>
            Represents Column which will be sorted.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.AvailableJobsFilterModel.Clone">
            <summary>
            Clone object
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.CalendarViewFilterModel">
            <summary>
            Calendar Filter model
            </summary>   
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.UnlockedRangeID">
            <summary>
            Id of unlocked Range
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.SubGroupIds">
            <summary>
            SubgGroupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.StartDate">
            <summary>
            StartDate
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.EndDate">
            <summary>
            EndDate
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.ViewType">
            <summary>
            ViewType
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.EmployeeIds">
            <summary>
            Employee IDs
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.JobTypeIds">
            <summary>
            JobType IDs
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.StartFrom">
            <summary>
            StartFrom
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.StartTo">
            <summary>
            StartTo
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.EndFrom">
            <summary>
            EndFrom
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.EndTo">
            <summary>
            EndTo
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.JobStatuses">
            <summary>
            JobStatuses
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.Cached">
            <summary>
            Is item for cache
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.Unlock">
            <summary>
            Is unlocked button
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CalendarViewFilterModel.EmployeeID">
            <summary>
            If this field is populated it is indicator is employee logged in
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.ConstraintNameUniqueFilterModel">
            <summary>
            Model for checking is Constraint Name unique on Schedule Level
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.ConstraintNameUniqueFilterModel.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.ConstraintNameUniqueFilterModel.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.ConstraintNameUniqueFilterModel.ConstraintName">
            <summary>
            Constraint Name
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.ConstraintNameUniqueFilterModel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.ConstraintNameUniqueFilterModel.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="constraintID">Constraint Primary Key</param>
            <param name="constraintName">Constraint Name</param>
        </member>
        <member name="T:ESolve.Entities.Filters.CustomDataLookupFilterModel">
            <summary>
            Model for filtering CustomDataLookup items
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CustomDataLookupFilterModel.Id">
            <summary>
            CustomDataLookup Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CustomDataLookupFilterModel.CustomDataID">
            <summary>
            CustomData PrimaryKey
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.CustomDataLookupFilterModel.Name">
            <summary>
            CustomDataLookup Name
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.CustomDataLookupFilterModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.CustomDataLookupFilterModel.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="id">CustomDataLookup Primary Key</param>
            <param name="customDataID">CustomData PrimaryKey</param>
            <param name="name">CustomDataLookup Name</param>
        </member>
        <member name="T:ESolve.Entities.Filters.EmployeeListsFilterModel">
            <summary>
            Model for filtering employees' lists
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeListsFilterModel.JobID">
            <summary>
            Job's primary key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeListsFilterModel.StartDate">
            <summary>
            Start date of displayed date range for calculating scheduled hours for employee's tile info
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeListsFilterModel.EndDate">
            <summary>
            End date of displayed date range for calculating scheduled hours for employee's tile info
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeListsFilterModel.ImageSize">
            <summary>
            Size of employee's image
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeListsFilterModel.ListType">
            <summary>
            Type of the list. Possible values are all, valid, invalid, available, unavailable and associated
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeListsFilterModel.Cached">
            <summary>
            Is data for cache
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeListsFilterModel.IsCreated">
            <summary>
            Is entity created first time
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.EmployeeListsFilterModel.Clone">
            <summary>
            FilberModelBase clone object
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.EmployeeSearchFilterModel">
            <summary>
            Class is used as a Filter Model for employee dropdown or skillcode
            </summary>
            
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeSearchFilterModel.SearchByEmployees">
            <summary>
            Indicator should we search by employees
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeSearchFilterModel.SearchTerm">
            <summary>
            Search term
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeSearchFilterModel.SearchEmployeesFor">
            <summary>
            Indicator if this method is callled for getting absence requests
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.EmployeeSearchFilterModel.SearchParameter">
            <summary>
            Search parameter for filtering employees
            Possible Values: Department, Division, Class, Cost Code, Gender, Job Type, Location, Manager, Skill, Employee
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.IdStringContentFilterModel">
            <summary>
            Class is responsibile for initializing Id of passed employee, and string content
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.IdStringContentFilterModel.Id">
            <summary>
            Represents Id in Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.IdStringContentFilterModel.Content">
            <summary>
            Content which will be used as parameter in search.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.IdStringContentFilterModel.#ctor">
            <summary>
            Init of FilterModelBase Class
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.IdStringContentFilterModel.Clone">
            <summary>
            IClone implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter">
            <summary>
            Class Used For Filtering JobOffers
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter.JobOfferStatusIDs">
            <summary>
            Property for searching JobOffers based on JobOfferStatusID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter.Page">
            <summary>
            Represents page for Datatable.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter.Limit">
            <summary>
            Number of items we will get from Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter.SortOrder">
            <summary>
            Represent sort order. [Asc or Desc]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter.Column">
            <summary>
            Represents Column which will be sorted.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.JobOfferFilters.JobOFferFilter.Clone">
            <summary>
            Clone object
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.JobTypeFilterModel">
            <summary>
            JobType Filter model which is used for filtering Jobtypes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.JobTypeFilterModel.JobTypeIDs">
            <summary>
            List of job types' primary keys that end user looking for
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.JobTypeFilterModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.JobTypeFilterModel.Clone">
            <summary>
            FilterModel Base clone object implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.LoneWorkerAlertFilterModel">
            <summary>
            Represents model for searching Lone Worker Alerts in Alerts Grid
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.LoneWorkerAlertFilterModel.EmployeeIds">
            <summary>
            Property for searching employees by their ids.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.LoneWorkerAlertFilterModel.Clone">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.LoneWorkerTransactionLogFilterModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.LoneWorkerTransactionLogFilterModel.EmployeeIDs">
            <summary>
            Employees IDs for filter.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.LoneWorkerTransactionLogFilterModel.Clone">
            <summary>
            IClone implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.LongStringFilter">
            <summary>
            Class which posses long and string Type. It is used in checking unique fileds.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.LongStringFilter.Id">
            <summary>
            Represents Prmary Key of Object
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.LongStringFilter.Content">
            <summary>
            Represents Search Content
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.LongStringFilter.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.LongStringFilter.#ctor(System.Int64,System.String)">
            <summary>
            Constructor which initalize all params
            </summary>
            <param name="id">Prmary Key of Object</param>
            <param name="content">Search Content</param>
        </member>
        <member name="T:ESolve.Entities.Filters.MobileCalendarViewFilterModel">
            <summary>
            Filter model for MobileDevices
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.MobileCalendarViewFilterModel.MobileViewName">
            <summary>
            Represents Mobile View Name
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.MobileCalendarViewFilterModel.ScheduleName">
            <summary>
            Represnets Schedule Name where Job belongs
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.MobileCalendarViewFilterModel.Hours">
            <summary>
            Represents ticks of JobHours Fields
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.MyJobsFilterModel">
            <summary>
            My jobs filter model
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.MyJobsFilterModel.StartDate">
            <summary>
            StartDate
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.MyJobsFilterModel.EndDate">
            <summary>
            EndDate
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.MyJobsFilterModel.ViewType">
            <summary>
            ViewType
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.MyJobsFilterModel.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.MyJobsFilterModel.SubGroupIds">
            <summary>
            List of SubgGroupID
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.RankingNameFilterModel">
            <summary>
            Ranking filter model for name attribute.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.RankingNameFilterModel.Id">
            <summary>
            Represents RankingId in Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.RankingNameFilterModel.ScheduleId">
            <summary>
            Represents ScheduleId in Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.RankingNameFilterModel.Name">
            <summary>
            Ranking name to check.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.ScheduleApprovalFilterModel">
            <summary>
            ScheduleApprovalFilter model
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.ScheduleApprovalFilterModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.ScheduleApprovalFilterModel.UserID">
            <summary>
            Represents the id of the logged in user
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.ScheduleApprovalFilterModel.ScheduleIds">
            <summary>
            Property for searching by schedules
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.ScheduleApprovalFilterModel.Clone">
            <summary>
            FilterModelBase Implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.ScheduleConstraintFilterModel">
            <summary>
            This class is used For Schedule Constraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.ScheduleConstraintFilterModel.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.ScheduleConstraintFilterModel.ConstraintRuleID">
            <summary>
            Constraint Rule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.ScheduleConstraintFilterModel.ConstraintID">
            <summary>
            Constraint Primary Key
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.ScheduleConstraintFilterModel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.ScheduleConstraintFilterModel.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="scheduleID">Schedule Primary Key</param>
            <param name="constraintRuleID">Constraint Rule Primary Key</param>
            <param name="constraintID">Constraint Rule Primary Key</param>
        </member>
        <member name="T:ESolve.Entities.Filters.SkillMatricesFilterModel">
            <summary>
            Model For Filtering SkillMatrices
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.IsEmployee">
            <summary>
            Will we filter Employees or SkillCodes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.SkillCodeIds">
            <summary>
            Property for searching Skill matrix by skill code/s
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.JobTypeIds">
            <summary>
            Property for searching Skill matrix by job type/s
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.EmployeeIds">
            <summary>
            Property for searching Skill matrix by employee/s
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.ImageSize">
            <summary>
            Employee Image Size
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.ColumnPage">
            <summary>
            Represents page by column for Datatable.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.ColumnLimit">
            <summary>
            Number of items we will get from Database by column.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.AreRowsSwapped">
            <summary>
            Flag indicates if employees present rows or columns in skill matrix
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SkillMatricesFilterModel.IsInitialization">
            <summary>
            Flag indicates if page is being initialized
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.SkillMatricesFilterModel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.SkillMatricesFilterModel.Clone">
            <summary>
            FilterModelBase Clone object Implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.SubGroupCalendarFilterModel">
            <summary>
            Model which is used for filtering Subgroups which will be displayed in Calendar view.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupCalendarFilterModel.ScheduleID">
            <summary>
            Schedule Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupCalendarFilterModel.StartDate">
            <summary>
            Date Range Start Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupCalendarFilterModel.EndDate">
            <summary>
            Date Range End Date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupCalendarFilterModel.SelectedSubGroups">
            <summary>
            SubGroups that user sees during AustoSolve Process
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupCalendarFilterModel.EmployeeID">
            <summary>
            Employee Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupCalendarFilterModel.CanChangeAssigneeOnTemplateJobs">
            <summary>
            Assigned employees can be changed on template jobs
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.SubGroupNameFilterModel">
            <summary>
            Model for filtering subgroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupNameFilterModel.ScheduleID">
            <summary>
            SUbGroup ScheduleID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupNameFilterModel.SubGroupID">
            <summary>
            SubGroupID
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupNameFilterModel.ParentSubGroupID">
            <summary>
            Represents SubGroup Parent if exists [0 -> Parent doesn't exists, != 0 Represents ParentSubGroupID]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SubGroupNameFilterModel.SearchTerm">
            <summary>
            Search Term
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.SubGroupNameFilterModel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.SubGroupNameFilterModel.#ctor(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Constructor which initialize all properties
            </summary>
            <param name="scheduleID">Schedule where Subgroup belongs</param>
            <param name="subGroupID">SubGroupID</param>
            <param name="parentSubGroupID">Parent SubGroup if exists</param>
            <param name="searchTerm">Content based on which we will search Subgroups</param>
        </member>
        <member name="T:ESolve.Entities.Filters.SyncHistoryFilterModel">
            <summary>
            Model for filtering sync hystory
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.SyncHistoryFilterModel.EmployeeIds">
            <summary>
            List of Employee Ids
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.SyncHistoryFilterModel.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Deserialized cloned object</returns>
        </member>
        <member name="T:ESolve.Entities.Filters.TemplatesFilterModel">
            <summary>
            Class is responsibile for initializing Id of passed templates, and string content
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.TemplatesFilterModel.TemplateIDs">
            <summary>
            Templates IDs for filter.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.TemplatesFilterModel.#ctor">
            <summary>
            Init of FilterModelBase Class
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.TemplatesFilterModel.Clone">
            <summary>
            IClone implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Filters.TradeBoardFilterModel">
            <summary>
            Filter for getting trade board
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.TradeBoardFilterModel.JobsForUptake">
            <summary>
            Flag that presents which table in trade board employee is getting
            If true => Employees Trades
            If false => Employees Own Trades
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.TradeBoardFilterModel.Page">
            <summary>
            Represents page for Datatable.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.TradeBoardFilterModel.Limit">
            <summary>
            Number of items we will get from Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.TradeBoardFilterModel.Column">
            <summary>
            0 => Order by job type
            1 => Order by job's start date
            2 => Order by job's end date
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.TradeBoardFilterModel.Sort">
            <summary>
            "asc" Order ascending
            "desc" Order descending
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.UserOrProfileFilterModel">
            <summary>
            Class is used as filter model for user of profile dropdown
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UserOrProfileFilterModel.SearchByUsers">
            <summary>
            Indicator should we search by users
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UserOrProfileFilterModel.SearchTerm">
            <summary>
            Search term
            </summary>
        </member>
        <member name="T:ESolve.Entities.Filters.UsersFilterModel">
            <summary>
            Filter for users
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.LinkedEmployees">
            <summary>
            Linked Employee filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.UsersIds">
            <summary>
            Users' Ids for filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.ProfilesIds">
            <summary>
            Profiles' Ids for filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.UserNames">
            <summary>
            Users' Usernames for filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.FirstNames">
            <summary>
            Users' Firstnames for filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.LastNames">
            <summary>
            Users' Lastnames for filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.EmailIds">
            <summary>
            Users' EmailIds for filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.MobileNumbers">
            <summary>
            Users' Mobilenumbers for filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Filters.UsersFilterModel.ImageSize">
            <summary>
            User's image size
            </summary>
        </member>
        <member name="M:ESolve.Entities.Filters.UsersFilterModel.Clone">
            <summary>
            FilterModelBase Clone object Implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Pagination.EmployeeFilterModel">
            <summary>
            Represents model for searching Employees.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.ImageSize">
            <summary>
            Represent size of wanted image to be returned.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.SearchByEmployee">
            <summary>
            Indicator should employees be searched by name or by skillcode
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.SkillCodesIds">
            <summary>
            Property for searching employees by skill codes.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.EmployeesIds">
            <summary>
            Property for searching employees by their ids.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.DepartmentsIds">
            <summary>
            List of departments' primary keys for filtering employees by departments
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.DivisionsIds">
            <summary>
            List of divisions' primary keys for filtering employees by divisions
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.ClassesIds">
            <summary>
            List of classes' primary keys for filtering employees by classes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.CostCodesIds">
            <summary>
            List of cost codes' primary keys for filtering employees by cost codes
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.GendersIds">
            <summary>
            List of genders' primary keys for filtering employees by genders
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.LocationsIds">
            <summary>
            List of locations' primary keys for filtering employees by locations
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.JobTypesIds">
            <summary>
            List of job types' primary keys for filtering employees by job types
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.ManagersIds">
            <summary>
            List of managers' primary keys for filtering employees by managers
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.EmployeeFilterModel.ProfilesIds">
            <summary>
            List of profiles' primary keys for filtering employees by profiles
            </summary>
        </member>
        <member name="M:ESolve.Entities.Pagination.EmployeeFilterModel.#ctor">
            <summary>
            Initialize FilterModelBase
            </summary>
        </member>
        <member name="M:ESolve.Entities.Pagination.EmployeeFilterModel.Clone">
            <summary>
            Clone object
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Pagination.FilterModelBase">
            <summary>
            Represent base class for pagination. Since any filtering in our project will receive page and limit value, 
            we create this abstract class in order to each class can inherit it.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.FilterModelBase.SearchTerm">
            <summary>
            Represent term which we will use as criteria for searching.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.FilterModelBase.Page">
            <summary>
            Represents page for Datatable.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.FilterModelBase.Limit">
            <summary>
            Number of items we will get from Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.FilterModelBase.SortOrder">
            <summary>
            Represent sort order. [Asc or Desc]
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.FilterModelBase.Column">
            <summary>
            Represents Column which will be sorted.
            </summary>
        </member>
        <member name="M:ESolve.Entities.Pagination.FilterModelBase.#ctor">
            <summary>
            Setting up properties on default values
            </summary>
        </member>
        <member name="M:ESolve.Entities.Pagination.FilterModelBase.Clone">
            <summary>
            Clone Object.
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:ESolve.Entities.Pagination.SampleFilterModel">
            <summary>
            SampleFilter model 
            </summary>
        </member>
        <member name="M:ESolve.Entities.Pagination.SampleFilterModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ESolve.Entities.Pagination.SampleFilterModel.Clone">
            <summary>
            FilterModelBase Implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.Pagination.PagedCollectionResponse`1">
            <summary>
            Represents response for Datatables.
            </summary>
            <typeparam name="T">Represent Entity which will be Item.</typeparam>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.Items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.NextPage">
            <summary>
            Next page url
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.PreviousPage">
            <summary>
            Previous page url
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.TotalCount">
            <summary>
            Total count of items in Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.TotalCountAfterFilter">
            <summary>
            Total count of items which satisifed search term.
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.TotalColumnCount">
            <summary>
            Total number of column
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.Limit">
            <summary>
            Items per page value
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.Page">
            <summary>
            Page number
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.AreRowsSwapped">
            <summary>
            Flag indicates if employees present columns on skill matrix page
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.SkillCodesIDs">
            <summary>
            Selected Skill Codes in filter
            </summary>
        </member>
        <member name="P:ESolve.Entities.Pagination.PagedCollectionResponse`1.JobTypesIDs">
            <summary>
            Selecvted job types in filter
            </summary>
        </member>
        <member name="T:ESolve.Entities.ShiftsGroup">
            <summary>
            Represents Shift model
            </summary>
        </member>
        <member name="P:ESolve.Entities.ShiftsGroup.Id">
            <summary>
            Database Primary Key
            </summary>
        </member>
        <member name="P:ESolve.Entities.ShiftsGroup.Name">
            <summary>
            Name of shift group
            </summary>
        </member>
        <member name="T:ESolve.Entities.PushNotificationManager">
            <summary>
            Manager for push notifications
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotificationManager._repositoryContext">
            <summary>
            Repository context
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotificationManager._hubContext">
            <summary>
            SignalR hub context
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotificationManager._emailSettingsRepository">
            <summary>
            Manager for Email settings
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotificationManager._dateTimeFormat">
            <summary>
            Date format set in the application
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotificationManager._dateScheduleDatePreferenceManager">
            <summary>
             Manager which is used for managing ScheduleDatePreference.
            </summary>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.#ctor(ESolve.Entities.RepositoryContext,Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmailSettings},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference})">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
            <param name="hubContext">SignalR hub context</param>
            <param name="emailSettingsRepository">Manager for Email settings</param>
            <param name="dateScheduleDatePreferenceManager">Date preferences</param>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.AddForUser(ESolve.Entities.Models.PushNotification,ESolve.Entities.Models.User)">
            <summary>
            Add new push notification into tblPushNotification
            </summary>
            <param name="entity">New entity for tblPushNotification</param>
            <param name="user">User which will be notified</param>
            <returns>Returns whether the entity was added successfully</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.AddNotificationForUser(ESolve.Entities.Models.PushNotification,ESolve.Entities.Models.User)">
            <summary>
            Add new push notification into tblPushNotification (except Email)
            </summary>
            <param name="entity"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.Add(ESolve.Entities.Models.PushNotification)">
            <summary>
            Add new push notification into tblPushNotification
            </summary>
            <param name="entity">New entity for tblPushNotification</param>
            <returns>Returns whether the entity was added successfully</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.Delete(ESolve.Entities.Models.PushNotification)">
            <summary>
            Delete from the tblPushNotification table
            </summary>
            <param name="entity">Deletion entity</param>
            <returns>Returns whether the entity was deleted successfully</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.Get(System.Int64)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.GetAll">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.GetAll(System.Int64,System.Boolean)">
            <summary>
            Get all notifications by userId
            </summary>
            <param name="id">Id of user or employee</param>
            <param name="isUser">Tells us whether it is a user or an employee</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.GetNumberOfUnreadNotifications(System.Int64,System.Boolean)">
            <summary>
            Get number of unread notifications
            </summary>
            <param name="id">Id of user or employee</param>
            <param name="isUser">Tells us whether it is a user or an employee</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.Update(System.Int64)">
            <summary>
            Update pushNotification
            </summary>
            <param name="pushNotificationId">Push notification for update</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.Update(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Multi update push notifications
            </summary>
            <param name="listOfNotificationsIds">Notification ids to be updated</param>
            <param name="isArchived">Should they be archived or deleted</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.GetAllNotificationForMobile(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Get all notifications by userId for mobile
            </summary>
            <param name="id">Id of user or employee</param>
            <param name="isUser">Tells us whether it is a user or an employee</param>
            <param name="isReaded"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.GetDateFormatByLocalesValue(System.String)">
            <summary>
            A method that, based on locales value, returns the date format
            </summary>
            <param name="value">Locales value</param>
            <returns>Date format</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.SendMail(System.String,ESolve.Entities.Models.PushNotification)">
            <summary>
            To send Email (Old Format)
            </summary>
            <param name="userEmail"></param>
            <param name="pushNotification"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.Update(ESolve.Entities.Models.PushNotification)">
            <summary>
            Not implemented
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.UpdateUserMobileDeviceMappings(ESolve.Entities.DTOs.RegisterOrDeregisterDeviceTokenDTO)">
            <summary>
            Update mappings to register or de-register mobile device token
            </summary>
            <param name="registerOrDeregisterDeviceTokenDTO"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.Add(System.Collections.Generic.List{ESolve.Entities.Models.PushNotification},System.Collections.Generic.List{ESolve.Entities.Models.Employee},System.String)">
            <summary>
            Add new push notification into tblPushNotification (New Format)
            </summary>
            <param name="notifications"></param>
            <param name="employees"></param>
            <param name="emailBody"></param>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.SendMessage(System.String,System.Int32)">
            <summary>
            Method for notify user about number of unread notifications.
            </summary>
            <param name="connectionIdOfUser"></param>
            <param name="number"></param>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.SendNotificationToMobileDevice(ESolve.Entities.Models.PushNotification)">
            <summary>
            Send push notification using Firebase Cloud Messaging (FCM) notification service to Android or IOS device
            </summary>
            <param name="pushNotification">Object of push notification entity</param>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.SendNotifications(System.Collections.Generic.List{ESolve.Entities.Models.PushNotification})">
            <summary>
            Sending notifications for more than one employee and users
            </summary>
            <param name="notifications">Notifications that will be added</param>
            <returns>Returns whether the notifications added successfully</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Exception thrown by DbContext when the saving of changes to the database fails. 
            Note that state entries referenced by this exception are not serialized due to security and accesses to the state
            entries after serialization will return null.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Exception thrown by DbContext when it was expected that SaveChanges for an entity would 
            result in a database update but in fact no rows in the database were affected.</exception>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.AddandSendNotifications(ESolve.Entities.Models.PushNotification,System.String)">
            <summary>
            Add Push/Email notifications and send
            </summary>
            <param name="entity"></param>
            <param name="emailBody"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.SendEMail(System.String,ESolve.Entities.Models.PushNotification,System.String)">
            <summary>
            To send Email (New Format)
            </summary>
            <param name="userEmail"></param>
            <param name="pushNotification"></param>
            <param name="emailBody"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.SendNotificationsForAttendance(System.Collections.Generic.List{ESolve.Entities.Models.PushNotification},System.Collections.Generic.List{ESolve.Entities.Models.EmailNotifications})">
            <summary>
            Send attendance confirmation Push notifications 
            </summary>
            <param name="notifications"></param>
            <param name="emailNotifications"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotificationManager.SendEmailForAttendanceConfirmation(ESolve.Entities.Models.EmailNotifications,System.String)">
            <summary>
            Send attendance confirmation Email
            </summary>
            <param name="notifications"></param>
            <param name="userEmail"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.PushNotifications.AbsenceNotificationManager">
            <summary>
            Manager for push notification for absence
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotifications.AbsenceNotificationManager._repositoryContext">
            <summary>
            Repository context
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotifications.AbsenceNotificationManager._employeesManager">
            <summary>
            Manager which is used for managing Employee.
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotifications.AbsenceNotificationManager._absenceCodeManager">
            <summary>
            Manager which is used for managing Employee.
            </summary>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.#ctor(ESolve.Entities.RepositoryContext,Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.Employee},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.AbsenceCode},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmailSettings})">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Repository context</param>
            <param name="hubContext">SignalR hub context</param>
            <param name="employeeManager">Manager which is used for managing Employee.</param>
            <param name="absenceCodeManager">Manager which is used for managing AbsenceCode.</param>
            <param name="dateScheduleDatePreferenceManager">Manager which is used for managing ScheduleDatePreference.</param>
            <param name="emailSettingsRepository"></param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.RemoveOrArchiveNotificationsForAbsenceRequests(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Mark as read notifications for absences request
            </summary>
            <param name="absenceRequestsId">absenceRequestsId</param>
            <param name="isArchive">Flag indicates if notifications should be remived or archived.</param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.RemoveOrArchiveNotificationsForAbsenceRequests(System.Collections.Generic.List{System.Int64},System.Boolean,System.Int64,System.String)">
            <summary>
            Mark as read notifications for absences request
            </summary>
            <param name="absenceRequestsId">absenceRequestsId</param>
            <param name="isArchive">Flag indicates if notifications should be remived or archived.</param>
            <param name="managerId">managerId</param>
            <param name="role">It's user or employee</param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.CreateEmployeeNotificationFromAbsence(ESolve.Entities.Models.EmployeeAbsence,System.String,System.String)">
            <summary>
            A method for generating notifications for employee
            </summary>
            <param name="employeeAbsence">Employee absence</param>
            <param name="link">Link for push notification</param>
            <param name="title">Title of notification</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.CreateEmployeeNotificationFromAbsenceRequest(System.Boolean,ESolve.Entities.Models.AbsenceRequest,System.String,ESolve.Entities.Models.Employee)">
            <summary>
             A method for generating notifications from absence request
            </summary>
            <param name="isApproved">Is absence request approved</param>
            <param name="absenceRequest">Absence request</param>
            <param name="link">Link for push notification</param>
            <param name="employee">Employees for whom the notification is</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.GenerateLinkForAbsenceRequest(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Int64)">
            <summary>
            For passed properties method will generate acces link
            </summary>
            <param name="url">Url </param>
            <param name="methodName">Acces method name</param>
            <param name="className">Controller name</param>
            <param name="id">Parameter Id</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.CreateNotificationForManagerFromAbsenceRequest(ESolve.Entities.Models.AbsenceRequest,System.String,System.Int64)">
            <summary>
            For passed parameter method will generate UserNotification
            </summary>
            <param name="absenceRequest">Absence request</param>
            <param name="link">Access link for AbsenceRequest</param>\
            <param name="managerId">Id from the manager to whom the notification should be sent</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.GenerateEmployeeNotification(System.Boolean,System.String,System.String,ESolve.Entities.Models.EmployeeAbsence,ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Generating notification for the employee
            </summary>
            <param name="isApproved">Whether the request was approved</param>
            <param name="link"></param>
            <param name="title">Title of notification</param>
            <param name="employeeAbsence">Employee absence</param>
            <param name="absenceRequest">Absence request</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.GenerateEmployeeNotificationAboutDeletion(ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Generate notification for employees, about deleting absence request.
            </summary>
            <param name="absenceRequest">Absence request</param>
            <returns>Push notification for sending</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.GenerateUserNotificationAboutDeletion(ESolve.Entities.Models.AbsenceRequest)">
            <summary>
            Generate notification for users, about deleting absence request.
            </summary>
            <param name="absenceRequest">Absence request</param>
            <returns>Push notification for sending</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.GenerateEmailBodyForAbsenceDeletion(ESolve.Entities.Models.AbsenceRequest,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="absenceRequest"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AbsenceNotificationManager.GenerateUserNotificationAboutEmployeeDeletionRequest(ESolve.Entities.Models.AbsenceRequest,System.Int64)">
            <summary>
            Generate notification for users, about employee deleting request.
            </summary>
            <param name="absenceRequest">Absence request</param>
            <param name="employeeId">Id of employee</param>
            <returns>Push notification for sending</returns>
        </member>
        <member name="T:ESolve.Entities.PushNotifications.AssignmentNotificationManager">
            <summary>
            Manager for notifications
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotifications.AssignmentNotificationManager._repositoryContext">
            <summary>
            Repository context
            </summary>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.#ctor(ESolve.Entities.RepositoryContext,Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmailSettings},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference})">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
            <param name="hubContext">SignalR hub context</param>
            <param name="emailSettingsRepository">Manager for Email settings</param>
            <param name="dateScheduleDatePreferenceManager">Manager for ScheduleDatePreference settings</param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.NotifyAssignmentsUpdates(System.Collections.Generic.List{ESolve.Entities.Models.JobAvailability},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for notify employees about new or modify assignments
            </summary>
            <param name="jobAvailabilities">Updated JobAvailabilities</param>
            <param name="configuration"></param>
            <exception cref="T:System.ArgumentNullException">This exception will be raised if some argument is NULL</exception>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.NotifyAssignmentsUpdatesForJobOffer(ESolve.Entities.Models.JobAvailability,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            
            </summary>
            <param name="jobAvailability"></param>
            <param name="configuration"></param>
            <param name="isEmployeeAlreadyAssigned"></param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.NotifyEmployeesAboutNewAssignments(ESolve.Entities.DTOs.AssignmentNotificationListDTO,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for notify employees about new or modify assignments
            </summary>
            <param name="assignmentNotificationListDto">Name of schedule and list of new and modify assignments</param>
            <param name="configuration"></param>
            <exception cref="T:System.ArgumentNullException">This exception will be raised if some argument is NULL</exception>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.NotifyEmployeesAboutAssignmentsForJobOffer(ESolve.Entities.DTOs.AssignmentNotificationListDTO,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            
            </summary>
            <param name="assignmentNotificationListDto"></param>
            <param name="configuration"></param>
            <param name="isEmployeeAlreadyAssigned"></param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.GetDateFormatByLocalesValue(System.String)">
            <summary>
            A method that, based on locales value, returns the date format
            </summary>
            <param name="value">Locales value</param>
            <returns>Date format</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.GeneratePushNotificationForNewAssignments(ESolve.Entities.DTOs.AssignmentNotificationDTO,System.String,System.String)">
            <summary>
            Method for generating push notifications for new assignments
            </summary>
            <param name="availability">Assignment for which the notification is generated</param>
            <param name="scheduleName">Name of schedule</param>
            <param name="nameOfFirstDayInWeek">Name of first day in week</param>
            <returns>Generated push notification</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.GeneratePushNotificationFoModifyAssignments(ESolve.Entities.DTOs.AssignmentNotificationDTO,System.String,System.String)">
            <summary>
            Method for generating push notifications for modify assignments
            </summary>
            <param name="availability">Assignment for which the notification is generated</param>
            <param name="scheduleName">Name of schedule</param>
            <param name="startDayOfWeek">Name of schedule</param>
            <returns>Generated push notification</returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.AssignmentNotificationManager.GetAssignmentNotificationDTO(ESolve.Entities.Models.JobAvailability)">
            <summary>
            
            </summary>
            <param name="jobAvailability"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.PushNotifications.JobOfferNotificationManager">
            <summary>
            Class can generate notifications for joboffers
            </summary>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.JobOfferNotificationManager.#ctor(ESolve.Entities.RepositoryContext,Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmailSettings})">
            <summary>
            Constructor which initialize all parameters
            </summary>
            <param name="context">Repository Context</param>
            <param name="hubContext">Signal R hub context</param>
            <param name="dateScheduleDatePreferenceManager">ScheduleDatePreference manager</param>
            <param name="emailSettingsRepository">EmailSettings repository</param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.JobOfferNotificationManager.GenerateNotifications(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{ESolve.Entities.DTOs.JobOffer.JobOfferNotificationDTO}},System.DateTime,System.Collections.Generic.List{ESolve.Entities.Models.Employee},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            for passed collection of object method will generate notifications for employees and notify them
            </summary>
            <param name="employeeNotifications"></param>
            <param name="dateTimeCreated"></param>
            <param name="employees"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.JobOfferNotificationManager.ConvertIntTotring(System.Int32)">
            <summary>
            Method converts passed number to string with two digits
            </summary>
            <param name="number">Number which will be converted</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Entities.PushNotifications.NotificationManager">
            <summary>
            Manager for notifications
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotifications.NotificationManager._repositoryContext">
            <summary>
            Repository context
            </summary>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.NotificationManager.#ctor(ESolve.Entities.RepositoryContext,Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmailSettings},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference})">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Context which will be injected in RepositoryContext</param>
            <param name="hubContext">SignalR hub context</param>
            <param name="emailSettingsRepository">Manager for Email settings</param>
            <param name="dateScheduleDatePreferenceManager">Manager for ScheduleDatePreference settings</param>
        </member>
        <member name="T:ESolve.Entities.PushNotifications.PushNotificationHub">
            <summary>
            Manager in charge of push notifications
            </summary>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.PushNotificationHub.GetConnectionId">
            <summary>
            Method for obtaining connection id
            </summary>
            <returns>Connection id</returns>
        </member>
        <member name="T:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager">
            <summary>
            Manager for push notification for submit approval
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager._repositoryContext">
            <summary>
             Context which will be injected in RepositoryContext
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager._dateScheduleDatePreferenceManager">
            <summary>
             Manager which is used for managing ScheduleDatePreference.
            </summary>
        </member>
        <member name="F:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager._assignmentNotificationManager">
            <summary>
             Manager which is used for send notification for Assignemnts.
            </summary>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.#ctor(ESolve.Entities.RepositoryContext,Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.EmailSettings},ESolve.Entities.Repository.IRepositoryBase{ESolve.Entities.Models.ScheduleDatePreference})">
            <summary>
            Constructor which initialize RepositoryContext
            </summary>
            <param name="context">Repository context</param>
            <param name="hubContext">SignalR hub context</param>
            <param name="emailSettingsRepository">Manager which is used for managing emails</param>
            <param name="dateScheduleDatePreferenceManager">Manager which is used for managing schedule date preferences</param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.SubmitForApprovalNotifications(ESolve.Entities.DTOs.SubGroupsForSubmitDTO,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for sending push notification to users
            </summary>
            <param name="subGroupsForSubmit">Details about submitted request</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.ResendApprovalNotifications(System.Collections.Generic.List{ESolve.Entities.Models.SubGroupsApproval},ESolve.Entities.DataManager.ScheduleManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for re sending notification to users
            </summary>
            <param name="groupsApprovals">Approvals which will be re notified</param>
            <param name="scheduleManager">Manager for accessing schedules</param>
            <param name="configuration"></param>
            <exception cref="T:System.ArgumentNullException">If some argument is NULL this exception will be raised</exception>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.ApproveOrRejectedSubmittedItemNotification(ESolve.Entities.DTOs.IdBooleanCustomDTO,ESolve.Entities.Models.SubGroupsApproval,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for sending push notification to users about approve or rejected submitted date range
            </summary>
            <param name="idBooleanCustom">Id and boolean value are schedule approved</param>
            <param name="subGroupsApproval">Sub group approvals</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.NotifyEmployeesAboutNewAssignments(ESolve.Entities.DTOs.AssignmentNotificationListDTO,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method for notify employees about new or modify assignments
            </summary>
            <param name="assignmentNotificationListDto">Name of schedule and list of new and modify assignments</param>
            <param name="configuration"></param>
            <exception cref="T:System.ArgumentNullException">This exception will be raised if some argument is NULL</exception>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.GeneratePushNotificationForSubmitApproval(ESolve.Entities.DTOs.SubGroupsForSubmitDTO,ESolve.Entities.Models.User,System.String)">
            <summary>
            Method for generating push notifications for users
            </summary>
            <param name="subGroupsForSubmit">Details about submitted request</param>
            <param name="user">User who will receive notification</param>
            <param name="scheduleName">Schedule Name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.GeneratePushNotificationForSubmitApproval(System.DateTime,System.DateTime,ESolve.Entities.Models.User,System.String)">
            <summary>
            Method for generating push notifications for users
            </summary>
            <param name="startDate">Start Date submitted request</param>
            <param name="endDate">End Date submitted request</param>
            <param name="user">User who will receive notification</param>
            <param name="scheduleName">Schedule Name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.GeneratePushNotificationAboutApproveOrRejectedSubmittedPeriod(ESolve.Entities.Models.SubGroupsApproval,ESolve.Entities.DTOs.IdBooleanCustomDTO,System.Nullable{System.Int64},System.String)">
            <summary>
            Method for generating push notifications for users
            </summary>
            <param name="subGroupsApproval">Details about submitted request</param>
            <param name="idBooleanCustom">Is request approved or rejected</param>
            <param name="userId">Id of user</param>
            <param name="scheduleName">Schedule name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.PushNotifications.SubmitApprovalNotificationManager.GetDateFormatByLocalesValue(System.String)">
            <summary>
            A method that, based on locales value, returns the date format
            </summary>
            <param name="value">Locales value</param>
            <returns>Date format</returns>
        </member>
        <member name="T:ESolve.Entities.RepositoryContext">
            <summary>
            Repository context which represent context of Database.
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblScheduleSyncRequestResults">
            <summary>
            Database context for tabel ScheduleSyncRequestResult
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblScheduleAssigmentsResults">
            <summary>
            Database context for tabel ScheduleAssigmentsResults
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeSyncs">
            <summary>
            Database context for tabel EmployeeSync
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSyncStatuses">
            <summary>
            Database context for tabel SyncStatus
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSuperAdmins">
            <summary>
            Database context for tabel SuperAdmin
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobOffers">
            <summary>
            Database JobOffer context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobOffersForAutoAssigments">
            <summary>
            Database JobOfferForAutoAssigment context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobOfferStatuses">
            <summary>
            Database JobOfferStatus context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUserAbsences">
            <summary>
            Database UserAbsences context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUnlockedSubGroups">
            <summary>
            Database UnlockedSubGroup context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUnlockedRanges">
            <summary>
            Database UnlockedSubGroup context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUserNotifications">
            <summary>
            Database UserNotification context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeNotifications">
            <summary>
            Database EmployeeNotification context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAbsenceRequests">
            <summary>
            Database AbsenceRequest context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAbsencePreferences">
            <summary>
            Database AbsencePreferences context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintMNODOTWs">
            <summary>
            Database ConstraintMNODOTW context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintMNOHs">
            <summary>
            Database ConstraintMNOH context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintMNOJTCs">
            <summary>
            Database ConstraintMNOJTC context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintDOWPs">
            <summary>
            Database ConstraintDOWP context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintCustomDatas">
            <summary>
            Database ConstraintCustomData context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintCustomRanges">
            <summary>
            Database ConstraintCustomRange context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintBaseDateRanges">
            <summary>
            Database ConstraintBaseDateRange context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintSetValues">
            <summary>
            Database ConstraintSetValue context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintEMWWAEs">
            <summary>
            Database tblConstraintEmployeeMustWorkWithAnotherEmployee context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintEMNWWAEs">
            <summary>
            Database tblConstraintEmployeeMustNotWorkWithAnotherEmployee context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintSSs">
            <summary>
            Database ConstraintSS context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintMNOJTs">
            <summary>
            Database ConstraintMNOJT context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintMNOJTIMEs">
            <summary>
            Database tblConstraintMNOJTIMEs context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblClasses">
            <summary>
            Database tblClasses context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblCostCodes">
            <summary>
            Database tblCostCodes context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblDepartments">
            <summary>
            Database tblDepartments context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblDivisions">
            <summary>
            Database tblDivisions context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployees">
            <summary>
            Database tblEmployees context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUserImages">
            <summary>
            Database tblUserImages context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblProfiles">
            <summary>
            Database tblEmployeeProfiles context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblGenders">
            <summary>
            Database tblGenders context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblImageSizes">
            <summary>
            Database tblImageSizes context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobTitles">
            <summary>
            Database tblJobTitles context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobTypes">
            <summary>
            Database tblJobTypes context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLocations">
            <summary>
            Database tblLocations context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblNotificationTypes">
            <summary>
            Database tblNotificationTypes context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTargetRuleGroups">
            <summary>
            Database tblTargetRuleGroups context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTeams">
            <summary>
            Database tblTeams context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblCustomDataTypes">
            <summary>
            Database tblCustomDataTypes context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblCustomDatas">
            <summary>
            Database tblCustomDatas context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobs">
            <summary>
            Database tblJobs context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobCustomDatas">
            <summary>
            Database tblJobCustomDatas context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeSchedHrsStatuses">
            <summary>
            Database tblEmployeeSchedHrsStatuses context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobStatuses">
            <summary>
            Database tblJobStatuses context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLicenses">
            <summary>
            Database tblLicenses context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSchedules">
            <summary>
            Database tblSchedules context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblScheduleCustomDatas">
            <summary>
            Database tblScheduleCustomDatas context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSubGroupCustomDatas">
            <summary>
            Database tblSubGroupCustomDatas context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTimeUnits">
            <summary>
            Database tblTimeUnits context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSubGroups">
            <summary>
            Database tblSubGroups context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAbsenceCodes">
            <summary>
            Database tblAbsenceCodes context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAbsenceStatuses">
            <summary>
            Database tblAbsenceStatuses context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeAbsences">
            <summary>
            Database tblEmployeeAbsences context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblCompanies">
            <summary>
            Database tblCompanies context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSkillMatrices">
            <summary>
            Database tblSkillMatrices context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraintRules">
            <summary>
            Database tblConstraintRules context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConstraints">
            <summary>
            Database tblConstraints context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblRankingRules">
            <summary>
            Database tblRankingRules context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblRankingTypes">
            <summary>
            Database tblRankingTypes context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblRankings">
            <summary>
            Database tblRankings context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTargetRuleConfigs">
            <summary>
            Database tblTargetRuleConfigs context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTargetRules">
            <summary>
            Database tblTargetRules context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSkillCodes">
            <summary>
            Database tblSkillCodes context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblScheduleDatePreferences">
            <summary>
            Database tblScheduleDatePreferences context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSchedulePreferences">
            <summary>
            Database tblSchedulePreferences context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblCustomDataLookups">
            <summary>
            Database tblCustomDataLookups context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobTypeEssentialComparisonRules">
            <summary>
            Database tblJobTypeEssentialComparisonRules context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobTypeNonEssentialComparisonRules">
            <summary>
            Database tblJobTypeNonEssentialComparisonRules context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobTypeEssentialComparisonRuleTextValues">
            <summary>
            Database tblJobTypeEssentialComparisonRuleTextValues context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobTypeNonEssentialComparisonRuleTextValues">
            <summary>
            Database tblJobTypeNonEssentialComparisonRuleTextValues context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobAvailabilities">
            <summary>
            Database tblJobAvailabilities context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeConstraints">
            <summary>
            Database tblJobAvailabilities context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLocales">
            <summary>
            Database tblLocales context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSecurity">
            <summary>
            Database tblSecurity context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSyncSettings">
            <summary>
            Database SyncSettings context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSync">
            <summary>
            Database Sync context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeTile">
            <summary>
            Database EmployeeTile context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmailSettings">
            <summary>
            Database tblEmailSettings 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplates">
            <summary>
            Database tblTemplates 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSchedulePermissions">
            <summary>
            Database tblSchedulePermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAbsencePermissions">
            <summary>
            Database tblAbsencePermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSystemPermissions">
            <summary>
            Database tblSystemPermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeePermissions">
            <summary>
            Database tblEmployeePermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblReportPermissions">
            <summary>
            Database tblReportPermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblPermissionTypes">
            <summary>
            Database tblPermissionTypes 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblPanelPermissions">
            <summary>
            Database tblPanelPermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblPermissionOptions">
            <summary>
            Database tblPermissionOptions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblBrokenRules">
            <summary>
            Database tblBrokenRules 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblOrganisationFields">
            <summary>
            Database tblOrganisationFields 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLinkedEmployeeRights">
            <summary>
            Database tblLinkedEmployeeRights 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblScheduleRights">
            <summary>
            Database tblScheduleRights 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUserSchedulePermissions">
            <summary>
            Database tblUserSchedulePermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUserTemplatePermissions">
            <summary>
            Database tblUserTemplatePermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUserEmployeePermissions">
            <summary>
            Database tblUserEmployeePermissions 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUsers">
            <summary>
            Database tblUsers 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSpecialDateTypes">
            <summary>
            Database tblSpecialDateTypes 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSpecialDates">
            <summary>
            Database tblSpecialDates 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAutoSolveTime">
            <summary>
             Database tblAutoSolveTime 
             </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblScheduleMaxAndMinJobDate">
            <summary>
             Database tblScheduleMaxAndMinJobDate
             </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblReportTypes">
            <summary>
            Database tblReports
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblReportGroups">
            <summary>
            Database tblReportGroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobTypeEssentialSkills">
             JobTypeEssentialSkillCode Database table
            <summary>
             Database tblJobTypeEssentialSkills
             </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobTypeNonEssentialSkills">
            <summary>
             Database tblJobTypeNonEssentialSkills
             </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSubGroupsApprovals">
            <summary>
            Database tblSubGroupsApprovals
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateSchedules">
            <summary>
            Database tblTemplateSchedules
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateSubGroups">
            <summary>
            Database tblTemplateSubGroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateJobs">
            <summary>
            Database tblTemplateJobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblPushNotifications">
            <summary>
            Database tblPushNotification
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLinkInfo">
            <summary>
            Database tblLinkInfo
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblGDPR">
            <summary>
            Database tblGDPR
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblWorkRules">
            <summary>
            Database tblWorkRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateJobAvailabilities">
            <summary>
            Database tblTemplateJobAvailabilities
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateJobCustomDatas">
            <summary>
            Database tblTemplateJobCustomDatas
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateConstraints">
            <summary>
            Database tblTemplateConstraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateEmployeeConstraints">
            <summary>
            Database tblTemplateEmployeeConstraints
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateConstraintRules">
            <summary>
            Database tblTemplateConstraintRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateConstraintEMWWAEs">
            <summary>
            Database tblTemplateConstraintEMWWAEs
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateConstraintEMNWWAEs">
            <summary>
            Database tblTemplateConstraintEMNWWAEs
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateConstraintSetValues">
            <summary>
            Database tblTemplateConstraintSetValues
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateScheduleCustomDatas">
            <summary>
            Database tblTemplateScheduleCustomDatas
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateSubGroupCustomDatas">
            <summary>
            Database tblTemplateSubGroupCustomDatas
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateScheduleMaxAndMinJobDates">
            <summary>
            Database tblTemplateScheduleMaxAndMinJobDates
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblTemplateBrokenRules">
            <summary>
            Database tblTemplateBrokenRules
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblInsertedTemplates">
            <summary>
            Database tblInsertedTemplates
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblInsertedJobs">
            <summary>
            Database tblInsertedJobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblInsertedSubGroups">
            <summary>
            Database tblInsertedSubGroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeesTradeOffers">
            <summary>
            Database tblEmployeesTradeOffers
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeesOwnTradeOffers">
            <summary>
            Database tblEmployeesOwnTradeOffers
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblRecordsForTrade">
            <summary>
            Database tblRecordsForTrade
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLockedJobs">
            <summary>
            Database tblLockedJobs
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblShifts">
            <summary>
            Database tblShifts
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblShiftsGroups">
            <summary>
            Database tblShiftsGroups
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUserShiftsPermissions">
            <summary>
            Database tblUserShiftsPermissions
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLoneWorkerCheckIns">
            <summary>
            Database tblLoneWorkerCheckIns
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLoneWorkerAlerts">
            <summary>
            Database tblLoneWorkerAlerts
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblLoneWorkerTransactionLogs">
            <summary>
            Database tblLoneWorkerTransactionLogs
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAttendanceConfirmations">
            <summary>
            Database tblAttendanceConfirmations
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAgencies">
            <summary>
            Database tblAgencies
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAgencyReasonsToCover">
            <summary>
            Database tblAgencyReasonsToCover
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAgencyTemplateJobAssignments">
            <summary>
            Database tblAgencyTemplateJobAssignments
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAgencyJobAssignments">
            <summary>
            Database tblAgencyJobAssignments
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblRankingComparisonValues">
            <summary>
            Database tblRankingComparisonValues
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblJobsHistory">
            <summary>
            Database tblJobsHistory
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeLocations">
            <summary>
            Database tblEmployeeLocations
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeLocationViaIntegration">
            <summary>
            Database tblEmployeeLocationViaIntegration
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSkillMatrixSearches">
            <summary>
            Database tblSkillMatrixSearches
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblSkillMatrixFilterSearches">
            <summary>
            Database tblSkillMatrixFilterSearches
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblEmployeeAvailability">
            <summary>
            Database tblEmployeeAvailability
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAuditTrail">
            <summary>
            Database tblAuditTrail
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblBackwardCompatibilityChecks">
            <summary>
            Database tblBackwardCompatibilityChecks
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblConfigSettings">
            <summary>
            Database tbConfigSettings context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblAdvancedSSO">
            <summary>
            Database tblAdvancedSSO context 
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblASSOMigrationDetails">
            <summary>
            Database tblASSOMigrationDetails context
            </summary>
        </member>
        <member name="P:ESolve.Entities.RepositoryContext.tblUserMobileDeviceMappings">
            <summary>
            Database tblUserMobileDeviceMappings context
            </summary>
        </member>
        <member name="M:ESolve.Entities.RepositoryContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Initialize context 
            </summary>
        </member>
        <member name="M:ESolve.Entities.RepositoryContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Add constraints on model creating.
            </summary>
        </member>
        <member name="T:ESolve.Entities.Repository.IRepositoryBase`1">
            <summary>
            Interface which will implement each entity
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
        </member>
        <member name="M:ESolve.Entities.Repository.IRepositoryBase`1.GetAll">
            <summary>
            Will List of Items of certain type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.Repository.IRepositoryBase`1.Get(System.Int64)">
            <summary>
            Gets one entity
            </summary>
            <param name="id">Represent id of passed entity</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Entities.Repository.IRepositoryBase`1.Add(`0)">
            <summary>
            Adds new entity in database
            </summary>
            <param name="entity">Id of Entity which should be returned.</param>
            <returns>Object if action is sucessfull, or null in other case.</returns>
        </member>
        <member name="M:ESolve.Entities.Repository.IRepositoryBase`1.Update(`0)">
            <summary>
            Update existing entity with new values
            </summary>
            <param name="entity">Entity which will be updated.</param>
            <returns>True if action is sucessfull, or false in other case.</returns>
        </member>
        <member name="M:ESolve.Entities.Repository.IRepositoryBase`1.Delete(`0)">
            <summary>
            Removes passed entity
            </summary>
            <param name="entity">Entity which will be removed.</param>
            <returns>True if action is sucessfull, or false in other case.</returns>
        </member>
        <member name="T:ESolve.CustomSecurityTokenValidator">
            <summary>
            Class contains methods to validate token
            </summary>
        </member>
        <member name="M:ESolve.CustomSecurityTokenValidator.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="scopeFactory"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.CustomSecurityTokenValidator.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters,Microsoft.IdentityModel.Tokens.SecurityToken@)">
            <summary>
            Validate access token received from Advanced platform to perform single sign on
            </summary>
            <param name="securityToken"></param>
            <param name="validationParameters"></param>
            <param name="validatedToken"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.ClassesIntegrationBL">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.ClassesIntegrationBL.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            
            </summary>
            <param name="repositoryContext"></param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.ClassesIntegrationBL.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            
            </summary>
            <param name="lookupItem"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.ClassesIntegrationBL.Delete(System.Int64)">
            <summary>
            
            </summary>
            <param name="lookupItemID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.ClassesIntegrationBL.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            
            </summary>
            <param name="limitModel"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.ClassesIntegrationBL.GetByID(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.ClassesIntegrationBL.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.ClassesIntegrationBL.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.CostCodesIntegrationBL">
            <summary>
            CostCode integration busniess logic
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.CostCodesIntegrationBL.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initalise dabatase context
            </summary>
            <param name="repositoryContext">Repository context</param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.CostCodesIntegrationBL.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Add new value to the database
            </summary>
            <param name="lookupItem">Item which will be added</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.CostCodesIntegrationBL.Delete(System.Int64)">
            <summary>
            Delete item from database
            </summary>
            <param name="lookupItemID">Lookup item primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.CostCodesIntegrationBL.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get list of objects
            </summary>
            <param name="limitModel">Paggination model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.CostCodesIntegrationBL.GetByID(System.Int64)">
            <summary>
            Get LookupItem by Primary key
            </summary>
            <param name="id">Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.CostCodesIntegrationBL.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Check is passed name occupied
            </summary>
            <param name="model">Model with new name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.CostCodesIntegrationBL.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Update passed object
            </summary>
            <param name="model">Model with new values</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.DepartmentsIntegrationBL">
            <summary>
            Departments integration busniess logic
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DepartmentsIntegrationBL.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initalise dabatase context
            </summary>
            <param name="repositoryContext">Repository context</param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DepartmentsIntegrationBL.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Add new value to the database
            </summary>
            <param name="lookupItem">Item which will be added</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DepartmentsIntegrationBL.Delete(System.Int64)">
            <summary>
            Delete item from database
            </summary>
            <param name="lookupItemID">Lookup item primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DepartmentsIntegrationBL.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get list of objects
            </summary>
            <param name="limitModel">Paggination model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DepartmentsIntegrationBL.GetByID(System.Int64)">
            <summary>
            Get LookupItem by Primary key
            </summary>
            <param name="id">Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DepartmentsIntegrationBL.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Check is passed name occupied
            </summary>
            <param name="model">Model with new name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DepartmentsIntegrationBL.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Update passed object
            </summary>
            <param name="model">Model with new values</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.DivisionsIntegrationBL">
            <summary>
            Diviosions integration buissnies logic
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DivisionsIntegrationBL.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initalise dabatase context
            </summary>
            <param name="repositoryContext">Repository context</param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DivisionsIntegrationBL.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Add new value to the database
            </summary>
            <param name="lookupItem">Item which will be added</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DivisionsIntegrationBL.Delete(System.Int64)">
            <summary>
            Delete item from database
            </summary>
            <param name="lookupItemID">Lookup item primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DivisionsIntegrationBL.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get list of objects
            </summary>
            <param name="limitModel">Paggination model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DivisionsIntegrationBL.GetByID(System.Int64)">
            <summary>
            Get LookupItem by Primary key
            </summary>
            <param name="id">Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DivisionsIntegrationBL.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Check is passed name occupied
            </summary>
            <param name="model">Model with new name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.DivisionsIntegrationBL.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Update passed object
            </summary>
            <param name="model">Model with new values</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.EmployeeDataTypeBL">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.EmployeeDataTypeBL.#ctor(ESolve.Entities.PushNotifications.AssignmentNotificationManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="assignmentNotificationManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.EmployeeDataTypeBL.AddCustomDataLookupsValue(System.String,System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            AddCustomDataLookupsValue
            </summary>
            <param name="lookupName"></param>
            <param name="name"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.EmployeeDataTypeBL.UpdateCustomDataLookupsValue(System.String,System.String,System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            UpdateCustomDataLookupsValue
            </summary>
            <param name="lookupName"></param>
            <param name="id"></param>
            <param name="name"></param>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.EmployeeDataTypeBL.DeleteCustomDataLookupsValue(System.String,System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            DeleteCustomDataLookupsValue
            </summary>
            <param name="lookupName"></param>
            <param name="oldName"></param>
            <param name="context"></param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.EmployeeDataTypeBL.GetOldValue(System.String,System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            GetOldValue
            </summary>
            <param name="lookupName"></param>
            <param name="id"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.EmployeesBL.EmployeeIntegrationBL">
            <summary>
            Buisniess Logic for integration employees from eSolve and TMS
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.JobTitlesIntegrationBL">
            <summary>
            JobTitles integration buisniess logic
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.JobTitlesIntegrationBL.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initalise dabatase context
            </summary>
            <param name="repositoryContext">Repository context</param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.JobTitlesIntegrationBL.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Add new value to the database
            </summary>
            <param name="lookupItem">Item which will be added</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.JobTitlesIntegrationBL.Delete(System.Int64)">
            <summary>
            Delete item from database
            </summary>
            <param name="lookupItemID">Lookup item primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.JobTitlesIntegrationBL.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get list of objects
            </summary>
            <param name="limitModel">Paggination model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.JobTitlesIntegrationBL.GetByID(System.Int64)">
            <summary>
            Get LookupItem by Primary key
            </summary>
            <param name="id">Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.JobTitlesIntegrationBL.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Check is passed name occupied
            </summary>
            <param name="model">Model with new name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.JobTitlesIntegrationBL.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Update passed object
            </summary>
            <param name="model">Model with new values</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.LocationIntegrationBL">
            <summary>
            Location integration buissnies logic
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LocationIntegrationBL.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initalise dabatase context
            </summary>
            <param name="repositoryContext">Repository context</param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LocationIntegrationBL.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Add new value to the database
            </summary>
            <param name="lookupItem">Item which will be added</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LocationIntegrationBL.Delete(System.Int64)">
            <summary>
            Delete item from database
            </summary>
            <param name="lookupItemID">Lookup item primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LocationIntegrationBL.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get list of objects
            </summary>
            <param name="limitModel">Paggination model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LocationIntegrationBL.GetByID(System.Int64)">
            <summary>
            Get LookupItem by Primary key
            </summary>
            <param name="id">Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LocationIntegrationBL.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Check is passed name occupied
            </summary>
            <param name="model">Model with new name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LocationIntegrationBL.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Update passed object
            </summary>
            <param name="model">Model with new values</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL">
            <summary>
            Lookups integration buissnies logic
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.#ctor(System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor
            </summary>
            <param name="action">Selected action</param>
            <param name="repositoryContext">repository context for accessing database</param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Adding new lookup in database
            </summary>
            <param name="lookupItem">Item which will be stored</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.Delete(System.Int64)">
            <summary>
            Removing lookup item from database
            </summary>
            <param name="lookupItemID">Item which will be deleted from database</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get collection
            </summary>
            <param name="limitModel"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.Get(System.Int64)">
            <summary>
            Get one element
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.ValidateLookupName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.ValidateLimitModelBase(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            
            </summary>
            <param name="offsetLimitModel"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.ValidateOffsetModelBase(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            
            </summary>
            <param name="offsetLimitModel"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.LookupIntegrationBL.ValidateLookupId(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.BuisinessLogic.TeamsIntegrationBL">
            <summary>
            Teams integration busniess logic
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.TeamsIntegrationBL.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Constructor which initalise dabatase context
            </summary>
            <param name="repositoryContext">Repository context</param>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.TeamsIntegrationBL.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Add new value to the database
            </summary>
            <param name="lookupItem">Item which will be added</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.TeamsIntegrationBL.Delete(System.Int64)">
            <summary>
            Delete item from database
            </summary>
            <param name="lookupItemID">Lookup item primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.TeamsIntegrationBL.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get list of objects
            </summary>
            <param name="limitModel">Paggination model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.TeamsIntegrationBL.GetByID(System.Int64)">
            <summary>
            Get LookupItem by Primary key
            </summary>
            <param name="id">Primary key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.TeamsIntegrationBL.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Check is passed name occupied
            </summary>
            <param name="model">Model with new name</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.BuisinessLogic.TeamsIntegrationBL.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Update passed object
            </summary>
            <param name="model">Model with new values</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.Contracts.IIntegrationOperations">
            <summary>
            Base class for lookup integrations
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IIntegrationOperations.Add(ESolve.DataIntegrations.Models.LookupItemCreate)">
            <summary>
            Store new LookupItem
            </summary>
            <param name="lookupItem">item which will be created</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IIntegrationOperations.Delete(System.Int64)">
            <summary>
            Delete existsing lookup
            </summary>
            <param name="lookupItemID"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IIntegrationOperations.Get(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            
            </summary>
            <param name="limitModel"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IIntegrationOperations.GetByID(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IIntegrationOperations.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IIntegrationOperations.Update(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.Contracts.IGenericRepository`1">
            <summary>
            Interface which will implement repositories
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IGenericRepository`1.GetById(System.Int64)">
            <summary>
            Get Object by ID
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IGenericRepository`1.Add(`0)">
            <summary>
            Insert passed object in database
            </summary>
            <param name="entity">Object which will be stored in Database</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IGenericRepository`1.Update(System.Int64,`0)">
            <summary>
            Update values in database in passed objecy
            </summary>
            <param name="id">Primary Key in database</param>
            <param name="entity">Object with new values</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IGenericRepository`1.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Check is passed name occupied
            </summary>
            <param name="idName">Id name object</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IGenericRepository`1.Delete(`0)">
            <summary>
            Remove passed object from database
            </summary>
            <param name="entity">Object which will be removed</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Contracts.IGenericRepository`1.GetList(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get List of objects
            </summary>
            <param name="limitModel">model</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCode.AbsenceCodeId">
            <summary>
            Unique ID for absence code
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCode.Name">
            <summary>
            Name
            </summary>
            <example>BH</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCode.Description">
            <summary>
            Description
            </summary>
            <example>Bank Holiday</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCode.DisplayColor">
            <summary>
            Color to display absences using this absence code
            </summary>
            <example>#ff5733</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeCreate.Name">
            <summary>
            Name
            </summary>
            <example>BH</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeCreate.Description">
            <summary>
            Description
            </summary>
            <example>Bank Holiday</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeCreate.DisplayColor">
            <summary>
            Color to display absences using this absence code
            </summary>
            <example>#ff5733</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeCreated.AbsenceCodeId">
            <summary>
            Unique ID for absence code
            </summary>
            <example>1</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeUpdate.Name">
            <summary>
            Name
            </summary>
            <example>BH</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeUpdate.Description">
            <summary>
            Description
            </summary>
            <example>Bank Holiday</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.AbsenceCodes.AbsenceCodeUpdate.DisplayColor">
            <summary>
            Color to display absences using this absence code
            </summary>
            <example>#ff5733</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceCreate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceCreate.AbsenceCodeId">
            <summary>
            Unique ID for absence code
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceCreate.Start">
            <summary>
            Start date and time
            </summary>
            <example>2021-07-20T09:00:00Z</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceCreate.End">
            <summary>
            End date and time
            </summary>
            <example>2021-07-20T17:00:00Z</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceCreate.Hours">
            <summary>
            Absence hours
            </summary>
            <example>07:30:00</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceCreated.EmployeeAbsenceId">
            <summary>
            Unique ID for employee absence
            </summary>
            <example>1</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceUpdate.AbsenceCodeId">
            <summary>
            Unique ID for absence code
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceUpdate.Start">
            <summary>
            Start date and time
            </summary>
            <example>2021-07-20T09:00:00Z</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceUpdate.End">
            <summary>
            End date and time
            </summary>
            <example>2021-07-20T17:00:00Z</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Absences.EmployeeAbsenceUpdate.Hours">
            <summary>
            Absence hours
            </summary>
            <example>07:30:00</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.CursorPaggination.CursorModel_pagination">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.CursorPaggination.CursorModel_pagination.NextCursor">
            <summary>
            The cursor for the next block of data in the list
            </summary>
            <example>de7e097b-c388-4b5e-a809-fe61839cccef</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.CursorPaggination.CursorModel_pagination.PreviousCursor">
            <summary>
            The cursor for the previous block of data in the list
            </summary>
            <example>de7e097b-c388-4b5e-a809-fe61839cccef</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.CursorPaggination.CursorModel_pagination.Limit">
            <summary>
            The number of records that were returned with this request
            </summary>
            <example>20</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.CursorPaggination.ScheduleSync.ScheduleSyncRequestListResponse">
            <summary>
            Cursor pagination model to use in responses using cursor based pagination.
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.CursorPaggination.ScheduleSync.ScheduleSyncRequestListResponse.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.CursorPaggination.ScheduleSync.ScheduleSyncRequestListResponse.Pagination">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.CursorPaggination.ScheduleSync.ScheduleSyncSearchModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.CursorPaggination.ScheduleSync.ScheduleSyncSearchModel.Status">
            <summary>
            Filter by status
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.EmployeeCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.EmployeeCreated.EmployeeId">
            <summary>
            Employee ID
            </summary>
            <example>3</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Employee">
            <summary>
            Employee Integration Model
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.FirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.Surname">
            <summary>
            Surname
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.StartDate">
            <summary>
            Start date
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.LeaveDate">
            <summary>
            Leave date
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.Location">
            <summary>
            Location
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.Department">
            <summary>
            Department
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.CostCode">
            <summary>
            Cost Code
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.Division">
            <summary>
            Division
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.JobTitle">
            <summary>
            Job Title
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employee.DefaultJobType">
            <summary>
            Default Job Type
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Employees.EmployeeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.FirstName">
            <summary>
            First name
            </summary>
            <example>John</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.Surname">
            <summary>
            Surname
            </summary>
            <example>Smith</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.Email">
            <summary>
            Email address
            </summary>
            <example>john@smith@example.com</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.StartDate">
            <summary>
            Start date
            </summary>
            <example>2018-12-10</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.LeaveDate">
            <summary>
            Leave date
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.Username">
            <summary>
            Username
            </summary>
            <example>200021</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.LocationId">
            <summary>
            Location ID
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.DepartmentId">
            <summary>
            Location ID
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.CostCodeId">
            <summary>
            Department ID
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.DivisionId">
            <summary>
            Cost Code ID
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.JobTitleId">
            <summary>
            Division ID
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.DefaultJobTypeId">
            <summary>
            Default Job Type ID
            </summary>
            <example>2</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.WeeklyHours">
            <summary>
            Weekly Hours
            </summary>
            <example>5</example>
        </member>
        <member name="M:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.MapToRegularEmployee">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Models.Employees.EmployeeCreate.MapToRegularEmployeeDTO(ESolve.Entities.Models.Employee)">
            <summary>
            Mapping employee to employeeDTO
            </summary>
            <param name="employee"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.HoursPerDay">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.HoursPerDay.dayNumber">
            <summary>
            Number of days
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.HoursPerDay.hours">
            <summary>
            Hours
            </summary>
            <example>07:30:00</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.JobTypes.JobTypeModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.JobTypes.JobTypeModel.JobTypeId">
            <summary>
            The job type Id
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.JobTypes.JobTypeModel.Name">
            <summary>
            The Job type name
            </summary>
            <example>Job</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.JobTypes.JobTypeSearchModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.JobTypes.JobTypeSearchModel.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.JobTypes.JobTypeSearchModel.Pagination">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.License.LicenseData">
            <summary>
            License data model
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseData.BusinessID">
            <summary>
            Customer Business ID
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseData.BusinessName">
            <summary>
            Customer Business Name
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseData.InstallationID">
            <summary>
            Installation ID
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseData.StartDate">
            <summary>
            Start Date of license
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseData.ExpiryDate">
            <summary>
            Expiry Date of license
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseData.LicenceItems">
            <summary>
            License items - Maximum number of Licenses
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseData.MaxNumberOfAutoRosteringLicense">
            <summary>
            Max number of Auto Rostering Licenses
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.License.LicenseUpdate">
            <summary>
            License update model
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseUpdate.LicenceData">
            <summary>
            License data
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseUpdate.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.License.LicenseUpdate.LicenseDataInString">
            <summary>
            License data in string
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.LookupFieldValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupFieldValue.LookupItemId">
            <summary>
            ID for lookup data item
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupFieldValue.Value">
            <summary>
            Value to display
            </summary>
            <example>York</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.LookupItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupItem.LookupItemID">
            <summary>
            Lookup item ID
            </summary>
            <example> 1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupItem.Value">
            <summary>
            Lookup item value
            </summary>
            <example> York</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.LookupItemCreate">
            <summary>
            Model used for inserting lookup items in database.
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupItemCreate.Value">
            <summary>
            Lookup item value
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.LookupItemCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupItemCreated.LookupItemId">
            <summary>
            Lookup item ID
            </summary>
            <example>3</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.LookupItemList">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupItemList.Data">
            <summary>
            
            </summary>
            <example> List [ OrderMap { "LookupItemId" : "1", "value" : "York" }, OrderMap { "LookupItemId" : "2", "value" : "London" }</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupItemList.Paggination">
            <summary>
            Offset limit pagination model to use in responses using offset-limit based pagination.
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.LookupRepositoryResponse">
            <summary>
            Repository response
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupRepositoryResponse.StatusCode">
            <summary>
            Status code
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupRepositoryResponse.Id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.LookupRepositoryResponse.Issues">
            <summary>
            Collection of issues
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.Models.LookupRepositoryResponse.#ctor">
            <summary>
            Constructor which initialise all properties
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.OffsetLimitModel">
            <summary>
             Offset limit pagination model to use in responses using offset-limit based pagination.
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.OffsetLimitModel.TotalResultCount">
            <summary>
            The total number of records in the list
            </summary>
            <example>245</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.OffsetLimitModelBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.OffsetLimitModelBase.Offset">
            <summary>
            The number of records that the current response has skipped over
            </summary>
            <example> 100</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.OffsetLimitModelBase.Limit">
            <summary>
            The number of records that were returned with this request
            </summary>
            <example> 20</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ProblemDetailsModel">
            <summary>
            Implementation of RFC7807 Problem Details object. Content type should always be application/problem+json. Problem type definitions MAY extend the problem details object with additional members
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ProblemDetailsModel.Type">
            <summary>
            A type URI
            </summary>
            <example>https://oneadvanced.com/problem/400</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ProblemDetailsModel.Title">
            <summary>
            A short, human-readable summary of the problem type
            </summary>
            <example>Bad Request</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ProblemDetailsModel.Status">
            <summary>
            The HTTP status code for this occurrence of the problem
            </summary>
            <example>400</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ProblemDetailsModel.Detail">
            <summary>
            A human-readable explanation specific to this occurrence of the problem
            </summary>
            <example>The request is invalid.</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ProblemDetailsModel.Issues">
            <summary>
            A list of issues that exist with the request. Note this is an extension that is supported by the RFC but specific to Advanced.
            </summary>
            <example>List [ OrderedMap { "fieldName": "fieldName", "error": "This is the problem with the field" }, OrderedMap { "fieldName": "fieldOther", "error": "This is the problem with the field" } ]</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ProblemDetailsModel.Instance">
            <summary>
            A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced
            </summary>
            <example>https://oneadvanced.com/support/problem/74837463</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ProblemDetailsModel_issues">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ProblemDetailsModel_issues.FieldName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ProblemDetailsModel_issues.Error">
             <summary>
            
             </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequest.ScheduleSyncRequestId">
            <summary>
            Schedule Sync Request ID
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequest.Created">
            <summary>
            Date and time schedule sync request created
            </summary>
            <example>2021-05-26T15:30:25Z</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequest.Status">
            <summary>
            Status for schedule sync request
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequest.ScheduleId">
            <summary>
            Schedule ID
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequest.ScheduleStart">
            <summary>
            Start date in schedule (sync from)
            </summary>
            <example>2021-06-03T00:00:00Z</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequest.ScheduleEnd">
            <summary>
            End date in schedule (sync to)
            </summary>
            <example>2021-06-09T00:00:00Z</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.JobId">
            <summary>
            Job ID in schedule
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.EmployeeId">
            <summary>
            Employee ID assigned to job
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.JobTypeId">
            <summary>
            Job type ID for a given Job type
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.JobType">
            <summary>
            Job type
            </summary>
            <example>Doctor</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.ShiftId">
            <summary>
            Shift ID linked to job (optional)
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.StartDateTime">
            <summary>
            Start date and time for job
            </summary>
            <example>2021-06-03T09:00:00Z</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.EndDateTime">
            <summary>
            End date and time for job
            </summary>
            <example>2021-06-03T09:00:00Z</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.Hours">
            <summary>
            Hours of work for job
            </summary>
            <example>07:30:00</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment.CustomData">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignmentsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignmentsResponse.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignmentsResponse.Pagination">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment_customData">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment_customData.CustomDataId">
            <summary>
            
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment_customData.LookupItemId">
            <summary>
            
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestAssignment_customData.Value">
            <summary>
            
            </summary>
            <example>20</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate.Status">
            <summary>
            Overall result status for schedule sync request
            </summary>
            <![CDATA[Success, Error]]>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate.AssignmentResults">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate_assignmentResults">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate_assignmentResults.JobId">
            <summary>
            Job ID in schedule
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate_assignmentResults.EmployeeId">
            <summary>
            Employee ID assigned to job
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate_assignmentResults.Status">
            <summary>
            Status for assignment
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncRequestResultCreate_assignmentResults.Message">
            <summary>
            Message containing detail for status (if applicable)
            </summary>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncSearchModelBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncSearchModelBase.Cursor">
            <summary>
            The cursor key to list from
            </summary>
            <example>de7e097b-c388-4b5e-a809-fe61839cccef</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.ScheduleSyncRequests.ScheduleSyncSearchModelBase.Limit">
            <summary>
            The number of items to return
            </summary>
            <example>10</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Shift.Shift">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.Shift.ShiftId">
            <summary>
            Unique ID for shift
            </summary>
            <example>1</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Shift.ShiftCreate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreate.Group">
            <summary>
            Group
            </summary>
            <example>Standard</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreate.Code">
            <summary>
            Unique short code for shift
            </summary>
            <example>0900-1700</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreate.Description">
            <summary>
            Description
            </summary>
            <example>0900-1700 30 mins lunch</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreate.StartTime">
            <summary>
            Start time
            </summary>
            <example>09:00:00</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreate.EndTime">
            <summary>
            End time
            </summary>
            <example>17:00:00</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreate.Hours">
            <summary>
            Hours
            </summary>
            <example>07:30:00</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreate.NumberOFDays">
            <summary>
            Number of days
            </summary>
            <example>07:30:00</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreate.hoursPerDay">
            <summary>
            hours per day
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.Models.Shift.ShiftCreate.MapIntegrationShiftToTheRegular">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Shift.ShiftCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Shift.ShiftCreated.ShiftId">
            <summary>
            Unique ID for shift
            </summary>
            <example>1</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Skills.EmployeeSkills_inner">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.EmployeeSkills_inner.SkillId">
            <summary>
            Skill ID
            </summary>
            <example>1</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Skills.Skill">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.Skill.SkillId">
            <summary>
            Unique ID for skill
            </summary>
            <example>1</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.Skill.Name">
            <summary>
            Unique name
            </summary>
            <example>First Aid</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.Skill.Description">
            <summary>
            Description
            </summary>
            <example>Holds a valid certificate of competence in first aid.</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Skills.SkillCreate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.SkillCreate.Name">
            <summary>
            Unique name
            </summary>
            <example>First Aid</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.SkillCreate.Description">
            <summary>
            Description
            </summary>
            <example>Holds a valid certificate of competence in first aid.</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Skills.SkillCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.SkillCreated.SkillId">
            <summary>
            Unique ID for skill
            </summary>
            <example>1</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Models.Skills.SkillUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.SkillUpdate.Name">
            <summary>
            Unique name
            </summary>
            <example>First Aid</example>
        </member>
        <member name="P:ESolve.DataIntegrations.Models.Skills.SkillUpdate.Description">
            <summary>
            Description
            </summary>
            <example>Holds a valid certificate of competence in first aid.</example>
        </member>
        <member name="T:ESolve.DataIntegrations.Repository.GenericRepository`1">
            <summary>
            Generic Repository for accesing Database context
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="F:ESolve.DataIntegrations.Repository.GenericRepository`1._repositoryContext">
            <summary>
            Repository context for accessing Database
            </summary>
        </member>
        <member name="M:ESolve.DataIntegrations.Repository.GenericRepository`1.#ctor(ESolve.Entities.RepositoryContext)">
            <summary>
            Construcotr which initialise Repository context
            </summary>
            <param name="repositoryContext">Repository context which will be injected</param>
        </member>
        <member name="M:ESolve.DataIntegrations.Repository.GenericRepository`1.Add(`0)">
            <summary>
            Store passed object in database 
            </summary>
            <param name="entity">Object which will be stored</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Repository.GenericRepository`1.Delete(`0)">
            <summary>
            Remove passed entity from database
            </summary>
            <param name="entity">Entity which will be deleted</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Repository.GenericRepository`1.GetById(System.Int64)">
            <summary>
            Get object from database based on primary key
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Repository.GenericRepository`1.GetList(ESolve.DataIntegrations.Models.OffsetLimitModelBase)">
            <summary>
            Get list of object with paggination
            </summary>
            <param name="limitModel">model where we have limit and offset</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Repository.GenericRepository`1.IsNameOccupied(ESolve.Entities.Models.IdNameDropDownModel)">
            <summary>
            Check is name occupied
            </summary>
            <param name="idName">IdName model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.DataIntegrations.Repository.GenericRepository`1.Update(System.Int64,`0)">
            <summary>
            Update passed object in database
            </summary>
            <param name="id">Primary Key</param>
            <param name="entity">Entity with new values</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.DynamicSQL.DynamicSqlRelationalCommandBuilder">
            <summary>
            Custom command builder
            </summary>
        </member>
        <member name="M:ESolve.DynamicSQL.DynamicSqlRelationalCommandBuilder.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies)">
            <summary>
            Constructor
            </summary>
            <param name="dependencies"></param>
        </member>
        <member name="M:ESolve.DynamicSQL.DynamicSqlRelationalCommandBuilder.Build">
            <summary>
            Chaning implementaiton of RelationalCommandBuilder's methods - Build in order to wrap sql queries with execute method
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.DynamicSQL.DynamicSqlRelationalCommandBuilderFactory">
            <summary>
            Class used for creating command builder that will be used to wrap every sql query with execute method
            </summary>
        </member>
        <member name="M:ESolve.DynamicSQL.DynamicSqlRelationalCommandBuilderFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies)">
            <summary>
            Creating RelationalCommandBuilder custom instance
            </summary>
            <param name="dependencies"></param>
        </member>
        <member name="M:ESolve.DynamicSQL.DynamicSqlRelationalCommandBuilderFactory.Create">
            <summary>
            Creates a Builder
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Enums.AbsenceActions">
            <summary>
            Enumeration of Actions for Absence Requests
            </summary>
        </member>
        <member name="F:ESolve.Enums.AbsenceActions.Create">
            <summary>
            Create New Absence
            </summary>
        </member>
        <member name="F:ESolve.Enums.AbsenceActions.Update">
            <summary>
            Update Existing one
            </summary>
        </member>
        <member name="F:ESolve.Enums.AbsenceActions.Delete">
            <summary>
            Delete Existing Absence
            </summary>
        </member>
        <member name="T:ESolve.Enums.BackwardCompatibilityCheckList">
            <summary>
            Backward Compatibility CheckList for System Updates
            </summary>
        </member>
        <member name="F:ESolve.Enums.BackwardCompatibilityCheckList.UserPanelPermissions">
            <summary>
            Primary key for the UserPanelPermissions tab on the User Profile Details Page
            </summary>
        </member>
        <member name="T:ESolve.Enums.CalculationsActions">
            <summary>
            Action that are calling recalculations of jobs' availabilities
            </summary>
        </member>
        <member name="F:ESolve.Enums.CalculationsActions.LeftToRight">
            <summary>
            Constraint's calculations go from left to right availabilities/assignments
            </summary>
        </member>
        <member name="F:ESolve.Enums.CalculationsActions.BothSides">
            <summary>
            In constraint's calculations for each job are included assignemnts on both sides of that job
            </summary>
        </member>
        <member name="T:ESolve.Enums.ConfigSettingsKey">
            <summary>
            Enums for config settings keys
            </summary>
        </member>
        <member name="F:ESolve.Enums.ConfigSettingsKey.LicenseSignature">
            <summary>
            License signature
            </summary>
        </member>
        <member name="F:ESolve.Enums.ConfigSettingsKey.InstallationId">
            <summary>
            Installation Id
            </summary>
        </member>
        <member name="F:ESolve.Enums.ConfigSettingsKey.FCMPushNotificationServerKey">
            <summary>
            Server key of FCM push notification service
            </summary>
        </member>
        <member name="F:ESolve.Enums.ConfigSettingsKey.FCMPushNotificationApiAddress">
            <summary>
            API address of FCM push notification service
            </summary>
        </member>
        <member name="F:ESolve.Enums.ConfigSettingsKey.LoginFailedCount">
            <summary>
            Login Failed Count
            </summary>
        </member>
        <member name="T:ESolve.Enums.PanelPermissionsTypes">
            <summary>
            Panel Permissions Types  for Employee Details
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Personal">
            <summary>
            Primary key for the Perosonal tab on the Employee Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Organisational">
            <summary>
            Primary key for the Organisational tab on the Employee Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Pay">
            <summary>
            Primary key for the Pay tab on the Employee Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Schedule">
            <summary>
            Primary key for the Schedule tab on the Employee Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Skills">
            <summary>
            Primary key for the Skills tab on the Employee Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.System">
            <summary>
            Primary key for the System tab on the Employee Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Availability">
            <summary>
            Primary key for the Avaliability tab on the Employee Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Schedules">
            <summary>
            Primary key for the Schedules tab on the User Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Templates">
            <summary>
            Primary key for the Templates tab on the User Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.EmployeeAccess">
            <summary>
            Primary key for the EmployeeAccess tab on the User Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Shifts">
            <summary>
            Primary key for the Shifts tab on the User Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Api">
            <summary>
            Primary key for the Api tab on the User Details Page
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissionsTypes.Advanced_People_Access">
            <summary>
            Primary key for the Advanced People Access on the Employee Details Page
            </summary>
        </member>
        <member name="T:ESolve.Enums.GrantTypes">
            <summary>
            Enumerator for Grant Types
            </summary>
        </member>
        <member name="F:ESolve.Enums.GrantTypes.refresh_token">
            <summary>
            Refresh_Token Grant Type
            </summary>
        </member>
        <member name="F:ESolve.Enums.GrantTypes.password">
            <summary>
            Password Grant Type
            </summary>
        </member>
        <member name="F:ESolve.Enums.LinkedEmployeeRights.FullAccess">
            <summary>
            Full access right
            </summary>
        </member>
        <member name="F:ESolve.Enums.LinkedEmployeeRights.ReadOnlyAccess">
            <summary>
            Read only access right
            </summary>
        </member>
        <member name="F:ESolve.Enums.LinkedEmployeeRights.NoAccess">
            <summary>
            No access right
            </summary>
        </member>
        <member name="T:ESolve.Enums.LoneWorkerAlertsOrdinalNumbers">
            <summary>
            Enumeration of ordinal numbers for sending lone worker alerts
            </summary>
        </member>
        <member name="F:ESolve.Enums.LoneWorkerAlertsOrdinalNumbers.SendMessageToAssignedEmployee">
            <summary>
            Sending message to assigned employee for confirmation
            </summary>
        </member>
        <member name="F:ESolve.Enums.LoneWorkerAlertsOrdinalNumbers.ResentMessageToAsignedEmployee">
            <summary>
            Resending message to assgined employee for confirmation
            </summary>
        </member>
        <member name="F:ESolve.Enums.LoneWorkerAlertsOrdinalNumbers.SendMessageToLoneWorkerManager">
            <summary>
            Sending alert message to lone worker manager
            </summary>
        </member>
        <member name="F:ESolve.Enums.LoneWorkerAlertsOrdinalNumbers.SendMessageToLoneWorkerAdmin">
            <summary>
            Sending alert message to lone worker admin
            </summary>
        </member>
        <member name="T:ESolve.Enums.Months">
            <summary>
            Enumeration of Months
            </summary>
        </member>
        <member name="T:ESolve.Enums.NotificationManagerTypes">
            <summary>
            Enumeration of types of notification managers
            </summary>
        </member>
        <member name="F:ESolve.Enums.NotificationManagerTypes.PushNotificationManager">
            <summary>
            Type of PushNotificationManager
            </summary>
        </member>
        <member name="F:ESolve.Enums.NotificationManagerTypes.AbsenceNotificationManager">
            <summary>
            Type of AbsenceNotificationManager
            </summary>
        </member>
        <member name="F:ESolve.Enums.NotificationManagerTypes.SubmitApprovalNotificationManager">
            <summary>
            Type of SubmitApprovalNotificationManager
            </summary>
        </member>
        <member name="F:ESolve.Enums.NotificationManagerTypes.JobOfferNotificationManager">
            <summary>
            Type of JobOffer Manager
            </summary>
        </member>
        <member name="F:ESolve.Enums.NotificationManagerTypes.AssignmentNotificationManager">
            <summary>
            Type of AssignmentNotificationManager
            </summary>
        </member>
        <member name="T:ESolve.Enums.OrganisationFields">
            <summary>
            Organisational Fields
            </summary>
        </member>
        <member name="F:ESolve.Enums.OrganisationFields.Location">
            <summary>
            Location field
            </summary>
        </member>
        <member name="F:ESolve.Enums.OrganisationFields.Department">
            <summary>
            Department field
            </summary>
        </member>
        <member name="F:ESolve.Enums.OrganisationFields.CostCode">
            <summary>
            Cost Code field
            </summary>
        </member>
        <member name="F:ESolve.Enums.OrganisationFields.Class">
            <summary>
            Class field
            </summary>
        </member>
        <member name="F:ESolve.Enums.OrganisationFields.Division">
            <summary>
            Division field
            </summary>
        </member>
        <member name="F:ESolve.Enums.OrganisationFields.JobTitle">
            <summary>
            Job Title field
            </summary>
        </member>
        <member name="F:ESolve.Enums.OrganisationFields.Team">
            <summary>
            Team field
            </summary>
        </member>
        <member name="T:ESolve.Enums.PanelPermissonsOptions">
            <summary>
            Panel permission options
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissonsOptions.Modify">
            <summary>
            If user can update selected tab
            </summary>
        </member>
        <member name="F:ESolve.Enums.PanelPermissonsOptions.ReadOnly">
            <summary>
            If user can only read selected tab
            </summary>
        </member>
        <member name="T:ESolve.Enums.ReportTypes">
            <summary>
            Report's types
            </summary>
        </member>
        <member name="F:ESolve.Enums.ReportTypes.ScheduleDetailReport">
            <summary>
            Primary key of ScheduleDetailReport report type
            </summary>
        </member>
        <member name="F:ESolve.Enums.ReportTypes.ScheduleSummaryReport">
            <summary>
            Primary key of ScheduleSummaryReport report type
            </summary>
        </member>
        <member name="F:ESolve.Enums.ReportTypes.ScheduleEmployeeBreakdownReport">
            <summary>
            Primary key of ScheduleEmployeeBreakdownReport report type
            </summary>
        </member>
        <member name="T:ESolve.Enums.ScheduleRights">
            <summary>
            Enumeration of Actions for Absence Requests
            </summary>
        </member>
        <member name="F:ESolve.Enums.ScheduleRights.Modify">
            <summary>
            Modify permission
            </summary>
        </member>
        <member name="F:ESolve.Enums.ScheduleRights.LimitedModify">
             <summary>
            Limited modify permission 
             </summary>
        </member>
        <member name="F:ESolve.Enums.ScheduleRights.ReadOnly">
            <summary>
            Read-only permission
            </summary>
        </member>
        <member name="F:ESolve.Enums.ScheduleRights.Anonymous">
            <summary>
            Anonymous permission
            </summary>
        </member>
        <member name="T:ESolve.Extensions.EmployeeExt">
            <summary>
            Employee Exctension class
            </summary>
        </member>
        <member name="M:ESolve.Extensions.EmployeeExt.IsActive(ESolve.Entities.Models.Employee)">
            <summary>
            Responsible for checking is Employee active
            </summary>
            <param name="employee">Employee object</param>
            <returns>true if employee is active, false if not</returns>
        </member>
        <member name="T:ESolve.Extensions.ExceptionMiddlewareExtensions">
            <summary>
            Middleware for Excpetions which are happend in our API.
            </summary>
        </member>
        <member name="M:ESolve.Extensions.ExceptionMiddlewareExtensions.ConfigureExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configuration of exception handler.
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:ESolve.Extensions.ExceptionMiddlewareExtensions.ConfigureCustomExceptionMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Registering exception middleware in our app.
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:ESolve.Extensions.HierarchyNode`1">
            <summary>
            Hierarchy node Model class
            </summary>
            <typeparam name="T">Represents type which will be created as hierarchy</typeparam>
        </member>
        <member name="P:ESolve.Extensions.HierarchyNode`1.Entity">
            <summary>
            Parent Entity
            </summary>
        </member>
        <member name="P:ESolve.Extensions.HierarchyNode`1.ChildNodes">
            <summary>
            Child nodes
            </summary>
        </member>
        <member name="P:ESolve.Extensions.HierarchyNode`1.Depth">
            <summary>
            Depth in hierarchy
            </summary>
        </member>
        <member name="T:ESolve.Extensions.LinqExtensionMethods">
            <summary>
            Extension method for linqu in order to achive hierarchy.
            </summary>
        </member>
        <member name="M:ESolve.Extensions.LinqExtensionMethods.AsHierarchy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            LINQ IEnumerable AsHierachy() extension method
            </summary>
            <typeparam name="TEntity">Entity class</typeparam>
            <typeparam name="TProperty">Property of entity class</typeparam>
            <param name="allItems">Flat collection of entities</param>
            <param name="idProperty">Reference to Id/Key of entity</param>
            <param name="parentIdProperty">Reference to parent Id/Key</param>
            <returns>Hierarchical structure of entities</returns>
        </member>
        <member name="T:ESolve.Extensions.MVC.ApiExplorerGroupPerVersionConvention">
            <summary>
            Class which implements the IControllerModelConvention interface.
            This class will specify the way that ControllerModel Conventions will be applied.
            </summary>
        </member>
        <member name="M:ESolve.Extensions.MVC.ApiExplorerGroupPerVersionConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)">
            <summary>
            Applies the convention to the ControllerModel
            </summary>
            <param name="controller">ControllerModel</param>
        </member>
        <member name="T:ESolve.Extensions.MVC.MvcOptionsExtensions">
            <summary>
            Class used for extension of 'services.AddMvc()' options.
            </summary>
        </member>
        <member name="M:ESolve.Extensions.MVC.MvcOptionsExtensions.UseCentralRoutePrefix(Microsoft.AspNetCore.Mvc.MvcOptions,Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            Method which sets a specific route prefix for endpoints.
            </summary>
            <param name="opts">Configuration for the MVC framework.</param>
            <param name="routeAttribute">RouteAttribute object with specified route prefix.</param>
        </member>
        <member name="T:ESolve.Extensions.MVC.RouteConvention">
            <summary>
            Class which implements the IApplicationModelConvention interface.
            This class will specify the way that CentralRoutePrefix will be implemented.
            </summary>
        </member>
        <member name="F:ESolve.Extensions.MVC.RouteConvention._centralPrefix">
            <summary>
            Central prefix for the route.
            </summary>
        </member>
        <member name="M:ESolve.Extensions.MVC.RouteConvention.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            Constructor that initializes all properties.
            </summary>
            <param name="routeTemplateProvider"></param>
        </member>
        <member name="M:ESolve.Extensions.MVC.RouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            Method which applies the convention to the passed ApplicationModel
            </summary>
            <param name="application">ApplicationModel object.</param>
        </member>
        <member name="T:ESolve.Extensions.ServiceExtensions">
            <summary>
            Defines the <see cref="T:ESolve.Extensions.ServiceExtensions" />
            </summary>
        </member>
        <member name="M:ESolve.Extensions.ServiceExtensions.ConfigureCors(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Enabling CORS(Cros-Origin Resource Sharing), in order to achive user access from diferent domains.
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.Extensions.ServiceExtensions.ConfigureIISIntegration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Method for configuration IIS integration.
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:ESolve.Extensions.SubGroupHierarchy">
            <summary>
            SubGroup Hierarchy model class
            </summary>
        </member>
        <member name="P:ESolve.Extensions.SubGroupHierarchy.SubGroup">
            <summary>
            Parent SubGroup
            </summary>
        </member>
        <member name="P:ESolve.Extensions.SubGroupHierarchy.SubGroups">
            <summary>
            Childs SubGroups
            </summary>
        </member>
        <member name="T:ESolve.Extensions.TemplateSubGroupHierarchy">
            <summary>
            SubGroup Hierarchy model class
            </summary>
        </member>
        <member name="P:ESolve.Extensions.TemplateSubGroupHierarchy.SubGroup">
            <summary>
            Parent TemplateSubGroup
            </summary>
        </member>
        <member name="P:ESolve.Extensions.TemplateSubGroupHierarchy.SubGroups">
            <summary>
            Childs TemplateSubGroups
            </summary>
        </member>
        <member name="M:ESolve.Factories.CalendarSubGroups.CalendarSubGroupsBase.#ctor(ESolve.Entities.DataManager.SubGroupsApprovalManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ProfileManager)">
            <summary>
            Constructor which initalize all Managers
            </summary>
            <param name="subGroupsApprovalManager">SubGroup approval Manager</param>
            <param name="subGroupManager">SubGroup Manager</param>
            <param name="scheduleManager">Schedule Manager</param>
            <param name="userManager">User Manager</param>
            <param name="profileManager">Profile Manager</param>
        </member>
        <member name="M:ESolve.Factories.CalendarSubGroups.CalendarSubGroupsBase.GetScheduleSubGroupsForSelectedPeriod(ESolve.Entities.Filters.SubGroupCalendarFilterModel,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method will load all SubGroups With Permissions in passed range in ParentChild Structure
            </summary>
            <param name="subGroupCalendarFilterModel">Filter model</param>
            <param name="loggedInUser">Currently logged in app user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Factories.CalendarSubGroups.CalendarSubGroupsBase.GetPermissionsForAccessingSubGroup(ESolve.Entities.Models.SubGroup,ESolve.Contracts.ILoggedInUser)">
            <summary>
            Method will return permissions for passed subgroup and app user
            </summary>
            <param name="subGroup">Selected Subgroup</param>
            <param name="loggedInUser">Currently logged in user</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Factories.CalendarSubGroups.CalendarSubGroupsUser.#ctor(ESolve.Entities.DataManager.SubGroupsApprovalManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.UserManager,ESolve.Entities.DataManager.ProfileManager)">
            <summary>
            Constructor which initalize all Managers
            </summary>
            <param name="subGroupsApprovalManager">SubGroup approval Manager</param>
            <param name="subGroupManager">SubGroup Manager</param>
            <param name="scheduleManager">Schedule Manager</param>
            <param name="userManager">User Manager</param>
            <param name="profileManager">UProfile Manager</param>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.CalendarViewBase._scheduleSubGroupsSortedInParentChildStructure">
            <summary>
            Here Will be stored SubGroupIDs sorted by SortOrder where exists and than by Name where SortOrder is null in ParentChild Structure.
            </summary>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.CalendarViewBase.CalculateCoveragePercetnageForConcurrentJob(System.Int64,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.RepositoryContext)">
            <summary>
            Method used for calculating percentage of job assgiments coverage for passed concurrent job.
            </summary>
            <param name="jobId">Concurrent job object</param>
            <param name="subGroupRepository">Repository used for getting subgroup and it's child subgroups.</param>
            <param name="jobTypeManager">Manger for getting job type info</param>
            <param name="jobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
            <param name="loggedInUser">Represents current account.</param>
            <param name="repositoryContext">Represents context for accessing database.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.CalendarViewBase.AreEmployeesAnonymous(System.Int64,ESolve.Entities.DataManager.ScheduleManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.RepositoryContext)">
            <summary>
            Method receives subGroupID and account's details and returns whether Employees are Anonymous or not.
            </summary>
            <param name="subGroupID">SubGroupID for which method returns User's permissions.</param>
            <param name="scheduleManager">Manager for schedules, used in order to access method for retrieving permissions.</param>
            <param name="loggedInUser">Represents current account's role.</param>
            <param name="repositoryContext">Represents repositoryContext.</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.CalendarViewBase.GetChildsForSubgroup(System.Int64,System.Collections.Generic.List{ESolve.Entities.Models.SubGroup})">
            <summary>
            This Method Sorts SubGroups in ParentChildStructure by SortOrder and than by Name
            </summary>
            <param name="id">SubGroup ID</param>
            <param name="subGroups">SubGroups which will be filtered</param>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.CalendarViewBase.GetJobAssigmentsForReferenceArea(ESolve.Entities.Models.Job,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Contracts.ILoggedInUser,ESolve.Entities.RepositoryContext)">
            <summary>
             Get job assigments that overlaps concurrent job
             </summary>
             <param name="concurrentJob">Concurrent job</param>
             <param name="subGroupRepository">Repository used for getting subgroup and childs.</param>
             <param name="jobTypeManager">Manger for getting job type info</param>
             <param name="jobAvailabilityManager">Manager for checking if employee is suitable for selected job.</param>
             <param name="loggedInUser">Represents current account.</param>
             <param name="repositoryContext">Represents context for accessing database.</param>
             <returns>Job assigments on overlapping jobs.</returns>
             /// <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
             is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Factories.LoadCalendar.EmployeeDashboard.EmployeeDashboardView">
            <summary>
            
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeDashboard.EmployeeDashboardView.JobStatusManager">
            <summary>
            Manager For Actions on JobStatuses
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeDashboard.EmployeeDashboardView.AbsenceRequestManager">
            <summary>
            Manager For Actions on AbsenceRequests
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeDashboard.EmployeeDashboardView.JobManager">
            <summary>
            Manager For Actions on Jobs
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeDashboard.EmployeeDashboardView.TradesManager">
            <summary>
            Manager For Trades on Jobs
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeDashboard.EmployeeDashboardView.Range">
            <summary>
            Selected Range
            </summary>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.EmployeeDashboard.EmployeeDashboardView.#ctor(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.DataManager.JobStatusManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            Initalize base class with loggedInUser and initalize managers in class
            </summary>
            <param name="loggedInUser">LoggedInUser object</param>
            <param name="absenceRequestManager">Instance of AbsenceRequestsManager</param>
            <param name="jobStatusManager">Instance of JobStatusesManager</param>
            <param name="jobManager">Instance of JobManager</param>
            <param name="tradesManager">Instance of TradeManager</param>
            <param name="range">Selected Date range</param>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.EmployeeDashboard.EmployeeDashboardView.ESolve#Contracts#ILoadCalendar#LoadDataForCalendar(ESolve.Entities.DTOs.LoadCalendarDTO)">
            <summary>
            For passed LoggedInEmployee Method will get all JobsWhereEmployee Is
            Assigned
            Approved
            CompletelyValid or Overriden
            Also it will return all Approved Absences from selcted range
            </summary>
            <param name="loadCalendarDTO"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView">
            <summary>
            Class produces response for LoggedInEmployee DetailView
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView.JobStatusManager">
            <summary>
            Manager For Actions on JobStatuses
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView.AbsenceRequestManager">
            <summary>
            Manager For Actions on AbsenceRequests
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView.JobManager">
            <summary>
            Manager For Actions on Jobs
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView.TradeManager">
            <summary>
            Manager for trade offers
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView.LoneWorkerAlertsManager">
            <summary>
            Manager for Lone Worker Alerts
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView.AttendanceConfirmationAlertsManager">
            <summary>
            Manager for Attendance Confirmation Alerts
            </summary>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView.#ctor(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.DataManager.JobStatusManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.DataManager.LoneWorkerAlertsManager,ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager)">
            <summary>
            Initalize base class with loggedInUser and initalize managers in class
            </summary>
            <param name="loggedInUser">LoggedInUser object</param>
            <param name="absenceRequestManager">Instance of AbsenceRequestsManager</param>
            <param name="jobStatusManager">Instance of JobStatusesManager</param>
            <param name="jobManager">Instance of JobManager</param>
            <param name="tradeManager">Instance of TradeManager</param>
            <param name="loneWorkerAlertsManager">Instance of LoneWorkerAlertsManager</param>
            <param name="attendanceConfirmationManager">Instance of AttendanceConfirmationAlertsManager</param>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.DetailView.ESolve#Contracts#ILoadCalendar#LoadDataForCalendar(ESolve.Entities.DTOs.LoadCalendarDTO)">
            <summary>
            For passed LoggedInEmployee Method will get all JobsWhereEmployee Is
            Assigned
            Approved
            CompletelyValid or Overriden
            Also it will return all Approved Absences from selcted range
            </summary>
            <param name="loadCalendarDTO"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView">
            <summary>
            This Class Generates Response For Employee SummaryView on Calendar
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView.JobStatusManager">
            <summary>
            Manager For Actions on JobStatuses
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView.AbsenceRequestManager">
            <summary>
            Manager For Actions on AbsenceRequests
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView.JobManager">
            <summary>
            Manager For Actions on Jobs
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView.TradeManager">
            <summary>
            Manager For Actions on Trade Offers
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView.LoneWorkerAlertsManager">
            <summary>
            Manager for action on lone worker alerts
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView.AttendanceConfirmationAlertsManager">
            <summary>
            Manager for Attendance Confirmation Alerts
            </summary>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView.#ctor(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.DataManager.JobStatusManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.DataManager.LoneWorkerAlertsManager,ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager)">
            <summary>
            Initialize base class with loggedInUser and initialize managers in class
            </summary>
            <param name="loggedInUser">LoggedInUser object</param>
            <param name="absenceRequestManager">Instance of AbsenceRequestsManager</param>
            <param name="jobStatusManager">Instance of JobStatusesManager</param>
            <param name="jobManager">Instance of JobManager</param>
            <param name="tradeManager">Instance of TradesManager</param>
            <param name="loneWorkerAlertsManager">Instance of LoneWorkerAlertsManager</param>
            <param name="attendanceConfirmationAlertsManager">Instance of AttendanceConfirmationAlertsManager</param>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.EmployeeLoggedIn.SummaryView.ESolve#Contracts#ILoadCalendar#LoadDataForCalendar(ESolve.Entities.DTOs.LoadCalendarDTO)">
            <summary>
            For passed LoggedInEmployee Method will get all JobsWhereEmployee Is
            Assigned
            Approved
            CompletelyValid or Overridden
            Also it will return all Approved Absences from selected range
            </summary>
            <param name="loadCalendarDTO"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Factories.LoadCalendar.LoadCalendarFactory">
            <summary>
            class which generates appropriate calendar loader
            </summary>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.LoadCalendarFactory.#ctor(ESolve.Entities.Filters.CalendarViewFilterModel,ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.ScheduleManager,ESolve.Entities.DataManager.SubGroupManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.JobTypeManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.JobStatusManager,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.DataManager.TradesManager,ESolve.Entities.DataManager.LoneWorkerAlertsManager,ESolve.Entities.DataManager.UnlockedRangesManager,ESolve.Entities.DataManager.AttendanceConfirmationAlertsManager)">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="calendarViewFilterModel">Filter</param>
            <param name="loggedInUser">Logged in user or employee</param>
            <param name="scheduleManager">Manager for accessing Schedules</param>
            <param name="subGroupManager">Manager for accessing SubGroups</param>
            <param name="jobAvailabilityManager">Manager for accessing JobAvailabilities</param>
            <param name="jobTypeManager">Manager for accessing JobTypes</param>
            <param name="jobManager">Manager for accessing Jobs</param>
            <param name="jobStatusManager">Manager for accessing Job Statueses</param>
            <param name="absenceRequestManager">Manager for accessing Absence Requests</param>
            <param name="tradeManager">Manager for accessing Trades</param>
            <param name="loneWorkerAlertsManager">Manager for accessing Loane worker alerts</param>
            <param name="unlockedSubGroupsManager">Manager for accessing Unlocked ranges</param>
            <param name="attendanceConfirmationAlertsManager">Manager for AttendanceConfirmations</param>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.LoadCalendarFactory.#ctor(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.JobStatusManager,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.DataManager.JobAvailabilityManager,ESolve.Entities.DataManager.TradesManager)">
            <summary>
            Constructor which initalize all properties
            </summary>
            <param name="loggedInUser">Logged in user or employee</param>
            <param name="jobManager">Manager for accessing Jobs</param>
            <param name="jobStatusManager">Manager for accessing Job Statueses</param>
            <param name="absenceRequestManager">Manager for accessing Absence Requests</param>
            <param name="jobAvailabilityManager">Manager for accessing JobAvailabilities</param>
            <param name="tradesManager">Manager for accessing Trades</param>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.LoadCalendarFactory.GetCalendarLoaderForUser(ESolve.Entities.Filters.CalendarViewFilterModel,System.Boolean,System.Boolean)">
            <summary>
            Gets Approppriate loader for logged in user
            </summary>
            <param name="calendarViewFilterModel">Passed Filter</param>
            <param name="isFromTemplate">Is called from template</param>
            <param name="isFromPublishTemplate">Is called from publish template</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.LoadCalendarFactory.GetCalendarLoaderForEmployee(ESolve.Entities.Filters.MobileCalendarViewFilterModel)">
            <summary>
            For passed calendar view filter, method will generate appropiate object which will load data
            </summary>
            <param name="calendarViewFilterModel">Calendar Filter model</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.LoadCalendarFactory.GetCalendarForDashboard(ESolve.Entities.DTOs.DateTimeDTO)">
            <summary>
            Method returns loader for Dashboard
            </summary>
            <param name="range">selected date range</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Factories.LoadCalendar.MobileAccess.MobileView">
            <summary>
            Model which will be returned when employee views approved schedule on mobile
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.MobileAccess.MobileView.JobStatusManager">
            <summary>
            Manager For Actions on JobStatuses
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.MobileAccess.MobileView.AbsenceRequestManager">
            <summary>
            Manager For Actions on AbsenceRequests
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.MobileAccess.MobileView.JobManager">
            <summary>
            Manager For Actions on Jobs
            </summary>
        </member>
        <member name="F:ESolve.Factories.LoadCalendar.MobileAccess.MobileView.TradeManager">
            <summary>
            Manager For Actions on Trade Offers
            </summary>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.MobileAccess.MobileView.#ctor(ESolve.Contracts.ILoggedInUser,ESolve.Entities.DataManager.AbsenceRequestManager,ESolve.Entities.DataManager.JobStatusManager,ESolve.Entities.DataManager.JobManager,ESolve.Entities.DataManager.TradesManager)">
            <summary>
            Initalize base class with loggedInUser and initalize managers in class
            </summary>
            <param name="loggedInUser">LoggedInUser object</param>
            <param name="absenceRequestManager">Instance of AbsenceRequestsManager</param>
            <param name="jobStatusManager">Instance of JobStatusesManager</param>
            <param name="jobManager">Instance of JobManager</param>
            <param name="tradeManager">Instance of TradesManager</param>
        </member>
        <member name="M:ESolve.Factories.LoadCalendar.MobileAccess.MobileView.ESolve#Contracts#ILoadCalendar#LoadDataForCalendar(ESolve.Entities.DTOs.LoadCalendarDTO)">
            <summary>
            For passed LoggedInEmployee Method will get all JobsWhereEmployee Is
            Assigned
            Approved
            CompletelyValid or Overriden
            Also it will return all Approved Absences from selcted range
            </summary>
            <param name="loadCalendarDTO"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Factories.ScheduledJobFactories.SingletonJobFactory">
            <summary>
            Class for telling Quartz how to instance IJob, this class implements IJobFactory interface
            </summary>
        </member>
        <member name="M:ESolve.Factories.ScheduledJobFactories.SingletonJobFactory.#ctor(System.IServiceProvider)">
            <summary>
            Constructor for SingletonJobFactory
            </summary>
            <param name="serviceProvider">Service provider that will be injected.</param>
        </member>
        <member name="M:ESolve.Factories.ScheduledJobFactories.SingletonJobFactory.NewJob(Quartz.Spi.TriggerFiredBundle,Quartz.IScheduler)">
            <summary>
            Get IJob requested by Quartz scheduler
            </summary>
            <param name="bundle">Exectuion-time data</param>
            <param name="scheduler">Scheduler</param>
            <returns>Scheduled Job</returns>
        </member>
        <member name="M:ESolve.Factories.ScheduledJobFactories.SingletonJobFactory.ReturnJob(Quartz.IJob)">
            <summary>
            Returning a job that was created by factory
            </summary>
            <param name="job">Scheduled job</param>
        </member>
        <member name="T:ESolve.GDPRJobs.GDPRJob">
            <summary>
            Quartz scheduled job
            </summary>
        </member>
        <member name="F:ESolve.GDPRJobs.GDPRJob._hubContext">
            <summary>
            SignalR hub context
            </summary>
        </member>
        <member name="M:ESolve.GDPRJobs.GDPRJob.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{ESolve.Entities.PushNotifications.PushNotificationHub},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor For GDPRJob
            </summary>
            <param name="hubContext">SignalR hub context that will be injected</param>
            <param name="configuration"></param>
        </member>
        <member name="M:ESolve.GDPRJobs.GDPRJob.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Scheduled job action
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.GlobalConstants">
            <summary>
            Contains all constants of application
            </summary>
        </member>
        <member name="F:ESolve.GlobalConstants.NOTIFICATION_CATEGORY_ATTENDENCE">
            <summary>
            Notification category constant for attendance
            </summary>
        </member>
        <member name="F:ESolve.GlobalConstants.NOTIFICATION_CATEGORY_LONEWORKER">
            <summary>
            Notification category constant for lone worker
            </summary>
        </member>
        <member name="F:ESolve.GlobalConstants.NOTIFICATION_CATEGORY_DEFAULT">
            <summary>
            Notification category constant for default
            </summary>
        </member>
        <member name="T:ESolve.CustomExceptionMiddleware.CSPMiddleware">
            <summary>
            Class which is used to configure Content Security Policy
            </summary>
        </member>
        <member name="M:ESolve.CustomExceptionMiddleware.CSPMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ESolve.CustomExceptionMiddleware.CSPMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Async
            </summary>
            <param name="httpContext"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.CustomExceptionMiddleware.ExceptionMiddleware">
            <summary>
            Class which is used for serving exceptions and logging actions
            </summary>
        </member>
        <member name="M:ESolve.CustomExceptionMiddleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ESolve.CustomExceptionMiddleware.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Async
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.CustomExceptionMiddleware.LogoutMiddleware">
            <summary>
            Class which is used for logging out Users/Employees upon returning 401 - Unauthorized.
            </summary>
        </member>
        <member name="M:ESolve.CustomExceptionMiddleware.LogoutMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ESolve.CustomExceptionMiddleware.LogoutMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,ESolve.Entities.RepositoryContext)">
            <summary>
            Async
            </summary>
            <param name="httpContext"></param>
            <param name="repositoryContext">Repository Context injected into the InvokeAsync method.</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Migrations.MigrationV54">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV54.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV54.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV54.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV55">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV55.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV55.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV55.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV56">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV56.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV56.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV56.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV57">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV57.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV57.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV57.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV58">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV58.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV58.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV58.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV59">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV59.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV59.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV59.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV60">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV60.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV60.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV60.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV61">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV61.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV61.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV61.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV62">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV62.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV62.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV62.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV63">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV63.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV63.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV63.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV64">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV64.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV64.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV64.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.Migration65">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.Migration65.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.Migration65.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.Migration65.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV66">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV66.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV66.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV66.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV67">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV67.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV67.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV67.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.Migration66">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.Migration66.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.Migration66.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.Migration66.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV68">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV68.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV68.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV68.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV69">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV69.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV69.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV69.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV70">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV70.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV70.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV70.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV71">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV71.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV71.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV71.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV72">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV72.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV72.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV72.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV73">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV73.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV73.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV73.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV74">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV74.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV74.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV74.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV75">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV75.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV75.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV75.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV76">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV76.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV76.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV76.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV78">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV78.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV78.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV78.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV79">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV79.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV79.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV79.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV80">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV80.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV80.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV80.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV81">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV81.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV81.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV81.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.MigrationV82">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV82.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV82.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ESolve.Migrations.MigrationV82.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ESolve.Migrations.StoredProcedures">
            <summary>
            Migration that will always be executed after all other migrations have been executed.
            Used for inserting stored procedures.
            </summary>
        </member>
        <member name="M:ESolve.Migrations.StoredProcedures.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Up override
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="T:ESolve.Migrations.StoredProcedures_V2">
            <summary>
            Migration that will always be executed after all other migrations have been executed.
            Used for inserting stored procedures.
            </summary>
        </member>
        <member name="M:ESolve.Migrations.StoredProcedures_V2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Up override
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="T:ESolve.Migrations.StoredProcedures_V3">
            <summary>
            Migration that will always be executed after all other migrations have been executed.
            Used for inserting stored procedures.
            </summary>
        </member>
        <member name="M:ESolve.Migrations.StoredProcedures_V3.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Up override
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="T:ESolve.Migrations.StoredProcedures_V4">
            <summary>
            Migration that will always be executed after all other migrations have been executed.
            Used for inserting stored procedures.
            </summary>
        </member>
        <member name="M:ESolve.Migrations.StoredProcedures_V4.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Up override
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="T:ESolve.Migrations.Triggers_V1">
            <summary>
            Used for inserting trigger.
            </summary>
        </member>
        <member name="M:ESolve.Migrations.Triggers_V1.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Up override
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="T:ESolve.OperationFilters.ESolveSecurityRequirementsOperationFilter">
            <summary>
            Class that implements IOperationFilter interface and
            defines OpenApiSecurityRequirement for endpoints based on
            the Controller which they belong to.
            </summary>
        </member>
        <member name="M:ESolve.OperationFilters.ESolveSecurityRequirementsOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies OpenApiSecurityRequirement for endpoints.
            </summary>
            <param name="operation">OpenApiOperation.</param>
            <param name="context">OperationFilterContext.</param>
        </member>
        <member name="T:ESolve.Program">
            <summary>
            Defines the <see cref="T:ESolve.Program" />
            </summary>
        </member>
        <member name="M:ESolve.Program.Main(System.String[])">
            <summary>
            The Main
            </summary>
            <param name="args">The args<see cref="!:string[]"/></param>
        </member>
        <member name="M:ESolve.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            The CreateWebHostBuilder
            </summary>
            <param name="args">The args<see cref="!:string[]"/></param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></returns>
        </member>
        <member name="T:ESolve.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ESolve.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ESolve.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ESolve.RSA.IRsa">
            <summary>
            Interface for encryption and decryption
            </summary>
        </member>
        <member name="M:ESolve.RSA.IRsa.Encrypt(System.String)">
            <summary>
            Encrypt passed string
            </summary>
            <param name="text">Plain text that will be encrypted</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.RSA.IRsa.Decrypt(System.String)">
            <summary>
            Decrypt passed string
            </summary>
            <param name="encrypted">Encrypted text that will be decrypted</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.RSA.RSAManager">
            <summary>
            RSA Manager for encryption and decryption
            </summary>
        </member>
        <member name="M:ESolve.RSA.RSAManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.RSA.RSAManager.ImportPrivateKey(System.String)">
            <summary>
            Import OpenSSH PEM private key string into MS RSACryptoServiceProvider
            </summary>
            <param name="pem"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.RSA.RSAManager.GetPrivateKeyFromPemFile(System.String)">
            <summary>
            return private key as RSACryptoServiceProvider
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.RSA.RSAManager.GetPublicKeyFromPemFile(System.String)">
            <summary>
            return public key as RSACryptoServiceProvider
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.RSA.RSAManager.Decrypt(System.String)">
            <summary>
            Decrypt passed string
            </summary>
            <param name="encrypted">encrypted string</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.RSA.RSAManager.Encrypt(System.String)">
            <summary>
            Encrypt passed string
            </summary>
            <param name="text">passed string whihc will be encrypted</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.RSA.RSAManager.GetPrivateKey">
            <summary>
            method retuurns private key as RSACryptoServiceProvider
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.RSA.RSAManager.GetPublicKey">
            <summary>
            method retuurns public key as RSACryptoServiceProvider
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Startup">
            <summary>
            Defines the <see cref="T:ESolve.Startup" />
            </summary>
        </member>
        <member name="M:ESolve.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:ESolve.Startup"/> class.
            </summary>
            <param name="configuration">The configuration<see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
        </member>
        <member name="P:ESolve.Startup.Configuration">
            <summary>
            Gets the Configuration
            </summary>
        </member>
        <member name="M:ESolve.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">The services<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
        </member>
        <member name="M:ESolve.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">The app<see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env">The env<see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
        </member>
        <member name="M:ESolve.Startup.GetScopeFactory">
            <summary>
            A method for obtaining a scope factory to communicate with database for scheduled job
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Startup.GeneralRules">
            <summary>
            Rate-limit general rules to restrict (api/endpoint etc..)
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESolve.Swagger.OperationOrderAttribute">
            <summary>
            Operation sortorder attribute
            </summary>
        </member>
        <member name="P:ESolve.Swagger.OperationOrderAttribute.Order">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Swagger.OperationOrderAttribute.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="order"></param>
        </member>
        <member name="T:ESolve.Swagger.SwaggerOptions">
            <summary>
            Class Represents Swagger configurable options.
            </summary>
        </member>
        <member name="P:ESolve.Swagger.SwaggerOptions.JsonRoute">
            <summary>
            JsonRoute for generated json
            </summary>
        </member>
        <member name="P:ESolve.Swagger.SwaggerOptions.Description">
            <summary>
            Description of our API.
            </summary>
        </member>
        <member name="P:ESolve.Swagger.SwaggerOptions.UIEndpoint">
            <summary>
            Represents endpoint for UI.
            </summary>
        </member>
        <member name="T:ESolve.Utils.ASSOTokenUtils">
            <summary>
            Class contains methods and properties related with ASSO token
            </summary>
        </member>
        <member name="P:ESolve.Utils.ASSOTokenUtils.TokenDetail">
            <summary>
            ASSO token details
            </summary>
        </member>
        <member name="P:ESolve.Utils.ASSOTokenUtils.Domain">
            <summary>
            Domain name
            </summary>
        </member>
        <member name="P:ESolve.Utils.ASSOTokenUtils.OrganisationReference">
            <summary>
            Organisation Reference
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.RefreshToken(Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerChallengeContext,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Regenerate token when got expired
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.GetRefreshToken(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Call platform API and regenerate access token
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.WriteCookie(System.String,System.String,System.Int32,Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Write token into cookie
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.WriteAuthCookies(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Add tokens into cookies
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.WriteARCookies(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Int32)">
            <summary>
            Add tokens into cookies
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.ReadCookies(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext)">
            <summary>
            Read cookie and set ASSO token details. Information will be useful while access token get expired and need to regenerate it.
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.IdentifyUserOrEmployeeAndSetClaims(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext)">
            <summary>
            Identify user or employee and set required claims
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.AddClaimsForSuperAdminUser(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext,ESolve.Entities.Models.SuperAdmin)">
            <summary>
            Add claims for superAdmin
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.AddClaimsForUser(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext,ESolve.Entities.Models.User)">
            <summary>
            Add claims for user
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.AddClaimsForEmployee(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext,ESolve.Entities.Models.Employee)">
            <summary>
            Add claims for employee
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.GetAccessTokenFromCookies(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Get access token form HttpRequest passed cookies
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.GetRefreshTokenFromCookies(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Get refresh token form HttpRequest passed cookies
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.GetDomainAndOrganisationReference(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext)">
            <summary>
            Get domain
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ASSOTokenUtils.AppendDomainNameOnCookies">
            <summary>
            Append domain name on cookies 
            </summary>        
        </member>
        <member name="T:ESolve.Utils.ASSO.ASSOUtils">
            <summary>
            Class contains methods and properties related with ASSO user
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSO.ASSOUtils.CreateUser(ESolve.Entities.DTOs.UserDTO,System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Create user through front end while create new user
            </summary>
            <param name="user"></param>
            <param name="accessToken"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ASSO.ASSOUtils.CreateUser(ESolve.Entities.Models.User,System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Create user through sync process of front end
            </summary>
            <param name="user"></param>
            <param name="accessToken"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ASSO.ASSOUtils.CreateUser(ESolve.Entities.Models.Employee,System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Create employee through sync process of front end
            </summary>
            <param name="employee"></param>
            <param name="accessToken"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ASSO.ASSOUtils.UpdateUser(ESolve.Entities.Models.User,ESolve.Entities.RepositoryContext,System.String,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Update user through front end while update any user
            </summary>
            <param name="userDTO"></param>
            <param name="repositoryContext"></param>
            <param name="accessToken"></param>
            <param name="configuration"></param>
            <param name="userAdvancedId"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ASSO.ASSOUtils.SetAdminType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Set Admin rights
            </summary>
            <param name="advancedId"></param>
            <param name="isUserAdmin"></param>
            <param name="isCustomerAdmin"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ASSO.ASSOUtils.Logout(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Logout from ASSO
            </summary>
        </member>
        <member name="M:ESolve.Utils.ASSO.ASSOUtils.GetUserSystemAdministrativeRights(System.String,System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Get user system Administrative rights 
            </summary>
            <param name="userAdvancedId"></param>
            <param name="accessToken"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Utils.BrokenRuleMessagesUtils">
            <summary>
            Class for methods for broken rule messages
            </summary>
        </member>
        <member name="M:ESolve.Utils.BrokenRuleMessagesUtils.CreateDataForBrokenRuleMessagesDialog(System.Collections.Generic.List{ESolve.Entities.DTOs.RulesBrokenDTO})">
            <summary>
            Creating contect for broken rule messages dialog
            </summary>
            <param name="allBrokenRules">Calculated broken rules</param>
            <returns>SummaryDTO with data that will be displayed on broken rule messages dialog.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Utils.Colors">
            <summary>
            The class contains hexadecimal values, which represent colors
            </summary>
        </member>
        <member name="F:ESolve.Utils.Colors.Gray">
            <summary>
            Default color for notification, which does not require action
            </summary>
        </member>
        <member name="F:ESolve.Utils.Colors.Red">
            <summary>
            Red color for notifications that require action
            </summary>
        </member>
        <member name="T:ESolve.Utils.ConfigurationValues">
            <summary>
            Values that can be changed only in this class
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConfigurationValues.RepetitionsNoForLoneWorker">
            <summary>
            Number of repetitions for lone worker's confirmations
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConfigurationValues.StringMaxTime">
            <summary>
            Max value of time of the day (string type)
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConfigurationValues.StringMinTime">
            <summary>
            Min value of time of the day (string type)
            </summary>
        </member>
        <member name="T:ESolve.Utils.ConstraintRulesNames">
            <summary>
            Class with attributes that represent constraints' names
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.NotAlreadyAssignedName">
            <summary>
            Constraint rule name of Not Already Assigned Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.MaximumNumberOfHoursName">
            <summary>
            Constraint rule name of Maximum Number Of Hours Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.EmployeeLeaverStatusName">
            <summary>
            Constraint rule name of Employee Leaver Status Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.MaximumNumberOfDaysOfTheWeekName">
            <summary>
            Constraint rule name of Maximum Number Of Days Of The Week Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.EmployeeMustNotWorkWithAnotherEmployeeName">
            <summary>
            Constraint rule name of Employee Must Not Work With Another Employee Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.EmployeeMustWorkWithAnotherEmployeeName">
            <summary>
            Constraint rule name of Employee Must Work With Another Employee Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.MaximumNumberOfJobTypesName">
            <summary>
            Constraint rule name of Maximum Number Of Job Types Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.MaximumNumberOfJobTypesConsecutivelyName">
            <summary>
            Constraint rule name of Maximum Number Of Job Types Consecutively Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.EmployeeFieldValueName">
            <summary>
            Constraint rule name of Employee Field Value Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.SplitShiftsName">
            <summary>
            Constraint rule name of Split Shifts Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.DaysOffWithinAPeriodName">
            <summary>
            Constraint rule name of Days Off Within A Period Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.EmployeePlannedAbsenceName">
            <summary>
            Constraint rule name of Employee Planned Absence Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.MaximumNumberOfJobTimesName">
            <summary>
            Constraint rule name of Maximum Number Of Job Times Constraint
            </summary>
        </member>
        <member name="F:ESolve.Utils.ConstraintRulesNames.EmployeeAvailabilityName">
            <summary>
            Constraint rule name of Employee Availability Constraint
            </summary>
        </member>
        <member name="T:ESolve.Utils.ConstraintsUtils">
            <summary>
            Class presents helper for constraints
            </summary>
        </member>
        <member name="M:ESolve.Utils.ConstraintsUtils.GetConnectedEmployees(System.Collections.Generic.List{ESolve.Entities.Models.Constraint})">
            <summary>
            Get connected employees by must work and must not work constraint
            </summary>
            <param name="constraints"></param>
            <returns>List of employees' primary keys</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Utils.CustomDataUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Utils.CustomDataUtils.CheckIfScheduleCustomDataIsSame(System.Int64,System.Nullable{System.Double},System.String,System.Nullable{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Checks if passed custom datas are the same as schedule custom data.
            </summary>
            <param name="scheduleID"></param>
            <param name="number"></param>
            <param name="text"></param>
            <param name="customDataLookupID"></param>
            <param name="_repositoryContext"></param>
            <returns>Returns true if schedule custom data is the same as passed custom data, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.NullReferenceException">The exception that is thrown when a null reference
            trying to read property of null.</exception>
        </member>
        <member name="M:ESolve.Utils.CustomDataUtils.CheckIfSubgroupCustomDataIsSame(System.Int64,System.Nullable{System.Double},System.Nullable{System.Int64},System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            Checks if passed custom datas are the same as schedule custom data.
            </summary>
            <param name="subgroupId"></param>
            <param name="number"></param>
            <param name="customDataLookupID"></param>
            <param name="text"></param>
            <param name="_repositoryContext"></param>
            <returns>Returns true if subgroup custom data is the same as passed custom data, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            /// <exception cref="T:System.NullReferenceException">The exception that is thrown when a null reference
            trying to read property of null.</exception>
        </member>
        <member name="M:ESolve.Utils.CustomDataUtils.CheckIfTemplateScheduleCustomDataIsSame(System.Int64,System.Nullable{System.Double},System.String,System.Nullable{System.Int64},ESolve.Entities.RepositoryContext)">
            <summary>
            Checks if passed custom datas are the same as template schedule custom data.
            </summary>
            <param name="scheduleID"></param>
            <param name="number"></param>
            <param name="text"></param>
            <param name="customDataLookupID"></param>
            <param name="_repositoryContext"></param>
            <returns>Returns true if template schedule custom data is the same as passed custom data, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.NullReferenceException">The exception that is thrown when a null reference
            trying to read property of null.</exception>
        </member>
        <member name="M:ESolve.Utils.CustomDataUtils.CheckIfTemplateSubgroupCustomDataIsSame(System.Int64,System.Nullable{System.Double},System.Nullable{System.Int64},System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            Checks if passed custom datas are the same as template subgroup custom data.
            </summary>
            <param name="subgroupId"></param>
            <param name="number"></param>
            <param name="customDataLookupID"></param>
            <param name="text"></param>
            <param name="_repositoryContext"></param>
            <returns>Returns true if template subgroup custom data is the same as passed custom data, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            /// <exception cref="T:System.NullReferenceException">The exception that is thrown when a null reference
            trying to read property of null.</exception>
        </member>
        <member name="T:ESolve.Utils.EmployeeSchedHrsStatus.EmployeeSchedHrsStatusColors">
            <summary>
            EmployeeSchedHrsStatus colors
            </summary>
        </member>
        <member name="F:ESolve.Utils.EmployeeSchedHrsStatus.EmployeeSchedHrsStatusColors.SchedGreaterThanPlannedHrsPrimaryColor">
            <summary>
            Sched Hrs Greater than Planned Hrs Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.EmployeeSchedHrsStatus.EmployeeSchedHrsStatusColors.SchedGreaterThanPlannedHrsSecondaryColor">
            <summary>
            Sched Hrs Greater than Planned Hrs Secondary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.EmployeeSchedHrsStatus.EmployeeSchedHrsStatusColors.SchedLessThanPlannedHrsPrimaryColor">
            <summary>
            Sched Hrs less than Planned Hrs Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.EmployeeSchedHrsStatus.EmployeeSchedHrsStatusColors.SchedLessThanPlannedHrsSecondaryColor">
            <summary>
            Sched Hrs less than Planned Hrs Secondary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.EmployeeSchedHrsStatus.EmployeeSchedHrsStatusColors.SchedEqualToPlannedHrsPrimaryColor">
            <summary>
            Sched Hrs Equal to Planned Hrs Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.EmployeeSchedHrsStatus.EmployeeSchedHrsStatusColors.SchedEqualToPlannedHrsSecondaryColor">
            <summary>
            Sched Hrs Equal to Planned Hrs Secondary Color
            </summary>
        </member>
        <member name="T:ESolve.Utils.EmployeeUtils">
            <summary>
            Utils for filter employees from database
            </summary>
        </member>
        <member name="M:ESolve.Utils.EmployeeUtils.GetEmployeesThatUserHasAccessTo(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.RepositoryContext,System.Int64,System.String)">
            <summary>
            Getting or filtering employees that user with passed primary key has access to
            </summary>
            <param name="employees">List of employees for filtering by user's employee access</param>
            <param name="repositoryContext">DB context</param>
            <param name="userID">User's primary key</param>
            <param name="role">User's role</param>
            <returns>List of primary keys that present employees' primary key to which user has access to.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Utils.EmployeeUtils.GetEmployeeNameBasedOnUserAccess(ESolve.Entities.Models.Employee,ESolve.Entities.RepositoryContext,System.Int64,System.String)">
            <summary>
            Get employee name based on user employee's access
            If user does not have access to the employee, he is anonymous for that user
            </summary>
            <param name="employee">Employee object</param>
            <param name="repositoryContext">DB context</param>
            <param name="userID">User's primary key</param>
            <param name="role">User's role</param>
            <returns>Employee name and surname or anonymous</returns>
        </member>
        <member name="M:ESolve.Utils.EmployeeUtils.GetListsForManagerEmployeePermissions(ESolve.Entities.RepositoryContext,System.Int64)">
            <summary>
            Generating list for manager employee permission
            </summary>
            <param name="repositoryContext">DB context</param>
            <param name="userID">Current Logged in user</param>
            <returns>List of lists</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.Utils.EmployeeUtils.GetIdNameListOfEmployees(System.Collections.Generic.List{ESolve.Entities.Models.Employee},ESolve.Entities.RepositoryContext,System.Int64,System.String)">
            <summary>
            Gets All Employees from database in list of IdNameDropDownModel objects. See <see cref="T:ESolve.Entities.Models.IdNameDropDownModel"/> for more details.
            </summary>
            <param name="employees">Employee for checking if employee has access to</param>
            <param name="repositoryContext">DB context</param>
            <param name="userID">Logged in user's primary key</param>
            <param name="role">Logged in user's role</param>
            <returns>List of IdNameDropDownModel objects</returns>
        </member>
        <member name="T:ESolve.Utils.EnumUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.Utils.EnumUtils.GetDescription(System.Enum)">
            <summary>
            Get the description from enum value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Utils.ErrorsUtils">
            <summary>
            Class for generating errors
            </summary>
        </member>
        <member name="M:ESolve.Utils.ErrorsUtils.RaiseError(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.String,System.String)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="context">Action context</param>
            <param name="key">Message key</param>
            <param name="message">Message content</param>
        </member>
        <member name="M:ESolve.Utils.ErrorsUtils.CreateError(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.String,System.String)">
            <summary>
            Creates Json Error. Puts it in context and raises BadRequestObjectResult
            </summary>
            <param name="context">Action context</param>
            <param name="key">Message key</param>
            <param name="message">Message content</param>
        </member>
        <member name="T:ESolve.Utils.ImagesUtils">
            <summary>
            Class for handling logic for imagees
            </summary>
        </member>
        <member name="M:ESolve.Utils.ImagesUtils.CreateImages(System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            This method is used for creating image base on passed string in all image sizes from database
            </summary>
            <param name="base64Image">String that presents image.</param>
            <param name="repositoryContext">Database repository context</param>
            <returns>List of images that would be added</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when
            a composite format string is not well formed.</exception>
        </member>
        <member name="M:ESolve.Utils.ImagesUtils.Resize(System.Drawing.Image,System.Int32,System.Int32,System.Boolean)">
            <summary>
            resize an image and maintain aspect ratio
            </summary>
            <param name="image">image to resize</param>
            <param name="newWidth">desired width</param>
            <param name="maxHeight">max height</param>
            <param name="onlyResizeIfWider">if image width is smaller than newWidth use image width</param>
            <returns>resized image</returns>
        </member>
        <member name="M:ESolve.Utils.ImagesUtils.Crop(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Crop an image 
            </summary>
            <param name="img">image to crop</param>
            <param name="cropArea">rectangle to crop</param>
            <returns>resulting image</returns>
        </member>
        <member name="M:ESolve.Utils.ImagesUtils.ConvertBytesToBase64(System.Byte[])">
            <summary>
            Converts bystes to base 64
            </summary>
            <param name="image"></param>
            <returns>string base 64</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="T:ESolve.Utils.ItemEqualityComparer`1">
            <summary>
            Class for comparing objects.
            </summary>
            
        </member>
        <member name="M:ESolve.Utils.ItemEqualityComparer`1.#ctor(System.Func{`0,System.Object})">
            <summary>
            Constructor which initialize field comparator.
            </summary>
            <param name="virtualFieldComparator"></param>
        </member>
        <member name="M:ESolve.Utils.ItemEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Constructor which initialize comparator based on passed expression.
            </summary>
            <param name="virtualFilterComparator"></param>
        </member>
        <member name="M:ESolve.Utils.ItemEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Methods compares to objects.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.ItemEqualityComparer`1.GetHashCode(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Utils.JobStatusUtils">
            <summary>
            Responsible for the seting up job status for the jobs.
            </summary>
        </member>
        <member name="M:ESolve.Utils.JobStatusUtils.SetJobToInitialStatus(ESolve.Entities.RepositoryContext,System.Int32,System.Int32)">
            <summary>
            Set up Initial status of the job*
            </summary>
            <param name="repositoryContext">repositoryContext</param>
            <param name="numberOfRequiredEmployees">numberOfRequiredEmployees</param>
            <param name="numberOfAvailableEmployees">numberOfAvailableEmployees</param>
            <returns>ID of Job Status</returns>
        </member>
        <member name="T:ESolve.Utils.JobStatus.JobStatusColors">
            <summary>
            Job status colors
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.NoAvailableEmployeesPrimaryColor">
            <summary>
            No Available Employees Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.NoAvailableEmployeesSecondaryColor">
            <summary>
            No Available Employees Secondary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.CorrectNumberOfEmployeesAssignedPrimaryColor">
            <summary>
            Correct number of employees assigned Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.CorrectNumberOfEmployeesAssignedSecondaryColor">
            <summary>
            Correct number of employees assigned Secondary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.TooManyEmployeesAssignedPrimaryColor">
            <summary>
            Too many employees assigned Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.TooManyEmployeesAssignedSecondaryColor">
            <summary>
            Too many employees assigned Secondary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.InsufficientEmployeesAssignedPrimaryColor">
            <summary>
            Insufficient employees assigned Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.InsufficientEmployeesAssignedSecondaryColor">
            <summary>
            Insufficient employees assigned Secondary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.InsufficientEmployeesToMeetTheRequirementPrimaryColor">
            <summary>
            Insufficient employees to meet the requirement Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.InsufficientEmployeesToMeetTheRequirementSecondaryColor">
            <summary>
            Insufficient employees to meet the requirement Secondary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.CorrectNumberOfEmployeesAssignedButNoCoverPrimaryColor">
            <summary>
            Correct number of employees assigned but no cover Primary Color
            </summary>
        </member>
        <member name="F:ESolve.Utils.JobStatus.JobStatusColors.CorrectNumberOfEmployeesAssignedButNoCoverSecondaryColor">
            <summary>
            Correct number of employees assigned but no cover Secondary Color
            </summary>
        </member>
        <member name="T:ESolve.Utils.LoginUtils">
            <summary>
            Generate temporary password, hashing password, checking password complexity
            </summary>
        </member>
        <member name="M:ESolve.Utils.LoginUtils.GenerateTemporaryPassword(ESolve.Entities.RepositoryContext)">
            <summary>
            Generate password with minimum requiremts defined in security table in database
            </summary>
            <returns>Password</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.Utils.LoginUtils.HashPassword(System.String)">
            <summary>
            Method for hashing password.
            </summary>
            <param name="password"></param>
            <returns>Hashed password.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ObjectDisposedException">The exception that is thrown when an operation
            is performed on a disposed object.</exception>
            <exception cref="T:System.Text.EncoderExceptionFallback">Provides a failure-handling mechanism, called a fallback, for an input character
            that cannot be converted to an output byte sequence. The fallback throws an exception
            if an input character cannot be converted to an output byte sequence. This class
            cannot be inherited. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when
            a composite format string is not well formed. </exception>
        </member>
        <member name="M:ESolve.Utils.LoginUtils.CheckPasswordComplexity(System.String,ESolve.Entities.RepositoryContext)">
            <summary>
            Method for checking if password has minimum complexity
            </summary>
            <param name="password"></param>
            <param name="repositoryContext"></param>
            <returns>True if password satisfies minimum complexity </returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">The exception that is thrown when an encoder fallback operation fails. 
            This class cannot be inherited.</exception>
        </member>
        <member name="M:ESolve.Utils.LoginUtils.DecryptString(System.String)">
            <summary>
            Method for decrypting passed text
            </summary>
            <param name="text"></param>
            <returns>Returns decrypted text.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentException">The exception that is thrown when one of the arguments provided to a method is
            not valid.</exception>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when
            a composite format string is not well formed.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">The exception that is thrown when a decoder fallback operation fails. This class
            cannot be inherited.</exception>
        </member>
        <member name="M:ESolve.Utils.LoginUtils.EnryptString(System.String)">
            <summary>
            Method for encrypting passed text.
            </summary>
            <param name="text"></param>
            <returns>Returns encrypted text.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">The exception that is thrown when an encoder fallback operation fails. This class
            cannot be inherited.</exception>
        </member>
        <member name="T:ESolve.Utils.MobileAppUtils">
            <summary>
            MobileAppUtils
            </summary>
        </member>
        <member name="M:ESolve.Utils.MobileAppUtils.DeleteRecordByCodeInMosaicData(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.MobileAppUtils.GetAccessCodeForApp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.MobileAppUtils.GetRecordForMobileApp(System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Get record using unique code
            </summary>
            <param name="code"></param>        
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.MobileAppUtils.GetRecordForWebApp(ESolve.Entities.DTOs.MobileAPI.MobileApiSearchParameters,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="mobileApiSearchParameters"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.MobileAppUtils.CreateRecord(ESolve.Entities.DTOs.MobileConnectionMapping,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Create record 
            </summary>
            <param name="mobileConnectionMapping"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.MobileAppUtils.DeleteRecord(System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Delete record using unique code
            </summary>
            <param name="code"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.Utils.RandomUtils">
            <summary>
            Class to generate random number without random class.
            </summary>
        </member>
        <member name="M:ESolve.Utils.RandomUtils.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Generate random number without random class
            </summary>
            <returns>Random Number</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="T:ESolve.Utils.ScheduleFilter">
            <summary>
            Calendar data filter 
            </summary>
        </member>
        <member name="M:ESolve.Utils.ScheduleFilter.FilterScheduleCalendarTimeLineViewDTOData(ESolve.Entities.Filters.CalendarViewFilterModel,System.Collections.Generic.ICollection{ESolve.Entities.DTOs.CalendarTimeLineViewDTO},ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Represent filter of CalendarTimeLineViewDTO objects
            </summary>
            <param name="filter">Filter Arguments. See <see cref="T:ESolve.Entities.Filters.CalendarViewFilterModel"/> for model details.</param>
            <param name="jobs">CalendarTimeLineViewDTO objects <see cref="T:ESolve.Entities.DTOs.CalendarTimeLineViewDTO"/></param>
            <param name="_repositoryContext">Repository context</param>
            <param name="isTemplate">Is Called from template</param>
            <returns>Collection of the CalendarTimeLineViewDTO containing elements that satisivies filter conditions</returns>
        </member>
        <member name="M:ESolve.Utils.ScheduleFilter.FilterScheduleCalendarEmployeeViewDTOData(ESolve.Entities.Filters.CalendarViewFilterModel,System.Collections.Generic.ICollection{ESolve.Entities.DTOs.CalendarEmployeeViewDTO},ESolve.Entities.RepositoryContext,System.Boolean)">
            <summary>
            Represent filter of CalendarEmployeeViewDTO objects
            </summary>
            <param name="filter">Filter Arguments. See <see cref="T:ESolve.Entities.Filters.CalendarViewFilterModel"/> for model details.</param>
            <param name="jobs">CalendarEmployeeViewDTO objects <see cref="T:ESolve.Entities.DTOs.CalendarEmployeeViewDTO"/></param>
            <param name="_repositoryContext">Repository context</param>
            <param name="isTemplate">Indicator is called from template</param>
            <returns>Collection of the CalendarEmployeeViewDTO containing elements that satisivies filter conditions</returns>
        </member>
        <member name="T:ESolve.Utils.SearchParametres">
            <summary>
            Parametres for search
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.DepartmentParameter">
            <summary>
            Department search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.DivisionParameter">
            <summary>
            Division search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.ClassParameter">
            <summary>
            Class search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.CostCodeParameter">
            <summary>
            Cost Code search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.GenderParameter">
            <summary>
            Gender search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.JobTypeParameter">
            <summary>
            Job Type search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.LocationParameter">
            <summary>
            Location search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.ManagerParameter">
            <summary>
            Manager search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.SkillParameter">
            <summary>
            Skill search parameter for employee filtering
            </summary>
        </member>
        <member name="F:ESolve.Utils.SearchParametres.ProfileParameter">
            <summary>
            Profile search parameter for employee filtering
            </summary>
        </member>
        <member name="T:ESolve.Utils.TokenUtils">
            <summary>
            Class contains properties and methods related with jwt token
            </summary>
        </member>
        <member name="P:ESolve.Utils.TokenUtils.DecodedToken">
            <summary>
            Decoded JWT Token
            </summary>
        </member>
        <member name="M:ESolve.Utils.TokenUtils.#ctor(Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Method which should take value from the Authorization header from the Request
            and return a decoded token.
            </summary>
            <param name="auth">Authorization in format 'Bearer token'.</param>
        </member>
        <member name="M:ESolve.Utils.TokenUtils.GetProfileID">
            <summary>
            Get Profile Id from token
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESolve.Utils.TokenUtils.GetAccountUsername">
            <summary>
            Get Username from token
            </summary>
            <returns>String which represents Username</returns>
            <exception cref="T:System.ArgumentNullException">This exception will bee raised if claims are null</exception>
            <exception cref="T:System.InvalidOperationException">This exception will bee raised if claims are null</exception>
        </member>
        <member name="M:ESolve.Utils.TokenUtils.GetAccountRole">
            <summary>
            Get Role from Token.
            </summary>
            <returns>String which represents Role of logged in user</returns>
            <exception cref="T:System.ArgumentNullException">This exception will bee raised if claims are null</exception>
            <exception cref="T:System.InvalidOperationException">This exception will bee raised if claims are null</exception>
        </member>
        <member name="M:ESolve.Utils.TokenUtils.GetUserID">
            <summary>
            Get UserId from Token.
            </summary>
            <returns>Long which representsId of logged in user</returns>
            <exception cref="T:System.ArgumentNullException">This exception will bee raised if claims are null. Or if nameid is null</exception>
            <exception cref="T:System.InvalidOperationException">This exception will bee raised if claims are null</exception>
            <exception cref="T:System.OverflowException">This exception will bee raised if value which is parsed is grather or smaller of long data type range</exception>
            <exception cref="T:System.FormatException">This exception will bee raised if nameid param is not a number</exception>
        </member>
        <member name="M:ESolve.Utils.TokenUtils.GetLoggedTime">
            <summary>
            Get token issuer Time
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">This exception will bee raised if claims are null</exception>
            <exception cref="T:System.InvalidOperationException">This exception will bee raised if claims are null</exception>
        </member>
        <member name="T:ESolve.Utils.UserUtils">
            <summary>
            User utils
            </summary>
        </member>
        <member name="M:ESolve.Utils.UserUtils.GetLoggedInUserName(System.Int64,ESolve.Entities.RepositoryContext)">
            <summary>
            Get logged in user's name
            </summary>
            <param name="userId"></param>
            <param name="_repositoryContext"></param>
            <returns></returns>
        </member>
        <member name="T:ESolve.BuisniesLogicUtils.BusinessLogic">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.DoesPasswordSatisfySecuritySettings(System.String,ESolve.Entities.Models.Security)">
            <summary>
            Check that the new password satisfy the security setting
            </summary>
            <param name="password">The password for checking</param>
            <param name="security">Security object</param>
            <returns>Return the validation message, if everything is OK we return null</returns>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.BusinessLogic.MaximumNumberOfDaysOfTheWeekConstraintFieldLength">
            <summary>
            Number of fields for Maximum Number Of Days Of The Week Constraint
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.BusinessLogic.GenerateMaximumNumberOfHoursConstraintFieldLegth">
            <summary>
            Number of fields for Maximum Number Of Hours Constraint
            </summary>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetTemplateJobCustomData(System.String,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            For passed values generates TemplateJobCustomData object.
            </summary>
            <param name="customDataName">CustomData Name</param>
            <param name="templateJobID">TemplateJob Primary Key</param>
            <param name="customDataID">Custom Data Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Item Primary Key</param>
            <param name="numberValue">Number Value</param>
            <param name="textValue">Text Value</param>
            <param name="manualyUpdated">Is manually updated item</param>
            <returns>TemplateJobCustomData object</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetJobCustomData(System.String,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            For passed values generates JobCustomData object.
            </summary>
            <param name="customDataName">CustomData Name</param>
            <param name="jobID">Job Primary Key</param>
            <param name="customDataID">Custom Data Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Item Primary Key</param>
            <param name="numberValue">Number Value</param>
            <param name="textValue">Text Value</param>
            <param name="manualyUpdated">Is manualy updated item</param>
            <returns>JobCustomData object</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetAllComparisonModes">
            <summary>
            Method Generates Application Comparison Modes
            </summary>
            <returns>Array of specified ComparisonModes</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetAllOperators">
            <summary>
            Method Generates Application Operators
            </summary>
            <returns>Array of specified Operators</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetEmployeeFieldsIdName">
            <summary>
            Get All EmployeeFields.
            </summary>
            <returns>All EmployeeFields.</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetEmployeeFields">
            <summary>
            Get All EmployeeFields.
            </summary>
            <returns>All EmployeeFields.</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetDateRange">
            <summary>
            This method Return all defined Date Ranges sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetHoursTypes">
            <summary>
            This method Return all defined Hours Types sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetComparisonModes">
            <summary>
            This method Return all defined Comparison modes sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetYesNoDropDown">
            <summary>
            This method returns Yes and No possibilities.
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetMaxHours">
            <summary>
            This method Return all defined Max Hours sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetDaysOfWeek">
            <summary>
            This method Return all Days of week sorted by Day of week
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetConstraintOperators">
            <summary>
            This method Return all Operators defined in constraint module sorted alphabetically
            </summary>
            <returns>Array of strings</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetSubGroupParentsAndChilds(System.Collections.Generic.IEnumerable{ESolve.Entities.Models.SubGroup},ESolve.Entities.Models.SubGroup)">
            <summary>
            For passed List of SubGroups in Schedule, method will return parents and child for selected SubGroup
            </summary>
            <param name="allSubGroups">Collection of all SubGroups in Schedule</param>
            <param name="parentSubGroup">Selected SubGroup</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetTemplateSubGroupParentsAndChilds(System.Collections.Generic.IEnumerable{ESolve.Entities.Models.TemplateSubGroup},ESolve.Entities.Models.TemplateSubGroup)">
            <summary>
            
            </summary>
            <param name="allSubGroups"></param>
            <param name="parentSubGroup"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.BusinessLogic.GetTemplateSubGroupCustomData(System.String,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            For passed values generates TemplateSubGroupCustomData object.
            </summary>
            <param name="customDataName">CustomData Name</param>
            <param name="subGroupID">TemplateSubGroup Primary Key</param>
            <param name="customDataID">Custom Data Primary Key</param>
            <param name="customDataLookupID">CustomDataLookup Item Primary Key</param>
            <param name="numberValue">Number Value</param>
            <param name="textValue">Text Value</param>
            <param name="manualyUpdated">Is manualy updated item</param>
            <returns>SubGroupCustomData object</returns>
        </member>
        <member name="T:ESolve.BuisniesLogicUtils.CustomDocumentFilter">
            <summary>
            This class can sort things inside passed classes. We use this class to sort endpoints in controller by httpTYPE
            </summary>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.CustomDocumentFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:ESolve.BuisniesLogicUtils.DateTimeUtils">
            <summary>
            Utils class for working with <c>DateTime</c> objects. This class methods are static.
            <para><c>There is no need to instatiate this class.</c></para>
            <remarks>
            <para>This class can:</para>
            <para>Check is passed date inside passed date range.
            See <see cref="M:ESolve.BuisniesLogicUtils.DateTimeUtils.IsDateInRange(System.DateTime,System.DateTime,System.DateTime)"/>
            </para>
            <para>Check is passed date range insife passed date range.
            <c>See</c> <see cref="M:ESolve.BuisniesLogicUtils.DateTimeUtils.IsDateRangeInsideRange(System.DateTime,System.DateTime,System.DateTime,System.DateTime)"/>
            </para>
            <para>Check is first date before second date according passed bool param.
            <c>See</c> <see cref="M:ESolve.BuisniesLogicUtils.DateTimeUtils.IsFirstDateBeforeSecondDate(System.DateTime,System.DateTime,System.Boolean)"/>
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GetDateFormatByLocalesValue(System.String)">
            <summary>
            A method that, based on locales value, returns the date format
            </summary>
            <param name="value">Locales value</param>
            <returns>Date format</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GetTime(System.String)">
            <summary>
            convert string to long (for hours fields)
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.ConvertHoursToString(System.Int64)">
            <summary>
            Converting hours to string
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.ConvertFullTimeToString(System.Int64)">
            <summary>
            Converting hours to string
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GetDateTimeFormatByLocalesValue(System.String)">
            <summary>
            A method that, based on locales value, returns the date time format
            </summary>
            <param name="value">Locales value</param>
            <returns>DateTime format</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.IsDateInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Compares DateTime object <paramref name="date"/> with <paramref name="startDate"/> and <paramref name="endDate"/>.
            <para>If <paramref name="date"/> Ticks are grather or equal than <paramref name="startDate"/> AND smaller or equal with <paramref name="endDate"/> Ticks.
            Method will return <c>True</c> in all other cases return value will be <c>False</c></para>
            <param name="date">Represents Date which you want to check.</param>
            <param name="startDate">Represents start date of passed interval.</param>
            <param name="endDate">Represents end date of passed interval.</param>
            </summary>
            <returns><c>bool</c> Which represents is passed date inside passed date range.</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.IsDateRangeInsideRange(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Compares passed Date ranges.
            </summary>
            <param name="StartRange">Range Start Date.</param>
            <param name="EndRange">Range End Date.</param>
            <param name="StartInterval">Interval Start Date.</param>
            <param name="EndInterval">Interval End Date</param>
            <returns><c>bool</c> Represents is Passed range inside desired date range</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.IsFirstDateBeforeSecondDate(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Method compare passed dates based on <paramref name="lessOrEqual"/>. If we pass false for <paramref name="lessOrEqual"/> method operator will be less
            otherwise operator will be less or equal
            </summary>
            <param name="dateTime1">DateTime object</param>
            <param name="dateTime2">DateTime object</param>
            <param name="lessOrEqual">bool param</param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.DoesPeriodsOverlaps(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Method used for cheking if two jobs overlap 
            </summary>
            <param name="sDateOne"></param>
            <param name="eDateOne"></param>
            <param name="sDateTwo"></param>
            <param name="eDateTwo"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GetConstraintDateRangeForJob(System.DateTime,System.DateTime,ESolve.Entities.Models.ConstraintDateRange,ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Generate job's date range for constraint's calculations 
            </summary>
            <param name="jobStartDate">Job's start date</param>
            <param name="jobEndDate">Job's end date</param>
            <param name="constraintDateRange">Object with date range type</param>
            <param name="scheduleDatePreference"> Schedule date preference</param>
            <returns>Array of dates where the first element is start date of date range and the last element is end date of date range</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GenerateDateRange(System.String,System.DateTime,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Genereting date range for constraints and rankings
            </summary>
            <param name="dateRangeType">Date range's type (week, month, base date, pay period or custom)</param>
            <param name="jobStartDate">Job's start date</param>
            <param name="jobEndDate">Job's end date</param>
            <param name="baseDate">Base date if date range is base date range</param>
            <param name="baseDateRange">Base date range if date range is base date </param>
            <param name="offset">Offset if date range is custom</param>
            <param name="amount">Amount if date range is custom</param>
            <param name="scheduleDatePreference">Schedules date preferences</param>
            <returns>Array of dates where the first element is date range's start and the second element is date range's end date</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GeneratePayPeriodDateRange(System.DateTime,ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Method used for creating pay peeriod date range for passed date.
            </summary>
            <param name="date">Job's start or end date</param>
            <param name="scheduleDatePreference">scheduleDatePreference</param>
            <returns>Pay period date range based on passed date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GenerateBaseDateRange(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Generate base date range
            </summary>
            <param name="date">Job's start or end date.</param>
            <param name="baseDate">Base date </param>
            <param name="baseDateRange">Base date range</param>
            <returns>Base date range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The excpetion that is thrown when the value of an argument is outside
            of allowable range of values as defined by invoked method.</exception>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.CalculateFirstDateInWeek(System.String,System.DateTime)">
            <summary>
            For passed first day of the week and current date, method will generate FirstDAte in week
            </summary>
            <param name="nameOfFirstDayInWeek"></param>
            <param name="jobStartDate"></param>
            <returns></returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.CheckifDayOfWeekExitsInDateRange(System.DateTime,System.DateTime,System.String)">
            <summary>
            Method used for checking if passed day of week is between start date and end date
            </summary>
            <param name="startDate">Start date of date range</param>
            <param name="endDate">End date of date range</param>
            <param name="dayOfWeek">Day of the week</param>
            <returns>Return number of passed day of week between date range.</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GetTimeFromString(System.String)">
            <summary>
            Method used for parsing string in timespan
            </summary>
            <param name="time"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference
            is passed to a method that does not accept it as a valid argument.</exception>
            <exception cref="T:System.FormatException">The exception that is thrown when the format of an argument is invalid, or when
            a composite format string is not well formed.</exception>
            <exception cref="T:System.OverflowException">The exception that is thrown when an arithmetic, casting, 
            or conversion operation in a checked context results in an overflow.</exception>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.LastDayOfWeek(System.DateTime,System.String)">
            <summary>
            Method for getting last day of the week for some date
            </summary>
            <param name="date">The date for which week we are looking for the last day</param>
            <param name="nameOfFirstDayInWeek">Name of first day in week from tblScheduleDatePreference</param>
            <returns>Last day of the week</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GetDatesInDateRange(System.DateTime,System.DateTime)">
            <summary>
            Method that returns an enumerable of dates starting from startDate and ending at endDate
            </summary>
            <param name="startDate">Date from which the dates begin.</param>
            <param name="endDate">Date to which the dates will be returned</param>
            <returns>Enumerable of dates</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GetStartDateOfCustomDateRange(System.DateTime,System.DateTime,System.Collections.Generic.List{ESolve.Entities.Models.Constraint},System.Boolean)">
            <summary>
            Get start date of date range in case where we have constraint with custom date range and than we need to go backward to see if there are some assigments in previous range
            </summary>
            <param name="initialStartDate">Inital start date of date range</param>
            <param name="initialEndDate">Inital end date of date range</param>
            <param name="constraints">Collection of constraints</param>
            <param name="leftToRight">Constraint that we are checking</param>
            <returns>New value for passed inital date</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when a null reference 
            is passed to a method that does not accept it as a valid argument.</exception>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.CalculateRangeForJobs(System.DateTime,System.DateTime,System.Collections.Generic.Dictionary{System.Int64,ESolve.Entities.Models.Constraint},ESolve.Entities.Models.ScheduleDatePreference)">
            <summary>
            Geranting date range for jobs 
            Assignments from generated date rnage will affect jobs that are between passed min and max dates
            </summary>
            <param name="minDate">Min date of range where are the jobs</param>
            <param name="maxDate">Max date of range where are the jobs</param>
            <param name="constraints">Constraints that are have date range</param>
            <param name="scheduleDatePreference">Schedule date preference from database</param>
            <returns>Arry of dates where the first element represents start date of generated date range and the second element reperesents end date of generated date range</returns>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.DateTimeUtils.GetEarliestOrFarthestDateFromTwoDates(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Method that takes two dates and, based on the indicator, returns either the
            earliest of two or the farthest of two.
            </summary>
            <param name="d1">First date.</param>
            <param name="d2">Second date.</param>
            <param name="isEarliest">Indicator for whether the earliest or farthest is needed.</param>
            <returns></returns>
        </member>
        <member name="T:ESolve.BuisniesLogicUtils.Messages">
            <summary>
            Class contains strings which represents messages for actions.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SuperAdminPassword">
            <summary>
            Super admin password
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SuperAdminUsername">
             <summary>
            
             </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SetValuePropertyName">
            <summary>
            Content : Set Value
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LockedRangeAddJob">
            <summary>
            Content : You can't add job in locked SubGroup.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LockedRangeUpdateJob">
            <summary>
            You can't update job in locked SubGroup.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LockedRangeDeleteJob">
            <summary>
            You can't delete job in locked SubGroup.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LockedSubGroup">
            <summary>
            Content : Selected SubGroup is locked.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LockedRangeInsertTemplate">
            <summary>
            Content: You can't insert template in locked SubGroup
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LockedRangeUpdateInsertedTemplate">
            <summary>
            Content: You can't update template in locked SubGroup
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LockedRangeDeleteInsertedTemplate">
            <summary>
            Content: You can't insert template in locked SubGroup
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.MissingChangeApprovedSchedulesPermission">
            <summary>
            Content: You don't have permisison to change approved schedule.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.MissingAccessExistingSchedulePermission">
            <summary>
            Content: You don't have permisison to access schedule.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.MissingDeleteExistingSchedulePermission">
            <summary>
            Content: You don't have permisison to access schedule.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.GenderIdDoesntExists">
            <summary>
            Content : Gender Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.GenderStatus400">
            <summary>
            Content : Gender couldn't bee inserted.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ClassIdDoesntExists">
            <summary>
            Content : Class Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintIdNotFound">
            <summary>
            Content : Constraint with passed Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintCantBeDeleted">
            <summary>
            Content : Constraint can't be deleted becouse it is Active on this Schedule.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintCantBeModified">
            <summary>
            Content : Constraint can't be modified becouse it is not configurable.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintFieldsNotInitialized">
            <summary>
            Content : Constraint Fields must be initialized.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintNameHasBeenOccupied">
            <summary>
            Content : Constraint Name has been occupied from another Constraint.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintNumberOfFieldsIsNotValid">
            <summary>
            Content : Number of fields is not valid. Please send correct fields for this ConstraintRuleType.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintFieldDateRangeIsNotValid">
            <summary>
            Content : Selected Date Range isn't supported.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintFormFieldsAreNotValid">
            <summary>
            Content : You have populated fields which must be empty.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintFormRequiredFieldsNotValid">
            <summary>
            Content : You need to populate all required fields.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintFormRequiredFieldsInvalidData">
            <summary>
            Content : You need to populate all required fields with valid data.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintOffsetValueNotValid">
            <summary>
            Content : Offset value must be smaller than Amount value.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ComparisonValueNotValid">
            <summary>
            Content : Please enter comparison value.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintCustomDataValueNotValid">
            <summary>
            Content : Please enter custom data.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintFieldIsRequired">
            <summary>
            Content : Constraint field is required.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NoconstraintsAvailable">
            <summary>
            NoconstraintsAvailable
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintRuleIdNotFound">
            <summary>
            Content : ConstraintRule with passed Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ConstraintRuleCantBeUpdated">
            <summary>
            Content : Constraint with selected Constraint Rule can't be deactivated.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LocationIdDoesntExists">
            <summary>
            Content : Location Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DuplicateLocationId">
            <summary>
            Content : One or more Locations Ids are same in the request.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CostCodeIdDoesntExists">
            <summary>
            Content : Cost Code Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DivisionIdDoesntExists">
            <summary>
            Content : Division Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DepartmentIdDoesntExists">
            <summary>
            Content : Department Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeInUse">
            <summary>
            Content : Skill code cannot be deleted because it is in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ParentSubGroupID">
            <summary>
            Content : Selected Parent Subgroup doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobsOutOfSubgroupRange">
            <summary>
            Content : There would bee Jobs out of SubGroupDateRange.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SubGroupNameOccupied">
            <summary>
            Content : Selected SubGroup Name has been occupied by another SubGroup.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SubGroupDateRangeWithoutParentSubGroup">
            <summary>
            Content : SubGroup Start and End Date must be between Schedule Start and End Date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SubGroupDateRangeWithParentSubGroup">
            <summary>
            Content : SubGroup Start and End Date must be between Parent SubGroup Start and End Date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ParentSubGroupIDEqualWithSubGroupID">
            <summary>
            Content : SubGroup can't be parent it self.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SubGroupIDNotFound">
            <summary>
            Content : SubGroupID doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SubGroupCustomDataIDNotFound">
            <summary>
            Content : SubGroupCustomDataID doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ScheduleID">
            <summary>
            Content : Schedule with selected ID doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SearchTermNull">
            <summary>
            Content : Search Term must be initialized.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DatabasePrimaryKeyIsRequired">
            <summary>
            Content : Object Primary Key is required.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeExistsInSkillMatrix">
            <summary>
            Content : Selected Skill Code already exists in Skill Matrix Table.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeSuccesfullyDeletedFromSkillMatrix">
            <summary>
            Content : Selected Skill Code succesfully removed from Skill Matrix Table.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeUnSuccesfullyDeletedFromSkillMatrix">
            <summary>
            Content : Selected Skill Code couldn't be removed from Skill Matrix Table.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillMatrixDoesntExists">
            <summary>
            Content : SkillMatrix doesn't exists in data base.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillMatrixCreated">
            <summary>
            Content : Skill Code succesfully added in Skill Matrix.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillMatrixCreatedError">
            <summary>
            Content : Error has been occured during inserting new Skill Code in Skill Matrix.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillValueUpdated">
            <summary>
            Content : Skill Value successfully updated.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillValueUpdatedError">
            <summary>
            Content : Skill Value couldn't bee updated.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeProfileNameUniqueConstraint">
            <summary>
            Content : EmployeeProfile Name has been occupied by another EmployeeProfile.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeProfileIdDoesntExists">
            <summary>
            Content : Employee Profile Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeNameUniqueConstraint">
            <summary>
            Content : Skill Code Name has been occupied by another Skill Code.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeIDDoesntExists">
            <summary>
            Content : Skill Code ID doesn't exists in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeNameIsDuplicatedInList">
            <summary>
            Content : One or more Skill Code Names in list are equals.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EssentialSkillManadatory">
            <summary>
            Essential skill must have at least one skill.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EndDateBeforeStartDate">
            <summary>
            Content : Start Date must be before End Date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.StartDateEndDateNull">
            <summary>
            Content : Start date and end date are required.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeIDDoesntExists">
            <summary>
            Content : EmployeeID doesn't exists in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeEmailOccupied">
            <summary>
            Content : Email has been occupied from another Employee.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeEmailWrongFormat">
            <summary>
            Content : Email is in incorect format.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeUsernameOccupied">
            <summary>
            Content : Username has been occupied from another Employee.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeEmployeeNumberOccupied">
            <summary>
            Content : EmployeeNumber has been occupied from another Employee.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeStartDateBeforeLeaveDate">
            <summary>
            Content : Employee Start Date can't be after Leave Date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeDateOfBirtihInFuture">
            <summary>
            Content : Employee Date of birth can't be in the future.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeDateOfBirtihAfterStartDate">
            <summary>
            Content : Employee Date of birth can't be after Employee Start Date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeLeaveDateBeforeDateOfBirth">
            <summary>
            Content : Employee Leave Date can't be before Employee Date of Birth.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeLicenseExceeded">
            <summary>
            Content : Cannot add new employee as number of license exceeded
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomerLicenseExpired">
            <summary>
            Content : Customer license is expired
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AccessDeniedDueToNotHavingLicense">
            <summary>
            Content : Customer license is expired
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmailOccupied">
            <summary>
            Content : Email has been occupied by Employee or User.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ReadOnlyField">
            <summary>
            Content : This is a read-only field.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DatabaseError">
            <summary>
            Content : Database error while saving entity
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTitleIdDoesntExists">
            <summary>
            Content : Job Title Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobWithPassedIDNotExists">
            <summary>
            Content : Job with passed ID doesn't exists in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.MissingPermissionToAddOrEditJob">
            <summary>
            Content : You don't have permission to add or edit jobs.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobSuccCopied">
            <summary>
            Content : Job is copied successfully!
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobNotCopiedNOdayExceeds">
            <summary>
            Content : The rest of days can not be copied as it exceeds the subgroup end date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateJobWithPassedIDNotExists">
            <summary>
            Content : Template Job with passed ID doesn't exist in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobAssigmentIDDoesntExists">
            <summary>
            Content : Job Assigment for passed values doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTypeNameOccupied">
            <summary>
            Content : Selected JobType Name has been occupied by another JobType.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTypeCantBeDeleted">
            <summary>
            Content : Selected JobType can't be deleted. It is referenced in other tabels.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTypeIdDoesntExistsInDatabase">
            <summary>
            Content : JobType with passed Id doesn't exists in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTypeRemovedDataBaseName">
            <summary>
            Content : Job Type Removed
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTypeNameDoesntExistInDatabase">
            <summary>
            Content: JobType with passed name doesn't exist in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobStatusPrimaryColorWrong">
            <summary>
            Content : Job status primary color must be hexadecimal value.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobStatusSecondaryColorWrong">
            <summary>
            Content : Job status secondary color must be hexadecimal value.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TimeUnitIDNotExist">
            <summary>
            Content : Time Unit with selected Id doesn't exists in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TimeUnitValueLoverValue">
            <summary>
            Content: Time Unit Value can't be equal or less than 0.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TimeUnitValueUpperValue">
            <summary>
            Content: "Time Unit Value can't be grather than " + int.MaxValue
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TargetRuleGroupIdDoesnExist">
            <summary>
            Content : Target Rule Group Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.WorkRulesIdDoesntExist">
            <summary>
            Content : WorkRules Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NotificationIdDoesntExists">
            <summary>
            Content : Notification Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TeamIdDoesntExists">
            <summary>
            Content : Team Id doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeAlreadyAssigned">
            <summary>
            Content : Selected employee is already assigned on selected Job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeSucessfullyAssigned">
            <summary>
            Content : Selected employee has been succesfully assigned on selected Job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeInvalidAssigned">
            <summary>
            Content : Selected employee have invalid assigment on selected Job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeErrorDuringSavingAssiging">
            <summary>
            Content : Error has been occured during saving assigment in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ScheduleDoesntExist">
            <summary>
            Content : Selected schedule doesn't exist in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.RankingTypeDoesntExist">
            <summary>
            Content : Selected ranking type doesn't exist in database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.RankingNameAlreadyExists">
            <summary>
            Content : Ranking name for selected schedule already exists.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NoRankingAvailable">
            <summary>
            No rankings available
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.RankingRuleDoesntExist">
            <summary>
            Content : Selected ranking rule doesn't exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DateRangeCannotBeNull">
            <summary>
            Content : Date range cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DayOfWeekCannotBeNull">
            <summary>
            Content : Day of week cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.InvalidDateRangeValue">
            <summary>
            Content : Date rannge value can be Week, Month, Pay period, Custom or Base Date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.InvalidDayOfWeek">
            <summary>
            Content : Day of week value can be Monday, Tuesday, Wednesday,Thursday,Friday,Saturday,Sunday
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.IvalidAmountValue">
            <summary>
            Content : Amount must be greater then 0.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ComparisonValuesDuplicated">
            <summary>
            Content : Comparison values cannot contain duplicated values.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ComparisonValuesNullOrEmpty">
            <summary>
            Content : Comparison value cannot contain empty value.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ComparisonValuesEmpty">
            <summary>
            Content : Comparison values must contains at least one value.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataTypeIDNotFound">
            <summary>
            Content : CustomDataType with passed ID doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataLookupTypeName">
            <summary>
            Content : Name of Lookup
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataIDNotFound">
            <summary>
            Content : CustomData with passed ID doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataLookupReferencedInOtherTable">
            <summary>
            Content : CustomDataLookup with passed ID has been referenced in other table/s.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataValueBadFormat">
            <summary>
            Content : CustomData Value isn't a number.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataLookupsAreNotDistinct">
            <summary>
            Content : All CustomDataLookups must have unique name.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDatNameOccupied">
            <summary>
            Content : CustomData Name has been occupied by antoher CustomData.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataAlreadyAssigned">
            <summary>
            Content : CustomData with passed ID is already assigned for selected entity.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataTextValue">
            <summary>
            Content : Type of this CustomData is Text. Other values must be NULL.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataNumberValue">
            <summary>
            Content : Type of this CustomData is Number. Other values must be NULL.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataLookupValue">
            <summary>
            Content : Type of this CustomData is Lookup. Text and Number value must be NULL.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataChangeOfTypeNotAllowed">
            <summary>
            Content : Type of this CustomData can't be changed becouse this CustomData is already assigned.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataIdDiffernetFromJobTypeComparisonRuleID">
            <summary>
            Content : One or more jobtype comparison rules doesn't belong current JobType.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmpInheritedCustomDataCanNotBeChanged">
            <summary>
            Content : Cannot add or modify Custom data inherited from Employee Organisation Data.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmpInheritedCustomDataCanNotBeDeleted">
            <summary>
            Content : Cannot delete Custom data inherited from Employee Organisation Data.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataLookupIDDoesNotExist">
            <summary>
            Content : CustomDataLookup does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.BadComparisonMode">
            <summary>
            Content : Selected Comparison Mode isn't valid.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.BadOperator">
            <summary>
            Content : Selected Operator isn't valid.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ComparisonRuleSetValuInvalid">
            <summary>
            Content : You have selected Set Value Mode. For this mode comparisonRuleCustomData must be empty, and textValue or NumberValue must have value.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ComparisonRuleCustomDataInvalid">
            <summary>
            Content : You have selected Custom Data Mode. For this mode textValue or NumberValue must be NULL.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ComparisonIDNotFound">
            <summary>
            Content : ComparisonRule with passed ID doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeFieldIsInvalidType">
            <summary>
            Content : You can choose only string or integer types.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataLookupIDNotFound">
            <summary>
            Content : CustomDataLookup with passed ID doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataLookupName">
            <summary>
            Content : CustomDataLookup Name has been occupied by antoher CustomDataLookup.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CustomDataLookupsEmpty">
            <summary>
            Content : Custom Data Lookup need to be populated.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UsernameIsNullOrEmpty">
            <summary>
            Content: Username cannot be null or empty string.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesNotExist">
            <summary>
            Content: User does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesNotHaveProfile">
            <summary>
            Content: User does not have profile assigned.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeIDs">
            <summary>
            Content: For JobOffer you must select Employees.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeAlreadyHaveJobOfferForThisJob">
            <summary>
            Content: Some of selected Employee already have job offer for this job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.MissingJobOffersPermissionForEmployee">
            <summary>
            Content: Some of selected employee don't have job offers permission.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobOfferCantBeDone">
            <summary>
            Content: Some selected employees are not valid. Please Try again.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.WrongPassword">
            <summary>
            Content: Password is wrong.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PasswordIsRequired">
            <summary>
            Content: Password is required.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PassworNullOrEmpty">
            <summary>
            Content: Password cannot be null or empty
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SyncSettingsMessage">
            <summary>
            Content : Sync setting's message cannot be null or empty.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SyncSettingsDowsNotExist">
            <summary>
            Content : Sync settings with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ProfileDoesNotExist">
            <summary>
            Content :Profile does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ProfileInUse">
            <summary>
            Content : Profile cannot be deleted when in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ProfileCannotBeNull">
            <summary>
            Content :Profile cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PermissionsNull">
            <summary>
            Content :Permissions cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PropertyNull">
            <summary>
            Content :Property cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ProfileNameAlreadyExists">
            <summary>
            Content : Profile with passed name already exists.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PermissionTypeNull">
            <summary>
            Content : Panel permission's type cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PermissionOptionNull">
            <summary>
            Content : Panel permission's option cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SchedulePermissionsDoesNotExist">
            <summary>
            Content : Schedule permissions does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesntPossesSchedulePermissions">
            <summary>
            Content : Schedule permissions does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesntHavePermissionForThisAction">
            <summary>
            Content : You dont have permission for this action.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AbsencePermissionsDoesNotExist">
            <summary>
            Content : Absence permissions does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SystemPermissionsDoesNotExist">
            <summary>
            Content : System permissions does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeePermissionsDoesNotExist">
            <summary>
            Content : Employee permissions does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ReportPermissionsDoesNotExist">
            <summary>
            Content : Report permissions does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesNotHaveAppropriatePermissionForSchedule">
            <summary>
            Content : User does not have appropriate permission for schedule.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesNotHavePermissionForShifts">
            <summary>
            Content : User does not have permission to use shifts.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesNotHaveAllowsOverrideJobs">
            <summary>
            Content : You don't have permission to override overlapping job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AbsenceCodeNameAlreadyExist">
            <summary>
            Content : Absence code's name is already in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AbsenceCodeInUse">
            <summary>
            Content : Absence code in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AbsenceCodeNotExist">
            <summary>
            Content : Absence Code does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AbsenceStatusDoesNotExists">
            <summary>
            Content : Absence Status with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AbsenceRequestIDReqired">
            <summary>
            Content : Absence request's primary key is required.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AbsenceRequestIDNotExist">
            <summary>
            Content : Absence request with passed primary key does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateScheduleID">
            <summary>
            Content : Template Schedule with selected ID doesn't exists in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EntityIDIsMandatory">
            <summary>
            Content : EntityID is mandatory field..
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateSubgroupID">
            <summary>
            Content : Template Subgroup with selected ID doesn't exist in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateSchedulePermission">
            <summary>
            Content : You do not have permission to do unassign all action.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftGroupNameIsMandatoryField">
            <summary>
            Shift group name is mandatory field
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftGroupIsNull">
            <summary>
            Shift group is required
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PassedShiftGroupDoesNotExist">
            <summary>
            Shift group does not exist
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftCodeIsMandatoryField">
            <summary>
            Shift code is mandatory field
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftDescriptionIsMandatoryField">
            <summary>
            Shift description is mandatory field
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftStartTimeIsMandatoryField">
            <summary>
            Shift start time is mandatory field
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftEndTimeIsMandatoryField">
            <summary>
            Shift end time is mandatory field
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftHoursIsMandatoryField">
            <summary>
            Shift hours is mandatory field
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftNumberOfDaysMustBeGreaterThanZero">
            <summary>
            Shift number of days must be greater than 0
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftDeletionMessage">
            <summary>
            Shift cannot be deleted
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ShiftCodeNameInUse">
            <summary>
            Content: Shift code's name in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerRecurringIntervalsNull">
            <summary>
            Content : Recurring Intervals cannot be null if job type support lone worker job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerResponseWindowNull">
            <summary>
            Content : Response Window cannot be null if job type support lone worker job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerRecurringIntervalsNotNull">
            <summary>
            Content : Recurring Intervals need to be null if job type does not support lone worker job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerResponseWindowNotNull">
            <summary>
            Content : Response Window need to be null if job type does not support lone worker job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ReccuringIntervalsGreaterThanResponseWindow">
            <summary>
            Content : Reccuring intervals should be 3 times greater than response window.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ReccuringIntervalsValue">
            <summary>
            Content : Reccuring intervals shoulds be between 00:01 and 23:59.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ResponseWindowValue">
            <summary>
            Content : Response window should be between 00:01 and 23:59.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerJob">
            <summary>
            Content : Response window should be between 00:01 and 23:59.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerManagerIDNotExist">
            <summary>
            Content : Lone Worker Manager with passed primary key does not exist..
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerAdminPermission">
            <summary>
            Content : Lone Worker Admin does not have permission to receive lone worker alerts.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerAdminIDNotExist">
            <summary>
            Content : Lone Worker Admin with passed primary key does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerManagerPermission">
            <summary>
            Content : Selected Lone Worker Manager does not have permission to recieve lone worker alerts.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SameLoneWorkerManagers">
            <summary>
            Content : Lone Worker Manager 1 and Lone Worker Manager 2 cannot be the same.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SameLoneWorkerAdmins">
            <summary>
            Content : Lone Worker Admin 1 and Lone Worker Admin 2 cannot be the same.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerStatusOpened">
            <summary>
            Content : Lone Worker Alert with status Opened cannot be deleted.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CheckInUnavailabile">
            <summary>
            Content : Selected Check-In is not available anymore.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoneWorkerConfirmed">
            <summary>
            Content : Lone Worker confirmed.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TimeBeforeJobStartNull">
            <summary>
            Content : Time Before Job Start cannot be null if job type support attendance confirmation.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AttendanceConfirmationResponseWindowNull">
            <summary>
            Content : Attendance Confrimation Response Window cannot be null if job type support attendance confirmation.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TimeBeforeJobStartValue">
            <summary>
            Content : Time Before Job Start shouldž be between 00:01 and 23:59.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AttendanceConfirmationResponseWindowValue">
            <summary>
            Content : Attendance Confirmation Response Window should be between 00:01 and 23:59.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TimeBeforeJobStartNotNull">
            <summary>
            Content : Time Before Job Start need to be null if job type does not support attendance confirmation.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AttendanceConfirmationResponseWindowNotNull">
            <summary>
            Content : Attendance Confirmation Response Window need to be null if job type does not support attendance confirmation.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AttendanceConfirmationNotSuported">
            <summary>
            Content : Job's type does not support attendance confirmation.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AttendanceConfirmationManagerIDNotExist">
            <summary>
            Content : Attendance Confirmation Manager with passed primary key does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AttendanceConfirmationManagerPermission">
            <summary>
            Content : Selected Attendance Confirmation Manager does not have permission to recieve attendance confirmation alerts.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SameAttendanceConfirmationManagers">
            <summary>
            Content : Attendance Confirmation Manager 1 and Attendance Confirmation Manager 2 cannot be the same.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AttendanceConfirmationResponseWindowGreaterThanTimeBeforeJobStart">
            <summary>
            Content : Attendance response window cannot be greater than time before job start.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AlreadyResponendOnAttendanceConfirmation">
            <summary>
            Content : You have already responded to this job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NotValidAnymore">
            <summary>
            Content : You are not validly assigned on this job anymore.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NoDataToCopy">
            <summary>
            Content : There is no data to copy.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DateRangeAfterSubgroupEndDate">
            <summary>
            Content : Next date range is after the subgroup end date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DateRangeAfterScheduleEndDate">
            <summary>
            Content : Next date range is after the schedule end date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TEMPLATEDateRangeAfterScheduleEndDate">
            <summary>
            Content : Next date range is after the template end date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DataIsCopied">
            <summary>
            Content : Data copied.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NumberOfDaysExceedsSubgroupEndDate">
            <summary>
            Content : Number of days exceeds subgroup end date.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.StartDateEndDateMandatory">
            <summary>
            Start date and end date are mandatory fields.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ParametersNull">
            <summary>
            Content: Passed parameters cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeStatus200">
            <summary>
            Content : SkillCode succesfully added. Also all Employees for inserted SkillCode have value False.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SkillCodeStatus400">
            <summary>
            Content : SkillCode couldn't be inserted. Something went wrong.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ScheduleNameStatus400">
            <summary>
            Content : Schedule name has been occupied by another schedule.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LocationNameStatus400">
            <summary>
            Content : Location name has been occupied by another location.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LocationInUse">
            <summary>
            Content : Location in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DepartmentNameStatus400">
            <summary>
            Content : Department name has been occupied by another department.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DepartmentInUse">
            <summary>
            Content : Department in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CostCodeNameStatus400">
            <summary>
            Content : Cost code name has been occupied by another cost code.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CostCodeInUse">
            <summary>
            Content : Cost code in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DivisionNameStatus400">
            <summary>
            Content : Division name has been occupied by another division.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DivisionInUse">
            <summary>
            Content : Division in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTitleNameStatus400">
            <summary>
            Content : Job title name has been occupied by another job title.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTitleInUse">
            <summary>
            Content : Job title in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TeamNameStatus400">
            <summary>
            Content : Team name has been occupied by another team.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TeamInUse">
            <summary>
            Content : Team in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ClassNameStatus400">
            <summary>
            Content : Class name has been occupied by another class.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ClassInUse">
            <summary>
            Content : Class in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeStatus400">
            <summary>
            Content : Employee couldn't be saved in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeStatusDelete400">
            <summary>
            Content : Employee couldn't be deleted from Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeStatusDelete200">
            <summary>
            Content : Employee successfully deleted.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeStatus400NullValue">
            <summary>
            Content : Employee can't be NULL.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeStatus404">
            <summary>
            Content : The Employee record could't be found.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ProfileCouldNotBeSaved">
            <summary>
            Content : Profile couldn't be saved in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ProfileSavedSuccessfully">
            <summary>
            Content : Profile is saved successfully.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateInsertedSuccessfully">
            <summary>
            Content: Template is inserted successfully.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateCouldNotBeInserted">
            <summary>
            Content: Template couldn't be inserted.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NoTemplateDataForInserting">
            <summary>
            Content: Template doesn't have any data for inserting.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTypePUT200">
            <summary>
            Content : JobType sucessfully updated.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobTypePUT400">
            <summary>
            Content : JobType couldn't be updated.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateUpdatedSuccessfully">
            <summary>
            Content: Template is updated successfully.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateCouldNotBeUpdated">
            <summary>
            Content: Template couldn't be updated.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CannotInsertThatManyRotations">
            <summary>
            Content: Template couldn't be updated.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateDeletedSuccessfully">
            <summary>
            Content: Template is deleted successfully.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateCouldNotBeDeleted">
            <summary>
            Template couldn't be deleted.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmailSettingsDoesNotExist">
            <summary>
            Content : Please fill in the required email settings in System preferences.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmailNotSent">
            <summary>
            Content : Email not sent.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmailSent">
            <summary>
            Content : Email sent.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PasswordUpdatedSuccessfully">
            <summary>
            Content : Password updated succesfully.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PasswordDoesNotSatisfyRules">
            <summary>
            Content : Password does not satisfy rules.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.PasswordNotUpdatedSuccessfully">
            <summary>
            Content : Password not updated succesfully.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.CannotUseOldPassword">
            <summary>
            Content : You cannot use your old password.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LoginFailed">
            <summary>
            Content : LoginFailed
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SMTPPasswordNotValid">
            <summary>
            Content : SMTP password is not valid.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.SMTPAddressNotValid">
            <summary>
            Content : SMTP address is not valid.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmailSettingsAlreadyExist">
            <summary>
            Content : Email settings are already added.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmailAddressNotUpdatedSuccessfully">
            <summary>
            Content : Email address not updated succesfully.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmailAddressUpdatedSuccessfully">
            <summary>
            Content : Email address updated succesfully.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LinkedEmployeeID">
            <summary>
            Content : Selected employee does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LinkedEmployeeRightNotNull">
            <summary>
            Content : You have to choose linked employee's right if you select linked employee.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LinkedEmployeeRightID">
            <summary>
            Content : Select linked employee right does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.LinkedEmployeeRight">
            <summary>
            Content : You cannot choose linked employee right if you did not choose linked employee.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UsernameInUse">
            <summary>
            Content : Username in use
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserIsLoneWorkerManagerOrAdmin">
            <summary>
            Content : Passed user is lone worker manager in subgroup(s).
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserIsManagerToEmployee">
            <summary>
            Content : Passed user is lone worker manager in subgroup(s).
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesNotHaveLWPermission">
            <summary>
            Content : Current user does not have lone worker alerts permission..
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserInUser">
            <summary>
            Content : Passed user is lone worker manager in subgroup(s).
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmailInUse">
            <summary>
            Content : Email in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ProfileID">
            <summary>
            Content : Profile with passed ID does not exist..
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.ScheduleRightID">
            <summary>
            Content : Schedule right with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateID">
            <summary>
            Content : Template with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.OrganisationFieldID">
            <summary>
            Content : Organisation field with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.FieldValuesNotNull">
            <summary>
            Content : Values for chosen organisatinal field cannot be null.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeCannotBeAssigned">
            <summary>
            Content: You don't have rights for assigning this Employee.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeCannotBeUnassigned">
            <summary>
            Content: You don't have rights for unassigning this Employee.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TradeWarning">
            <summary>
            Content : Unless this trade offer is accepted by another employee you are still required to work this job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AcceptingTradeOfferWarning">
            <summary>
            Content : By accepting this job you will be scheduled to work it.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.DeadLineLimit">
            <summary>
            Content : The start time of job is in breach of the trade deadline limit.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobDoesNotAllowTrades">
            <summary>
            Content : Passed job does not allow trades.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobAlreadyOfferedForTrade">
            <summary>
            Content : Passed job is already offered for trade.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeDoesNotAllowTrades">
            <summary>
            Content : Passed employee does not allow trades.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.JobIsInThePast">
            <summary>
            Content : Passed job is in the past.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeIsNotAssigned">
            <summary>
            Content : Passed employee is not assigned on the selected job.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.EmployeeTradeOfferIDDoesNotExist">
            <summary>
            Content : Employee trade offer with passed primary key does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.UserDoesNotHaveAssignAgencyPermission">
            <summary>
            Content : Current user does not have assign agency permission.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NameIsRequired">
            <summary>
            Content : Name is required.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NameAlreadyInUse">
            <summary>
            Content : Name is already in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.StringLength">
            <summary>
            Content: Name can't be longer than 150 characters.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AgencyDoesNotExist">
            <summary>
            Content: Agency with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AgencyReasonToCoverDoesNotExist">
            <summary>
            Content: Agency Reason To Cover with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.TemplateJobIDOrJobID">
            <summary>
            Content: Agency Reason To Cover with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AgencyIDNotExists">
            <summary>
            Content: Agency with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AgencyReasonForCoverIDNotExists">
            <summary>
            Content: Agency with passed ID does not exist.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NewAssignmentUnavailbile">
            <summary>
            Content: Job already has enough valid assigned employees.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AssigmentFromAgencyDoesNotExist">
            <summary>
            Content: Cannot find assignment from agency with passed ID.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AgencyIDInUse">
            <summary>
            Content: Selected Agency is in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AgencyReasonForCoverIDInUse">
            <summary>
            Content: Selected Agency Reason For Cover is in use.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.KEY_Locked_Range">
            <summary>
            Content : LockedRange
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.KEY_ChangeApprovedSchedulesPermission">
            <summary>
            Content: ChangeApprovedSchedulesPermission
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.KEY_AccessExistingSchedulePermission">
            <summary>
            Content: AccessExistingSchedule
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.KEY_DeleteExistingScheudulePermission">
            <summary>
            Content: DeleteExistingSchedulePermission
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AccessDenied">
            <summary>
            Content: Access denied.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.NoAuthorizationProvided">
            <summary>
            Content: No authorization provided.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.MASKED_CHARACTERS">
            <summary>
            String containing 20 '#' characters, representing a masked input.
            Current usage: Masking API Keys
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AdvancedSSOStatus400">
            <summary>
            Content : Advanced  SSO details  couldn't be saved in Database.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AdvancedStatus400NullValue">
            <summary>
            Content : Advanced  SSO details  can't be NULL.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AdvancedStatus404">
            <summary>
            Content : The Advanced  SSO details  record could't be found.
            </summary>
        </member>
        <member name="F:ESolve.BuisniesLogicUtils.Messages.AdvancedSSOOrHintStatus400">
            <summary>
            Organization hint can not be blank.
            </summary>
        </member>
        <member name="T:ESolve.BuisniesLogicUtils.StringUtils">
            <summary>
            Class used for working with strings
            </summary>
        </member>
        <member name="M:ESolve.BuisniesLogicUtils.StringUtils.GetStringItemsWithoutSpaces(System.String)">
            <summary>
            Method trims and splits passed string.
            </summary>
            <param name="term">String which we want to split in array by empty space delimiter</param>
            <returns>List of strings which represents items in passed string</returns>
        </member>
        <member name="T:ESolve.Role">
            <summary>
            Static class with string properties for Account Roles.
            </summary>
        </member>
        <member name="F:ESolve.Role.Employee">
            <summary>
            Role defining an account owner as an Employee.
            </summary>
        </member>
        <member name="F:ESolve.Role.User">
            <summary>
            Role defining an account owner as a User.
            </summary>
        </member>
        <member name="F:ESolve.Role.UserOrEmployee">
            <summary>
            Role defining an account owner as either an Employee or a User
            </summary>
        </member>
        <member name="T:Lookup">
            <summary>
            Lookup Values
            </summary>
        </member>
        <member name="F:Lookup.Locations">
            <summary>
            Locations
            </summary>
        </member>
        <member name="F:Lookup.Teams">
            <summary>
            Teams
            </summary>
        </member>
        <member name="F:Lookup.Classes">
            <summary>
            Classes
            </summary>
        </member>
        <member name="F:Lookup.Departments">
            <summary>
            Departments
            </summary>
        </member>
        <member name="F:Lookup.CostCodes">
            <summary>
            Cost Codes
            </summary>
        </member>
        <member name="F:Lookup.JobTitles">
            <summary>
            Job Titles
            </summary>
        </member>
        <member name="F:Lookup.Divisions">
            <summary>
            Divisions
            </summary>
        </member>
        <member name="T:Schedulestatus">
            <summary>
            Schedule sync statuses
            </summary>
        </member>
        <member name="F:Schedulestatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Schedulestatus.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:Triple`3">
            <summary>
            
            </summary>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <typeparam name="Z"></typeparam>
        </member>
        <member name="F:Triple`3.First">
            <summary>
            First element
            </summary>
        </member>
        <member name="F:Triple`3.Second">
            <summary>
            Second element
            </summary>
        </member>
        <member name="F:Triple`3.Third">
            <summary>
            Third element
            </summary>
        </member>
        <member name="M:Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Method for creating 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:PermissionsStruct">
            <summary>
            
            </summary>
        </member>
        <member name="F:PermissionsStruct.CanAccess">
            <summary>
            
            </summary>
        </member>
        <member name="F:PermissionsStruct.CanChangeStructure">
            <summary>
            
            </summary>
        </member>
        <member name="F:PermissionsStruct.CanAssign">
            <summary>
            
            </summary>
        </member>
        <member name="F:PermissionsStruct.CanSeeEmployeesNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:PermissionsStruct.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="canAccess"></param>
            <param name="canChangeStructure"></param>
            <param name="canAssign"></param>
            <param name="canSeeEmployeesNames"></param>
        </member>
        <member name="T:AuditFunctions">
            <summary>
            Audit function list
            </summary>
        </member>
        <member name="F:AuditFunctions.JobDetails">
            <summary>
            Job details function
            </summary>
        </member>
        <member name="F:AuditFunctions.Schedule">
            <summary>
            Schedule function
            </summary>
        </member>
        <member name="F:AuditFunctions.Subgroup">
            <summary>
            Subgroup function
            </summary>
        </member>
        <member name="F:AuditFunctions.AutoSolve">
            <summary>
            Auto solve function
            </summary>
        </member>
        <member name="F:AuditFunctions.Constraint">
            <summary>
            Constraint function
            </summary>
        </member>
        <member name="F:AuditFunctions.Ranking">
            <summary>
            Ranking function
            </summary>
        </member>
        <member name="F:AuditFunctions.Employee">
            <summary>
            Employee function
            </summary>
        </member>
        <member name="F:AuditFunctions.Absence">
            <summary>
            Absence function
            </summary>
        </member>
        <member name="F:AuditFunctions.Skill">
            <summary>
            Skill function
            </summary>
        </member>
        <member name="F:AuditFunctions.ScheduleApprovalRequest">
            <summary>
            Schedule approval request
            </summary>
        </member>
        <member name="F:AuditFunctions.ScheduleApproved">
            <summary>
            Schedule approved request
            </summary>
        </member>
        <member name="F:AuditFunctions.ScheduleRejected">
            <summary>
            Schedule rejected request
            </summary>
        </member>
        <member name="F:AuditFunctions.JobType">
            <summary>
            Job Type
            </summary>
        </member>
        <member name="F:AuditFunctions.UserProfile">
            <summary>
            User Profile
            </summary>
        </member>
        <member name="F:AuditFunctions.EmployeeProfile">
            <summary>
            Employee Profile
            </summary>
        </member>
        <member name="F:AuditFunctions.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:AuditFunctions.Licensing">
            <summary>
            Licensing
            </summary>
        </member>
        <member name="F:AuditFunctions.AdvancedSSO">
            <summary>
            Advanced SSO
            </summary>
        </member>
        <member name="T:AuditOperationTypes">
            <summary>
            Type of audit operations
            </summary>
        </member>
        <member name="F:AuditOperationTypes.Create">
            <summary>
            Create audit operation type
            </summary>
        </member>
        <member name="F:AuditOperationTypes.Update">
            <summary>
            Update audit operation type
            </summary>
        </member>
        <member name="F:AuditOperationTypes.Delete">
            <summary>
            Delete audit operation type
            </summary>
        </member>
        <member name="F:AuditOperationTypes.Approved">
            <summary>
            Schedule approved operation type
            </summary>
        </member>
        <member name="F:AuditOperationTypes.Rejected">
            <summary>
            Schedule rejected operation type
            </summary>
        </member>
        <member name="T:TypeOfJob">
            <summary>
            Type of job Regular, template etc
            </summary>
        </member>
        <member name="F:TypeOfJob.Regular">
            <summary>
            Regular job
            </summary>
        </member>
        <member name="F:TypeOfJob.Template">
            <summary>
            Template job
            </summary>
        </member>
    </members>
</doc>
