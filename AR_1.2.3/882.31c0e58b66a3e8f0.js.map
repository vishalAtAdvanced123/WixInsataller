{"version":3,"file":"882.31c0e58b66a3e8f0.js","mappings":"4XAmDM,MAAOA,EACTC,YACWC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GANAC,aACAA,oBACAA,kBACAA,eACAA,oBACAA,kBACAA,kBACR,EAGD,MAAOC,EACTT,YACWU,EACAC,EACAC,EACAC,EACAC,GAJAN,iBACAA,wBACAA,sBACAA,uBACAA,uBACR,6DCtDA,IAAMO,EAAb,MAAM,MAAOA,EAqBTf,YACYgB,EACAC,GADAT,yBACAA,uBAnBZA,oBAAyC,GAEjCA,gBAAa,IAAIU,IAIjBV,iBAAc,EAEdA,yBAA6B,GAErCA,gBAAa,GAEbA,8BAA2B,CAQtB,CAKLW,WACIX,KAAKY,cAAcZ,KAAKQ,kBAAkBK,oBAC1Cb,KAAKQ,kBAAkBM,yBAClBC,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,GAAQnB,KAAKY,cAAcO,IAE1CnB,KAAKQ,kBAAkBY,uBAClBL,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,IACPnB,KAAKqB,WAAaF,EAClBnB,KAAKY,cAAcZ,KAAKQ,kBAAkBK,mBAA1C,GAERb,KAAKsB,YACAP,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAU,KACPlB,KAAKY,cAAcZ,KAAKQ,kBAAkBK,mBAA1C,EAEX,CAMDD,cAAcW,IACY,eAAnBvB,KAAKqB,YAAkD,IAAnBrB,KAAKqB,cACxCrB,KAAKwB,mBAAqBD,EAC1BvB,KAAKQ,kBAAkBiB,sCAAsCzB,KAAKwB,mBAAmBE,UAAUC,QAAQC,OAAO,cAAe5B,KAAKwB,mBAAmBK,QAAQF,QAAQC,OAAO,eAC3KV,UACIY,IACG9B,KAAK+B,eAAiBD,EAAKE,KAC3BhC,KAAKiC,cAAL,EAEPC,IACGlC,KAAKS,gBAAgB0B,KAAKD,EAA1B,GAIX,CAKDD,eACI,MAAMP,EAAY1B,KAAKwB,mBAAmBE,UACpCG,EAAU7B,KAAKwB,mBAAmBK,QAClCO,EAAkBC,SAASC,eAAe,oCAEhDtC,KAAKuC,eAAeH,EAAiBpC,KAAK+B,eAAgB/B,KAAKwC,eAAed,EAAWG,EAASO,GACrG,CAQDI,eAAed,EAAgBG,EAAcO,GACzCpC,KAAKyC,oBAAsB,GAC3BzC,KAAK0C,YAAc,EACnBN,EAAgBO,YAAc,KAC9B,IAAIC,EAAclB,EAClB,MAAMmB,EAAQR,SAASS,cAAc,SAC/BC,EAAWV,SAASS,cAAc,MACxC,IAAIE,EAAiB,EACrB,EAAG,CACC,MAAMC,EAAcZ,SAASS,cAAc,MAC3CG,EAAYN,YAAcO,EAAON,GAAahB,OAAO,aACrD5B,KAAKyC,oBAAoBU,KAAKD,EAAON,IACrCK,EAAYG,aAAa,QAAS,OAClCH,EAAYG,aAAa,KAAM,MAAQJ,GACvCC,EAAYG,aAAa,QAAS,2CAClCL,EAASM,YAAYJ,GACrBL,EAAcM,EAAON,GAAajB,QAAQ2B,IAAI,EAAG,OACjDN,GACH,OAAQE,EAAON,GAAaW,eAAeL,EAAOrB,KAEnDgB,SAAMQ,YAAYN,GAClBA,EAASK,aAAa,QAAS,qBAC/BhB,EAAgBiB,YAAYR,GAErBG,CACV,CAODT,eAAeH,EAAsBL,EAAwCiB,GACzEhD,KAAKwD,yBAA2BR,EAChC,MAAMS,EAAapB,SAASS,cAAc,SAC1CW,EAAWL,aAAa,KAAM,uBAC9BhB,EAAgBiB,YAAYI,GAE5B1B,EAAe2B,QAAQC,IAEK,GAApB3D,KAAK0C,aACL1C,KAAK4D,gBAAgBH,EAAYT,EAAgBhD,KAAK0C,aAGrD1C,KAAK6D,2CAA2CF,KACjD3D,KAAK4D,gBAAgBH,EAAYT,EAAgBhD,KAAK0C,aACtD1C,KAAK6D,2CAA2CF,GAAhD,GAKR5B,EAAe2B,QAAQC,IACnB,MAAMG,EAAWzB,SAAS0B,uBAAuBJ,EAAQK,aACzD,GAAGF,EAASG,QAAU,EAClB,QAAQC,EAAI,EAAGA,EAAIJ,EAASG,OAAO,EAAGC,IAClCJ,EAASI,GAAGC,UAAY,IAIvC,CAODP,gBAAgBH,EAAiBT,EAAwBoB,GACrD,MAAMC,EAAYhC,SAASS,cAAc,MACzCuB,EAAUjB,aAAa,KAAM,MAAQgB,GACrC,QAASF,EAAI,EAAGA,EAAIlB,EAAgBkB,IAAK,CACrC,MAAMI,EAAMjC,SAASS,cAAc,MACnCwB,EAAIlB,aAAa,KAAM,MAAQgB,EAAc,MAAQF,GACrDI,EAAIC,MAAMC,QAAU,MACpBF,EAAIlB,aAAa,QAAS,wCAC1BiB,EAAUhB,YAAYiB,EACzB,CACDtE,KAAK0C,cACLe,EAAWJ,YAAYgB,EAC1B,CAQDR,2CAA2CF,GACvC,MAAMc,EAAsBpC,SAASC,eAAe,uBAAuBoC,qBAAqB,MAChG,IAAIC,GAAyB,EAG7B,QAAST,EAAI,EAAGA,EAAIO,EAAoBR,OAAQC,IAAK,CACjD,MAAMU,EAAaC,OAAOC,OAAO,GAAInB,GAErC,QAASoB,EAAI,EAAGA,EAAI/E,KAAKyC,oBAAoBwB,OAAQc,IAAK,CAEtD,IAAIC,GAA8B,EAClC,GAAG9B,EAAO0B,EAAWK,eAAetD,QAAQuD,SAAShC,EAAOlD,KAAKyC,oBAAoBsC,IAAIpD,QAAS,QAAS,CAEvG,MAAMwD,EAAQjC,EAAO0B,EAAWK,eAAetD,QAAQC,OAAO,UAC9DgD,EAAWK,cAAgB/B,EAAOlD,KAAKwB,mBAAmBE,WAAWC,QAErEiD,EAAWK,cAAcG,IAAI,CAAEC,KAAMF,EAAMG,MAAM,KAAK,GAAIC,OAAQJ,EAAMG,MAAM,KAAK,GAAIE,OAAQ,EAAGC,YAAa,IAC/GT,GAA8B,CACjC,CACD,GAAI9B,EAAOlD,KAAKyC,oBAAoBsC,IAAIpD,QAAQ+D,OAAOxC,EAAO0B,EAAWK,eAAetD,QAAS,QAAS,CAEtG,MAAM2C,EAAMjC,SAASC,eAAe,MAAM4B,EAAE,MAAMa,GAElD,GADqBT,EAAII,qBAAqB,OAAOT,OAEjD,MAIA,GAAIf,EAAO0B,EAAWK,eAAetD,QAAQ+D,OAAOxC,EAAO0B,EAAWZ,aAAarC,QAAS,QAoErFqD,EAGChF,KAAK2F,iBAAiBrB,GAAK,EAAOM,EAAY,iBAG9C5E,KAAK2F,iBAAiBrB,GAAK,EAAOM,OA1E2D,CAGjG,GAFAD,GAAyB,EAE+B,aAF/B,EAEtBiB,MAA0BhB,EAAWZ,aAA4B,CAEhE,GAAoF,GAAjFd,EAAO0B,EAAWZ,aAAa6B,KAAK3C,EAAO0B,EAAWK,eAAgB,QACrE,OAAGD,EACChF,KAAK2F,iBAAiBrB,GAAK,EAAOM,EAAY,iBAG9C5E,KAAK2F,iBAAiBrB,GAAK,EAAOM,IAE/B,EAGPD,GAAyB,CAEhC,CAED,IAAImB,EAAkB5C,EAAO0B,EAAWK,eAAetD,QACnDoE,EAAkB,EACtB,KAAM7C,EAAO4C,GAAiBvC,eAAeL,EAAO0B,EAAWZ,aAAarC,QAAS,SAGjFoE,IACAD,EAAkBA,EAAgBnE,QAAQ2B,IAAI,EAAG,OAElDqB,GACCoB,IAEJ,QAAQC,EAAIjB,EAAGiB,EAAIjB,EAAEgB,EAAiBC,IAAK,CACvC,MAAMC,EAAW5D,SAASC,eAAe,MAAM4B,EAAE,MAAM8B,GACvD,IAGI,GAD0BC,EAASvB,qBAAqB,OAAOT,OAE3D,OAAO,CAKd,CAHA,MACKiC,GAEL,CACJ,CACD,QAAQF,EAAIjB,EAAGiB,EAAIjB,EAAEgB,EAAiBC,IAAK,CACvC,MAAMC,EAAW5D,SAASC,eAAe,MAAM4B,EAAE,MAAM8B,GACpDC,GAISjG,KAAK2F,iBAAiBM,GAAU,EAAMrB,EAH3CoB,GAAKjB,EACDC,EAEmD,YAIA,QAGlDgB,GAAMjB,EAAEgB,EAAgB,EAEsB,OAIA,SAG7D,CACJ,CAWD,OAAO,CAGd,CACJ,CACJ,CACD,OAAO,CACV,CAQDJ,iBAAiBrB,EAAU6B,EAAkBvB,EAAiBwB,GAC1D,MAAMC,EAAehE,SAASS,cAAc,OAE5C,IAAIwD,GAAe,EAEfC,GAAyB,EAE7BF,EAAa9B,MAAMiC,MAAQ,OAC3BH,EAAa9B,MAAMkC,SAAW,QAC9BJ,EAAa9B,MAAMmC,OAAS,OAC5BL,EAAa9B,MAAMoC,aAAe,MAClCN,EAAa9B,MAAMqC,gBAAkBhC,EAAWiC,aAChDR,EAAaS,UAAUxD,IAAI,GAAKsB,EAAWZ,cACvCmC,GAAkC,aAArBC,GAA4D,iBAArBA,IACpDC,EAAa9B,MAAMwC,aAAe,MAClCT,GAAe,GAGhBH,GAAgC,SAArBC,GAEPlD,EAAO0B,EAAWK,eAAetD,QAAQ+D,OAAO1F,KAAKwB,mBAAmBK,QAAS,UAChF0E,GAAyB,GAG7BF,EAAa9B,MAAMwC,aAAe,MAClCV,EAAa9B,MAAMyC,qBAAuB,MAC1CX,EAAa9B,MAAM0C,wBAA0B,MAC7C3C,EAAIC,MAAM2C,YAAc,QAEpBf,GAAgC,QAArBC,GACfG,GAAyB,EACzBF,EAAa9B,MAAMyC,qBAAuB,MAC1CX,EAAa9B,MAAM0C,wBAA0B,MAC7C3C,EAAIC,MAAM4C,WAAa,QAEnBhB,GAAgC,UAArBC,GACfG,GAAyB,EACzBjC,EAAIC,MAAM2C,YAAc,OACxB5C,EAAIC,MAAM4C,WAAa,QAEE,aAArBf,EACJ9B,EAAIC,MAAM2C,YAAc,OAEC,iBAArBd,IACJG,GAAyB,EACzBjC,EAAIC,MAAM4C,WAAa,OACvBd,EAAa9B,MAAMyC,qBAAuB,MAC1CX,EAAa9B,MAAM0C,wBAA0B,OAG9CrC,EAAWwC,kBACVf,EAAa9B,MAAMqC,gBAAkB,uBACrCP,EAAa9B,MAAM8C,YAAc,wBAIrC,MAAMC,EAA6B1C,EAAWwC,gBAAkB,GAAK,8BAC/DG,GAA2BjB,IAAiB1B,EAAW4C,WAAc5C,EAAW4C,WAAa5C,EAAW6C,YAAe,uBAAyB,8BAChJC,GAA2BpB,IAAiB1B,EAAW4C,WAAc5C,EAAW4C,WAAa5C,EAAW6C,YAAe,GAAK,8BAC5HE,GAA4BrB,IAAiB1B,EAAW6C,YAAe7C,EAAW4C,WAAa5C,EAAW6C,YAAe,wBAA0B,8BAGzJ,IAAIG,EAAsB,GACtBC,EAAoB,GACpBC,EAA6B,GAmCjC,GAhCAD,EAAoB,yKAG8CP,EAA6B,0RAMxDK,EAA2B,kEAK9B,GAAjC3H,KAAKwD,0BAAiC8C,GAAgBC,KACrDqB,EAAsB,gKAGiDN,EAA6B,6OAOpGQ,EAA6B,yFAEMH,EAA2B,mDAK9DxB,GAAgC,SAArBC,GAAqD,aAArBA,GAAyD,iBAArBA,EAAqC,CACpHC,EAAa9B,MAAMwD,MAAQ,QAC3B1B,EAAa9B,MAAMyD,SAAW,SAC9B3B,EAAa9B,MAAM0D,WAAa,MAChC5B,EAAa9B,MAAM2D,YAAc,MACjC,MAAMC,GAAsB,yVAMgBT,EAA0B,2DAC1BH,EAA0B,sLAG1CrE,EAAO0B,EAAWK,eAAetD,QAAQC,OAAO,UAAY,IAAMsB,EAAO0B,EAAWZ,aAAarC,QAAQC,OAAO,UAAY,2HAItIgG,EACN,2WAKiEhD,EAAWwD,iBAAmB,IAAMxD,EAAWyD,kBAAoB,+CAEtHP,EACN,qWAYpBzB,EAAalC,UAAYgE,EAC5B,CAEE5B,IACIJ,GAAgC,QAArBC,GAEJD,GAAgC,UAArBC,KACjBC,EAAalC,UAAY0D,GAIjCvD,EAAIjB,YAAYgD,EACnB,CAKDiC,cACItI,KAAKiB,WAAWsH,MAAK,GACrBvI,KAAKiB,WAAWuH,UACnB,+CAlcQjI,GAAoCkI,gDAApClI,EAAoCmI,4QChBjDD,iBACEA,mBAGFA,8FDYalI,CAAb,8EEVO,IAAMoI,EAAb,MAAM,MAAOA,EACTC,UAAUC,GACN,OAAKA,EAEJA,EADc,IAAIC,KAASC,MACVH,UAAUC,EAAOG,MAFhB,EAIrB,+CANOL,EAA0B,6DAA1BA,EAA0BM,UAA1BN,CAAb,KAUaO,GAAb,MAAM,MAAOA,EACTN,UAAUC,GACN,OAAKA,EAEJA,EADkB,IAAIC,KAASC,MACVH,UAAUC,EAAO,SAFpB,EAIrB,+CANOK,EAA0B,6DAA1BA,EAA0BD,UAA1BC,CAAb,KAUaC,EAAb,MAAM,MAAOA,EACTP,UAAUC,GACN,OAAKA,EAEJA,EADkB,IAAIC,KAASC,MACVH,UAAUC,EAAOG,KAAiB,UAFrC,EAIrB,+CANOG,EAA8B,iEAA9BA,EAA8BF,UAA9BE,CAAb,+BCK4BV,uBAAkF,aACjDA,sBAAUA,QAAOA,SAClDA,kCADkDA,iEAOlDA,uBAAkI,aACjGA,sBAAUA,QAAOA,SAClDA,kCADkDA,iEAMlDA,uBAAkI,aACjGA,sBAAUA,QAAOA,SAClDA,kCADkDA,gEAMlDA,uBAAkF,aACjDA,wBAAYA,QAAOA,mDACpDA,kCADoDA,gFAMpDA,uBAAkF,aACjDA,sBAAUA,QAAOA,mDAClDA,kCADkDA,uIAQlDA,uBACwD,WADxDA,CACwD,eAEAA,qEAASA,0BAAmB,GAI1EA,oBACJA,QACAA,qBAAkDA,qEAASA,0BAAmB,GAI1EA,oBACJA,wCATIA,qDAA0C,kCAM1CA,qDAA0C,yDAQxDA,mBCtEjB,IAAMW,GAAb,MAAM,MAAOA,EAoBT5J,YACY6J,EACA7I,EACAC,EACA6I,EACDC,GAJCvJ,wBACAA,yBACAA,uBACAA,4BACDA,cAtBXA,sBAA6B,CAAC,eAAgB,eAAgB,cAAe,gBAAiB,cAAe,WAErGA,gBAAa,IAAIU,IAEzBV,UAAO,IAAIwJ,KAEXxJ,mBAAkC,GAMlCA,gBAAqB,EAWhB,CAKLW,WACIX,KAAKQ,kBAAkBY,uBACtBL,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,IACPnB,KAAKqB,WAAaF,EAClBnB,KAAKY,cAAcZ,KAAKQ,kBAAkBK,mBAA1C,GAGJb,KAAKyJ,cAAgBzJ,KAAKQ,kBAAkBM,yBACvCC,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,GAAQnB,KAAKY,cAAcO,GAC7C,CAKAP,cAAcW,GACW,wBAAnBvB,KAAKqB,aACJrB,KAAKwB,mBAAqBD,EAC1BvB,KAAKQ,kBAAkBkJ,qCAAqC1J,KAAKwB,mBAAmBE,UAAUC,QAAQC,OAAO,cAAe5B,KAAKwB,mBAAmBK,QAAQF,QAAQC,OAAO,eAAeV,UAAWY,IACjM9B,KAAK2J,cAAgB7H,EACrB9B,KAAK4J,mBAAL,GAIX,CAKDA,oBACI5J,KAAK8B,KAAO,IAAI0H,KAAmBxJ,KAAK2J,cAC3C,CAODE,eAAeC,GACX9J,KAAKqJ,iBAAiBU,uBAAuBD,EAASE,YAAY,GAC7DjJ,QAAKC,KAAUhB,KAAKiB,aACpBC,UACA+I,IACqBjK,KAAKuJ,OAAOpH,KAAK+H,KAAqC,CACpEC,WAAW,EACXC,cAAc,EACdtI,KAAMuI,KAAKC,MAAML,GACjBzD,MAAO,QACP+D,WAAY,mBAENC,cAActJ,UAAU,KAC9BlB,KAAKQ,kBAAkBiK,sBAAsBzK,KAAKwB,oBAClDxB,KAAKsJ,qBAAqBoB,+BAA+BnC,KAAK,EAA9D,EAFJ,EAKHrC,IACGlG,KAAKS,gBAAgB0B,KAAK+D,EAA1B,EAEJ,OAIP,CAODyE,eAAeb,GACX9J,KAAKqJ,iBAAiBU,uBAAuBD,EAASE,YAAY,GACjEjJ,QAAKC,KAAUhB,KAAKiB,aACpBC,UACI+I,IACGjK,KAAKQ,kBAAkBiK,sBAAsBzK,KAAKwB,oBAClDxB,KAAKsJ,qBAAqBoB,+BAA+BnC,KAAK,GAC9DvI,KAAKS,gBAAgB0B,KAAK,iBAA1B,EAEH+D,IACGlG,KAAKS,gBAAgB0B,KAAK+D,EAA1B,EAEJ,OAIP,CAKDoC,cACItI,KAAKiB,WAAWsH,MAAK,GACrBvI,KAAKiB,WAAWuH,UACnB,+CA7HQY,GAAmCX,oFAAnCW,EAAmCV,i/CDlBhDD,iBAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,OAMFA,oBAAQA,UAEfA,iBAAiG,OAC1FA,qBAAQA,UAEfA,kBAAiG,QAC1FA,qBAAQA,UAEfA,kBAAiD,QAC1CA,4BAAeA,UAEtBA,kBAAiD,QAC1CA,0BAAaA,UAEpBA,kBAA4C,QACrCA,oBAAOA,cAItBA,kBAAiB,WAAjBA,CAAiB,kBAKLA,YACIA,+BAGJA,QAIAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAKAA,aACIA,+BAiBJA,QAEAA,8BACJA,yBA9DWA,qCA6DuBA,4xFCtEzCW,CAAb,+BCa0BX,uBAAiF,aAChDA,sBAAUA,QAAOA,SAClDA,kCADkDA,iEAOlDA,uBAAgI,aAC/FA,sBAAUA,QAAOA,SAClDA,kCADkDA,iEAMlDA,uBAAgI,aAC/FA,sBAAUA,QAAOA,SAClDA,kCADkDA,gEAMlDA,uBAAiF,aAChDA,wBAAYA,QAAOA,mDACpDA,kCADoDA,gFAMpDA,uBAAiF,aAChDA,sBAAUA,QAAOA,mDAClDA,kCADkDA,6FAQlDA,uBACuD,WADvDA,CACuD,eAEAA,qEAASA,0BAAmB,GAGzEA,oBACJA,QACAA,qBAAiDA,qEAASA,2BAAoB,GAG1EA,qBACJA,wCAPIA,qDAKAA,4EAOdA,mBCrEf,IAAMmC,GAAb,MAAM,MAAOA,EAoBTpL,YACYgB,EACAqK,EACApK,EACD8I,EACCuB,GAJA9K,yBACAA,wBACAA,uBACDA,cACCA,sBAtBZA,sBAA6B,CAAC,eAAgB,eAAgB,cAAe,gBAAiB,cAAe,WAErGA,gBAAa,IAAIU,IAEzBV,UAAO,IAAIwJ,KAMXxJ,gBAAqB,GAErBA,qBAAqC,EAWhC,CAKLW,WACIX,KAAKQ,kBAAkBY,uBACtBL,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,IACPnB,KAAKqB,WAAaF,EAClBnB,KAAKY,cAAcZ,KAAKQ,kBAAkBK,mBAA1C,GAGJb,KAAKyJ,cAAgBzJ,KAAKQ,kBAAkBM,yBACvCC,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,GAAQnB,KAAKY,cAAcO,GAC7C,CAKAP,cAAcW,GACW,oBAAnBvB,KAAKqB,aACRrB,KAAKwB,mBAAqBD,EACtBvB,KAAKQ,kBAAkBuK,2CAA2C/K,KAAKwB,mBAAmBE,UAAUC,QAAQC,OAAO,cAAe5B,KAAKwB,mBAAmBK,QAAQF,QAAQC,OAAO,eAAeV,UAAWY,IACvM9B,KAAKgL,gBAAkBlJ,EACvB9B,KAAK4J,mBAAL,GAGX,CAKDA,oBACI5J,KAAK8B,KAAO,IAAI0H,KAAmBxJ,KAAKgL,gBAC3C,CAODC,eAAeC,GACXlL,KAAK6K,iBAAiBM,wBACjBpK,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAWkK,IACRpL,KAAK8K,eAAeO,kBAChB,cACAD,GAEHZ,cACAtJ,UAAUoK,IACHA,GACAtL,KAAK6K,iBAAiBU,iBAAiBL,EAASlB,YAC/CjJ,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAU,KACPlB,KAAKS,gBAAgB0B,KAAK,mBAC1BnC,KAAKQ,kBAAkBiK,sBAAsBzK,KAAKwB,mBAAlD,EAEHU,IACG,IAAIkJ,EAAUpL,KAAKS,gBAAgB+K,gBAAgBtJ,GAC9B,MAAjBA,EAAMuJ,OACNzL,KAAKS,gBAAgB0B,KAAK,iCAEL,MAAjBD,EAAMuJ,QAA6B,kEAAXL,GAC5BpL,KAAKQ,kBAAkBiK,sBAAsBzK,KAAKwB,oBAClDxB,KAAKS,gBAAgB0B,KAAKD,IAE1BlC,KAAKS,gBAAgB0B,KAAK,yBAA1B,EAfR,EAPR,EA4BX,CAODuJ,gBAAgBR,GACZlL,KAAK6K,iBAAiBc,kBAAkBT,EAASlB,YAC5CjJ,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAU,KACPlB,KAAKS,gBAAgB0B,KAAK,mBAC1BnC,KAAKQ,kBAAkBiK,sBAAsBzK,KAAKwB,mBAAlD,EAEHU,IAEOlC,KAAKS,gBAAgB0B,KADJ,MAAjBD,EAAMuJ,OACoB,gCAEA,yBAA1B,EAGf,CAKDnD,cACItI,KAAKiB,WAAWsH,MAAK,GACrBvI,KAAKiB,WAAWuH,UACnB,+CAlIQoC,GAAqCnC,kFAArCmC,EAAqClC,88CDjBlDD,iBAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,OAMJA,oBAAQA,UAEfA,iBAA+F,OACxFA,qBAAQA,UAEfA,kBAA+F,QACxFA,qBAAQA,UAEfA,kBAAgD,QACzCA,4BAAeA,UAEtBA,kBAAgD,QACzCA,0BAAaA,UAEpBA,kBAA2C,QACpCA,oBAAOA,cAItBA,kBAAiB,WAAjBA,CAAiB,kBAKLA,YACIA,+BAGJA,QAIAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAKAA,aACIA,+BAeJA,QAEAA,8BACJA,yBA5DWA,qCA2DuBA,wtFCrEvCmC,CAAb,+BCF4BnC,gBACIA,gBACAA,+CAAsEA,cAC1EA,+BADIA,mGAMRA,kBACIA,cACAA,mBAA8CA,SAAqCA,QAAOA,cAC1FA,SACJA,+BAFkDA,kDAC9CA,sFAKkFA,yDAFlFA,qBACAA,0DAASA,kDAAuC,GAChDA,SAAkFA,uBAClFA,iCAFkDA,4DAClDA,kGAAsFA,6FAH1FA,kBACIA,4BAIJA,+BAJaA,kKA1BzBA,kBAA8D,WAA9DA,CAA8D,UAA9DA,CAA8D,WAA9DA,CAA8D,aAIAA,yBAAaA,YAGnEA,kBAAuD,YAG/CA,gBACAA,gDAA0HA,eAC1HA,2BAIAA,iBACAA,wFAEJA,QACAA,0BAKAA,0BAMJA,kCAvBwDA,uEAGhDA,uJACOA,uCAKPA,uRAGkCA,iDAKkBA,+HAiCxDA,kBAA0D,eAIlDA,SACJA,iCAFCA,4IACGA,iGA5BpBA,kBAA6E,WAA7EA,CAA6E,UAA7EA,CAA6E,WAA7EA,CAA6E,aAIdA,0BAAcA,YAGrEA,kBAA2D,WAA3DA,CAA2D,UAA3DA,CAA2D,WAA3DA,CAA2D,YAA3DA,CAA2D,UAMnCA,iBAAwF,WAE5FA,QACAA,mBACIA,iDAAyIA,eACzIA,iDACJA,gBAKhBA,0BAOJA,kCAdwBA,2KACAA,uKAMGA,gFAYnCA,kBAAyG,WAAzGA,CAAyG,UAAzGA,CAAyG,WAAzGA,CAAyG,aAIhEA,4BAAgBA,UAE7CA,kBAAoB,aAEZA,SACJA,YAGRA,iBAAiB,aAETA,iBACJA,oCAPQA,iFAWpBA,kBAA0G,WAA1GA,CAA0G,UAA1GA,CAA0G,WAA1GA,CAA0G,aAIjEA,2BAAeA,UAE5CA,kBAAoB,aAEZA,SACJA,YAGRA,iBAAiB,aAETA,iBACJA,oCAPQA,kFAWpBA,kBAAwG,WAAxGA,CAAwG,UAAxGA,CAAwG,WAAxGA,CAAwG,aAI/DA,yBAAaA,UAE1CA,kBAAoB,aAEZA,SACJA,YAGRA,iBAAiB,aAETA,iBAAkF,WAEtFA,oCARQA,qFAqBAA,aAAGA,uBAAWA,mCAFtBA,sBACIA,iCAGAA,iDACJA,+BADwCA,gGAMhCA,aAAGA,SAA4DA,+BAA5DA,uGAFXA,sBACIA,iCAGAA,6CACJA,mCAKQA,aAAGA,SAAwDA,+BAAxDA,mGAFXA,sBACIA,iCAGAA,+CACJA,kDA3BhBA,iBAAoH,WAApHA,CAAoH,WAApHA,CAAoH,yBAGjCA,sEAAqBA,mCAA+B,GAGvHA,6BAQAA,6BAQAA,6BAOJA,sCAvBkCA,kDAQSA,oDAQJA,sDCtIpD,IAAMmD,GAAb,MAAM,MAAOA,EAyCTpM,YACYgB,EACAqL,EACApL,EACAqL,EACAhB,EACAiB,EACAC,GANAhM,yBACAA,uBACAA,uBACAA,qBACAA,sBACAA,cACAA,wBA7CZA,mBAA0C,CACtCiM,cAAiB,EACjBC,eAAkB,IAClBC,qBAAwB,IAExBC,UAAa,IAAI7M,EAAa,EAAG,GAAI,GAAI,GAAI,IAAI,GACjD8M,cAAiB,IAAIpM,EAAqB,EAAG,GAAI,GAAI,GAAI,IAEzDqM,kBAAqB,EACrBC,kBAAqB,GAGjBvM,mBAAqB,KAErBA,gBAAa,IAAIU,IAIzBV,gBAAa,cAEbA,+BAA2B,EAE3BA,iCAA6B,EAE7BA,kCAA8B,EAE9BA,+BAA2B,EAE3BA,yBAAsB,IAEtBA,oBAAgB,EAEhBA,2BAAuC,IAAIU,GActC,CAKLC,WACIX,KAAKwM,aAEL,IAAIC,EAAyC,IAAIC,MACjD1M,KAAKgM,iBAAiBW,mBACrB5L,QAAKC,KAAUyL,IACfvL,UAAU,KACX0L,WAAW,KACP,IAAIC,EAAc7M,KAAKgM,iBAAiBc,8BACxC9M,KAAK+M,eAAeF,GACpBJ,EAAoBlE,MAAK,GACzBkE,EAAoBjE,UAApB,EACD,IALO,GAQVxI,KAAKyJ,cAAgBzJ,KAAKQ,kBAAkBM,yBACvCC,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,GAAQnB,KAAKY,cAAcO,GAC7C,CAMDP,cAAcW,GACVvB,KAAKwB,mBAAqBD,EAC1BvB,KAAKiC,cACR,CAKDA,eACIjC,KAAKQ,kBAAkBwM,yBAAyBhN,KAAKwB,mBAAmBE,UAAUC,QAAQC,OAAO,cAAe5B,KAAKwB,mBAAmBK,QAAQF,QAAQC,OAAO,eAAeV,UAAWY,IAuBrL,GAtBA9B,KAAKiN,cAAgB,CACjBhB,cAAiBnK,EAAKmK,cACtBC,eAAkBpK,EAAKoK,eACvBC,qBAAwBrK,EAAKqK,qBAE7BC,UAAatK,EAAKoL,QAClBb,cAAiBvK,EAAKuK,cAEtBC,kBAAqBxK,EAAKwK,kBAC1BC,kBAAqBzK,EAAKyK,mBAE3BvM,KAAKiN,cAAcb,WACflJ,EAAOlD,KAAKiN,cAAcb,UAAU1M,cAAciC,QAAQ+D,OAAOxC,EAAOlD,KAAKiN,cAAcb,UAAUzM,YAAYgC,QAAS,SACzH3B,KAAKiN,cAAcb,UAAUtM,YAAa,GAG/CqN,SAASnN,KAAKiN,cAAcf,gBAAkB,IAC7ClM,KAAKiN,cAAcf,eAAiBlM,KAAKoN,mBAAmBpN,KAAKiN,cAAcf,iBAEhFiB,SAASnN,KAAKiN,cAAcd,sBAAwB,IACnDnM,KAAKiN,cAAcd,qBAAuBnM,KAAKoN,mBAAmBpN,KAAKiN,cAAcd,uBAEtFrK,EAAKoL,QAAS,CACb,IAAIG,EAAU,EACd,MAAM3L,EAAYwB,EAAOpB,EAAKoL,QAAQxN,cAAciC,QAAQyD,IAAI,CAAEC,KAAM,EAAGE,OAAQ,EAAGC,OAAQ,EAAGC,YAAa,IAE9G4H,EADgBnK,EAAOpB,EAAKoL,QAAQvN,YAAYgC,QAAQyD,IAAI,CAAEC,KAAM,EAAGE,OAAQ,EAAGC,OAAQ,EAAGC,YAAa,IACvFI,KAAKnE,EAAW,QAG/B1B,KAAKsN,cADND,EAAU,CAKhB,GAER,CAODD,mBAAmBG,GACf,MAAMC,EAAWC,OAAOF,GAASvN,KAAK0N,oBACtC,IAAIvI,EAAQwI,KAAKC,MAAM1K,WAAgBsK,GAAUK,WAAWC,WACxDC,EAAU7K,WAAgBsK,GAAUO,UAAUD,WAClD3I,SAAQA,EAAMlB,OAAS,EAAI,IAAMkB,EAAQA,EACzC4I,EAAUA,EAAQ9J,OAAS,EAAI,IAAM8J,EAAUA,EAC1B5I,EAAQ,IAAM4I,CAGtC,CAKDvB,aACI,IAAIK,EAAc7M,KAAKgM,iBAAiBc,8BACxC9M,KAAK+M,eAAeF,EACvB,CAEDE,eAAeF,GACRA,GACC7M,KAAKgO,yBAA2BnB,EAAYoB,iCAC5CjO,KAAKkO,2BAA6BrB,EAAYqB,2BAC9ClO,KAAKmO,4BAA8BtB,EAAYsB,4BAC/CnO,KAAKoO,yBAA2BvB,EAAYwB,0BAE5CrO,KAAKgO,0BAA2B,EAChChO,KAAKkO,4BAA6B,EAClClO,KAAKmO,6BAA8B,EACnCnO,KAAKoO,0BAA2B,EAEvC,CAKDE,wBAAwBC,GACpBvO,KAAKqB,WAAakN,EAAeC,IAAIC,UACrCzO,KAAKQ,kBAAkBkO,oBAAoB1O,KAAKqB,WACnD,CAKDsN,SAASC,GACL5O,KAAK8L,cAAc+C,kBAClB9N,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAWkK,IACRpL,KAAK8K,eACJO,kBACG,aACAD,GAEHZ,cACAtJ,UAAUoK,IACHA,EACAtL,KAAK8L,cAAcgD,SAASrB,OAAOzN,KAAK+L,OAAOgD,SAAUH,GACxD7N,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAU,KACPlB,KAAKS,gBAAgB0B,KAAK,yBAC1BnC,KAAKiC,eACLjC,KAAKgP,sBAAsBzG,MAA3B,EAEHrC,IACGlG,KAAKS,gBAAgB0B,KAAK+D,GAC1B,MAAMkF,EAAUpL,KAAKS,gBAAgB+K,gBAAgBtF,GACnC,KAAdA,EAAIuF,QAA6B,mEAAZL,IACrBpL,KAAKiC,eACLjC,KAAKgP,sBAAsBzG,OAA3B,GAIRvI,KAAKS,gBAAgB0B,KAAK,iBAA1B,EAxBR,EA6BP,CAKDmG,cACItI,KAAKiB,WAAWsH,MAAK,GACrBvI,KAAKiB,WAAWuH,UACnB,+CAvNQoD,GAA0BnD,uGAA1BmD,EAA0BlD,8zFDpBvCD,iBAA2D,UAA3DA,CAA2D,WAG/CA,0BAkCAA,yBAkCJA,QACAA,iBACIA,yBAmBAA,yBAmBAA,yBAoBJA,QACAA,wBAiCJA,iBAlKsCA,kDAkCeA,kDAoC4BA,kDAmBCA,kDAmBFA,kDAqBrDA,2/FChHlBmD,CAAb,oBCpBM,MAAOqD,GACTzP,YACW0P,EACAC,EACAC,EACAC,EAEAnD,EACAoD,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,GAdA7P,uBACAA,qBACAA,wBACAA,oBAEAA,sBACAA,qBACAA,gCACAA,sBACAA,0BAEAA,yBACAA,wBACAA,6BACAA,+BACP,4BCqBoByI,uBAAuE,aACzBA,kBAAMA,QAAOA,SAC3DA,kCAD2DA,yDAO3DA,uBAAuE,aACzBA,mBAAOA,QAAOA,SAC5DA,4CAD4DA,gFAM5DA,uBAAuE,aACzBA,kBAAMA,QAAOA,SAC3DA,kCAD2DA,yDAM3DA,uBAAuE,aACzBA,uBAAWA,QAAOA,SAChEA,kCADgEA,6DAMhEA,uBAA4G,aAC9DA,sBAAUA,QAAOA,SAC/DA,kCAD+DA,6DAM/DA,uBAA4G,aAC9DA,wBAAYA,QAAOA,SACjEA,kCADiEA,+DAMjEA,uBAA4G,aAC9DA,qBAASA,QAAOA,SAC9DA,kCAD8DA,2EAM9DA,uBACyD,eAEjDA,qEAASA,+BAAwB,GACjCA,aAAGA,wBAAYA,wCAFXA,mDAOhBA,mBClFjB,IAAMqH,GAAb,MAAM,MAAOA,EA0BTtQ,YACW+J,EACC/I,EACAuP,GAFD/P,cACCA,yBACAA,eA1BZA,sBAA6B,CAAC,OAAQ,QAAS,OAAQ,WAAY,WAAY,aAAc,UAAW,WAExGA,UAAO,IAAIwJ,KAEXxJ,gBAAa,IAAIwJ,KAMTxJ,gBAAa,IAAIU,IAIzBV,gBAAa,GAIbA,sCAA2D,EAStD,CAMLW,WACIX,KAAKQ,kBAAkBY,uBACtBL,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,IACPnB,KAAKqB,WAAaF,EAClBnB,KAAKY,cAAcZ,KAAKQ,kBAAkBK,mBAA1C,GAGJb,KAAKQ,kBAAkBM,yBACtBC,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,GAAQnB,KAAKY,cAAcO,GACzC,CAKDP,cAAcW,IACY,oBAAnBvB,KAAKqB,YAAuD,IAAnBrB,KAAKqB,cACjDrB,KAAKwB,mBAAqBD,EACtBvB,KAAKQ,kBAAkBwP,uCAAuChQ,KAAKwB,mBAAmBE,UAAUC,QAAQC,OAAO,cAAe5B,KAAKwB,mBAAmBK,QAAQF,QAAQC,OAAO,eAC5Kb,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAWY,IACR9B,KAAKiQ,iCAAmCnO,EACxC9B,KAAK4J,mBAAL,GAGX,CAKDA,oBACI5J,KAAK8B,KAAO,IAAI0H,KAAmBxJ,KAAKiQ,kCACxCjQ,KAAK0B,UAAYwB,EAAOlD,KAAKwB,mBAAmBE,WAAWE,OAAO,cAClE5B,KAAK6B,QAAUqB,EAAOlD,KAAKwB,mBAAmBK,SAASD,OAAO,aACjE,CAMDsO,oBAAoBC,GAEhBnQ,KAAK+P,QAAQK,cAAc,aAAc,CACrCC,MAAO,CACHC,OAAQ,YACRC,WAAYJ,EAAeK,GAC3B9O,UAAW1B,KAAK0B,UAChBG,QAAS7B,KAAK6B,QACd4O,YAAoD,6BAAvCzQ,KAAKwB,mBAAmBkP,YAA6C,YAAc1Q,KAAKwB,mBAAmBkP,cAGnI,CAODC,cAAcC,GAEN5Q,KAAK6Q,iBADJD,EAAME,OAAOC,WAAa,KAAOH,EAAME,OAAOC,WAAa,KACpC,CAAC,OAAQ,QAAS,OAAQ,WAAY,WAGtC,CAAC,OAAQ,QAAS,OAAQ,WAAY,WAAY,aAAc,UAAW,UAE1G,CAOA3D,mBAAmBG,GAChB,MAAMC,EAAWC,OAAOF,GAAS,IACjC,IAAIpI,EAAQwI,KAAKC,MAAM1K,WAAgBsK,GAAUK,WAAWC,WACxDC,EAAU7K,WAAgBsK,GAAUO,UAAUD,WAClD3I,SAAQA,EAAMlB,OAAS,EAAI,IAAMkB,EAAQA,EACzC4I,EAAUA,EAAQ9J,OAAS,EAAI,IAAM8J,EAAUA,EAC1B5I,EAAQ,IAAM4I,CAGtC,CAKDzF,cACItI,KAAKiB,WAAWsH,MAAK,GACrBvI,KAAKiB,WAAWuH,UACnB,+CA9HQsH,GAAqCrH,6DAArCqH,EAAqCpH,sHAArCsI,kBAAqB,imCDflCvI,iBAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,OAOFA,oBAAQA,UAEfA,iBAAwC,OACjCA,kBAAKA,UAEZA,kBAAwC,QACjCA,iBAAIA,UAEXA,kBAAwC,QACjCA,sBAASA,UAEhBA,kBAA6E,QACtEA,qBAAQA,UAEfA,kBAA6E,QACtEA,uBAAUA,UAEjBA,kBAA6E,QACtEA,oBAAOA,UAEdA,kBAAiC,QAC1BA,oBAAOA,cAItBA,kBAAiB,WAAjBA,CAAiB,kBAKLA,aACIA,+BAGJA,QAIAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGIA,aACAA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAOJA,QAEAA,8BACJA,yBAhEWA,qCA+DuBA,u1EClFzCqH,CAAb,+BCuB0BrH,uBAAuE,aACzBA,kBAAMA,QAAOA,SAC3DA,kCAD2DA,iEAO3DA,uBAAuE,aACzBA,wBAAYA,QAAOA,+CACjEA,kCADiEA,6EAMjEA,uBAAuE,aACzBA,kBAAMA,QAAOA,+CAC3DA,kCAD2DA,2EAM3DA,uBAAuE,aACzBA,uBAAWA,QAAOA,SAChEA,kCADgEA,6DAMhEA,uBAA4G,aAC9DA,sBAAUA,QAAOA,SAC/DA,kCAD+DA,6DAM/DA,uBAA4G,aAC9DA,wBAAYA,QAAOA,SACjEA,kCADiEA,+DAMjEA,uBAA4G,aAC9DA,qBAASA,QAAOA,SAC9DA,kCAD8DA,2EAM9DA,uBACyD,eAEjDA,qEAASA,wCAAiC,GAC1CA,aAAGA,wBAAYA,wCAFXA,mDAOhBA,mBCnFf,IAAMwI,GAAb,MAAM,MAAOA,EA0BTzR,YACYgB,EACAuP,GADA/P,yBACAA,eAzBZA,sBAA6B,CAAC,OAAQ,YAAa,UAAW,WAAY,WAAY,aAAc,UAAW,WAE/GA,UAAO,IAAIwJ,KAEXxJ,gBAAa,IAAIwJ,KAITxJ,gBAAa,IAAIU,IAEzBV,gBAAa,GAIbA,wCAA+D,EAY1D,CAMLW,WACIX,KAAKQ,kBAAkBY,uBACtBL,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,IACPnB,KAAKqB,WAAaF,EAClBnB,KAAKY,cAAcZ,KAAKQ,kBAAkBK,mBAA1C,GAGJb,KAAKQ,kBAAkBM,yBACtBC,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,GAAQnB,KAAKY,cAAcO,GACzC,CAKDP,cAAcW,GACY,sBAAnBvB,KAAKqB,aACJrB,KAAKwB,mBAAqBD,EAC1BvB,KAAKQ,kBAAkB0Q,yCAAyClR,KAAKwB,mBAAmBE,UAAUC,QAAQC,OAAO,cAAe5B,KAAKwB,mBAAmBK,QAAQF,QAAQC,OAAO,eAC9Kb,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAWY,IACR9B,KAAKmR,mCAAqCrP,EAC1C9B,KAAK4J,mBAAL,GAGX,CAKDA,oBACI5J,KAAK8B,KAAO,IAAI0H,KAAmBxJ,KAAKmR,oCACxCnR,KAAK0B,UAAYwB,EAAOlD,KAAKwB,mBAAmBE,WAAWE,OAAO,cAClE5B,KAAK6B,QAAUqB,EAAOlD,KAAKwB,mBAAmBK,SAASD,OAAO,aACjE,CAMDwP,6BAA6BC,GACzBrR,KAAK+P,QAAQK,cAAc,aAAc,CACrCC,MAAO,CACHC,OAAQ,mBACRgB,8BAA8B,EAC9Bf,WAAYc,EAAiBE,WAC7BC,UAAWH,EAAiBb,GAC5BiB,WAAYJ,EAAiBI,WAC7B/P,UAAW2P,EAAiBpM,cAC5BpD,QAASwP,EAAiBrN,YAC1B0N,WAAYL,EAAiBK,WAC7BjB,YAAaY,EAAiBZ,cAGzC,CAODE,cAAcC,GAEN5Q,KAAK6Q,iBADJD,EAAME,OAAOC,WAAa,KAAOH,EAAME,OAAOC,WAAa,KACpC,CAAC,OAAQ,YAAa,UAAW,WAAY,WAG7C,CAAC,OAAQ,YAAa,UAAW,WAAY,WAAY,aAAc,UAAW,UAEjH,CAKDzI,cACItI,KAAKiB,WAAWsH,MAAK,GACrBvI,KAAKiB,WAAWuH,UACnB,+CAhHQyI,GAAuCxI,iDAAvCwI,EAAuCvI,wHAAvCsI,kBAAqB,wmCDdlCvI,iBAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,OAOJA,6BAAiBA,UAExBA,iBAAwC,OACjCA,uBAAUA,UAEjBA,kBAAwC,QACjCA,qBAAQA,UAEfA,kBAAwC,QACjCA,sBAASA,UAEhBA,kBAA6E,QACtEA,qBAAQA,UAEfA,kBAA6E,QACtEA,uBAAUA,UAEjBA,kBAA6E,QACtEA,oBAAOA,UAEdA,kBAAiC,QAC1BA,oBAAOA,cAItBA,kBAAiB,WAAjBA,CAAiB,kBAKLA,aACIA,+BAGJA,QAIAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGIA,aACAA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAGJA,QAGAA,aACIA,+BAOJA,QAEAA,8BACJA,yBAhEWA,qCA+DuBA,y4ECnFvCwI,CAAb,0DCZQxI,iBAA+C,UAA/CA,CAA+C,UAA/CA,CAA+C,UAA/CA,CAA+C,UAA/CA,CAA+C,YAKaA,4BAAgBA,UAE5DA,iBAAoB,YAEZA,SACJA,YAGRA,kBAAiB,YAETA,iBACJA,cAIZA,mBAAoE,WAApEA,CAAoE,WAApEA,CAAoE,WAApEA,CAAoE,aAIZA,2BAAcA,UAE1DA,kBAAoB,aAEZA,UACJA,YAGRA,kBAAiB,YAETA,iBACJA,cAIZA,mBAAwE,WAAxEA,CAAwE,WAAxEA,CAAwE,WAAxEA,CAAwE,aAIhBA,+BAAkBA,UAE9DA,kBAAoB,aAEZA,UACJA,YAGRA,kBAAiB,YAETA,iBACJA,cAIZA,mBAAsC,WAAtCA,CAAsC,WAAtCA,CAAsC,WAAtCA,CAAsC,aAIkBA,0BAAaA,UAEzDA,kBAAoB,aAEZA,UACJA,YAGRA,kBAAiB,YAETA,iBACJA,sCAhEQA,wDAmBAA,uDAmBAA,0DAmBAA,4LAYxBA,kBAAoD,WAApDA,CAAoD,WAApDA,CAAoD,UAApDA,CAAoD,UAApDA,CAAoD,aAMVA,uCAA2BA,UAErDA,iBAGAA,iBAAoB,WAApBA,CAAoB,YAApBA,CAAoB,YAApBA,CAAoB,aAKAA,sBAQJA,sBAQ5BA,mBAA6B,YAA7BA,CAA6B,WAA7BA,CAA6B,WAA7BA,CAA6B,cAKSA,8BAAiBA,UAE3CA,kBAAoB,YAApBA,CAAoB,YAApBA,CAAoB,aAIJA,sBAQJA,UAEJA,mBAAqD,YAArDA,CAAqD,WAArDA,CAAqD,WAArDA,CAAqD,YAArDA,CAAqD,cAKmBA,UAAkCA,UAE1FA,kBAAoB,cACwEA,UAAkCA,QAC1HA,oBAAsBA,4BAAeA,cAIjDA,kBACIA,kBACJA,QACAA,kBAAoB,WAApBA,CAAoB,YAApBA,CAAoB,cAGuCA,UAAsCA,UAEzFA,kBAAoB,cACmEA,UAAsCA,QACzHA,oBAAgCA,gCAAmBA,oDA1DvDA,wCAAsB,2BAAtBA,CAAsB,6BAAtBA,CAAsB,2BAAtBA,CAAsB,wBA4B1BA,gDAA8B,+BAA9BA,CAA8B,2BAA9BA,CAA8B,kDAY8BA,+CAGoCA,+CAWzCA,mDAGoCA,2EAuBvGA,gBACIA,8BACJA,gCAJRA,sBACIA,iCAKAA,+CACJA,mCAaQA,gBACIA,SACJA,+BADIA,sHAHZA,sBACIA,iCAKAA,iDACJA,kDA/BhBA,kBAAyH,UAAzHA,CAAyH,WAAzHA,CAAyH,yBAG3BA,sEAAqBA,mCAA+B,GAGlIA,6BAkBAA,6BASJA,sCA3BcA,+CAkB2BA,0DCjLtD,IAAMkJ,GAAb,MAAM,MAAOA,EAuDTnS,YACYgB,4BArDZR,mBAAsC,IAAIiP,GAAqB,EAAG,IAAK,EAAG,EAAG,CAAC,GAAI,CAAC,GAAI,GAAI,EAAG,GAAG,GAAO,EAAO,EAAG,GAIlHjP,4BAAwB,EAIhBA,gBAAa,IAAIU,IAEzBV,gBAAa,mBAGNA,qBAA4B,GAC5BA,sBAAyD,CAC5D4R,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CAEJC,EAAG,GACHC,EAAG,CACCC,aAAa,EACb1E,MAAO,CACH2E,SAAU,SAAUC,EAAOC,EAAOC,GAC9B,GAAI1E,KAAK2E,OAAOH,KAAWA,EACvB,OAAOA,CAGd,KAIbI,WAAY,CACRC,YAAa,CACT,KAIRC,SAAU,CAAEC,KAAM,CAAEC,QAAS,KAG1B3S,sBAAkB,EAClBA,mBAA2B,OAC3BA,yBAAgC,CAAC,kBAAmB,uBAEpDA,uBAA+B,UASjC,CAKLW,WACIX,KAAKQ,kBAAkBM,yBAClBC,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUC,GAAQnB,KAAKY,cAAcO,IAC1CnB,KAAK4S,cAAgB,CACjBP,OAAQ,CACJ,0BACA,0BAEJQ,SAAU,CACN,CACI/Q,KAAM9B,KAAKiN,cAAcf,eACzBiG,MAAO,0BACPW,MAAM,EACNlM,gBAAiB,wBACjBS,YAAa,UACb0L,qBAAsB,sBACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,yBAE3B,CACIpR,KAAM9B,KAAKiN,cAAcqC,cACzB6C,MAAO,yBACPW,MAAM,EACNlM,gBAAiB,qBACjBS,YAAa,UACb0L,qBAAsB,mBACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,sBAKnClT,KAAKmT,gBAAkB,CAAC,MACxBnT,KAAKoT,kBAAoB,CACrB,CACItR,KAAM,CAAC9B,KAAKiN,cAAcuC,eAAgBxP,KAAKiN,cAAcwC,oBAC7D0C,MAAO,WACPvL,gBAAiB,CAAC,UAAW,WAC7ByM,qBAAsB,CAAC,UAAW,WAClCC,iBAAkB,CAAC,UAAW,YAGzC,CAMD1S,cAAcW,GACVvB,KAAKuB,kBAAoBA,EACzBvB,KAAKiC,cACR,CAKDA,eACIjC,KAAKQ,kBAAkB+S,qBAAqBvT,KAAKuB,kBAAkBG,UAAUC,QAAQC,OAAO,cAAe5B,KAAKuB,kBAAkBM,QAAQF,QAAQC,OAAO,eACpJb,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAUY,IAMP,GALA9B,KAAKwT,oCAAoC1R,EAAK2R,uBAC9CzT,KAAKiN,cAAgBnL,EACrB9B,KAAKiN,cAAckC,cAAgBnP,KAAKoN,mBAAmBpN,KAAKiN,cAAckC,cAAcrB,YAC5F9N,KAAKmT,gBAAkB,GAEnBjQ,EAAOlD,KAAKuB,kBAAkBG,WAAWgE,OAAOxC,EAAOlD,KAAKuB,kBAAkBM,UAAW,CACzF7B,KAAKiN,cAAcqC,cAAgB,GACnCtP,KAAKiN,cAAcf,eAAiB,GACpC,UAAW/K,KAAQnB,KAAKiN,cAAcsC,yBAClCvP,KAAKiN,cAAcqC,cAAcnM,KAAKnD,KAAK0T,oBAAoB1T,KAAKiN,cAAcsC,yBAAyBpO,GAAMwS,gBACjH3T,KAAKiN,cAAcf,eAAe/I,KAAKnD,KAAK0T,oBAAoB1T,KAAKiN,cAAcsC,yBAAyBpO,GAAMyS,gBAClH5T,KAAKiN,cAAcqC,cAAcnM,KAAKnD,KAAK0T,oBAAoB1T,KAAKiN,cAAcsC,yBAAyBpO,GAAMwS,gBACjH3T,KAAKiN,cAAcf,eAAe/I,KAAKnD,KAAK0T,oBAAoB1T,KAAKiN,cAAcsC,yBAAyBpO,GAAMyS,gBAClH5T,KAAKmT,gBAAgBhQ,KAAKD,EAAO/B,GAAM0S,OAAO/F,YAC9C9N,KAAKmT,gBAAgBhQ,KAAKD,EAAO/B,GAAM0S,OAAO/F,WAErD,KAAM,CACH9N,KAAKiN,cAAcqC,cAAgB,GACnCtP,KAAKiN,cAAcf,eAAiB,GACpC,UAAW/K,KAAQnB,KAAKiN,cAAcsC,yBAClCvP,KAAKiN,cAAcqC,cAAcnM,KAAKnD,KAAK0T,oBAAoB1T,KAAKiN,cAAcsC,yBAAyBpO,GAAMwS,gBACjH3T,KAAKiN,cAAcf,eAAe/I,KAAKnD,KAAK0T,oBAAoB1T,KAAKiN,cAAcsC,yBAAyBpO,GAAMyS,gBAClH5T,KAAKmT,gBAAgBhQ,KAAKD,EAAO/B,GAAM0S,OAAO/F,WAErD,CAED9N,KAAK4S,cAAgB,CACjBP,OAAQrS,KAAKmT,gBACbN,SAAU,CACN,CACI/Q,KAAM9B,KAAKiN,cAAcf,eACzBiG,MAAO,0BACPW,MAAM,EACNlM,gBAAiB,wBACjBS,YAAa,UACb0L,qBAAsB,sBACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,yBAE3B,CACIpR,KAAM9B,KAAKiN,cAAcqC,cACzB6C,MAAO,yBACPW,MAAM,EACNlM,gBAAiB,qBACjBS,YAAa,UACb0L,qBAAsB,mBACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,sBAKnClT,KAAKoT,kBAAoB,CACrB,CACItR,KAAM,CAAC9B,KAAKiN,cAAcuC,eAAgBxP,KAAKiN,cAAcwC,oBAC7D0C,MAAO,WACPvL,gBAAiB,CAAC,UAAW,WAC7ByM,qBAAsB,CAAC,UAAW,WAClCC,iBAAkB,CAAC,UAAW,YAElC,CAAExR,KAAM,CAAC,EAAG,IARS,EAWpC,CAODsL,mBAAmBG,GACf,MAAMC,EAAWC,OAAOF,GAAS,IACjC,IAAIpI,EAAQwI,KAAKC,MAAM1K,WAAgBsK,GAAUK,WAAWC,WACxDC,EAAU7K,WAAgBsK,GAAUO,UAAUD,WAClD3I,SAAQA,EAAMlB,OAAS,EAAI,IAAMkB,EAAQA,EACzC4I,EAAUA,EAAQ9J,OAAS,EAAI,IAAM8J,EAAUA,EAC1B5I,EAAQ,IAAM4I,CAGtC,CAOD2F,oBAAoBnG,GAChB,MAAMC,EAAWC,OAAOF,GAAS,IACjC,IAAIpI,EAAQwI,KAAKC,MAAM1K,WAAgBsK,GAAUK,WACjD,MAAME,EAAU7K,WAAgBsK,GAAUO,UAC1C,OAAKA,EAAU,IAAmB,IAAXA,GAAiB5I,EAAQ,GAAK,IACjDA,IAEGA,CACV,CAKD2O,wBAAwBvF,GACpBvO,KAAKqB,WAAakN,EAAeC,IAAIC,UACrCzO,KAAKQ,kBAAkBkO,oBAAoB1O,KAAKqB,WACnD,CAGDmS,oCAAoCO,GAChC,IAAIC,GAAW,EACVhU,KAAKyT,wBACNO,GAAW,GAEfhU,KAAKyT,sBAAwBM,EACzBC,GACApH,WAAW,KACP,GAAI5M,KAAKiU,cAAe,CAEpB,IAAIC,EADJlU,KAAKiU,cAAcE,cAAgB,EAG/BD,EADAlU,KAAKyT,sBACY,mBAKZzT,KAAKiN,cAAcyC,kBACP,qBAGA,GAErB1P,KAAKQ,kBAAkBkO,oBAAoBwF,EAC9C,GACF,GAEV,CAKD5L,cACItI,KAAKiB,WAAWsH,MAAK,GACrBvI,KAAKiB,WAAWuH,UACnB,+CA3QQmJ,GAAsBlJ,qCAAtBkJ,EAAsBjJ,yEAiDpB0L,KAAkB,orEDlEjC3L,iBAA6B,WAErBA,yBA8EAA,0BA0FAA,wBAqCJA,iBA7MsBA,+CA8EKA,+CA0FAA,ipGCzJlBkJ,CAAb,8CCAoBlJ,gCACIA,2DAAUA,qCAAiC,GAAEA,uBACjDA,gCAeJA,eACIA,8BACJA,gCACAA,eACIA,kCACJA,SCnChB,MAAM4L,GAAiB,CACnB,CACIC,KAAM,GAAIC,UCkBlB,MAAM,MAAOC,EA+BThV,YACYiV,EACAC,EACAC,EACAC,EACA5I,EACA6I,EACArU,EACAC,EACAoL,EACAiJ,EACAC,EACAC,GAXAhV,oBACAA,cACAA,wBACAA,sBACAA,wBACAA,qBACAA,yBACAA,uBACAA,uBACAA,aACAA,WACAA,oBA1CZA,eAAY,YAIZA,iBAAc,uBAMdA,uBAAmB,EACnBA,uBAAmB,EACnBA,mBAAuB,KAUvBA,2BACAiV,OAAOC,aAAaC,QAAQ,kBAC5BF,OAAOC,aAAaC,QAAQ,kBAC5B,SAGQnV,gBAAa,IAAIU,IAiBrB,MAAM0U,EAAaF,aAAaC,QAAQ,cAGxCT,EAAOW,OAAOnU,UAAWoU,IACjBtV,KAAK+U,MAAS/U,KAAK+U,IAAgBQ,WACnCT,EAAMU,IAAI,IAAMxV,KAAK+U,IAAIU,gBAAzB,GAGW,SAAfL,GACAJ,EAAaU,QAAO,EAE3B,CAED/U,WACIX,KAAKyU,aAAakB,UAAU3V,KAAK4V,WACjC5V,KAAK6V,UACL7V,KAAKiC,eACLjC,KAAK8V,aAAe9V,KAAK2U,iBACpBoB,4BACAhV,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAWoK,IACRtL,KAAKgW,iBAAmB1K,EACxBtL,KAAKiC,cAAL,EAEX,CAEDA,eACIjC,KAAKiW,eACLjW,KAAKkW,kBACLlW,KAAKmW,SACR,CAEDC,oBAAoBC,GAChB,IAAIzT,EAAcM,IAYlB,GAXAN,EAAYwC,IAAI,CAAEC,KAAM,EAAGE,OAAQ,EAAGC,OAAQ,EAAGC,YAAa,IAQ1DzF,KAAK0Q,YALJ1Q,KAAKsW,kBACU,6BAAhBD,EAImBA,EAFA,uBAKC,wBAApBrW,KAAK0Q,YACL1Q,KAAK0B,UAAY1B,KAAK6U,cAAc0B,mBAAmB3T,GACvD5C,KAAK6B,QAAU7B,KAAK6U,cAAc2B,iBAAiB5T,GACnD5C,KAAKyW,YACDzW,KAAK0B,UAAUE,OAAO,eACtB,MACA5B,KAAK6B,QAAQD,OAAO,oBAApB,GACuB,uBAApB5B,KAAK0Q,YACZ1Q,KAAK0B,UAAYkB,EACjB5C,KAAK6B,QAAUe,EACf5C,KAAKyW,YAAczW,KAAK0B,UAAUE,OAAO,oBAAtB,GACQ,6BAApB5B,KAAK0Q,YAA4C,CACxD,IAAIhP,EAAYwB,EAAOlD,KAAK0W,cAAcC,oBACtC9U,EAAUH,EAAUC,QACxB,GAAI3B,KAAK0W,cAAcE,mBAAoB,CACvC,MAAMC,EAAa3T,EACflD,KAAK0W,cAAcC,oBACrBG,cACFjV,EAAUqB,EAAOxB,GAAW4B,IAAIuT,EAAa,EAAG,OACnD,MACGhV,EAAUqB,EAAOrB,GAASyB,IACtBtD,KAAK0W,cAAcK,sBAAwB,EAC3C,QAGR,IAAIC,EACA9T,EAAON,GAAaqU,UAAUvV,EAAWG,IACzCqB,EAAON,GAAa8C,OAAOhE,IAC3BwB,EAAON,GAAa8C,OAAO7D,GAC/B,MAAQmV,IAAcpU,EAAYsC,SAASxD,IAAY,CACnD,GAAI1B,KAAK0W,cAAcE,mBAAoB,CACvClV,EAAYwB,EAAOxB,GAAW4B,IAAI,EAAG,SACrC,MAAMuT,EAAa3T,EAAOxB,GAAWoV,cACrCjV,EAAUqB,EAAOxB,GAAW4B,IAAIuT,EAAa,EAAG,OACnD,MACGnV,EAAYwB,EAAOxB,GAAW4B,IAC1BtD,KAAK0W,cAAcK,sBACnB,QAEJlV,EAAUqB,EAAOrB,GAASyB,IACtBtD,KAAK0W,cAAcK,sBACnB,QAGRC,EACI9T,EAAON,GAAaqU,UAAUvV,EAAWG,IACzCqB,EAAON,GAAa8C,OAAOhE,IAC3BwB,EAAON,GAAa8C,OAAO7D,EAClC,CACD7B,KAAK0B,UAAYA,EACjB1B,KAAK6B,QAAUA,EACf7B,KAAKyW,YACD/U,EAAUE,OAAO,eACjB,MACAC,EAAQD,OAAO,cACtB,CACD5B,KAAKuB,kBAAoB,CACrBG,UAAW1B,KAAK0B,UAChBG,QAAS7B,KAAK6B,QACdqV,aAAclX,KAAKkX,aACnBC,kBAAmBnX,KAAKgW,iBACxBtF,YAAa1Q,KAAK0Q,aAEtB1Q,KAAKQ,kBAAkBiK,sBAAsBzK,KAAKuB,kBACrD,CAED6V,mBACI,GAAwB,wBAApBpX,KAAK0Q,YACL1Q,KAAK0B,UAAYwB,EAAOlD,KAAK0B,WAAW4B,KAAI,EAAI,QAChDtD,KAAK6B,QAAUqB,EAAOlD,KAAK6B,SAASyB,KAAI,EAAI,QAC5CtD,KAAKyW,YACDzW,KAAK0B,UAAUE,OAAO,eACtB,MACA5B,KAAK6B,QAAQD,OAAO,oBAApB,GACuB,uBAApB5B,KAAK0Q,YACZ1Q,KAAK0B,UAAYwB,EAAOlD,KAAK0B,WAAW4B,KAAI,EAAI,QAChDtD,KAAK6B,QAAUqB,EAAOlD,KAAK6B,SAASyB,KAAI,EAAI,QAC5CtD,KAAKyW,YAAczW,KAAK0B,UAAUE,OAAO,oBAAtB,GACQ,6BAApB5B,KAAK0Q,YAA4C,CACxD,GAAI1Q,KAAK0W,cAAcE,mBAAoB,CACvC5W,KAAK0B,UAAYwB,EAAOlD,KAAK0B,WAAW4B,KAAI,EAAI,SAChD,MAAMuT,EAAa3T,EAAOlD,KAAK0B,WAAWoV,cAC1C9W,KAAK6B,QAAUqB,EAAOlD,KAAK0B,WAAW4B,IAClCuT,EAAa,EACb,OAEP,MACG7W,KAAK0B,UAAYwB,EAAOlD,KAAK0B,WAAW4B,KACnCtD,KAAK0W,cAAcK,sBACpB,QAEJ/W,KAAK6B,QAAUqB,EAAOlD,KAAK6B,SAASyB,KAC/BtD,KAAK0W,cAAcK,sBACpB,QAGR/W,KAAKyW,YACDzW,KAAK0B,UAAUE,OAAO,eACtB,MACA5B,KAAK6B,QAAQD,OAAO,cAC3B,CACD5B,KAAKuB,kBAAoB,CACrBG,UAAW1B,KAAK0B,UAChBG,QAAS7B,KAAK6B,QACdqV,aAAclX,KAAKkX,aACnBC,kBAAmBnX,KAAKgW,iBACxBtF,YAAa1Q,KAAK0Q,aAEtB1Q,KAAKQ,kBAAkBiK,sBAAsBzK,KAAKuB,kBACrD,CAED8V,eACI,GAAwB,wBAApBrX,KAAK0Q,YACL1Q,KAAK0B,UAAYwB,EAAOlD,KAAK0B,WAAW4B,IAAI,EAAG,QAC/CtD,KAAK6B,QAAUqB,EAAOlD,KAAK6B,SAASyB,IAAI,EAAG,QAC3CtD,KAAKyW,YACDzW,KAAK0B,UAAUE,OAAO,eACtB,MACA5B,KAAK6B,QAAQD,OAAO,oBAApB,GACuB,uBAApB5B,KAAK0Q,YACZ1Q,KAAK0B,UAAYwB,EAAOlD,KAAK0B,WAAW4B,IAAI,EAAG,QAC/CtD,KAAK6B,QAAUqB,EAAOlD,KAAK6B,SAASyB,IAAI,EAAG,QAC3CtD,KAAKyW,YAAczW,KAAK0B,UAAUE,OAAO,oBAAtB,GACQ,6BAApB5B,KAAK0Q,YAA4C,CACxD,GAAI1Q,KAAK0W,cAAcE,mBAAoB,CACvC5W,KAAK0B,UAAYwB,EAAOlD,KAAK0B,WAAW4B,IAAI,EAAG,SAC/C,MAAMuT,EAAa3T,EAAOlD,KAAK0B,WAAWoV,cAC1C9W,KAAK6B,QAAUqB,EAAOlD,KAAK0B,WAAW4B,IAClCuT,EAAa,EACb,OAEP,MACG7W,KAAK0B,UAAYwB,EAAOlD,KAAK0B,WAAW4B,IACpCtD,KAAK0W,cAAcK,sBACnB,QAEJ/W,KAAK6B,QAAUqB,EAAOlD,KAAK6B,SAASyB,IAChCtD,KAAK0W,cAAcK,sBACnB,QAGR/W,KAAKyW,YACDzW,KAAK0B,UAAUE,OAAO,eACtB,MACA5B,KAAK6B,QAAQD,OAAO,cAC3B,CACD5B,KAAKuB,kBAAoB,CACrBG,UAAW1B,KAAK0B,UAChBG,QAAS7B,KAAK6B,QACdqV,aAAclX,KAAKkX,aACnBC,kBAAmBnX,KAAKgW,iBACxBtF,YAAa1Q,KAAK0Q,aAEtB1Q,KAAKQ,kBAAkBiK,sBAAsBzK,KAAKuB,kBACrD,CAED0U,eACIjW,KAAK6U,cACAyC,UACAvW,QAAKC,KAAUhB,KAAKiB,aACpBC,UACIY,IAOG,GANIA,EAAK8U,oBAAsB9U,EAAKiV,uBAChC/W,KAAKsW,kBAAmB,EACxBtW,KAAK0W,cAAgB5U,GAErB9B,KAAKsW,kBAAmB,EAExBxU,EAAKyV,yBACL,OAAQzV,EAAKyV,8BACJ,MACDvX,KAAKoW,oBAAoB,uBACzB,MACH,IACI,YACDpW,KAAKoW,oBAAoB,6BACzB,MACH,QAEGpW,KAAKoW,oBAAoB,6BAKjCpW,KAAKoW,oBAAoB,uBAAzB,EAGPlQ,IACGlG,KAAKS,gBAAgB0B,KAAK+D,EAA1B,EAGf,CAEO2P,UACJ7V,KAAKgM,iBAAiBwL,eAAetW,UAAWuW,IAC5CzX,KAAKyX,KAAOA,GAEnB,CAEOvB,kBACJlW,KAAKgM,iBAAiB0L,aAAaxW,UAAWsP,IAC1CxQ,KAAKkX,aAAe1G,GAE3B,CAED2F,UACInW,KAAK2U,iBACJwB,UACApV,QAAKC,KAAUhB,KAAKiB,aACpBC,UAAWY,IACR9B,KAAK4U,eAAe+C,oBAApB,EAEP,CAKDrP,cACItI,KAAKiB,WAAWsH,MAAK,GACrBvI,KAAKiB,WAAWuH,UACnB,+CAvTQgM,GAAkB/L,mKAAlB+L,EAAkB9L,qyBFxB/BD,iBAA+C,UAA/CA,CAA+C,UAA/CA,CAA+C,UAA/CA,CAA+C,aAM4BA,SAAeA,QAG1EA,qCAA6F,yBAC1CA,kCAAUuI,8BAAiC,GACvDvI,gBACnCA,QACAA,+BACIA,kCAAUuI,8BAAiC,GAAEvI,kBACjDA,QAEAA,uCAGJA,QAGAA,qBAAoEA,gCAASuI,oBAAkB,GAC3FvI,qBAAUA,yBAAYA,UAE1BA,qBAAoEA,gCAASuI,gBAAc,GACvFvI,wBAA8BA,0BAAaA,cAKvDA,mBAAwC,YAEhCA,0BAGAA,0BAGJA,qBAxCPA,kCAMsEA,8BAGlCA,sCAQDA,0CAiBlBA,2DAGAA,glCEfN,IAACmP,YAEJpD,CAAb,ODVO,IAAMqD,GAAb,MAAM,MAAOA,kDAAsB,0BAAtBA,gCAHCC,cAAsBzD,IACtByD,QAEDD,CAAb,uDEOO,MAAME,EAAa,CACtBzN,MAAO,CACH0N,UAAW,CACPC,OAGRC,QAAS,CACLF,UAAWC,KACXE,eAAgBC,OAuCjB,IAAMC,GAAb,MAAM,MAAOA,kDAAe,0BAAfA,iCAXE,CACP,CACIC,QAASC,KACTC,SAAUC,MAEd,CACIH,QAASI,KACTC,SAAUZ,IAEjBa,SA/BGC,KACAC,KACAC,KACAlB,GACAmB,MACAC,KACAC,QA2BKb,CAAb","names":["NextShiftJob","constructor","jobID","jobStartDate","jobEndDate","jobName","subGroupName","isMultiday","canTradeJob","this","UpcomingLeaveAbsence","absenceID","absenceStartDate","absenceEndDate","absenceCodeName","absenceCodeColor","EmployeeDashboardMyScheduleComponent","_dashboardService","_messageService","Subject","ngOnInit","periodChanged","getCurrentPeriod","getPeriodChangeEmitter","pipe","takeUntil","_completed","subscribe","item","getTabChangedEmitter","currentTab","onJobTraded","periodInformation","_periodInformation","getEmployeeDashboardDataForMySchedule","startDate","clone","format","endDate","data","myScheduleData","Jobs","populateData","error","open","tableMySchedule","document","getElementById","setBodyOfTable","setHeadOfTable","_listOfDaysInHeader","_rowCounter","textContent","currentDate","thead","createElement","firstRow","numberOfColumn","firstRowCol","moment","push","setAttribute","appendChild","add","isSameOrBefore","numberOfDisplayedColumns","tbodyTable","forEach","element","addNewRowInBody","checkIfThereIsEnoughSpaceInTheExistingRows","jobParts","getElementsByClassName","endDateTime","length","i","innerHTML","numberOfRow","customRow","col","style","padding","elementsInTableBody","getElementsByTagName","multidayWithOneDayLess","currentJob","Object","assign","j","jobIsStartBeforePeriodStart","startDateTime","isBefore","hours","set","hour","split","minute","second","millisecond","isSame","addContentToCell","getTimeFromDateTimeString","diff","tempCurrentDate","numberOfJobDays","k","colMulti","err","isMulti","partOfMultidayJob","divContainer","singleDayJob","placeElementInLastCell","width","minWidth","height","marginBottom","backgroundColor","primaryColor","classList","borderRadius","borderTopRightRadius","borderBottomRightRadius","borderRight","borderLeft","offeredForTrade","borderColor","hideOfferedJobElementClass","leftArrowIndicatorClass","leftArrow","rightArrow","leftArrowContainerClass","rightArrowIndicatorClass","jobTradeIconElement","lastRowJobDetails","rightArrowIndicatorElement","color","fontSize","lineHeight","paddingLeft","formattedJobDetails","employeeRequired","employeesAssigned","ngOnDestroy","next","complete","i0","selectors","DateDashboardTransformPipe","transform","value","DatePipe","LocData","datePipeFormat","pure","TimeDashboardTransformPipe","DateTimeDashboardTransformPipe","EmployeeDashboardJobOffersComponent","_jobOfferService","_notificationService","dialog","MatTableDataSource","_subscription","getEmployeeDashboardDataForJobOffers","jobOffersData","populateTableData","acceptJobOffer","jobOffer","acceptOrRejectJobOffer","jobOfferID","response","JobOfferAcceptRejectDialogComponent","autoFocus","disableClose","JSON","parse","panelClass","afterClosed","emitPeriodChangeEvent","reloadUnreadNotificationsCount","rejectJobOffer","EmployeeDashboardTradeBoardsComponent","_jobTradeService","_dialogService","getEmployeeDashboardDataForTradesAvailable","tradeBoardsData","acceptJobTrade","jobTrade","getAcceptTradeWarning","message","openConfirmDialog","res","acceptTradeOffer","handleHttpError","status","declineJobTrade","declineTradeOffer","EmployeeDashboardComponent","_profileService","_tradeService","_roles","_userRoleService","scheduledJobs","scheduledHours","approvedAbsenceHours","nextShift","upcomingLeave","numberOfJobOffers","numberOfJobTrades","getProfile","_refetchPermissions","EventEmitter","refetchPermissions","setTimeout","permissions","getGlobalAccountPermissions","setPermissions","getEmployeeDashboardData","dashboardData","nextJob","parseInt","convertTicksToTime","dayDiff","jobIsMultiday","ticks","numOfHrs","Number","ticksPerMillisecond","Math","trunc","asHours","toString","minutes","canEmployeeAccessAbsence","canEmployeeAccessAbsenceCalendar","canEmployeeAccessJobOffers","canEmployeeAccessTradeBoard","canEmployeeAccesSchedule","canEmployeeViewSchedule","emplDashboardTabChanged","tabChangeEvent","tab","textLabel","emitTabChangedEvent","tradeJob","jobToTradeId","getTradeWarning","offerJob","getId","jobTradedEventSubject","UserDashboardDetails","activeSchedules","scheduleHours","scheduleJobSlots","assignedJobs","requiredHours","requiredVsScheduledHours","unassignedJobs","invalidAssignments","isScheduleManager","isAbsenceManager","absenceRequestPending","scheduleApprovalsPending","UserDashboardScheduleDetailsComponent","_router","getUserDashboardDataForScheduleDetails","userDashboardScheduleDetailsData","viewScheduleDetails","scheduleDetail","navigateByUrl","state","source","scheduleID","id","currentView","defaultView","getScreenSize","event","displayedColumns","target","innerWidth","ctx","UserDashboardScheduleApprovalsComponent","getUserDashboardDataForScheduleApprovals","userDashboardScheduleApprovalsData","viewScheduleApprovalsDetails","scheduleApproval","approvalDetailsFromDashboard","scheduleId","requestId","subGroupId","isSchedule","UserDashboardComponent","responsive","maintainAspectRatio","scales","x","y","beginAtZero","callback","label","index","labels","floor","annotation","annotations","elements","line","tension","lineChartData","datasets","fill","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","lineChartLabels","doughnutChartData","hoverBackgroundColor","hoverBorderColor","getUserDashboardData","updateTabsOnSchedulePermissionCheck","canSeeScheduleDetails","convertTicksToHours","primaryKeyOne","primaryKeyTwo","date","userDashboardTabChanged","hasDashboardDetailsPermission","wasFalse","dashboardTabs","currentTabName","selectedIndex","BaseChartDirective","routes","path","component","DashboardComponent","titleService","router","dashboardService","asyncValidator","_datesService","_zone","ref","_authService","window","localStorage","getItem","isLoggedIn","events","uri","destroyed","run","detectChanges","logout","sendTitle","pageTitle","getRole","subscription","getAccountSwitchedEmitter","isAccountSwithed","getPayPeriod","getLoggedUserID","getData","changeDashboardView","viewInterval","isPayPeriodExist","getStartDateOfWeek","getEndDateOfWeek","monthLabels","payPeriodData","payPeriodStartDate","isMonthlyPayPeriod","dayInMonth","daysInMonth","payPeriodNumberOfDays","isInRange","isBetween","loggedUserID","isAccountSwitched","showPreviousDate","showNextDate","getDate","scheduleInitialDateRange","loggedUserRole","role","loggedUserId","getDatePreferences","routerTransition","DashboardRoutingModule","RouterModule","MY_FORMATS","dateInput","localeDateFormatMM","display","monthYearLabel","monthYearLabelFormatMMM","DashboardModule","provide","DateAdapter","useClass","CustomDateAdapter","MAT_DATE_FORMATS","useValue","imports","CommonModule","NgbCarouselModule","NgbAlertModule","StatModule","MaterialModule","NgChartsModule"],"sourceRoot":"webpack:///","sources":["./src/app/shared/models/employeeDashboardDetails.ts","./src/app/layout/dashboard/employee-dashboard/components/employee-dashboard-my-schedule/employee-dashboard-my-schedule.component.ts","./src/app/layout/dashboard/employee-dashboard/components/employee-dashboard-my-schedule/employee-dashboard-my-schedule.component.html","./src/app/shared/utils/dateDashboardTransformPipe.ts","./src/app/layout/dashboard/employee-dashboard/components/employee-dashboard-job-offers/employee-dashboard-job-offers.component.html","./src/app/layout/dashboard/employee-dashboard/components/employee-dashboard-job-offers/employee-dashboard-job-offers.component.ts","./src/app/layout/dashboard/employee-dashboard/components/employee-dashboard-trade-boards/employee-dashboard-trade-boards.component.html","./src/app/layout/dashboard/employee-dashboard/components/employee-dashboard-trade-boards/employee-dashboard-trade-boards.component.ts","./src/app/layout/dashboard/employee-dashboard/employee-dashboard.component.html","./src/app/layout/dashboard/employee-dashboard/employee-dashboard.component.ts","./src/app/shared/models/userDashboardDetails.ts","./src/app/layout/dashboard/user-dashboard/components/user-dashboard-schedule-details/user-dashboard-schedule-details.component.html","./src/app/layout/dashboard/user-dashboard/components/user-dashboard-schedule-details/user-dashboard-schedule-details.component.ts","./src/app/layout/dashboard/user-dashboard/components/user-dashboard-schedule-approvals/user-dashboard-schedule-approvals.component.html","./src/app/layout/dashboard/user-dashboard/components/user-dashboard-schedule-approvals/user-dashboard-schedule-approvals.component.ts","./src/app/layout/dashboard/user-dashboard/user-dashboard.component.html","./src/app/layout/dashboard/user-dashboard/user-dashboard.component.ts","./src/app/layout/dashboard/dashboard.component.html","./src/app/layout/dashboard/dashboard-routing.module.ts","./src/app/layout/dashboard/dashboard.component.ts","./src/app/layout/dashboard/dashboard.module.ts"],"sourcesContent":["import { Absence } from \"./absence\";\r\nimport { Job } from \"./job\";\r\n\r\nexport class EmployeeDashboardDetails {\r\n    constructor(\r\n        public scheduledJobs?: number,\r\n        public scheduledHours?: string,\r\n        public approvedAbsenceHours?: string,\r\n\r\n        public nextShift?: NextShiftJob,\r\n        public upcomingLeave?: UpcomingLeaveAbsence,\r\n\r\n        public numberOfJobOffers?: number,\r\n        public numberOfJobTrades?: number\r\n    ) {}\r\n}\r\n\r\nexport class JobOffersTable{\r\n    constructor(\r\n        public jobOfferID?: number,\r\n        public scheduleName?: string,\r\n        public subGroupName?: string,\r\n        public jobTypeName?: string,\r\n        public jobStartDateTime?: string,\r\n        public jobEndDateTime?: string,\r\n        public statusName?: string\r\n    ){}\r\n}\r\n\r\nexport class TradeBoardTable{\r\n    constructor(\r\n        public jobOfferID?: number,\r\n        public scheduleName?: string,\r\n        public subGroupName?: string,\r\n        public jobTypeName?: string,\r\n        public jobStartDateTime?: string,\r\n        public jobEndDateTime?: string,\r\n        public statusName?: string\r\n    ){}\r\n}\r\n\r\nexport class EmployeeDashboardJob{\r\n    constructor(\r\n        public startDateTime?: string,\r\n        public endDateTime?: string,\r\n        public employeeRequired?: number,\r\n        public employeesAssigned?: number,\r\n        public primaryColor?: string,\r\n        public secondaryColor?: string\r\n    ){}\r\n}\r\nexport class NextShiftJob{\r\n    constructor(\r\n        public jobID?: number,\r\n        public jobStartDate?: string,\r\n        public jobEndDate?: string,\r\n        public jobName?: string,\r\n        public subGroupName?: string,\r\n        public isMultiday?: boolean,\r\n        public canTradeJob?: boolean\r\n    ){}\r\n}\r\n\r\nexport class UpcomingLeaveAbsence{\r\n    constructor(\r\n        public absenceID?: number,\r\n        public absenceStartDate?: string,\r\n        public absenceEndDate?: string,\r\n        public absenceCodeName?: string,\r\n        public absenceCodeColor?: string\r\n    ){}\r\n}","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { constant, lte } from 'lodash';\r\nimport * as moment from 'moment';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { EmployeeDashboardJob } from 'src/app/shared/models/employeeDashboardDetails';\r\nimport { DashboardService } from 'src/app/shared/services/dashboard.service';\r\nimport { EsolveSnackbarService } from 'src/app/shared/services/esolve-snackbar.service';\r\nimport { getTimeFromDateTimeString } from 'src/app/shared/utils/DateTimeUtils';\r\n\r\n@Component({\r\n    selector: 'app-employee-dashboard-my-schedule',\r\n    templateUrl: './employee-dashboard-my-schedule.component.html',\r\n    styleUrls: ['./employee-dashboard-my-schedule.component.scss']\r\n})\r\nexport class EmployeeDashboardMyScheduleComponent implements OnInit {\r\n\r\n    @Input() onJobTraded: Observable<void>;\r\n    /** Stores all data obtained from the database. */\r\n    myScheduleData: EmployeeDashboardJob[] = [];\r\n    /** Parameter for subscription termination. */\r\n    private _completed = new Subject();\r\n    /** Information about date range type, start date, end date... */\r\n    private _periodInformation: any;\r\n    /** A variable that stores the number of rows in the table that is currently being passed. */\r\n    private _rowCounter = 0;\r\n    /** A series of dates in the current period. */\r\n    private _listOfDaysInHeader: any[] = [];\r\n    /** Value of selected tab.*/\r\n    currentTab = \"\";\r\n    /** Tracks how many columns i.e. days are currently displayed */\r\n    numberOfDisplayedColumns = 0;\r\n\r\n    /**\r\n     * Create a instance of EmployeeDashboardMyScheduleComponent.\r\n     */\r\n    constructor(\r\n        private _dashboardService: DashboardService,\r\n        private _messageService: EsolveSnackbarService,\r\n    ) { }\r\n\r\n    /** Get data from database.\r\n     * Subscribes to an event when the period type changes\r\n     */\r\n    ngOnInit() {\r\n        this.periodChanged(this._dashboardService.getCurrentPeriod());\r\n        this._dashboardService.getPeriodChangeEmitter()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(item => this.periodChanged(item));\r\n\r\n        this._dashboardService.getTabChangedEmitter()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(item => {\r\n                this.currentTab = item;\r\n                this.periodChanged(this._dashboardService.getCurrentPeriod());\r\n            });\r\n        this.onJobTraded\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(() => {\r\n                this.periodChanged(this._dashboardService.getCurrentPeriod());\r\n            });\r\n    }\r\n\r\n    /** Get data from database depending on the type of period\r\n     * After that call populateData function.\r\n     * @param periodInformation -> information about period\r\n     */\r\n    periodChanged(periodInformation: any) {\r\n        if(this.currentTab == \"My Schedule\" || this.currentTab == \"\") {\r\n            this._periodInformation = periodInformation;\r\n            this._dashboardService.getEmployeeDashboardDataForMySchedule(this._periodInformation.startDate.clone().format(\"MM-DD-YYYY\"), this._periodInformation.endDate.clone().format(\"MM-DD-YYYY\"))\r\n            .subscribe(\r\n                (data:any) => {\r\n                    this.myScheduleData = data.Jobs;\r\n                    this.populateData();\r\n                },\r\n            (error: HttpErrorResponse) => {\r\n                this._messageService.open(error);\r\n            }\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Calls method setBodyOfTable\r\n     * and sends it the DOM element of the table and the resulting data.\r\n     */\r\n    populateData() {\r\n        const startDate = this._periodInformation.startDate;\r\n        const endDate = this._periodInformation.endDate;\r\n        const tableMySchedule = document.getElementById(\"empl_dashboard_my_schedule_table\");\r\n\r\n        this.setBodyOfTable(tableMySchedule, this.myScheduleData, this.setHeadOfTable(startDate, endDate, tableMySchedule));\r\n    }\r\n\r\n    /** Creates and stylized a table header of My Schedule\r\n     * @param startDate -> start date of selected period\r\n     * @param endDate -> end date of selected period\r\n     * @param tableMySchedule -> the DOM element of the table\r\n     * @returns -> number of columns created\r\n     */\r\n    setHeadOfTable(startDate: any, endDate: any, tableMySchedule: any): number {\r\n        this._listOfDaysInHeader = [];\r\n        this._rowCounter = 0;\r\n        tableMySchedule.textContent = null;\r\n        let currentDate = startDate;\r\n        const thead = document.createElement(\"thead\");\r\n        const firstRow = document.createElement(\"tr\");\r\n        let numberOfColumn = 0;\r\n        do {\r\n            const firstRowCol = document.createElement(\"th\");\r\n            firstRowCol.textContent = moment(currentDate).format(\"ddd D MMM\");\r\n            this._listOfDaysInHeader.push(moment(currentDate));\r\n            firstRowCol.setAttribute(\"scope\", \"col\");\r\n            firstRowCol.setAttribute(\"id\", \"col\" + numberOfColumn);\r\n            firstRowCol.setAttribute(\"class\", \"empl-dashboard-my-schedule-table-header\");\r\n            firstRow.appendChild(firstRowCol);\r\n            currentDate = moment(currentDate).clone().add(1, 'day');\r\n            numberOfColumn++;\r\n        } while (moment(currentDate).isSameOrBefore(moment(endDate)));\r\n\r\n        thead.appendChild(firstRow);\r\n        firstRow.setAttribute(\"class\", \"w-100 text-center\");\r\n        tableMySchedule.appendChild(thead);\r\n\r\n        return numberOfColumn;\r\n    }\r\n\r\n    /** Creates and styles the body of the My Schedule table by calling certain functions.\r\n     * @param tableMySchedule -> the DOM element of the table\r\n     * @param myScheduleData -> all data obtained from the database\r\n     * @param numberOfColumn -> the value returned by method setHeadOfTable, the number of columns created\r\n     */\r\n    setBodyOfTable(tableMySchedule: any, myScheduleData: EmployeeDashboardJob[], numberOfColumn: number) {\r\n        this.numberOfDisplayedColumns = numberOfColumn;\r\n        const tbodyTable = document.createElement(\"tbody\");\r\n        tbodyTable.setAttribute(\"id\", \"myScheduleTableBody\");\r\n        tableMySchedule.appendChild(tbodyTable);\r\n\r\n        myScheduleData.forEach(element => {\r\n            /** check if there is a row in the table */\r\n            if (this._rowCounter == 0) {\r\n                this.addNewRowInBody(tbodyTable, numberOfColumn, this._rowCounter);\r\n            }\r\n            /** check if there is free space in the existing rows */\r\n            if (!this.checkIfThereIsEnoughSpaceInTheExistingRows(element)) {\r\n                this.addNewRowInBody(tbodyTable, numberOfColumn, this._rowCounter);\r\n                this.checkIfThereIsEnoughSpaceInTheExistingRows(element);\r\n            }\r\n        });\r\n\r\n        //Clean up excess rendered data on multiday jobs\r\n        myScheduleData.forEach(element => {\r\n            const jobParts = document.getElementsByClassName(element.endDateTime);\r\n            if(jobParts.length >= 2) {\r\n                for(let i = 1; i < jobParts.length-1; i++) {\r\n                    jobParts[i].innerHTML = \"\";\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Adds a new row to the table.\r\n     * @param tbodyTable -> the DOM element of the tbody element\r\n     * @param numberOfColumn -> number of columns in the table\r\n     * @param numberOfRow -> number of rows in the table\r\n     */\r\n    addNewRowInBody(tbodyTable: any, numberOfColumn: number, numberOfRow: number) {\r\n        const customRow = document.createElement(\"tr\");\r\n        customRow.setAttribute(\"id\", \"row\" + numberOfRow);\r\n        for (let i = 0; i < numberOfColumn; i++) {\r\n            const col = document.createElement(\"td\");\r\n            col.setAttribute(\"id\", \"row\" + numberOfRow + \"col\" + i);\r\n            col.style.padding = \"0px\";\r\n            col.setAttribute(\"class\", \"empl-dashboard-my-schedule-table-row\");\r\n            customRow.appendChild(col);\r\n        }\r\n        this._rowCounter++;\r\n        tbodyTable.appendChild(customRow);\r\n    }\r\n\r\n    /** Checks if there is enough space in the existing rows to add work.\r\n     * @param numberOfColumn -> number of columns in the table\r\n     * @param numberOfRow -> number of rows in the table\r\n     * @param element -> job\r\n     * @returns -> a logical value that indicates whether there are places\r\n     */\r\n    checkIfThereIsEnoughSpaceInTheExistingRows(element: any) {\r\n        const elementsInTableBody = document.getElementById(\"myScheduleTableBody\").getElementsByTagName(\"tr\");\r\n        let multidayWithOneDayLess = false;\r\n        \r\n        /** iterates through all rows */\r\n        for (let i = 0; i < elementsInTableBody.length; i++) {\r\n            const currentJob = Object.assign({}, element);\r\n            /** iterates through the columns in the current row */\r\n            for (let j = 0; j < this._listOfDaysInHeader.length; j++) {\r\n                /** check whether the work starts before the start of the selected period */\r\n                let jobIsStartBeforePeriodStart = false;\r\n                if(moment(currentJob.startDateTime).clone().isBefore(moment(this._listOfDaysInHeader[j]).clone(), 'date')) {\r\n                    /** if it starts, sets the start date of the selected period for the start date of the job */\r\n                    const hours = moment(currentJob.startDateTime).clone().format('hh:mma');\r\n                    currentJob.startDateTime = moment(this._periodInformation.startDate).clone();\r\n                    /** Preserve original start time information */\r\n                    currentJob.startDateTime.set({ hour: hours.split(':')[0], minute: hours.split(':')[1], second: 0, millisecond: 0 });\r\n                    jobIsStartBeforePeriodStart = true;\r\n                }\r\n                if (moment(this._listOfDaysInHeader[j]).clone().isSame(moment(currentJob.startDateTime).clone(), 'date')) {\r\n                    \r\n                    const col = document.getElementById(\"row\"+i+\"col\"+j);\r\n                    const isColHaveJob = col.getElementsByTagName(\"div\").length;\r\n                    if(isColHaveJob) {\r\n                        break;\r\n                    }\r\n                    else{\r\n                        /** calculations for a job that lasts more than one day */\r\n                        if(!moment(currentJob.startDateTime).clone().isSame(moment(currentJob.endDateTime).clone(), 'date')) {\r\n                            multidayWithOneDayLess = false;\r\n                            /** Check if end time is 00:00 */\r\n                            if(getTimeFromDateTimeString(currentJob.endDateTime) == \"00:00:00\") {\r\n                                /** If job start/end date difference is only one day apply single day logic */\r\n                                if(moment(currentJob.endDateTime).diff(moment(currentJob.startDateTime), 'days') == 1) {\r\n                                    if(jobIsStartBeforePeriodStart) {\r\n                                        this.addContentToCell(col, false, currentJob, 'fakeFirstLast');\r\n                                    }\r\n                                    else {\r\n                                        this.addContentToCell(col, false, currentJob);\r\n                                    }\r\n                                    return true;\r\n                                }\r\n                                else{\r\n                                    multidayWithOneDayLess = true;\r\n                                }\r\n                            }\r\n\r\n                            let tempCurrentDate = moment(currentJob.startDateTime).clone();\r\n                            let numberOfJobDays = 0;\r\n                            while(moment(tempCurrentDate).isSameOrBefore(moment(currentJob.endDateTime).clone(), 'date'))\r\n                            {\r\n                                \r\n                                numberOfJobDays++;\r\n                                tempCurrentDate = tempCurrentDate.clone().add(1, 'day');\r\n                            }\r\n                            if(multidayWithOneDayLess) {\r\n                                numberOfJobDays--;\r\n                            }\r\n                            for(let k = j; k < j+numberOfJobDays; k++) {\r\n                                const colMulti = document.getElementById(\"row\"+i+\"col\"+k);\r\n                                try{\r\n                                    /** if the job is multi-day and goes beyond the selected period */\r\n                                    const isColHaveMultiJob = colMulti.getElementsByTagName(\"div\").length;\r\n                                    if(isColHaveMultiJob) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                                catch(err){\r\n                                    //skip the error\r\n                                }\r\n                            }\r\n                            for(let k = j; k < j+numberOfJobDays; k++) {\r\n                                const colMulti = document.getElementById(\"row\"+i+\"col\"+k);\r\n                                if(colMulti){\r\n                                    if(k == j){\r\n                                        if(jobIsStartBeforePeriodStart) {\r\n                                            /** the first day of multiday job starting before the selected period */\r\n                                            this.addContentToCell(colMulti, true, currentJob, 'fakeFirst');\r\n                                        }\r\n                                        else {\r\n                                            /** the first day of multiday job  */\r\n                                            this.addContentToCell(colMulti, true, currentJob, 'first');\r\n                                        }\r\n                                    }\r\n                                    else if(k == (j+numberOfJobDays-1)) {\r\n                                        /** the last day of multiday job */\r\n                                        this.addContentToCell(colMulti, true, currentJob, 'last');\r\n                                    }\r\n                                    else {\r\n                                        /** middle part of multiday job */\r\n                                        this.addContentToCell(colMulti, true, currentJob, 'middle');\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else{\r\n                            if(jobIsStartBeforePeriodStart) {\r\n                                /** if the multi-day job that starts before the start of the \r\n                                 * selected period ends on the first day of the selected period */\r\n                                this.addContentToCell(col, false, currentJob, 'fakeFirstLast');\r\n                            }\r\n                            else {\r\n                                this.addContentToCell(col, false, currentJob);\r\n                            }\r\n                        }\r\n                        return true;\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** Adds content to the cells and stylizes it.\r\n     * @param col -> the column to which the element will be added - DOM element\r\n     * @param isMulti -> a flag indicating whether the job is multi-day \r\n     * @param currentJob -> job to be added\r\n     * @param partOfMultidayJob -> part of a multi-day job, start, end or middle\r\n     */\r\n    addContentToCell(col: any, isMulti: boolean, currentJob: any, partOfMultidayJob?: string) {\r\n        const divContainer = document.createElement(\"div\");\r\n        /** Flag indicating job lasting no lonher than 24hrs */\r\n        let singleDayJob = false;\r\n        /** Flag for determining wether the subsequent cells of multiday job should be populated */\r\n        let placeElementInLastCell = false;\r\n\r\n        divContainer.style.width = \"100%\";\r\n        divContainer.style.minWidth = \"110px\";\r\n        divContainer.style.height = \"30px\";\r\n        divContainer.style.marginBottom = \"5px\";\r\n        divContainer.style.backgroundColor = currentJob.primaryColor;\r\n        divContainer.classList.add(\"\" + currentJob.endDateTime + \"\");\r\n        if(!isMulti && !(partOfMultidayJob == \"fakeFirst\") && !(partOfMultidayJob == \"fakeFirstLast\")) {\r\n            divContainer.style.borderRadius = \"5px\";\r\n            singleDayJob = true;\r\n        }\r\n\r\n        if(isMulti && partOfMultidayJob == \"first\"){\r\n            /** Display adittional data if first day of multiday job is on the last day of viewed range */\r\n            if(moment(currentJob.startDateTime).clone().isSame(this._periodInformation.endDate, 'days')) {\r\n                placeElementInLastCell = true;\r\n            }\r\n\r\n            divContainer.style.borderRadius = \"5px\";\r\n            divContainer.style.borderTopRightRadius = \"0px\";\r\n            divContainer.style.borderBottomRightRadius = \"0px\";\r\n            col.style.borderRight = \"none\";\r\n        }\r\n        else if(isMulti && partOfMultidayJob == \"last\") {\r\n            placeElementInLastCell = true;\r\n            divContainer.style.borderTopRightRadius = \"5px\";\r\n            divContainer.style.borderBottomRightRadius = \"5px\";\r\n            col.style.borderLeft = \"none\";\r\n        }\r\n        else if(isMulti && partOfMultidayJob == \"middle\") {\r\n            placeElementInLastCell = true;\r\n            col.style.borderRight = \"none\";\r\n            col.style.borderLeft = \"none\";\r\n        }\r\n        else if(partOfMultidayJob == \"fakeFirst\"){\r\n            col.style.borderRight = \"none\";\r\n        }\r\n        else if(partOfMultidayJob == \"fakeFirstLast\") {\r\n            placeElementInLastCell = true;\r\n            col.style.borderLeft = \"none\";\r\n            divContainer.style.borderTopRightRadius = \"5px\";\r\n            divContainer.style.borderBottomRightRadius = \"5px\";\r\n        }\r\n\r\n        if(currentJob.offeredForTrade){\r\n            divContainer.style.backgroundColor = \"var(--eSolve-yellow)\";\r\n            divContainer.style.borderColor = \"var(--eSolve-yellow)\";\r\n        }\r\n\r\n        /** Variables determining visibility/invisibility of specified elements */\r\n        const hideOfferedJobElementClass = currentJob.offeredForTrade ? \"\" : \"empl-dashboard-hide-element\";\r\n        const leftArrowIndicatorClass = !singleDayJob && (currentJob.leftArrow || (currentJob.leftArrow && currentJob.rightArrow)) ? \"esolve-triangle-left\" : \"empl-dashboard-hide-element\";\r\n        const leftArrowContainerClass = !singleDayJob && (currentJob.leftArrow || (currentJob.leftArrow && currentJob.rightArrow)) ? \"\" : \"empl-dashboard-hide-element\";\r\n        const rightArrowIndicatorClass = !singleDayJob && (currentJob.rightArrow || (currentJob.leftArrow && currentJob.rightArrow)) ? \"esolve-triangle-right\" : \"empl-dashboard-hide-element\";\r\n        \r\n        /** Element placeholder variables */\r\n        let jobTradeIconElement = \"\";\r\n        let lastRowJobDetails = \"\";\r\n        let rightArrowIndicatorElement = \"\";\r\n\r\n        /**Data to be inserted in last cell of multiday job */\r\n        lastRowJobDetails = `\r\n            <div class=\"row empl-dashboard-job\">\r\n                <div class=\"col-11\"></div>\r\n                <div class=\"col-1 empl-dashboard-trade-icon-container ` + hideOfferedJobElementClass + `\">\r\n                    <i class=\"fa fa-refresh empl-dashboard-trade-icon\" aria-hidden=\"true\"></i>\r\n                </div>\r\n            </div>\r\n            <div class=\"row empl-dashboard-job\">\r\n                <div class=\"col-12 p-0\">\r\n                    <div class=\"pull-right ` + rightArrowIndicatorClass + `\"></div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        if(this.numberOfDisplayedColumns == 1 || singleDayJob || placeElementInLastCell) {\r\n            jobTradeIconElement = `\r\n                <div class=\"col-6\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 empl-dashboard-trade-icon-container ` + hideOfferedJobElementClass + `\">\r\n                            <i class=\"fa fa-refresh empl-dashboard-trade-icon employee-job-trade-icon-style\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            rightArrowIndicatorElement = `\r\n                <div class=\"col-1 p-0\">\r\n                    <div class=\"pull-right ` + rightArrowIndicatorClass + `\"></div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        if(!isMulti || partOfMultidayJob == \"first\" || partOfMultidayJob == \"fakeFirst\" || partOfMultidayJob == \"fakeFirstLast\"){\r\n            divContainer.style.color = \"white\";\r\n            divContainer.style.fontSize = \"0.85em\";\r\n            divContainer.style.lineHeight = \"1.4\";\r\n            divContainer.style.paddingLeft = \"5px\";\r\n            const formattedJobDetails = `\r\n                <div class=\"row empl-dashboard-job d-flex justify-content-between\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"row trade-icon-parent\">\r\n                            <div class=\"col-6\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"p-0 ` + leftArrowContainerClass + `\">\r\n                                        <div class=\"` + leftArrowIndicatorClass + `\"></div>\r\n                                    </div>\r\n                                    <div class=\"col-11 p-0 empl-schedule-job-duration\">\r\n                                    ` + moment(currentJob.startDateTime).clone().format('hh:mma') + `-` + moment(currentJob.endDateTime).clone().format('hh:mma') + `\r\n                                    </div>\r\n                                </div>\r\n                            </div>`\r\n                            + jobTradeIconElement +\r\n                        `</div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12\">\r\n                                <div class=\"row right-arrow-indicator-parent\">\r\n                                    <div class=\"col-11 p-0 empl-dashboard-assigned-details\">\r\n                                        <i class=\"fa fa-user\" aria-hidden=\"true\"></i>` + currentJob.employeeRequired + `/` + currentJob.employeesAssigned + `\r\n                                    </div>`\r\n                                    + rightArrowIndicatorElement +\r\n                                `</div>\r\n                            </div>\r\n                            <div class=\"col-1\">\r\n                                <div class=\"row\">\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            divContainer.innerHTML = formattedJobDetails;\r\n        }\r\n\r\n        if(placeElementInLastCell) {\r\n            if(isMulti && partOfMultidayJob == \"last\") {\r\n                divContainer.innerHTML = lastRowJobDetails;\r\n            } else if(isMulti && partOfMultidayJob == \"middle\") {\r\n                divContainer.innerHTML = lastRowJobDetails;\r\n            }\r\n        }\r\n\r\n        col.appendChild(divContainer);\r\n    }\r\n\r\n    /** Upon destruction of the component,\r\n     * the subscription to the event is terminated\r\n     */\r\n    ngOnDestroy(){\r\n        this._completed.next(true);\r\n        this._completed.complete();\r\n    }\r\n}\r\n","<div class=\"table-responsive\">\r\n  <table id=\"empl_dashboard_my_schedule_table\" class=\"table table-bordered empl-dashboard-my-schedule-font-12\">\r\n    \r\n  </table>\r\n</div>\r\n","\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\nimport { datePipeFormat, LocData } from 'src/app/app.module';\r\n\r\n@Pipe({ name: 'DateDashboardTransformPipe' })\r\nexport class DateDashboardTransformPipe implements PipeTransform{\r\n    transform(value: string) {\r\n        if (!value) return [];\r\n        var datePipe = new DatePipe(LocData);\r\n         value = datePipe.transform(value, datePipeFormat);\r\n         return value;\r\n     }\r\n}\r\n\r\n@Pipe({name: 'TimeDashboardTransformPipe'})\r\nexport class TimeDashboardTransformPipe implements PipeTransform{\r\n    transform(value: string) {\r\n        if (!value) return [];\r\n        var dateTimePipe = new DatePipe(LocData);\r\n         value = dateTimePipe.transform(value, 'HH:mm');\r\n         return value;\r\n     }\r\n}\r\n\r\n@Pipe({ name: 'DateTimeDashboardTransformPipe' })\r\nexport class DateTimeDashboardTransformPipe implements PipeTransform{\r\n    transform(value: string) {\r\n        if (!value) return [];\r\n        var dateTimePipe = new DatePipe(LocData);\r\n         value = dateTimePipe.transform(value, datePipeFormat + ' ' + 'HH:mm');\r\n         return value;\r\n     }\r\n}","<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <div class=\"row g-table-header\">\r\n                <div class=\"col-12 d-flex flex-row\">\r\n                    <div class=\"empl-dashboard-job-offers-fifth-row\">\r\n                        <p>Schedule</p>\r\n                    </div>\r\n                    <div class=\"empl-dashboard-job-offers-fifth-row empl-dashboard-job-offers-hide-on-medium-screen\">\r\n                        <p>Subgroup</p>\r\n                    </div>\r\n                    <div class=\"empl-dashboard-job-offers-fifth-row empl-dashboard-job-offers-hide-on-medium-screen\">\r\n                        <p>Job Type</p>\r\n                    </div>\r\n                    <div class=\"empl-dashboard-job-offers-fifth-row\">\r\n                        <p>Start Date Time</p>\r\n                    </div>\r\n                    <div class=\"empl-dashboard-job-offers-fifth-row\">\r\n                        <p>End Date Time</p>\r\n                    </div>\r\n                    <div id=\"empl_dashboard_job_offers_actions\">\r\n                        <p>Actions</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <mat-table [dataSource]=\"data\">\r\n  \r\n                        <!-- Schedule Column -->\r\n                        <ng-container matColumnDef=\"scheduleName\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-offers-schedule-detail\">\r\n                                <span class=\"g-mobile-label\">Schedule: </span>{{row.scheduleName}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n  \r\n  \r\n                        <!-- Subgroup Column -->\r\n                        <ng-container matColumnDef=\"subgroupName\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-offers-schedule-detail empl-dashboard-job-offers-hide-on-medium-screen\">\r\n                                <span class=\"g-mobile-label\">Subgroup: </span>{{row.subGroupName}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Job Type Column -->\r\n                        <ng-container matColumnDef=\"jobTypeName\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-offers-schedule-detail empl-dashboard-job-offers-hide-on-medium-screen\">\r\n                                <span class=\"g-mobile-label\">Job Type: </span>{{row.jobTypeName}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n  \r\n                        <!-- Start Date Time Column -->\r\n                        <ng-container matColumnDef=\"startDateTime\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-offers-schedule-detail\">\r\n                                <span class=\"g-mobile-label\">Start Date: </span>{{row.jobStartDateTime | DateTimeDashboardTransformPipe}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n  \r\n                        <!-- End Date Time Column -->\r\n                        <ng-container matColumnDef=\"endDateTime\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-offers-schedule-detail\">\r\n                                <span class=\"g-mobile-label\">End Date: </span>{{row.jobEndDateTime | DateTimeDashboardTransformPipe}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n  \r\n                        \r\n  \r\n                        <!-- Actions Column -->\r\n                        <ng-container matColumnDef=\"actions\">\r\n                            <mat-cell *matCellDef=\"let row\"\r\n                                class=\"empl-dashboard-job-offers-actions-div-width\">\r\n                                <div class=\"d-flex justify-content-between empl-dashboard-job-offers-align-buttons-padding\">\r\n                                  <button id=\"empl_dashboard_job_offers_modify_btn\" (click)=\"acceptJobOffer(row)\" type=\"button\"\r\n                                      class=\"btn empl-dashboard-job-offers-action-button pull-right border-0\"\r\n                                      [disabled]=\"row.statusName === 'Accepted'\"\r\n                                      [ngClass]=\"{'isInActive': !row.isActive}\">\r\n                                      Accept\r\n                                  </button>\r\n                                  <button id=\"empl_dashboard_job_offers_reject_btn\" (click)=\"rejectJobOffer(row)\" type=\"button\"\r\n                                      class=\"btn empl-dashboard-job-offers-action-button pull-right border-0\"\r\n                                      [disabled]=\"row.statusName === 'Rejected'\"\r\n                                      [ngClass]=\"{'isInActive': !row.isActive}\">\r\n                                      Reject\r\n                                  </button>\r\n                              </div>\r\n                            </mat-cell>\r\n                        </ng-container>\r\n  \r\n                        <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n                    </mat-table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  </div>","import { NotificationsService } from 'src/app/shared/services/notifications.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { JobOfferAcceptRejectDialogComponent } from 'src/app/manager/job-offers/job-offer-accept-reject-dialog/job-offer-accept-reject-dialog.component';\r\nimport { JobOffersTable } from 'src/app/shared/models/employeeDashboardDetails';\r\nimport { DashboardService } from 'src/app/shared/services/dashboard.service';\r\nimport { EsolveSnackbarService } from 'src/app/shared/services/esolve-snackbar.service';\r\nimport { JobOfferService } from 'src/app/shared/services/job-offer.service';\r\n\r\n@Component({\r\n    selector: 'app-employee-dashboard-job-offers',\r\n    templateUrl: './employee-dashboard-job-offers.component.html',\r\n    styleUrls: ['./employee-dashboard-job-offers.component.scss']\r\n})\r\nexport class EmployeeDashboardJobOffersComponent implements OnInit {\r\n\r\n    /** Stores all column names for the table. */\r\n    displayedColumns: string[] = ['scheduleName', 'subgroupName', 'jobTypeName', 'startDateTime', 'endDateTime', 'actions'];\r\n    /** Parameter for subscription termination. */\r\n    private _completed = new Subject();\r\n    /** Stores all data obtained from the database. */\r\n    data = new MatTableDataSource();\r\n    /** Stores all data obtained from the database. */\r\n    jobOffersData: JobOffersTable[] = [];\r\n    /** Subscription when the date range type is changed. */\r\n    private _subscription: any;\r\n    /** Information about date range type, start date, end date... */\r\n    private _periodInformation: any;\r\n    /** Value of selected tab.*/\r\n    currentTab: string = \"\";\r\n\r\n    /**\r\n     * Create a instance of EmployeeDashboardJobOffersComponent.\r\n     */\r\n    constructor(\r\n        private _jobOfferService: JobOfferService,\r\n        private _dashboardService: DashboardService,\r\n        private _messageService: EsolveSnackbarService,\r\n        private _notificationService: NotificationsService,\r\n        public dialog: MatDialog,\r\n    ) { }\r\n\r\n    /** \r\n     * Subscribes to an event when the period type changes\r\n     */\r\n    ngOnInit() {\r\n        this._dashboardService.getTabChangedEmitter()\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe(item => {\r\n            this.currentTab = item;\r\n            this.periodChanged(this._dashboardService.getCurrentPeriod());\r\n        });\r\n\r\n        this._subscription = this._dashboardService.getPeriodChangeEmitter()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(item => this.periodChanged(item));\r\n    }\r\n\r\n    /** Get data from database depending on the type of period\r\n     * @param periodInformation -> information about period range\r\n     */\r\n     periodChanged(periodInformation: any) {\r\n        if(this.currentTab == \"Job Offers Available\"){\r\n            this._periodInformation = periodInformation;\r\n            this._dashboardService.getEmployeeDashboardDataForJobOffers(this._periodInformation.startDate.clone().format(\"MM-DD-YYYY\"), this._periodInformation.endDate.clone().format(\"MM-DD-YYYY\")).subscribe((data:any) => {\r\n                this.jobOffersData = data;\r\n                this.populateTableData();\r\n            });\r\n            \r\n        }\r\n    }\r\n\r\n    /** \r\n     * Fills in the table with the obtained data.\r\n     */\r\n    populateTableData() {\r\n        this.data = new MatTableDataSource(this.jobOffersData);\r\n    }\r\n\r\n    /**\r\n     * Accept selected job offer.\r\n     * Call _jobOfferService and send selected job offer id.\r\n     * @param jobOffer -> selected object\r\n     */\r\n    acceptJobOffer(jobOffer: any) {\r\n        this._jobOfferService.acceptOrRejectJobOffer(jobOffer.jobOfferID, true)\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(\r\n            (response: any) => {\r\n                const dialogRef = this.dialog.open(JobOfferAcceptRejectDialogComponent, {\r\n                    autoFocus: false,\r\n                    disableClose: true,\r\n                    data: JSON.parse(response),\r\n                    width: '390px',\r\n                    panelClass: 'confirm-dialog',\r\n                });\r\n                dialogRef.afterClosed().subscribe(() => {\r\n                    this._dashboardService.emitPeriodChangeEvent(this._periodInformation);\r\n                    this._notificationService.reloadUnreadNotificationsCount.next(0);\r\n                });\r\n            },\r\n            (err: HttpErrorResponse) => {\r\n                this._messageService.open(err);\r\n            },\r\n            () => { \r\n                //\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reject selected job offer.\r\n     * Call _jobOfferService and send selected job offer id.\r\n     * @param jobOffer -> selected object\r\n     */\r\n    rejectJobOffer(jobOffer: any) {\r\n        this._jobOfferService.acceptOrRejectJobOffer(jobOffer.jobOfferID, false)\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe(\r\n            (response: any) => {\r\n                this._dashboardService.emitPeriodChangeEvent(this._periodInformation);\r\n                this._notificationService.reloadUnreadNotificationsCount.next(0);\r\n                this._messageService.open(\"Offer Rejected\");\r\n            },\r\n            (err: HttpErrorResponse) => {\r\n                this._messageService.open(err);\r\n            },\r\n            () => { \r\n                //\r\n            }\r\n        );\r\n    }\r\n\r\n    /** Upon destruction of the component,\r\n     * the subscription to the event is terminated\r\n     */\r\n    ngOnDestroy() {\r\n        this._completed.next(true);\r\n        this._completed.complete();\r\n    }\r\n\r\n}\r\n","<div class=\"container-fluid\">\r\n  <div class=\"row\">\r\n      <div class=\"col-12\">\r\n          <div class=\"row g-table-header\">\r\n              <div class=\"col-12 d-flex flex-row\">\r\n                  <div class=\"empl-dashboard-job-trade-fifth-row\">\r\n                      <p>Schedule</p>\r\n                  </div>\r\n                  <div class=\"empl-dashboard-job-trade-fifth-row empl-dashboard-job-trade-hide-on-medium-screen\">\r\n                      <p>Subgroup</p>\r\n                  </div>\r\n                  <div class=\"empl-dashboard-job-trade-fifth-row empl-dashboard-job-trade-hide-on-medium-screen\">\r\n                      <p>Job Type</p>\r\n                  </div>\r\n                  <div class=\"empl-dashboard-job-trade-fifth-row\">\r\n                      <p>Start Date Time</p>\r\n                  </div>\r\n                  <div class=\"empl-dashboard-job-trade-fifth-row\">\r\n                      <p>End Date Time</p>\r\n                  </div>\r\n                  <div id=\"empl_dashboard_job_trade_actions\">\r\n                      <p>Actions</p>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"row\">\r\n              <div class=\"col-12\">\r\n                  <mat-table [dataSource]=\"data\">\r\n\r\n                      <!-- Schedule Column -->\r\n                      <ng-container matColumnDef=\"scheduleName\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-trade-schedule-detail\">\r\n                              <span class=\"g-mobile-label\">Schedule: </span>{{row.scheduleName}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n\r\n                      <!-- Subgroup Column -->\r\n                      <ng-container matColumnDef=\"subgroupName\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-trade-schedule-detail empl-dashboard-job-trade-hide-on-medium-screen\">\r\n                              <span class=\"g-mobile-label\">Subgroup: </span>{{row.subGroupName}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <!-- Job Type Column -->\r\n                      <ng-container matColumnDef=\"jobTypeName\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-trade-schedule-detail empl-dashboard-job-trade-hide-on-medium-screen\">\r\n                              <span class=\"g-mobile-label\">Job Type: </span>{{row.jobTypeName}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <!-- Start Date Time Column -->\r\n                      <ng-container matColumnDef=\"startDateTime\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-trade-schedule-detail\">\r\n                              <span class=\"g-mobile-label\">Start Date: </span>{{row.jobStartDateTime | DateTimeDashboardTransformPipe}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <!-- End Date Time Column -->\r\n                      <ng-container matColumnDef=\"endDateTime\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"empl-dashboard-job-trade-schedule-detail\">\r\n                              <span class=\"g-mobile-label\">End Date: </span>{{row.jobEndDateTime | DateTimeDashboardTransformPipe}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      \r\n\r\n                      <!-- Actions Column -->\r\n                      <ng-container matColumnDef=\"actions\">\r\n                          <mat-cell *matCellDef=\"let row\"\r\n                              class=\"empl-dashboard-job-trade-actions-div-width\">\r\n                              <div class=\"d-flex justify-content-between empl-dashboard-job-trade-align-buttons-padding\">\r\n                                <button id=\"empl_dashboard_job_trade_modify_btn\" (click)=\"acceptJobTrade(row)\" type=\"button\"\r\n                                    class=\"btn empl-dashboard-job-trade-action-button pull-right border-0\"\r\n                                    [disabled]=\"row.statusName === 'Accepted'\">\r\n                                    Accept\r\n                                </button>\r\n                                <button id=\"empl_dashboard_job_trade_reject_btn\" (click)=\"declineJobTrade(row)\" type=\"button\"\r\n                                    class=\"btn empl-dashboard-job-trade-action-button pull-right border-0\"\r\n                                    [disabled]=\"row.statusName === 'Rejected'\">\r\n                                    Decline\r\n                                </button>\r\n                            </div>\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n                  </mat-table>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</div>","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { TradeBoardTable } from 'src/app/shared/models/employeeDashboardDetails';\r\nimport { DashboardService } from 'src/app/shared/services/dashboard.service';\r\nimport { DialogService } from 'src/app/shared/services/dialog.service';\r\nimport { EsolveSnackbarService } from 'src/app/shared/services/esolve-snackbar.service';\r\nimport { JobTradeService } from 'src/app/shared/services/job-trade.service';\r\n\r\n@Component({\r\n    selector: 'app-employee-dashboard-trade-boards',\r\n    templateUrl: './employee-dashboard-trade-boards.component.html',\r\n    styleUrls: ['./employee-dashboard-trade-boards.component.scss']\r\n})\r\nexport class EmployeeDashboardTradeBoardsComponent implements OnInit {\r\n\r\n    /** Stores all column names for the table. */\r\n    displayedColumns: string[] = ['scheduleName', 'subgroupName', 'jobTypeName', 'startDateTime', 'endDateTime', 'actions'];\r\n    /** Parameter for subscription termination. */\r\n    private _completed = new Subject();\r\n    /** Stores all data obtained from the database. */\r\n    data = new MatTableDataSource();\r\n    /** Subscription when the date range type is changed. */\r\n    private _subscription: any;\r\n    /** Information about date range type, start date, end date... */\r\n    private _periodInformation: any;\r\n    /** Value of selected tab.*/\r\n    currentTab: string = \"\";\r\n    /** Stores all data obtained from the database. */\r\n    tradeBoardsData: TradeBoardTable[] = [];\r\n\r\n    /**\r\n     * Create a instance of EmployeeDashboardJobOffersComponent.\r\n     */\r\n    constructor(\r\n        private _dashboardService: DashboardService,\r\n        private _jobTradeService: JobTradeService,\r\n        private _messageService: EsolveSnackbarService,\r\n        public dialog: MatDialog,\r\n        private _dialogService: DialogService,\r\n    ) { }\r\n\r\n    /** \r\n     * Subscribes to an event when the period type changes\r\n     */\r\n    ngOnInit() {\r\n        this._dashboardService.getTabChangedEmitter()\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe(item => {\r\n            this.currentTab = item;\r\n            this.periodChanged(this._dashboardService.getCurrentPeriod());\r\n        });\r\n\r\n        this._subscription = this._dashboardService.getPeriodChangeEmitter()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(item => this.periodChanged(item));\r\n    }\r\n\r\n    /** Get data from database depending on the type of period\r\n     * @param periodInformation -> information about period range\r\n     */\r\n     periodChanged(periodInformation: any) {\r\n        if(this.currentTab == \"Trades Available\"){\r\n        this._periodInformation = periodInformation;\r\n            this._dashboardService.getEmployeeDashboardDataForTradesAvailable(this._periodInformation.startDate.clone().format(\"MM-DD-YYYY\"), this._periodInformation.endDate.clone().format(\"MM-DD-YYYY\")).subscribe((data:any) => {\r\n                this.tradeBoardsData = data;\r\n                this.populateTableData();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fills in the table with the obtained data.\r\n     */\r\n    populateTableData() {\r\n        this.data = new MatTableDataSource(this.tradeBoardsData);\r\n    }\r\n\r\n    /**\r\n     * Accept selected job offer.\r\n     * Call _jobTradeService and send selected job trade id.\r\n     * @param jobTrade -> selected object\r\n     */\r\n    acceptJobTrade(jobTrade: any) {\r\n        this._jobTradeService.getAcceptTradeWarning()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe((message) => {\r\n                this._dialogService.openConfirmDialog(\r\n                    'TradeAccept',\r\n                    message\r\n                )\r\n                .afterClosed()\r\n                .subscribe(res => {\r\n                    if (res) {\r\n                        this._jobTradeService.acceptTradeOffer(jobTrade.jobOfferID)\r\n                        .pipe(takeUntil(this._completed))\r\n                        .subscribe(() => {\r\n                            this._messageService.open(\"Trade Accepted.\");\r\n                            this._dashboardService.emitPeriodChangeEvent(this._periodInformation);\r\n                        },\r\n                        (error: HttpErrorResponse) => {\r\n                            let message = this._messageService.handleHttpError(error);\r\n                            if (error.status === 404) {\r\n                                this._messageService.open(\"Trade is no longer available.\");\r\n                            }\r\n                            else if(error.status === 400 && message == \"The credentials you have entered for system email are invalid.\"){\r\n                                this._dashboardService.emitPeriodChangeEvent(this._periodInformation);\r\n                                this._messageService.open(error);\r\n                            }else {\r\n                                this._messageService.open(\"Error accepting trade.\");\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Reject selected job offer.\r\n     * Call _jobTradeService and send selected job trade id.\r\n     * @param jobTrade -> selected object\r\n     */\r\n    declineJobTrade(jobTrade: any) {\r\n        this._jobTradeService.declineTradeOffer(jobTrade.jobOfferID)\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(() => {\r\n                this._messageService.open(\"Trade Declined.\");\r\n                this._dashboardService.emitPeriodChangeEvent(this._periodInformation);\r\n            },\r\n            (error: HttpErrorResponse) => {\r\n                if (error.status === 404) {\r\n                    this._messageService.open(\"Trade is no longer available.\");\r\n                } else {\r\n                    this._messageService.open(\"Error declining trade.\");\r\n                }\r\n            })\r\n    }\r\n\r\n    /** Upon destruction of the component,\r\n     * the subscription to the event is terminated\r\n     */\r\n    ngOnDestroy() {\r\n        this._completed.next(true);\r\n        this._completed.complete();\r\n    }\r\n\r\n}\r\n","<div class=\"container-fluid empl-dashboard-main-container\">\r\n    <div class=\"g-thin-black-scroll-bar\">\r\n        <div class=\"row\">\r\n            <div class=\"col-xl-6 col-12\" *ngIf=\"canEmployeeAccesSchedule\">\r\n                <div class=\"empl-dashboard-card2 empl-dashboard-card2a\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span id=\"empl_dashboard_my_next_shift_title\">My Next Shift</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\" id=\"empl_dashboard_my_next_shift_div\">\r\n                        <div class=\"col-sm-4 g-font-size-12 align-self-end\" [ngClass]=\"{'empl_dashboard_left_part_of_my_next_shift': dashboardData.nextShift != null}\" id=\"empl_dashboard_left_part_of_my_next_shift\">\r\n                           \r\n                            <i class=\"fa fa-calendar\" aria-hidden=\"true\"></i>\r\n                            {{ (dashboardData.nextShift?.jobStartDate) ? (dashboardData.nextShift.jobStartDate | DateDashboardTransformPipe) : '-' }} <br>\r\n                            <span *ngIf=\"jobIsMultiday\">\r\n                                <i class=\"fa fa-calendar\" aria-hidden=\"true\"></i>\r\n                                {{ dashboardData.nextShift.jobEndDate | DateDashboardTransformPipe }} <br>\r\n                            </span>\r\n                            <i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\r\n                            {{ (dashboardData.nextShift?.jobStartDate) ? (dashboardData.nextShift.jobStartDate | TimeDashboardTransformPipe) : ''}} - {{ (dashboardData.nextShift?.jobEndDate) ? (dashboardData.nextShift.jobEndDate | TimeDashboardTransformPipe) : '' }}\r\n                        \r\n                        </div>\r\n                        <div class=\"col-sm-4 g-font-size-12\" *ngIf=\"dashboardData.nextShift\">\r\n                            <br>\r\n                            <span id=\"empl_dashboard_next_shift_job_name\">{{ dashboardData.nextShift.jobName }}</span><br>\r\n                            {{ dashboardData.nextShift.subGroupName }}\r\n                        </div>\r\n                        <div class=\"col-sm-4 empl_dashboard_next_shift_margin\" *ngIf=\"dashboardData.nextShift\">             \r\n                            <button *ngIf=\"dashboardData.nextShift.canTradeJob\" class=\"btn btn-warning g-font-size-12 float-right\" id=\"empl_dashboard_trade_job_btn\"\r\n                            (click)=\"tradeJob(dashboardData.nextShift.jobID)\" [disabled]=\"dashboardData.nextShift.offeredForTrade\">\r\n                            {{ dashboardData.nextShift.offeredForTrade ? \"Offered For Trade\" : \"Trade Job\" }} <i *ngIf=\"!dashboardData.nextShift.offeredForTrade\" class=\"fa fa-retweet\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xl-6 col-12 g-font-size-12\" *ngIf=\"canEmployeeAccessAbsence\">\r\n                <div class=\"empl-dashboard-card2\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span id=\"empl_dashboard_upcoming_leave_title\">Upcoming Leave</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row empl_dashboard_upcoming_leave_data_margin\">\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"row\">\r\n                                <div class=\"col-12\">\r\n                                    <div class=\"d-flex justify-content-start\">\r\n                                        <div>\r\n                                            <i class=\"fa fa-circle\" id=\"empl_dashboard_upcoming_leave_icon1\" aria-hidden=\"true\"></i>\r\n                                            <i class=\"fa fa-long-arrow-down\" id=\"empl_dashboard_upcoming_leave_icon2\" aria-hidden=\"true\"></i>\r\n                                        </div>\r\n                                        <div id=\"empl_dashboard_absence_date\">\r\n                                            {{ (dashboardData.upcomingLeave?.absenceStartDate) ? (dashboardData.upcomingLeave.absenceStartDate | DateDashboardTransformPipe) : '-' }}<br>\r\n                                            {{ (dashboardData.upcomingLeave?.absenceEndDate) ? (dashboardData.upcomingLeave.absenceEndDate | DateDashboardTransformPipe) : '-'}}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\" *ngIf=\"dashboardData.upcomingLeave\">\r\n                            <button class=\"btn btn-dark g-font-size-12 float-right\"\r\n                             id=\"empl_dashboard_upcoming_leave_absence_code_name\"\r\n                             [ngStyle]=\"{'background-color': dashboardData.upcomingLeave.absenceCodeColor ? dashboardData.upcomingLeave.absenceCodeColor : 'white' }\">\r\n                                {{ dashboardData.upcomingLeave.absenceCodeName }}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>        \r\n        <div class=\"row mt-3\">\r\n            <div class=\"col-xl-4 col-sm-6 col-12 empl-dashboard-scheduled-jobs-div\" *ngIf=\"canEmployeeAccesSchedule\">\r\n                <div class=\"d-flex justify-content-between empl-dashboard-card\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span class=\"card_title\">Scheduled Shifts</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <span class=\"card_number\">\r\n                                {{dashboardData.scheduledJobs}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <i class=\"fa fa-calendar\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xl-4 col-sm-6 col-12 empl-dashboard-scheduled-hours-div\" *ngIf=\"canEmployeeAccesSchedule\">\r\n                <div class=\"d-flex justify-content-between empl-dashboard-card\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span class=\"card_title\">Scheduled Hours</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <span class=\"card_number\">\r\n                                {{dashboardData.scheduledHours}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xl-4 col-sm-6 col-12 empl-dashboard-absence-hours-div\" *ngIf=\"canEmployeeAccessAbsence\">\r\n                <div class=\"d-flex justify-content-between empl-dashboard-card\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span class=\"card_title\">Absence Hours</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <span class=\"card_number\">\r\n                                {{dashboardData.approvedAbsenceHours}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <i class=\"fa fa-long-arrow-left empl-dashboard-arrow-icon\" aria-hidden=\"true\"></i>\r\n                            <i class=\"fa fa-user\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row mt-3\" *ngIf=\"canEmployeeAccesSchedule || canEmployeeAccessJobOffers || canEmployeeAccessTradeBoard\">\r\n            <div class=\"col-12\">\r\n                <div class=\"empl-dashboard-card3\">\r\n                    <mat-tab-group class=\"g-dashboard-table-labels\" #emplDashboardTabGroup (selectedTabChange)=\"emplDashboardTabChanged($event)\">\r\n    \r\n                        <!-- My Schedule -->\r\n                        <mat-tab label=\"My Schedule\" *ngIf=\"canEmployeeAccesSchedule\">\r\n                            <ng-template mat-tab-label>\r\n                                <p>My Schedule</p>\r\n                            </ng-template>\r\n                            <app-employee-dashboard-my-schedule [onJobTraded]=\"jobTradedEventSubject.asObservable()\"></app-employee-dashboard-my-schedule>\r\n                        </mat-tab>\r\n\r\n                        <!-- Job Offers -->\r\n                        <mat-tab label=\"Job Offers Available\" *ngIf=\"canEmployeeAccessJobOffers\">\r\n                            <ng-template mat-tab-label>\r\n                                <p>Job Offers Available ({{ dashboardData.numberOfJobOffers }})</p>\r\n                            </ng-template>\r\n                            <app-employee-dashboard-job-offers></app-employee-dashboard-job-offers>\r\n                        </mat-tab>\r\n\r\n                        <!-- Trade Boards -->\r\n                        <mat-tab label=\"Trades Available\" *ngIf=\"canEmployeeAccessTradeBoard\">\r\n                            <ng-template mat-tab-label>\r\n                                <p>Trades Available ({{ dashboardData.numberOfJobTrades }})</p>\r\n                            </ng-template>\r\n                            <app-employee-dashboard-trade-boards></app-employee-dashboard-trade-boards>\r\n                        </mat-tab>\r\n            \r\n                    </mat-tab-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport * as moment from 'moment';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { EmployeeDashboardDetails, NextShiftJob, UpcomingLeaveAbsence } from 'src/app/shared/models/employeeDashboardDetails';\r\nimport { DashboardService } from 'src/app/shared/services/dashboard.service';\r\nimport { DialogService } from 'src/app/shared/services/dialog.service';\r\nimport { EsolveSnackbarService } from 'src/app/shared/services/esolve-snackbar.service';\r\nimport { JobTradeService } from 'src/app/shared/services/job-trade.service';\r\nimport { ProfileService } from 'src/app/shared/services/profile.service';\r\nimport { UserRoleService } from 'src/app/shared/services/user-role.service';\r\nimport { RolesUtils } from 'src/app/shared/utils/RolesUtils';\r\n\r\n@Component({\r\n    selector: 'app-employee-dashboard',\r\n    templateUrl: './employee-dashboard.component.html',\r\n    styleUrls: ['./employee-dashboard.component.scss']\r\n})\r\nexport class EmployeeDashboardComponent implements OnInit {\r\n\r\n    /** Stores all data obtained from the database. */\r\n    dashboardData: EmployeeDashboardDetails = {\r\n        \"scheduledJobs\": 0,\r\n        \"scheduledHours\": \"0\",\r\n        \"approvedAbsenceHours\": \"0\",\r\n\r\n        \"nextShift\": new NextShiftJob(0, \"\", \"\", \"\", \"\", true),\r\n        \"upcomingLeave\": new UpcomingLeaveAbsence(0, \"\", \"\", \"\", \"\"),\r\n\r\n        \"numberOfJobOffers\": 0,\r\n        \"numberOfJobTrades\": 0\r\n    };\r\n    /** Subscription when the date range type is changed. */\r\n    private _subscription: any = null;\r\n    /** Parameter for subscription termination. */\r\n    private _completed = new Subject();\r\n    /** Information about date range type, start date, end date... */\r\n    private _periodInformation: any;\r\n    /** Selected tab */\r\n    currentTab = \"My Schedule\";\r\n    /** Permission - can employee access Absence */\r\n    canEmployeeAccessAbsence = true;\r\n    /** Permission - can employee access Job Offers */\r\n    canEmployeeAccessJobOffers = true;\r\n    /** Permission - can employee access Trade Board */\r\n    canEmployeeAccessTradeBoard = true;\r\n    /** Permission - can employee access Schedule */\r\n    canEmployeeAccesSchedule = true;\r\n    /** Number of ticks in one millisecond */\r\n    ticksPerMillisecond = 10000;\r\n    /** Flag for multiday job */\r\n    jobIsMultiday = false;\r\n    /** Used to emit event to schedule child on job trade action */\r\n    jobTradedEventSubject: Subject<void> = new Subject<void>();\r\n\r\n\r\n    /**\r\n     * Create a instance of EmployeeDashboardComponent.\r\n     */\r\n    constructor(\r\n        private _dashboardService: DashboardService,\r\n        private _profileService: ProfileService,\r\n        private _messageService: EsolveSnackbarService,\r\n        private _tradeService: JobTradeService,\r\n        private _dialogService: DialogService,\r\n        private _roles: RolesUtils,\r\n        private _userRoleService: UserRoleService\r\n    ) { }\r\n\r\n    /** Subscribes to an event when the period type changes\r\n     * Call periodChanged function.\r\n     */\r\n    ngOnInit() {\r\n        this.getProfile();\r\n\r\n        let _refetchPermissions: EventEmitter<any> = new EventEmitter();\r\n        this._userRoleService.refetchPermissions\r\n        .pipe(takeUntil(_refetchPermissions))\r\n        .subscribe(() => {\r\n        setTimeout(() => {\r\n            let permissions = this._userRoleService.getGlobalAccountPermissions();\r\n            this.setPermissions(permissions);\r\n            _refetchPermissions.next(true);\r\n            _refetchPermissions.complete();\r\n        }, 200);\r\n    })\r\n\r\n        this._subscription = this._dashboardService.getPeriodChangeEmitter()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(item => this.periodChanged(item));\r\n    }\r\n\r\n    /** Set period information.\r\n     * After that call populateData function.\r\n     * @param periodInformation -> information about period\r\n     */\r\n    periodChanged(periodInformation: any) {\r\n        this._periodInformation = periodInformation;\r\n        this.populateData();\r\n    }\r\n\r\n    /** \r\n     * Fills in the widgets with the obtained data.\r\n     */\r\n    populateData() {\r\n        this._dashboardService.getEmployeeDashboardData(this._periodInformation.startDate.clone().format(\"MM-DD-YYYY\"), this._periodInformation.endDate.clone().format(\"MM-DD-YYYY\")).subscribe((data: any) => {\r\n            this.dashboardData = {\r\n                \"scheduledJobs\": data.scheduledJobs,\r\n                \"scheduledHours\": data.scheduledHours,\r\n                \"approvedAbsenceHours\": data.approvedAbsenceHours,\r\n    \r\n                \"nextShift\": data.nextJob,\r\n                \"upcomingLeave\": data.upcomingLeave,\r\n    \r\n                \"numberOfJobOffers\": data.numberOfJobOffers,\r\n                \"numberOfJobTrades\": data.numberOfJobTrades\r\n            };\r\n            if(this.dashboardData.nextShift){\r\n                if(moment(this.dashboardData.nextShift.jobStartDate).clone().isSame(moment(this.dashboardData.nextShift.jobEndDate).clone(), 'day')){\r\n                    this.dashboardData.nextShift.isMultiday = false;\r\n                }\r\n            }\r\n            if(parseInt(this.dashboardData.scheduledHours) > 0){\r\n                this.dashboardData.scheduledHours = this.convertTicksToTime(this.dashboardData.scheduledHours);\r\n            }\r\n            if(parseInt(this.dashboardData.approvedAbsenceHours) > 0){\r\n                this.dashboardData.approvedAbsenceHours = this.convertTicksToTime(this.dashboardData.approvedAbsenceHours);\r\n            }\r\n            if(data.nextJob) {\r\n                let dayDiff = 0;\r\n                const startDate = moment(data.nextJob.jobStartDate).clone().set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\r\n                const endDate = moment(data.nextJob.jobEndDate).clone().set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\r\n                dayDiff = (endDate.diff(startDate, 'days'));\r\n\r\n                if(dayDiff > 1) {\r\n                    this.jobIsMultiday = true;\r\n                } else {\r\n                    this.jobIsMultiday = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Takes the passed value and converts it to HH:MM format\r\n     * @param ticks -> timeStamp to convert\r\n     * @returns -> formatted value\r\n     */\r\n    convertTicksToTime(ticks: string): string{\r\n        const numOfHrs = Number(ticks) / this.ticksPerMillisecond;\r\n        let hours = Math.trunc(moment.duration(numOfHrs).asHours()).toString();\r\n        let minutes = moment.duration(numOfHrs).minutes().toString();\r\n        hours = hours.length < 2 ? '0' + hours : hours;\r\n        minutes = minutes.length < 2 ? '0' + minutes : minutes;\r\n        const hoursMinutes = hours + ':' + minutes;\r\n\r\n        return hoursMinutes;\r\n    }\r\n\r\n    /** \r\n     * Get permissions for current employee\r\n     */\r\n    getProfile() {\r\n        let permissions = this._userRoleService.getGlobalAccountPermissions();\r\n        this.setPermissions(permissions);\r\n    }\r\n\r\n    setPermissions(permissions){\r\n        if(permissions) {\r\n            this.canEmployeeAccessAbsence = permissions.canEmployeeAccessAbsenceCalendar;\r\n            this.canEmployeeAccessJobOffers = permissions.canEmployeeAccessJobOffers;\r\n            this.canEmployeeAccessTradeBoard = permissions.canEmployeeAccessTradeBoard;\r\n            this.canEmployeeAccesSchedule = permissions.canEmployeeViewSchedule;\r\n        } else {\r\n            this.canEmployeeAccessAbsence = false;\r\n            this.canEmployeeAccessJobOffers = false;\r\n            this.canEmployeeAccessTradeBoard = false;\r\n            this.canEmployeeAccesSchedule = false;\r\n        }\r\n    }\r\n\r\n    /** Get current tab name of the selected tab on changing the tab\r\n     * @param tabChangeEvent -> event on tab changed\r\n     */\r\n    emplDashboardTabChanged(tabChangeEvent: MatTabChangeEvent) {\r\n        this.currentTab = tabChangeEvent.tab.textLabel;\r\n        this._dashboardService.emitTabChangedEvent(this.currentTab);\r\n    }\r\n\r\n    /**\r\n     * Call function for trade job\r\n     */\r\n    tradeJob(jobToTradeId: number) {\r\n        this._tradeService.getTradeWarning()\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe((message) => {\r\n            this._dialogService\r\n            .openConfirmDialog(\r\n                'TradeOffer',\r\n                message\r\n            )\r\n            .afterClosed()\r\n            .subscribe(res => {\r\n                if (res) {\r\n                    this._tradeService.offerJob(Number(this._roles.getId()), jobToTradeId)\r\n                    .pipe(takeUntil(this._completed))\r\n                    .subscribe(() => {\r\n                        this._messageService.open(\"Job offered for trade\");\r\n                        this.populateData();\r\n                        this.jobTradedEventSubject.next();\r\n                    },\r\n                    (err: HttpErrorResponse) => {\r\n                        this._messageService.open(err);\r\n                        const message = this._messageService.handleHttpError(err);\r\n                        if (err.status == 400 && message === \"The credentials you have entered for system email are invalid.\") {\r\n                            this.populateData();\r\n                            this.jobTradedEventSubject.next();\r\n                        }\r\n                    });\r\n                } else {\r\n                    this._messageService.open(\"Trade Canceled\");\r\n                }\r\n            });\r\n            \r\n        });\r\n    }\r\n\r\n    /** Upon destruction of the component,\r\n     * the subscription to the event is terminated\r\n     */\r\n    ngOnDestroy() {\r\n        this._completed.next(true);\r\n        this._completed.complete();\r\n    }\r\n}\r\n","export class UserDashboardDetails {\r\n    constructor(\r\n        public activeSchedules?: number,\r\n        public scheduleHours?: string,\r\n        public scheduleJobSlots?: number,\r\n        public assignedJobs?: number,\r\n\r\n        public scheduledHours?: number[],\r\n        public requiredHours?: number[],\r\n        public requiredVsScheduledHours?: any,\r\n        public unassignedJobs?: number,\r\n        public invalidAssignments?: number,\r\n\r\n        public isScheduleManager?: boolean,\r\n        public isAbsenceManager?: boolean,\r\n        public absenceRequestPending?: number,\r\n        public scheduleApprovalsPending?: number,\r\n    ) {}\r\n}\r\n\r\nexport class ScheduleDetailsTable{\r\n    constructor(\r\n        public id?: number,\r\n        public name?: string,\r\n        public hours?: number,\r\n        public jobs?: number,\r\n        public jobSlots?: number,\r\n        public assigned?: number,\r\n        public unassigned?: number,\r\n        public invalid?: number,\r\n    ){}\r\n}\r\n\r\nexport class AbsenceRequestTable{\r\n    constructor(\r\n        public absenceID?: number,\r\n        public absenceRequestID?: number,\r\n        public employeeName?: string,\r\n        public image?: string,\r\n        public absenceType?: string,\r\n        public startDate?: string,\r\n        public endDate?: string,\r\n        public time?: string,\r\n        public employeeComment?: string,\r\n        public statusName?: string,\r\n    ){}\r\n}\r\n\r\nexport class ScheduleApprovalsTable{\r\n    constructor(\r\n        public id?: number,\r\n        public scheduleName?: string,\r\n        public requestId?: number,\r\n        public subGroupId?: number,\r\n        public isSchedule?: boolean,\r\n        public currentView?: any,\r\n        public startDateTime?: string,\r\n        public endDateTime?: string,\r\n        public jobSlots?: number,\r\n        public assigned?: number,\r\n        public unAssigned?: number,\r\n        public invalid?: number,\r\n    ){}\r\n}","<div class=\"container-fluid\">\r\n    <div class=\"row g-user-dashboard-tab-container\">\r\n        <div class=\"col-12\">\r\n\r\n            <div class=\"row g-table-header\">\r\n                <div class=\"col-12 d-flex flex-row\">\r\n                    <div class=\"user-dashboard-seventh-row\">\r\n                        <p>Schedule</p>\r\n                    </div>\r\n                    <div class=\"user-dashboard-seventh-row\">\r\n                        <p>Hours</p>\r\n                    </div>\r\n                    <div class=\"user-dashboard-seventh-row\">\r\n                        <p>Jobs</p>\r\n                    </div>\r\n                    <div class=\"user-dashboard-seventh-row\">\r\n                        <p>Job Slots</p>\r\n                    </div>\r\n                    <div class=\"user-dashboard-seventh-row user-dashboard-hide-on-medium-screen\">\r\n                        <p>Assigned</p>\r\n                    </div>\r\n                    <div class=\"user-dashboard-seventh-row user-dashboard-hide-on-medium-screen\">\r\n                        <p>Unassigned</p>\r\n                    </div>\r\n                    <div class=\"user-dashboard-seventh-row user-dashboard-hide-on-medium-screen\">\r\n                        <p>Invalid</p>\r\n                    </div>\r\n                    <div id=\"g-actions-column-width\">\r\n                        <p>Actions</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <mat-table [dataSource]=\"data\">\r\n\r\n                        <!-- Name Column -->\r\n                        <ng-container matColumnDef=\"name\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail\">\r\n                                <span class=\"user-dashboard-mobile-label\">Name: </span>{{row.name}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n\r\n                        <!-- Hours Column -->\r\n                        <ng-container matColumnDef=\"hours\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail\">\r\n                                <span class=\"user-dashboard-mobile-label\">Hours: </span>{{convertTicksToTime(row.hours)}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Jobs Column -->\r\n                        <ng-container matColumnDef=\"jobs\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail\">\r\n                                <span class=\"user-dashboard-mobile-label\">Jobs: </span>{{row.jobs}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                            <!-- Job Slots Column -->\r\n                            <ng-container matColumnDef=\"jobSlots\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail\">\r\n                                <span class=\"user-dashboard-mobile-label\">Job Slots: </span>{{row.jobSlots}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n                        \r\n                        <!-- Assigned Column -->\r\n                        <ng-container matColumnDef=\"assigned\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail user-dashboard-hide-on-medium-screen\">\r\n                                <span class=\"user-dashboard-mobile-label\">Assigned: </span>{{row.assigned}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Unassigned Column -->\r\n                        <ng-container matColumnDef=\"unassigned\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail user-dashboard-hide-on-medium-screen\">\r\n                                <span class=\"user-dashboard-mobile-label\">Unassigned: </span>{{row.unassigned}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Invalid Column -->\r\n                        <ng-container matColumnDef=\"invalid\">\r\n                            <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail user-dashboard-hide-on-medium-screen\">\r\n                                <span class=\"user-dashboard-mobile-label\">Invalid: </span>{{row.invalid}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Actions Column -->\r\n                        <ng-container matColumnDef=\"actions\">\r\n                            <mat-cell *matCellDef=\"let row\"\r\n                                class=\"user-dashboard-visible-on-small-screen-370px\">\r\n                                <button id=\"{{row.name}}\" class=\"btn user-dashboard-details-button pull-right border-0\"\r\n                                    (click)=\"viewScheduleDetails(row)\">\r\n                                    <p>View Details</p>\r\n                                </button>\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                        <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n                    </mat-table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { ScheduleDetailsTable } from 'src/app/shared/models/userDashboardDetails';\r\nimport { DashboardService } from 'src/app/shared/services/dashboard.service';\r\n\r\n@Component({\r\n    selector: 'app-user-dashboard-schedule-details',\r\n    templateUrl: './user-dashboard-schedule-details.component.html',\r\n    styleUrls: ['./user-dashboard-schedule-details.component.scss']\r\n})\r\nexport class UserDashboardScheduleDetailsComponent implements OnInit {\r\n\r\n    /** Stores all column names for the table. */\r\n    displayedColumns: string[] = ['name', 'hours', 'jobs', 'jobSlots', 'assigned', 'unassigned', 'invalid', 'actions'];\r\n    /** Stores all data obtained from the database. */\r\n    data = new MatTableDataSource();\r\n    /** Stores all data obtained from the database. */\r\n    dataSource = new MatTableDataSource();\r\n    /** Information about start date of selected range */\r\n    startDate: any;\r\n    /** Information about end date of selected range */\r\n    endDate: any;\r\n    /** Parameter for subscription termination. */\r\n    private _completed = new Subject();\r\n    /** Subscription when the date range type is changed. */\r\n    private _subscription: any;\r\n    /** Value of selected tab.*/\r\n    currentTab = \"\";\r\n    /** Information about date range type, start date, end date... */\r\n    private _periodInformation: any;\r\n    /** Stores all data obtained from the database. */\r\n    userDashboardScheduleDetailsData: ScheduleDetailsTable[] = [];\r\n\r\n    /**\r\n     * Create a instance of UserDashboardScheduleDetailsComponent.\r\n     */\r\n    constructor(\r\n        public dialog: MatDialog,\r\n        private _dashboardService: DashboardService,\r\n        private _router: Router,\r\n    ) { }\r\n\r\n    /** \r\n     * Subscribes to an event when the period type changed\r\n     * Subscribes to an event when the tab changed\r\n     */\r\n    ngOnInit() {\r\n        this._dashboardService.getTabChangedEmitter()\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe(item => {\r\n            this.currentTab = item;\r\n            this.periodChanged(this._dashboardService.getCurrentPeriod());\r\n        });\r\n\r\n        this._dashboardService.getPeriodChangeEmitter()\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe(item => this.periodChanged(item));\r\n    }\r\n\r\n    /** Get data from database depending on the type of period\r\n     * @param periodInformation -> information about period range\r\n     */\r\n    periodChanged(periodInformation: any) {\r\n        if(this.currentTab == \"Schedule Details\" || this.currentTab == \"\"){\r\n        this._periodInformation = periodInformation;\r\n            this._dashboardService.getUserDashboardDataForScheduleDetails(this._periodInformation.startDate.clone().format(\"MM-DD-YYYY\"), this._periodInformation.endDate.clone().format(\"MM-DD-YYYY\"))\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe((data:any) => {\r\n                this.userDashboardScheduleDetailsData = data;\r\n                this.populateTableData();\r\n            });\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Fills in the table with the obtained data.\r\n     */\r\n    populateTableData() {\r\n        this.data = new MatTableDataSource(this.userDashboardScheduleDetailsData);\r\n        this.startDate = moment(this._periodInformation.startDate).format('YYYY-MM-DD');\r\n        this.endDate = moment(this._periodInformation.endDate).format('YYYY-MM-DD');\r\n    }\r\n\r\n    /**\r\n     * Navigate to selected schedule.\r\n     * @param scheduleDetail -> information about selected schedule\r\n     */\r\n    viewScheduleDetails(scheduleDetail: any) {\r\n\r\n        this._router.navigateByUrl(\"/scheduler\", {\r\n            state: {\r\n                source: 'dashboard',\r\n                scheduleID: scheduleDetail.id,\r\n                startDate: this.startDate,\r\n                endDate: this.endDate,\r\n                currentView: this._periodInformation.defaultView == \"resourceTimelinePayPeriod\" ? \"payPeriod\" : this._periodInformation.defaultView\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hide/show certain columns depending on the window width\r\n     * @param event \r\n     */\r\n    @HostListener('window:resize', ['$event'])\r\n    getScreenSize(event) {\r\n          if(event.target.innerWidth > 860 && event.target.innerWidth < 1200){\r\n            this.displayedColumns = ['name', 'hours', 'jobs', 'jobSlots', 'actions'];\r\n          }\r\n          else{\r\n            this.displayedColumns = ['name', 'hours', 'jobs', 'jobSlots', 'assigned', 'unassigned', 'invalid', 'actions'];\r\n          }\r\n    }\r\n\r\n    /**\r\n     * Takes the passed value and converts it to HH:MM format\r\n     * @param ticks -> timeStamp to convert\r\n     * @returns -> formatted value\r\n     */\r\n     convertTicksToTime(ticks: string): string{\r\n        const numOfHrs = Number(ticks) / 10000;\r\n        let hours = Math.trunc(moment.duration(numOfHrs).asHours()).toString();\r\n        let minutes = moment.duration(numOfHrs).minutes().toString();\r\n        hours = hours.length < 2 ? '0' + hours : hours;\r\n        minutes = minutes.length < 2 ? '0' + minutes : minutes;\r\n        const hoursMinutes = hours + ':' + minutes;\r\n\r\n        return hoursMinutes;\r\n    }\r\n\r\n    /** Upon destruction of the component,\r\n     * the subscription to the event is terminated\r\n     */\r\n    ngOnDestroy() {\r\n        this._completed.next(true);\r\n        this._completed.complete();\r\n    }\r\n\r\n}\r\n","<div class=\"container-fluid\">\r\n  <div class=\"row g-user-dashboard-tab-container\">\r\n      <div class=\"col-12\">\r\n\r\n          <div class=\"row g-table-header\">\r\n              <div class=\"col-12 d-flex flex-row\">\r\n                  <div class=\"user-dashboard-seventh-row\">\r\n                      <p>Schedule/Subgroup</p>\r\n                  </div>\r\n                  <div class=\"user-dashboard-seventh-row\">\r\n                      <p>Start Date</p>\r\n                  </div>\r\n                  <div class=\"user-dashboard-seventh-row\">\r\n                      <p>End Date</p>\r\n                  </div>\r\n                  <div class=\"user-dashboard-seventh-row\">\r\n                      <p>Job Slots</p>\r\n                  </div>\r\n                  <div class=\"user-dashboard-seventh-row user-dashboard-hide-on-medium-screen\">\r\n                      <p>Assigned</p>\r\n                  </div>\r\n                  <div class=\"user-dashboard-seventh-row user-dashboard-hide-on-medium-screen\">\r\n                      <p>Unassigned</p>\r\n                  </div>\r\n                  <div class=\"user-dashboard-seventh-row user-dashboard-hide-on-medium-screen\">\r\n                      <p>Invalid</p>\r\n                  </div>\r\n                  <div id=\"g-actions-column-width\">\r\n                      <p>Actions</p>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"row\">\r\n              <div class=\"col-12\">\r\n                  <mat-table [dataSource]=\"data\">\r\n\r\n                      <!-- Name Column -->\r\n                      <ng-container matColumnDef=\"name\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail\">\r\n                              <span class=\"user-dashboard-mobile-label\">Name: </span>{{row.scheduleName}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n\r\n                      <!-- Hours Column -->\r\n                      <ng-container matColumnDef=\"startDate\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail\">\r\n                              <span class=\"user-dashboard-mobile-label\">Start Date: </span>{{row.startDateTime | DateDashboardTransformPipe}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <!-- Jobs Column -->\r\n                      <ng-container matColumnDef=\"endDate\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail\">\r\n                              <span class=\"user-dashboard-mobile-label\">Jobs: </span>{{row.endDateTime | DateDashboardTransformPipe}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                          <!-- Job Slots Column -->\r\n                          <ng-container matColumnDef=\"jobSlots\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail\">\r\n                              <span class=\"user-dashboard-mobile-label\">Job Slots: </span>{{row.jobSlots}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n                      \r\n                      <!-- Assigned Column -->\r\n                      <ng-container matColumnDef=\"assigned\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail user-dashboard-hide-on-medium-screen\">\r\n                              <span class=\"user-dashboard-mobile-label\">Assigned: </span>{{row.assigned}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <!-- Unassigned Column -->\r\n                      <ng-container matColumnDef=\"unassigned\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail user-dashboard-hide-on-medium-screen\">\r\n                              <span class=\"user-dashboard-mobile-label\">Unassigned: </span>{{row.unAssigned}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <!-- Invalid Column -->\r\n                      <ng-container matColumnDef=\"invalid\">\r\n                          <mat-cell *matCellDef=\"let row\" class=\"user-dashboard-schedule-detail user-dashboard-hide-on-medium-screen\">\r\n                              <span class=\"user-dashboard-mobile-label\">Invalid: </span>{{row.invalid}}\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <!-- Actions Column -->\r\n                      <ng-container matColumnDef=\"actions\">\r\n                          <mat-cell *matCellDef=\"let row\"\r\n                              class=\"user-dashboard-visible-on-small-screen-370px\">\r\n                              <button id=\"{{row.name}}\" class=\"btn user-dashboard-details-button pull-right border-0\"\r\n                                  (click)=\"viewScheduleApprovalsDetails(row)\">\r\n                                  <p>View Details</p>\r\n                              </button>\r\n                          </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n                  </mat-table>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</div>","import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Router } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { ScheduleApprovalsTable } from 'src/app/shared/models/userDashboardDetails';\r\nimport { DashboardService } from 'src/app/shared/services/dashboard.service';\r\n\r\n@Component({\r\n    selector: 'app-user-dashboard-schedule-approvals',\r\n    templateUrl: './user-dashboard-schedule-approvals.component.html',\r\n    styleUrls: ['./user-dashboard-schedule-approvals.component.scss']\r\n})\r\nexport class UserDashboardScheduleApprovalsComponent implements OnInit {\r\n\r\n    /** Stores all column names for the table. */\r\n    displayedColumns: string[] = ['name', 'startDate', 'endDate', 'jobSlots', 'assigned', 'unassigned', 'invalid', 'actions'];\r\n    /** Stores all data obtained from the database. */\r\n    data = new MatTableDataSource();\r\n    /** Stores all data obtained from the database. */\r\n    dataSource = new MatTableDataSource();\r\n    /** Information about date range type, start date, end date... */\r\n    _periodInformation: any;\r\n    /** Parameter for subscription termination. */\r\n    private _completed = new Subject();\r\n    /** Value of selected tab.*/\r\n    currentTab = \"\";\r\n    /** Subscription when the date range type is changed. */\r\n    private _subscription: any;\r\n    /** Stores all data obtained from the database. */\r\n    userDashboardScheduleApprovalsData: ScheduleApprovalsTable[] = [];\r\n    /** Information about start date of selected range */\r\n    startDate: any;\r\n    /** Information about end date of selected range */\r\n    endDate: any;\r\n\r\n    /**\r\n     * Create a instance of UserDashboardScheduleApprovalsComponent.\r\n     */\r\n    constructor(\r\n        private _dashboardService: DashboardService,\r\n        private _router: Router,\r\n    ) { }\r\n\r\n    /** \r\n     * Subscribes to an event when the period type changed\r\n     * Subscribes to an event when the tab changed\r\n     */\r\n    ngOnInit() {\r\n        this._dashboardService.getTabChangedEmitter()\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe(item => {\r\n            this.currentTab = item;\r\n            this.periodChanged(this._dashboardService.getCurrentPeriod());\r\n        });\r\n\r\n        this._dashboardService.getPeriodChangeEmitter()\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe(item => this.periodChanged(item));\r\n    }\r\n\r\n    /** Get data from database depending on the type of period\r\n     * @param periodInformation -> information about period range\r\n     */\r\n    periodChanged(periodInformation: any){\r\n        if(this.currentTab == \"Schedule Approvals\"){\r\n            this._periodInformation = periodInformation;\r\n            this._dashboardService.getUserDashboardDataForScheduleApprovals(this._periodInformation.startDate.clone().format(\"MM-DD-YYYY\"), this._periodInformation.endDate.clone().format(\"MM-DD-YYYY\"))\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe((data:any) => {\r\n                this.userDashboardScheduleApprovalsData = data;\r\n                this.populateTableData();\r\n            });\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Fills in the table with the obtained data.\r\n     */\r\n    populateTableData() {\r\n        this.data = new MatTableDataSource(this.userDashboardScheduleApprovalsData);\r\n        this.startDate = moment(this._periodInformation.startDate).format('YYYY-MM-DD');\r\n        this.endDate = moment(this._periodInformation.endDate).format('YYYY-MM-DD');\r\n    }\r\n\r\n    /**\r\n     * Navigate to selected schedule.\r\n     * @param scheduleDetail -> information about selected schedule\r\n     */\r\n    viewScheduleApprovalsDetails(scheduleApproval: any) {\r\n        this._router.navigateByUrl(\"/scheduler\", {\r\n            state: {\r\n                source: 'approval-details',\r\n                approvalDetailsFromDashboard: true,\r\n                scheduleID: scheduleApproval.scheduleId,\r\n                requestId: scheduleApproval.id,\r\n                subGroupId: scheduleApproval.subGroupId,\r\n                startDate: scheduleApproval.startDateTime,\r\n                endDate: scheduleApproval.endDateTime,\r\n                isSchedule: scheduleApproval.isSchedule,\r\n                currentView: scheduleApproval.currentView\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hide/show certain columns depending on the window width\r\n     * @param event \r\n     */\r\n    @HostListener('window:resize', ['$event'])\r\n    getScreenSize(event) {\r\n          if(event.target.innerWidth > 860 && event.target.innerWidth < 1200){\r\n            this.displayedColumns = ['name', 'startDate', 'endDate', 'jobSlots', 'actions'];\r\n          }\r\n          else{\r\n            this.displayedColumns = ['name', 'startDate', 'endDate', 'jobSlots', 'assigned', 'unassigned', 'invalid', 'actions'];\r\n          }\r\n    }\r\n\r\n    /** Upon destruction of the component,\r\n     * the subscription to the event is terminated\r\n     */\r\n    ngOnDestroy() {\r\n        this._completed.next(true);\r\n        this._completed.complete();\r\n    }\r\n\r\n}\r\n","<div class=\"container-fluid\">\r\n    <div class=\"g-thin-black-scroll-bar\">\r\n        <div class=\"row\" *ngIf=\"canSeeScheduleDetails\">\r\n            <div class=\"col-xl-3 col-sm-6 col-12 user-dashboard-active-schedules\">\r\n                <div class=\"d-flex justify-content-between user-dashboard-card\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span class=\"user-dashboard-card-title\">Active Schedules</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <span class=\"user-dashboard-card-number\">\r\n                                {{dashboardData.activeSchedules}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <i class=\"fa fa-calendar\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xl-3 col-sm-6 col-12 user-dashboard-schedule-hours\">\r\n                <div class=\"d-flex justify-content-between user-dashboard-card\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span class=\"user-dashboard-card-title\">Schedule Hours</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <span class=\"user-dashboard-card-number\">\r\n                                {{dashboardData.scheduleHours}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xl-3 col-sm-6 col-12 user-dashboard-schedule-job-slots\">\r\n                <div class=\"d-flex justify-content-between user-dashboard-card\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span class=\"user-dashboard-card-title\">Schedule Job Slots</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <span class=\"user-dashboard-card-number\">\r\n                                {{dashboardData.scheduleJobSlots}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <i class=\"fa fa-suitcase\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xl-3 col-sm-6 col-12\">\r\n                <div class=\"d-flex justify-content-between user-dashboard-card\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <span class=\"user-dashboard-card-title\">Assigned Jobs</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <span class=\"user-dashboard-card-number\">\r\n                                {{dashboardData.assignedJobs}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <i class=\"fa fa-male\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row mt-3\" *ngIf=\"canSeeScheduleDetails\">\r\n            <div class=\"col-xl-6 col-12 user-dashboard-schedule-problem\">\r\n                <div class=\"d-flex justify-content-between user-dashboard-card2\">\r\n                    <div class=\"row\">\r\n\r\n                        <div class=\"col-12\">\r\n                            <span class=\"font-12\">Required vs Scheduled Hours</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <div class=\"flex\">\r\n                                <div class=\"flex-item\">\r\n                                    <div class=\"user-dashboard-scheduled-hours\">\r\n                                        <div class=\"graph\">\r\n                                            <canvas class=\"user-dashboard-canvas-scheduled-hours\" baseChart\r\n                                                height=\"350\"\r\n                                                [data]=\"lineChartData\"\r\n                                                [labels]=\"lineChartLabels\"\r\n                                                [options]=\"lineChartOptions\"\r\n                                                [legend]=\"lineChartLegend\"\r\n                                                [type]=\"lineChartType\">\r\n                                            </canvas>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xl-6 col-12\">\r\n                <div class=\"user-dashboard-card2\">\r\n                    <div class=\"row\">\r\n\r\n                        <div class=\"col-12\">\r\n                            <span class=\"font-12\">Schedule Problems</span>\r\n                        </div>\r\n                        <div class=\"col-12\">\r\n                            <div class=\"d-flex justify-content-start\">\r\n                                <div class=\"user-dashboard-scheduled-problem\">\r\n                                    <div class=\"graph\">\r\n                                        <canvas class=\"user-dashboard-canvas-scheduled-problem\" baseChart\r\n                                            width=\"250\"\r\n                                            height=\"250\"\r\n                                            [datasets]=\"doughnutChartData\"\r\n                                            [labels]=\"doughnutChartLabels\"\r\n                                            [type]=\"doughnutChartType\"\r\n                                            [options]=\"{ plugins: { legend: { display: false }}}\">\r\n                                        </canvas>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"d-flex user-dashboard-schedule-problems\">\r\n                                    <div class=\"row justify-content-center align-self-center\">\r\n                                        <div class=\"col-12\">\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col-12 user-dashboard-hide-on-large-screen\">\r\n                                                    <span class=\"user-dashboard-chart-legend-dark-blue\">{{ dashboardData.unassignedJobs }}</span>\r\n                                                </div>\r\n                                                <div class=\"col-12\">\r\n                                                    <span class=\"user-dashboard-chart-legend-dark-blue user-dashboard-hide-on-small-screen\">{{ dashboardData.unassignedJobs }}</span>\r\n                                                    <span class=\"font-12\">Unassigned Jobs</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"col-12\">\r\n                                            <hr class=\"float-left\" id=\"user-dashboard-divider-between-schedule-problems\">\r\n                                        </div>\r\n                                        <div class=\"col-12\">\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col-12 user-dashboard-hide-on-large-screen\">\r\n                                                    <span class=\"user-dashboard-chart-legend-blue\">{{ dashboardData.invalidAssignments }}</span>\r\n                                                </div>\r\n                                                <div class=\"col-12\">\r\n                                                    <span class=\"user-dashboard-chart-legend-blue user-dashboard-hide-on-small-screen\">{{ dashboardData.invalidAssignments }}</span>\r\n                                                    <span class=\"font-12 blue-text\">Invalid Assignments</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row mt-3\" *ngIf=\"canSeeScheduleDetails || dashboardData.isAbsenceManager || dashboardData.isScheduleManager\">\r\n            <div class=\"col-12\">\r\n                <div class=\"user-dashboard-card3\">\r\n                    <mat-tab-group class=\"sys-pref-mat-group g-dashboard-table-labels\" #dashboardTabs (selectedTabChange)=\"userDashboardTabChanged($event)\">\r\n\r\n                        <!-- Schedule Details -->\r\n                        <mat-tab *ngIf=\"canSeeScheduleDetails\" label=\"Schedule Details\">\r\n                            <ng-template mat-tab-label>\r\n                                <p class=\"g-font-size-12\">\r\n                                    Schedule Details\r\n                                </p>\r\n                            </ng-template>\r\n                            <app-user-dashboard-schedule-details></app-user-dashboard-schedule-details>\r\n                        </mat-tab>\r\n                        <!-- Absence Requests -->\r\n                        <!-- <mat-tab label=\"Absence Requests\" *ngIf=\"dashboardData.isAbsenceManager\">\r\n                            <ng-template mat-tab-label>\r\n                                <p class=\"g-font-size-12\">\r\n                                    Absence Requests ({{ dashboardData.absenceRequestPending }} pending)\r\n                                </p>\r\n                            </ng-template>\r\n                            <app-user-dashboard-absence-requests></app-user-dashboard-absence-requests>\r\n                        </mat-tab> -->\r\n                        <!-- Schedule Approvals -->\r\n                        <mat-tab label=\"Schedule Approvals\" *ngIf=\"dashboardData.isScheduleManager\">\r\n                            <ng-template mat-tab-label>\r\n                                <p class=\"g-font-size-12\">\r\n                                    Schedule Approvals ({{ dashboardData.scheduleApprovalsPending }} pending)\r\n                                </p>\r\n                            </ng-template>\r\n                            <app-user-dashboard-schedule-approvals></app-user-dashboard-schedule-approvals>\r\n                        </mat-tab>\r\n\r\n                    </mat-tab-group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTabChangeEvent, MatTabGroup } from '@angular/material/tabs';\r\nimport { ChartConfiguration, ChartOptions, ChartType } from 'chart.js';\r\nimport * as moment from 'moment';\r\nimport { BaseChartDirective } from 'ng2-charts';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { UserDashboardDetails } from 'src/app/shared/models/userDashboardDetails';\r\nimport { DashboardService } from 'src/app/shared/services/dashboard.service';\r\n\r\n@Component({\r\n    selector: 'app-user-dashboard',\r\n    templateUrl: './user-dashboard.component.html',\r\n    styleUrls: ['./user-dashboard.component.scss']\r\n})\r\n\r\nexport class UserDashboardComponent implements OnInit {\r\n\r\n    /** Stores all data obtained from the database. */\r\n    dashboardData: UserDashboardDetails = new UserDashboardDetails(0, \"0\", 0, 0, [0], [0], {}, 0, 0, false, false, 0, 0);\r\n    /** Subscription when the date range type is changed. */\r\n    subscription: any;\r\n    /** Schedule Details view permission indicator. */\r\n    canSeeScheduleDetails = false;\r\n    /** Information about date range type, start date, end date... */\r\n    periodInformation: any;\r\n    /** Parameter for subscription termination. */\r\n    private _completed = new Subject();\r\n    /** Selected tab */\r\n    currentTab = \"Schedule Details\";\r\n    /**Setup for line chart data and doughnut chart data */\r\n    public lineChartData: ChartConfiguration<'line'>['data'];\r\n    public lineChartLabels: string[] = [];\r\n    public lineChartOptions: (ChartOptions & { annotation: any }) = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            // We use this empty structure as a placeholder for dynamic theming.\r\n            x: {},\r\n            y: {\r\n                beginAtZero: true,\r\n                ticks: {\r\n                    callback: function (label, index, labels) {\r\n                        if (Math.floor(+label) === label) {\r\n                            return label;\r\n                        }\r\n\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        annotation: {\r\n            annotations: [\r\n                {\r\n                },\r\n            ],\r\n        },\r\n        elements: { line: { tension: 0 } }\r\n    };\r\n\r\n    public lineChartLegend = false;\r\n    public lineChartType: ChartType = 'line';\r\n    public doughnutChartLabels: string[] = ['Unassigned Jobs', 'Invalid Assignments'];\r\n    public doughnutChartData: ChartConfiguration<'doughnut'>['data']['datasets'];\r\n    public doughnutChartType: ChartType = 'doughnut';\r\n    @ViewChild(BaseChartDirective, { static: true }) chart: BaseChartDirective;\r\n    @ViewChild(\"dashboardTabs\", { static: false }) dashboardTabs: MatTabGroup;\r\n\r\n    /**\r\n     * Create a instance of UserDashboardComponent.\r\n     */\r\n    constructor(\r\n        private _dashboardService: DashboardService,\r\n    ) { }\r\n\r\n    /** Subscribes to an event when the period type changes\r\n     * Call periodChanged function.\r\n     */\r\n    ngOnInit() {\r\n        this._dashboardService.getPeriodChangeEmitter()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(item => this.periodChanged(item));\r\n        this.lineChartData = {\r\n            labels: [\r\n                'Scheduled Hours per day',\r\n                'Required Hours per day'\r\n            ],\r\n            datasets: [\r\n                {\r\n                    data: this.dashboardData.scheduledHours,\r\n                    label: 'Scheduled Hours per day',\r\n                    fill: true,\r\n                    backgroundColor: 'rgba(148,159,177,0.2)',\r\n                    borderColor: '#1078CF',\r\n                    pointBackgroundColor: 'rgba(148,159,177,1)',\r\n                    pointBorderColor: '#fff',\r\n                    pointHoverBackgroundColor: '#fff',\r\n                    pointHoverBorderColor: 'rgba(148,159,177,0.8)'\r\n                },\r\n                {\r\n                    data: this.dashboardData.requiredHours,\r\n                    label: 'Required Hours per day',\r\n                    fill: true,\r\n                    backgroundColor: 'rgba(77,83,96,0.2)',\r\n                    borderColor: '#eff3f7',\r\n                    pointBackgroundColor: 'rgba(77,83,96,1)',\r\n                    pointBorderColor: '#fff',\r\n                    pointHoverBackgroundColor: '#fff',\r\n                    pointHoverBorderColor: 'rgba(77,83,96,1)'\r\n                }\r\n            ]\r\n        };\r\n\r\n        this.lineChartLabels = ['01'];\r\n        this.doughnutChartData = [\r\n            {\r\n                data: [this.dashboardData.unassignedJobs, this.dashboardData.invalidAssignments],\r\n                label: 'Series A',\r\n                backgroundColor: ['#666679', '#1078CF'],\r\n                hoverBackgroundColor: ['#555565', '#0B77CE'],\r\n                hoverBorderColor: ['#ffffff', '#ffffff']\r\n            },\r\n        ];\r\n    }\r\n\r\n    /** Set period information.\r\n     * After that call populateData function.\r\n     * @param periodInformation -> information about period\r\n     */\r\n    periodChanged(periodInformation: any) {\r\n        this.periodInformation = periodInformation;\r\n        this.populateData();\r\n    }\r\n\r\n    /**\r\n     * Fills in the widgets with the obtained data.\r\n     */\r\n    populateData() {\r\n        this._dashboardService.getUserDashboardData(this.periodInformation.startDate.clone().format(\"MM-DD-YYYY\"), this.periodInformation.endDate.clone().format(\"MM-DD-YYYY\"))\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(data => {\r\n                this.updateTabsOnSchedulePermissionCheck(data.canSeeScheduleDetails);\r\n                this.dashboardData = data;\r\n                this.dashboardData.scheduleHours = this.convertTicksToTime(this.dashboardData.scheduleHours.toString());\r\n                this.lineChartLabels = [];\r\n\r\n                if (moment(this.periodInformation.startDate).isSame(moment(this.periodInformation.endDate))) {\r\n                    this.dashboardData.requiredHours = [];\r\n                    this.dashboardData.scheduledHours = [];\r\n                    for (const item in this.dashboardData.requiredVsScheduledHours) {\r\n                        this.dashboardData.requiredHours.push(this.convertTicksToHours(this.dashboardData.requiredVsScheduledHours[item].primaryKeyOne));\r\n                        this.dashboardData.scheduledHours.push(this.convertTicksToHours(this.dashboardData.requiredVsScheduledHours[item].primaryKeyTwo));\r\n                        this.dashboardData.requiredHours.push(this.convertTicksToHours(this.dashboardData.requiredVsScheduledHours[item].primaryKeyOne));\r\n                        this.dashboardData.scheduledHours.push(this.convertTicksToHours(this.dashboardData.requiredVsScheduledHours[item].primaryKeyTwo));\r\n                        this.lineChartLabels.push(moment(item).date().toString());\r\n                        this.lineChartLabels.push(moment(item).date().toString());\r\n                    }\r\n                } else {\r\n                    this.dashboardData.requiredHours = [];\r\n                    this.dashboardData.scheduledHours = [];\r\n                    for (const item in this.dashboardData.requiredVsScheduledHours) {\r\n                        this.dashboardData.requiredHours.push(this.convertTicksToHours(this.dashboardData.requiredVsScheduledHours[item].primaryKeyOne));\r\n                        this.dashboardData.scheduledHours.push(this.convertTicksToHours(this.dashboardData.requiredVsScheduledHours[item].primaryKeyTwo));\r\n                        this.lineChartLabels.push(moment(item).date().toString());\r\n                    }\r\n                }\r\n\r\n                this.lineChartData = {\r\n                    labels: this.lineChartLabels,\r\n                    datasets: [\r\n                        {\r\n                            data: this.dashboardData.scheduledHours,\r\n                            label: 'Scheduled Hours per day',\r\n                            fill: true,\r\n                            backgroundColor: 'rgba(148,159,177,0.2)',\r\n                            borderColor: '#1078CF',\r\n                            pointBackgroundColor: 'rgba(148,159,177,1)',\r\n                            pointBorderColor: '#fff',\r\n                            pointHoverBackgroundColor: '#fff',\r\n                            pointHoverBorderColor: 'rgba(148,159,177,0.8)'\r\n                        },\r\n                        {\r\n                            data: this.dashboardData.requiredHours,\r\n                            label: 'Required Hours per day',\r\n                            fill: true,\r\n                            backgroundColor: 'rgba(77,83,96,0.2)',\r\n                            borderColor: '#eff3f7',\r\n                            pointBackgroundColor: 'rgba(77,83,96,1)',\r\n                            pointBorderColor: '#fff',\r\n                            pointHoverBackgroundColor: '#fff',\r\n                            pointHoverBorderColor: 'rgba(77,83,96,1)'\r\n                        }\r\n                    ]\r\n                };\r\n\r\n                this.doughnutChartData = [\r\n                    {\r\n                        data: [this.dashboardData.unassignedJobs, this.dashboardData.invalidAssignments],\r\n                        label: 'Series A',\r\n                        backgroundColor: ['#666679', '#1078CF'],\r\n                        hoverBackgroundColor: ['#555565', '#0B77CE'],\r\n                        hoverBorderColor: ['#ffffff', '#ffffff']\r\n                    },\r\n                    { data: [0, 0] }\r\n                ];\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Takes the passed value and converts it to HH:MM format\r\n     * @param ticks -> timeStamp to convert\r\n     * @returns -> formatted value\r\n     */\r\n    convertTicksToTime(ticks: string): string {\r\n        const numOfHrs = Number(ticks) / 10000;\r\n        let hours = Math.trunc(moment.duration(numOfHrs).asHours()).toString();\r\n        let minutes = moment.duration(numOfHrs).minutes().toString();\r\n        hours = hours.length < 2 ? '0' + hours : hours;\r\n        minutes = minutes.length < 2 ? '0' + minutes : minutes;\r\n        const hoursMinutes = hours + ':' + minutes;\r\n\r\n        return hoursMinutes;\r\n    }\r\n\r\n    /**\r\n     * Takes the passed value and converts it to HH format\r\n     * @param ticks -> timeStamp to convert\r\n     * @returns -> formatted value\r\n     */\r\n    convertTicksToHours(ticks: string) {\r\n        const numOfHrs = Number(ticks) / 10000;\r\n        let hours = Math.trunc(moment.duration(numOfHrs).asHours());\r\n        const minutes = moment.duration(numOfHrs).minutes();\r\n        if ((minutes > 30) || (minutes == 30 && hours % 2 != 0)) {\r\n            hours++;\r\n        }\r\n        return hours;\r\n    }\r\n\r\n    /** Get current tab name of the selected tab on changing the tab\r\n     * @param tabChangeEvent -> event on tab changed\r\n     */\r\n    userDashboardTabChanged(tabChangeEvent: MatTabChangeEvent) {\r\n        this.currentTab = tabChangeEvent.tab.textLabel;\r\n        this._dashboardService.emitTabChangedEvent(this.currentTab);\r\n    }\r\n\r\n    /**Updates UI based on canSeeScheduleDetails indicator */\r\n    updateTabsOnSchedulePermissionCheck(hasDashboardDetailsPermission: boolean): void {\r\n        let wasFalse = false;\r\n        if (!this.canSeeScheduleDetails) {\r\n            wasFalse = true;\r\n        }\r\n        this.canSeeScheduleDetails = hasDashboardDetailsPermission;\r\n        if (wasFalse) {\r\n            setTimeout(() => {\r\n                if (this.dashboardTabs) {\r\n                    this.dashboardTabs.selectedIndex = 0;\r\n                    let currentTabName;\r\n                    if (this.canSeeScheduleDetails) {\r\n                        currentTabName = 'Schedule Details'\r\n                    }\r\n                    // else if(this.dashboardData.isAbsenceManager){\r\n                    //     currentTabName = 'Absence Requests';\r\n                    // }\r\n                    else if (this.dashboardData.isScheduleManager) {\r\n                        currentTabName = 'Schedule Approvals';\r\n                    }\r\n                    else {\r\n                        currentTabName = '';\r\n                    }\r\n                    this._dashboardService.emitTabChangedEvent(currentTabName);\r\n                }\r\n            }, 10);\r\n        }\r\n    }\r\n\r\n    /** Upon destruction of the component,\r\n     * the subscription to the event is terminated\r\n     */\r\n    ngOnDestroy() {\r\n        this._completed.next(true);\r\n        this._completed.complete();\r\n    }\r\n}\r\n","<div [@routerTransition] class=\"container-div\">\r\n    <div class=\"container-fluid h-100 dashboard-container\">\r\n        <div class=\"row eSolve-datepicker-card eSolve-calendar-background-light\">\r\n            <div class=\"col-12\">\r\n\r\n\r\n                <label class=\"bold-text esolve-month-label margin-left-15\">{{monthLabels}}</label>\r\n\r\n                <!-- View Buttons -->\r\n                <mat-button-toggle-group [value]=\"defaultView\" class=\"eSolve-view-navigation margin-left-15\">\r\n                    <mat-button-toggle value=\"resourceTimelineDay\" (change)=\"changeDashboardView($event.value)\"\r\n                        class=\"eSolve-view-navigation\">Day\r\n                    </mat-button-toggle>\r\n                    <mat-button-toggle class=\"eSolve-view-navigation\" value=\"resourceTimelineWeek\"\r\n                        (change)=\"changeDashboardView($event.value)\">Week\r\n                    </mat-button-toggle>\r\n\r\n                    <mat-button-toggle *ngIf=\"isPayPeriodExist\" class=\"eSolve-view-navigation\" value=\"resourceTimelinePayPeriod\"\r\n                        (change)=\"changeDashboardView($event.value)\">Pay Period\r\n                    </mat-button-toggle>\r\n                </mat-button-toggle-group>\r\n\r\n                <!--Navigation Area -->\r\n                <button mat-icon-button mat-stroked-button class=\"eSolve-next-prev\" (click)=\"showPreviousDate()\">\r\n                    <mat-icon>chevron_left</mat-icon>\r\n                </button>\r\n                <button mat-icon-button mat-stroked-button class=\"eSolve-next-prev\" (click)=\"showNextDate()\">\r\n                    <mat-icon aria-hidden=\"false\">chevron_right</mat-icon>\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n        <div class=\"row eSolve-datepicker-card\">\r\n            <div class=\"col-12\">\r\n                <div *ngIf=\"role == 'User' && !isAccountSwithed\">\r\n                    <app-user-dashboard></app-user-dashboard>\r\n                </div>\r\n                <div *ngIf=\"role == 'Employee' || isAccountSwithed\">\r\n                    <app-employee-dashboard></app-employee-dashboard>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: DashboardComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule {\r\n}\r\n","import { ChangeDetectorRef, Component, NgZone, OnInit, ViewRef } from '@angular/core';\r\nimport { routerTransition } from '../../router.animations';\r\nimport { PageTitleService } from 'src/app/shared/services/page-title.service';\r\nimport { Router } from '@angular/router';\r\nimport { DashboardService } from 'src/app/shared/services/dashboard.service';\r\nimport { AsyncValidator } from 'src/app/shared/validators/asyncCustomValidators';\r\nimport { UserRoleService } from 'src/app/shared/services/user-role.service';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { DatesService } from 'src/app/shared/services/dates.service';\r\nimport { Dates } from 'src/app/shared/models/dates';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Moment } from 'moment';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { EsolveSnackbarService } from 'src/app/shared/services/esolve-snackbar.service';\r\nimport { ProfileService } from 'src/app/shared/services/profile.service';\r\nimport { AuthService } from 'src/app/shared/services/login.service';\r\n\r\n@Component({\r\n    selector: \"app-dashboard\",\r\n    templateUrl: \"./dashboard.component.html\",\r\n    styleUrls: [\"./dashboard.component.scss\"],\r\n    animations: [routerTransition()],\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n    pageTitle = \"Dashboard\";\r\n\r\n    role: string;\r\n    loggedUserID: number;\r\n    defaultView = 'resourceTimelineWeek';\r\n    monthLabels: string;\r\n\r\n    connectionIdSubscription: Subscription;\r\n\r\n    subscription: any;\r\n    isAccountSwithed = false;\r\n    isPayPeriodExist = false;\r\n    payPeriodData: Dates = null;\r\n    startDate: Moment;\r\n    endDate: Moment;\r\n    periodInformation: {\r\n        startDate: Moment;\r\n        endDate: Moment;\r\n        loggedUserID: number;\r\n        isAccountSwitched: boolean;\r\n        defaultView: string;\r\n    };\r\n    startDayOfWeekSetting: string =\r\n    window.localStorage.getItem('startDayOfWeek') ?\r\n    window.localStorage.getItem('startDayOfWeek') :\r\n    'Monday';\r\n\r\n    /** Parameter for subscription termination. */\r\n    private _completed = new Subject();\r\n\r\n    constructor(\r\n        private titleService: PageTitleService,\r\n        private router: Router,\r\n        private dashboardService: DashboardService,\r\n        private asyncValidator: AsyncValidator,\r\n        private _userRoleService: UserRoleService,\r\n        private _datesService: DatesService,\r\n        private _dashboardService: DashboardService,\r\n        private _messageService: EsolveSnackbarService,\r\n        private _profileService: ProfileService,\r\n        private _zone: NgZone,\r\n        private ref:ChangeDetectorRef,\r\n        private _authService: AuthService\r\n\r\n    ) {\r\n        const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\r\n\r\n        /**Detection required for running in Mozilla Firefox Browser */\r\n        router.events.subscribe((uri)=> {\r\n            if (this.ref && !(this.ref as ViewRef).destroyed) {\r\n                _zone.run(() => this.ref.detectChanges());\r\n            }\r\n        });\r\n        if (isLoggedIn !== \"true\") {\r\n            _authService.logout(true);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.titleService.sendTitle(this.pageTitle);\r\n        this.getRole();\r\n        this.populateData();\r\n        this.subscription = this.dashboardService\r\n            .getAccountSwitchedEmitter()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe((res) => {\r\n                this.isAccountSwithed = res;\r\n                this.populateData();\r\n            });\r\n    }\r\n\r\n    populateData() {\r\n        this.getPayPeriod();\r\n        this.getLoggedUserID();\r\n        this.getData();\r\n    }\r\n\r\n    changeDashboardView(viewInterval: any): void {\r\n        let currentDate = moment();\r\n        currentDate.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\r\n\r\n        if (\r\n            !this.isPayPeriodExist &&\r\n            viewInterval == \"resourceTimelinePayPeriod\"\r\n        ) {\r\n            this.defaultView = \"resourceTimelineWeek\";\r\n        } else {\r\n            this.defaultView = viewInterval;\r\n        }\r\n\r\n        if (this.defaultView == \"resourceTimelineWeek\") {\r\n            this.startDate = this._datesService.getStartDateOfWeek(currentDate);\r\n            this.endDate = this._datesService.getEndDateOfWeek(currentDate);\r\n            this.monthLabels =\r\n                this.startDate.format(\"DD MMM YYYY\") +\r\n                \" - \" +\r\n                this.endDate.format(\"DD MMM YYYY\");\r\n        } else if (this.defaultView == \"resourceTimelineDay\") {\r\n            this.startDate = currentDate;\r\n            this.endDate = currentDate;\r\n            this.monthLabels = this.startDate.format(\"DD MMM YYYY\");\r\n        } else if (this.defaultView == \"resourceTimelinePayPeriod\") {\r\n            let startDate = moment(this.payPeriodData.payPeriodStartDate);\r\n            let endDate = startDate.clone();\r\n            if (this.payPeriodData.isMonthlyPayPeriod) {\r\n                const dayInMonth = moment(\r\n                    this.payPeriodData.payPeriodStartDate\r\n                ).daysInMonth();\r\n                endDate = moment(startDate).add(dayInMonth - 1, \"days\");\r\n            } else {\r\n                endDate = moment(endDate).add(\r\n                    this.payPeriodData.payPeriodNumberOfDays - 1,\r\n                    \"days\"\r\n                );\r\n            }\r\n            let isInRange =\r\n                moment(currentDate).isBetween(startDate, endDate) ||\r\n                moment(currentDate).isSame(startDate) ||\r\n                moment(currentDate).isSame(endDate);\r\n            while (!isInRange && !currentDate.isBefore(startDate)) {\r\n                if (this.payPeriodData.isMonthlyPayPeriod) {\r\n                    startDate = moment(startDate).add(1, \"month\");\r\n                    const dayInMonth = moment(startDate).daysInMonth();\r\n                    endDate = moment(startDate).add(dayInMonth - 1, \"days\");\r\n                } else {\r\n                    startDate = moment(startDate).add(\r\n                        this.payPeriodData.payPeriodNumberOfDays,\r\n                        \"days\"\r\n                    );\r\n                    endDate = moment(endDate).add(\r\n                        this.payPeriodData.payPeriodNumberOfDays,\r\n                        \"days\"\r\n                    );\r\n                }\r\n                isInRange =\r\n                    moment(currentDate).isBetween(startDate, endDate) ||\r\n                    moment(currentDate).isSame(startDate) ||\r\n                    moment(currentDate).isSame(endDate);\r\n            }\r\n            this.startDate = startDate;\r\n            this.endDate = endDate;\r\n            this.monthLabels =\r\n                startDate.format(\"DD MMM YYYY\") +\r\n                \" - \" +\r\n                endDate.format(\"DD MMM YYYY\");\r\n        }\r\n        this.periodInformation = {\r\n            startDate: this.startDate,\r\n            endDate: this.endDate,\r\n            loggedUserID: this.loggedUserID,\r\n            isAccountSwitched: this.isAccountSwithed,\r\n            defaultView: this.defaultView,\r\n        };\r\n        this._dashboardService.emitPeriodChangeEvent(this.periodInformation);\r\n    }\r\n\r\n    showPreviousDate() {\r\n        if (this.defaultView == \"resourceTimelineWeek\") {\r\n            this.startDate = moment(this.startDate).add(-1, \"week\");\r\n            this.endDate = moment(this.endDate).add(-1, \"week\");\r\n            this.monthLabels =\r\n                this.startDate.format(\"DD MMM YYYY\") +\r\n                \" - \" +\r\n                this.endDate.format(\"DD MMM YYYY\");\r\n        } else if (this.defaultView == \"resourceTimelineDay\") {\r\n            this.startDate = moment(this.startDate).add(-1, \"days\");\r\n            this.endDate = moment(this.endDate).add(-1, \"days\");\r\n            this.monthLabels = this.startDate.format(\"DD MMM YYYY\");\r\n        } else if (this.defaultView == \"resourceTimelinePayPeriod\") {\r\n            if (this.payPeriodData.isMonthlyPayPeriod) {\r\n                this.startDate = moment(this.startDate).add(-1, \"month\");\r\n                const dayInMonth = moment(this.startDate).daysInMonth();\r\n                this.endDate = moment(this.startDate).add(\r\n                    dayInMonth - 1,\r\n                    \"days\"\r\n                );\r\n            } else {\r\n                this.startDate = moment(this.startDate).add(\r\n                    -this.payPeriodData.payPeriodNumberOfDays,\r\n                    \"days\"\r\n                );\r\n                this.endDate = moment(this.endDate).add(\r\n                    -this.payPeriodData.payPeriodNumberOfDays,\r\n                    \"days\"\r\n                );\r\n            }\r\n            this.monthLabels =\r\n                this.startDate.format(\"DD MMM YYYY\") +\r\n                \" - \" +\r\n                this.endDate.format(\"DD MMM YYYY\");\r\n        }\r\n        this.periodInformation = {\r\n            startDate: this.startDate,\r\n            endDate: this.endDate,\r\n            loggedUserID: this.loggedUserID,\r\n            isAccountSwitched: this.isAccountSwithed,\r\n            defaultView: this.defaultView,\r\n        };\r\n        this._dashboardService.emitPeriodChangeEvent(this.periodInformation);\r\n    }\r\n\r\n    showNextDate() {\r\n        if (this.defaultView == \"resourceTimelineWeek\") {\r\n            this.startDate = moment(this.startDate).add(1, \"week\");\r\n            this.endDate = moment(this.endDate).add(1, \"week\");\r\n            this.monthLabels =\r\n                this.startDate.format(\"DD MMM YYYY\") +\r\n                \" - \" +\r\n                this.endDate.format(\"DD MMM YYYY\");\r\n        } else if (this.defaultView == \"resourceTimelineDay\") {\r\n            this.startDate = moment(this.startDate).add(1, \"days\");\r\n            this.endDate = moment(this.endDate).add(1, \"days\");\r\n            this.monthLabels = this.startDate.format(\"DD MMM YYYY\");\r\n        } else if (this.defaultView == \"resourceTimelinePayPeriod\") {\r\n            if (this.payPeriodData.isMonthlyPayPeriod) {\r\n                this.startDate = moment(this.startDate).add(1, \"month\");\r\n                const dayInMonth = moment(this.startDate).daysInMonth();\r\n                this.endDate = moment(this.startDate).add(\r\n                    dayInMonth - 1,\r\n                    \"days\"\r\n                );\r\n            } else {\r\n                this.startDate = moment(this.startDate).add(\r\n                    this.payPeriodData.payPeriodNumberOfDays,\r\n                    \"days\"\r\n                );\r\n                this.endDate = moment(this.endDate).add(\r\n                    this.payPeriodData.payPeriodNumberOfDays,\r\n                    \"days\"\r\n                );\r\n            }\r\n            this.monthLabels =\r\n                this.startDate.format(\"DD MMM YYYY\") +\r\n                \" - \" +\r\n                this.endDate.format(\"DD MMM YYYY\");\r\n        }\r\n        this.periodInformation = {\r\n            startDate: this.startDate,\r\n            endDate: this.endDate,\r\n            loggedUserID: this.loggedUserID,\r\n            isAccountSwitched: this.isAccountSwithed,\r\n            defaultView: this.defaultView,\r\n        };\r\n        this._dashboardService.emitPeriodChangeEvent(this.periodInformation);\r\n    }\r\n\r\n    getPayPeriod() {\r\n        this._datesService\r\n            .getDate()\r\n            .pipe(takeUntil(this._completed))\r\n            .subscribe(\r\n                (data: Dates) => {\r\n                    if (data.isMonthlyPayPeriod || data.payPeriodNumberOfDays) {\r\n                        this.isPayPeriodExist = true;\r\n                        this.payPeriodData = data;\r\n                    } else {\r\n                        this.isPayPeriodExist = false;\r\n                    }\r\n                    if (data.scheduleInitialDateRange) {\r\n                        switch (data.scheduleInitialDateRange) {\r\n                            case \"Day\": {\r\n                                this.changeDashboardView(\"resourceTimelineDay\");\r\n                                break;\r\n                            }\r\n                            case \"payPeriod\": {\r\n                                this.changeDashboardView(\"resourceTimelinePayPeriod\");\r\n                                break;\r\n                            }\r\n                            default: {\r\n                                this.changeDashboardView(\"resourceTimelineWeek\");\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this.changeDashboardView(\"resourceTimelineWeek\");\r\n                    }\r\n                },\r\n                (err: HttpErrorResponse) => {\r\n                    this._messageService.open(err);\r\n                }\r\n            );\r\n    }\r\n\r\n    private getRole() {\r\n        this._userRoleService.loggedUserRole.subscribe((role) => {\r\n            this.role = role;\r\n        });\r\n    }\r\n\r\n    private getLoggedUserID() {\r\n        this._userRoleService.loggedUserId.subscribe((id) => {\r\n            this.loggedUserID = id;\r\n        });\r\n    }\r\n\r\n    getData() {\r\n        this.dashboardService\r\n        .getData()\r\n        .pipe(takeUntil(this._completed))\r\n        .subscribe((data) => {\r\n            this.asyncValidator.getDatePreferences();\r\n        });\r\n    }\r\n\r\n    /** Upon destruction of the component,\r\n     * the subscription to the event is terminated\r\n     */\r\n    ngOnDestroy() {\r\n        this._completed.next(true);\r\n        this._completed.complete();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbCarouselModule, NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { StatModule } from '../../shared';\r\nimport { MaterialModule } from 'src/app/material.module';\r\nimport { NgChartsModule  } from 'ng2-charts';\r\nimport { UserDashboardComponent } from './user-dashboard/user-dashboard.component';\r\nimport { UserDashboardScheduleDetailsComponent } from './user-dashboard/components/user-dashboard-schedule-details/user-dashboard-schedule-details.component';\r\nimport { UserDashboardAbsenceRequestsComponent } from './user-dashboard/components/user-dashboard-absence-requests/user-dashboard-absence-requests.component';\r\nimport { UserDashboardScheduleApprovalsComponent } from './user-dashboard/components/user-dashboard-schedule-approvals/user-dashboard-schedule-approvals.component';\r\nimport { DateDashboardTransformPipe, DateTimeDashboardTransformPipe, TimeDashboardTransformPipe } from 'src/app/shared/utils/dateDashboardTransformPipe';\r\nimport { EmployeeDashboardComponent } from './employee-dashboard/employee-dashboard.component';\r\nimport { EmployeeDashboardJobOffersComponent } from './employee-dashboard/components/employee-dashboard-job-offers/employee-dashboard-job-offers.component';\r\nimport { EmployeeDashboardMyScheduleComponent } from './employee-dashboard/components/employee-dashboard-my-schedule/employee-dashboard-my-schedule.component';\r\nimport { EmployeeDashboardTradeBoardsComponent } from './employee-dashboard/components/employee-dashboard-trade-boards/employee-dashboard-trade-boards.component';\r\nimport { localeDateFormatMM, monthYearLabelFormatMMM } from 'src/app/app.module';\r\nimport {  DateAdapter, MAT_DATE_FORMATS } from \"@angular/material/core\";\r\nimport { CustomDateAdapter } from 'src/app/shared/utils/custom-date-adapter';\r\n\r\nexport const MY_FORMATS = {\r\n    parse: {\r\n        dateInput: [\r\n            localeDateFormatMM\r\n        ]\r\n    },\r\n    display: {\r\n        dateInput: localeDateFormatMM,\r\n        monthYearLabel: monthYearLabelFormatMMM\r\n    }\r\n};\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        NgbCarouselModule,\r\n        NgbAlertModule,\r\n        DashboardRoutingModule,\r\n        StatModule,\r\n        MaterialModule,\r\n        NgChartsModule ,\r\n    ],\r\n    declarations: [\r\n        DashboardComponent,\r\n        EmployeeDashboardComponent,\r\n        UserDashboardComponent,\r\n        UserDashboardScheduleDetailsComponent,\r\n        UserDashboardAbsenceRequestsComponent,\r\n        UserDashboardScheduleApprovalsComponent,\r\n        DateDashboardTransformPipe,\r\n        DateTimeDashboardTransformPipe,\r\n        TimeDashboardTransformPipe,\r\n        EmployeeDashboardMyScheduleComponent,\r\n        EmployeeDashboardJobOffersComponent,\r\n        EmployeeDashboardTradeBoardsComponent,\r\n    ],\r\n    providers: [\r\n        {\r\n            provide: DateAdapter ,\r\n            useClass: CustomDateAdapter\r\n        },\r\n        {\r\n            provide: MAT_DATE_FORMATS,\r\n            useValue: MY_FORMATS\r\n        },\r\n    ]\r\n})\r\nexport class DashboardModule {}\r\n"],"x_google_ignoreList":[]}