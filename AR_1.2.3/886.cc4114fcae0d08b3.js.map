{"version":3,"file":"886.cc4114fcae0d08b3.js","mappings":"sQAUYA,oBAAsCA,yDAASA,8BAAqB,GAChEA,+BACJA,iDACAA,oBAAsCA,yDAASA,8BAAqB,GAChEA,+BACJA,iDACAA,oBAAsCA,yDAASA,0BAAiB,GAC5DA,4BACJA,SCdZ,MAAMC,EAAiB,CACnB,CACIC,KAAM,GAAIC,UCKlB,MAAM,MAAOC,EAUXC,YACUC,EACAC,EACAC,EACAC,GAHAC,eACAA,gBACAA,wBACAA,oBAVVA,4BAAwB,EACxBA,qBAA0B,EAWxB,MAAMC,EAAaD,KAAKJ,QAAQM,uBAC7BD,EAAWE,OAAOC,QAEjBJ,KAAKK,eAD8B,WAAlCJ,EAAWE,OAAOC,MAAME,OAM7B,CAMFC,WACE,IACE,IAAIC,EAAoBR,KAAKF,iBAAiBW,8BAC9CT,KAAKU,sBAAwBF,EAAkBE,qBAGhD,CAFA,MAAQC,GACPX,KAAKU,uBAAwB,CAC9B,EACkBE,aAAaC,QAAQ,gBACrBb,KAAKK,gBACtBL,KAAKD,aAAae,QAAO,GAE3Bd,KAAKe,uBAAuBf,KAAKH,SAASmB,iBAE3C,CAKDC,sBACEjB,KAAKJ,QAAQsB,cAAc,aAC5B,CAEDC,sBACEnB,KAAKJ,QAAQsB,cAAc,sBAC5B,CAEDE,kBACEpB,KAAKD,aAAae,QAAO,EAC1B,CAQDC,uBAAuBM,GACrB,IAAIC,EAKJ,IAJe,KAAZD,GAA8B,MAAZA,KACnBA,EAAU,iBAGTA,EAAQE,MAAM,KAAKC,OAAS,EAAE,CAC/B,IAAIC,EAAiBJ,EAAQE,MAAM,KACnCF,EAAUI,EAAe,GAAK,IAAMA,EAAe,EACpD,CAEDH,EAAiBD,EAAQK,QAAQ,KAAM,KACvCJ,EAAiBA,EAAeI,QAAQ,OAAQ,KAChD1B,KAAK2B,QAAUL,CAChB,+CAhFU5B,GAAqBJ,uEAArBI,EAAqBkC,sbFXlCtC,iBAAgC,UAAhCA,CAAgC,UAAhCA,CAAgC,SAIhBA,iBACJA,QACAA,iBAAgCA,yBAAaA,QAC7CA,iBACIA,SACJA,QACAA,0BAGAA,2BAGAA,2BAGJA,mBAXQA,6DAEmEA,kEAGAA,gDAGJA,uqCELlEI,CAAb,ODGO,IAAMmC,EAAb,MAAM,MAAOA,kDAAyB,0BAAzBA,gCAHCC,cAAsBvC,GACtBuC,QAEDD,CAAb,KEDaE,EAAb,MAAM,MAAOA,kDAAkB,0BAAlBA,gCALTC,KACAH,KAISE,CAAb","names":["i0","routes","path","component","AccessDeniedComponent","constructor","_router","_prevURL","_userRoleService","_authService","this","navigation","getCurrentNavigation","extras","state","licenseOnLogin","source","ngOnInit","accessPermissions","getGlobalAccountPermissions","applicationHasLicense","error","localStorage","getItem","logout","generateMessageForUser","getPreviousUrl","redirectToDashboard","navigateByUrl","redirectToLicensing","redirectToLogIn","prevUrl","changedMessage","split","length","splitedPrevUrl","replace","message","selectors","AccessDeniedRoutingModule","RouterModule","AccessDeniedModule","CommonModule"],"sourceRoot":"webpack:///","sources":["./src/app/access-denied/access-denied.component.html","./src/app/access-denied/access-denied-routing.module.ts","./src/app/access-denied/access-denied.component.ts","./src/app/access-denied/access-denied.module.ts"],"sourcesContent":["<div class=\"access-denied-page\">\r\n    <div class=\"row justify-content-md-center access-denied-container\">\r\n        <div class=\"access-denied-panel\">\r\n            <div>\r\n                <img id=\"access_denied_logo\" src=\"assets/icons/access-denied.PNG\" alt=\"access denied\">\r\n            </div>\r\n            <div class=\"access-denied-text\">Access denied</div>\r\n            <div class=\"access-denied-message\">\r\n                You do not have access to {{message}}.\r\n            </div>\r\n            <button class=\"btn access-denied-btn\" (click)=\"redirectToDashboard()\" *ngIf=\"applicationHasLicense && !licenseOnLogin\">\r\n                Back to Dashboard\r\n            </button>\r\n            <button class=\"btn access-denied-btn\" (click)=\"redirectToLicensing()\" *ngIf=\"!applicationHasLicense\">\r\n                Back to Licensing\r\n            </button>\r\n            <button class=\"btn access-denied-btn\" (click)=\"redirectToLogIn()\" *ngIf=\"licenseOnLogin\">\r\n                Back to Log in\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AccessDeniedComponent } from './access-denied.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: AccessDeniedComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccessDeniedRoutingModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, } from '@angular/router';\r\nimport { PreviousRouteService } from '../shared/services/previous-route.service';\r\nimport { UserRoleService } from '../shared/services/user-role.service';\r\nimport { AuthService } from '../shared/services/login.service';\r\n\r\n@Component({\r\n  selector: 'app-access-denied',\r\n  templateUrl: './access-denied.component.html',\r\n  styleUrls: ['./access-denied.component.scss']\r\n})\r\nexport class AccessDeniedComponent implements OnInit {\r\n\r\n  /**A message that will be displayed depending on which page the user was redirected from */\r\n  message: string;\r\n  applicationHasLicense = true;\r\n  licenseOnLogin: boolean = false;\r\n\r\n  /**\r\n   * Create a instance of AccessDeniedComponent.\r\n   */\r\n  constructor(\r\n    private _router: Router,\r\n    private _prevURL: PreviousRouteService,\r\n    private _userRoleService: UserRoleService,\r\n    private _authService : AuthService\r\n  ) {\r\n    const navigation = this._router.getCurrentNavigation();\r\n    if(navigation.extras.state) {\r\n      if(navigation.extras.state.source == 'license') {\r\n        this.licenseOnLogin = true;\r\n      } else {\r\n        this.licenseOnLogin = false;\r\n      }\r\n    }\r\n   }\r\n\r\n  /** Checks if the usser is logged in.\r\n   * If it is not logged in, it redirects it to the login page.\r\n   * If the user is logged in, it calls method generateMessageForUser and passes it the value of the previous url.\r\n   */\r\n  ngOnInit() {\r\n    try {\r\n      let accessPermissions = this._userRoleService.getGlobalAccountPermissions();\r\n      this.applicationHasLicense = accessPermissions.applicationHasLicense;\r\n    } catch (error) {\r\n      this.applicationHasLicense = true;\r\n    }\r\n    const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\r\n    if(!isLoggedIn && !this.licenseOnLogin){\r\n      this._authService.logout(true);\r\n    } \r\n    this.generateMessageForUser(this._prevURL.getPreviousUrl());\r\n\r\n  }\r\n\r\n  /**\r\n   * It redirects it to the dashobard page.\r\n   */\r\n  redirectToDashboard(){\r\n    this._router.navigateByUrl(\"/dashboard\");\r\n  }\r\n\r\n  redirectToLicensing(){\r\n    this._router.navigateByUrl(\"/system-preferences\");\r\n  }\r\n\r\n  redirectToLogIn(){\r\n    this._authService.logout(true);\r\n  }\r\n\r\n  /**\r\n   * Check the previous url for value.\r\n   * Clear prevous url from special characters.\r\n   * Set message to new value.\r\n   * @param prevUrl -> The previous url from which the user was redirected because there is no permission\r\n   */\r\n  generateMessageForUser(prevUrl){\r\n    let changedMessage;\r\n    if(prevUrl === \"\" || prevUrl === \"/\"){\r\n      prevUrl = \" current page\";\r\n    }\r\n\r\n    if(prevUrl.split(\"/\").length > 2){\r\n      let splitedPrevUrl = prevUrl.split(\"/\");\r\n      prevUrl = splitedPrevUrl[1] + \" \" + splitedPrevUrl[2];\r\n    }\r\n\r\n    changedMessage = prevUrl.replace(/-/g, ' ');\r\n    changedMessage = changedMessage.replace(/[/]/g, ' ');\r\n    this.message = changedMessage;\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AccessDeniedRoutingModule } from './access-denied-routing.module';\r\nimport { AccessDeniedComponent } from './access-denied.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AccessDeniedRoutingModule\r\n  ],\r\n  declarations: [AccessDeniedComponent]\r\n})\r\nexport class AccessDeniedModule { }\r\n"],"x_google_ignoreList":[]}